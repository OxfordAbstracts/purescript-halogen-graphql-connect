// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1ArEm":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "ec08c4cf48cb90d16b7156ebf0bcd1cf";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] âœ¨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          ðŸš¨ ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"5RfbR":[function(require,module,exports) {
require('../output/Main/index.js').main()

},{"../output/Main/index.js":"1gnZt"}],"1gnZt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var GraphQL_Client_Args = require("../GraphQL.Client.Args/index.js");
var GraphQL_Client_BaseClients_Apollo = require("../GraphQL.Client.BaseClients.Apollo/index.js");
var GraphQL_Client_QueryReturns = require("../GraphQL.Client.QueryReturns/index.js");
var GraphQL_Client_ToGqlString = require("../GraphQL.Client.ToGqlString/index.js");
var GraphQL_Client_Types = require("../GraphQL.Client.Types/index.js");
var Halogen_Aff_Util = require("../Halogen.Aff.Util/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_GraphQL_Error = require("../Halogen.GraphQL.Error/index.js");
var Halogen_GraphQL_Query = require("../Halogen.GraphQL.Query/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_VDom_Driver = require("../Halogen.VDom.Driver/index.js");
var Heterogeneous_Folding = require("../Heterogeneous.Folding/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var Network_RemoteData = require("../Network.RemoteData/index.js");
var Receive = (function () {
    function Receive(value0) {
        this.value0 = value0;
    };
    Receive.create = function (value0) {
        return new Receive(value0);
    };
    return Receive;
})();
var prop = Data_Symbol.SProxy.value;
var name = Data_Symbol.SProxy.value;
var myQueryConnect = function (dictMonadAff) {
    return function (dictGqlQuery) {
        return function (dictLacks) {
            return function (dictDecodeJson) {
                return Halogen_GraphQL_Query.queryConnect(dictMonadAff)(dictGqlQuery)()(GraphQL_Client_BaseClients_Apollo.queryClient)(GraphQL_Client_BaseClients_Apollo.clientWatchQuery)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson))(Control_Category.identity(Control_Category.categoryFn));
            };
        };
    };
};
var component = function (dictMonadAff) {
    return function (client) {
        var render = function (state) {
            return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.h2_([ Halogen_HTML_Core.text("Query result:") ]), Halogen_HTML_Elements.pre_([ Halogen_HTML_Core.text(Data_Show.show(Network_RemoteData.showRemoteData(Halogen_GraphQL_Error.showGqlFailure)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                return "widgets";
            }))(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                return "name";
            }))(Data_Show.showRecordFieldsNil)(Data_Show.showString)))))))(state.input.gql)) ]) ]);
        };
        var handleAction = function (v) {
            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                var $11 = {};
                for (var $12 in v1) {
                    if ({}.hasOwnProperty.call(v1, $12)) {
                        $11[$12] = v1[$12];
                    };
                };
                $11.input = v.value0;
                return $11;
            });
        };
        var gqlQuery = function (v) {
            return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())({
                widgets: new GraphQL_Client_Args.Args({
                    id: 1
                }, {
                    name: name
                })
            });
        };
        return myQueryConnect(dictMonadAff)(GraphQL_Client_Types.queriable(GraphQL_Client_QueryReturns.queryReturnsRecord(Heterogeneous_Mapping.hmapWithIndexRecord()(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function () {
            return "widgets";
        }))(GraphQL_Client_QueryReturns.propToSchemaType_(new Data_Symbol.IsSymbol(function () {
            return "widgets";
        }))()(GraphQL_Client_QueryReturns.queryReturnsParamsArgs(GraphQL_Client_QueryReturns.queryReturnsArray(GraphQL_Client_QueryReturns.queryReturnsRecord(Heterogeneous_Mapping.hmapWithIndexRecord()(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function () {
            return "name";
        }))(GraphQL_Client_QueryReturns.propToSchemaTypeProxyAlias(new Data_Symbol.IsSymbol(function () {
            return "name";
        }))(new Data_Symbol.IsSymbol(function () {
            return "name";
        }))()(GraphQL_Client_QueryReturns.queryReturnsAll))(Heterogeneous_Mapping.mapRecordWithIndexNil)()()))))(Heterogeneous_Mapping.hmapWithIndexRecord()(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(GraphQL_Client_Args.argPropToGql_(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))()()())(Heterogeneous_Mapping.mapRecordWithIndexNil)()()))()))(Heterogeneous_Mapping.mapRecordWithIndexNil)()())))(GraphQL_Client_ToGqlString.gqlQueryStringEmptyRecord(Heterogeneous_Folding.hfoldlRecordWithIndex()(Heterogeneous_Folding.foldlRecordCons(new Data_Symbol.IsSymbol(function () {
            return "widgets";
        }))()(GraphQL_Client_ToGqlString.propToGqlString(GraphQL_Client_ToGqlString.gqlQueryStringArgs(Heterogeneous_Folding.hfoldlRecordWithIndex()(Heterogeneous_Folding.foldlRecordCons(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))()(GraphQL_Client_ToGqlString.propToGqlArg(GraphQL_Client_ToGqlString.gqlArgStringInt)(new Data_Symbol.IsSymbol(function () {
            return "id";
        }))(GraphQL_Client_ToGqlString.isIgnoreArgOther))(Heterogeneous_Folding.foldlRecordNil)))(GraphQL_Client_ToGqlString.gqlQueryStringEmptyRecord(Heterogeneous_Folding.hfoldlRecordWithIndex()(Heterogeneous_Folding.foldlRecordCons(new Data_Symbol.IsSymbol(function () {
            return "name";
        }))()(GraphQL_Client_ToGqlString.propToGqlString(GraphQL_Client_ToGqlString.gqlQueryStringSymbol(new Data_Symbol.IsSymbol(function () {
            return "name";
        })))(new Data_Symbol.IsSymbol(function () {
            return "name";
        })))(Heterogeneous_Folding.foldlRecordNil)))))(new Data_Symbol.IsSymbol(function () {
            return "widgets";
        })))(Heterogeneous_Folding.foldlRecordNil)))))()(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonString)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
            return "name";
        }))()())()))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
            return "widgets";
        }))()())())("get_widgets")(gqlQuery)(client)(Halogen_Component.mkComponent({
            initialState: function (v) {
                return {
                    input: v
                };
            },
            render: render,
            "eval": Halogen_Component.mkEval({
                handleAction: handleAction,
                handleQuery: Halogen_Component.defaultEval.handleQuery,
                receive: function ($15) {
                    return Data_Maybe.Just.create(Receive.create($15));
                },
                initialize: Halogen_Component.defaultEval.initialize,
                finalize: Halogen_Component.defaultEval.finalize
            })
        }));
    };
};
var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (body) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(GraphQL_Client_BaseClients_Apollo.createClient({
        authToken: Data_Maybe.Nothing.value,
        headers: [  ],
        url: "http://localhost:4000/graphql"
    })))(function (client) {
        return Halogen_VDom_Driver.runUI(component(Effect_Aff_Class.monadAffAff)(client))({})(body);
    });
}));
module.exports = {
    main: main,
    component: component,
    myQueryConnect: myQueryConnect,
    Receive: Receive,
    prop: prop,
    name: name
};

},{"../Control.Bind/index.js":"1hm9k","../Control.Monad.State.Class/index.js":"7hc9n","../Data.Maybe/index.js":"1Cwwt","../Effect.Aff/index.js":"1PqJZ","../Halogen.Aff.Util/index.js":"5YDDx","../Halogen.Component/index.js":"5H60K","../Halogen.HTML.Core/index.js":"0RFMZ","../Halogen.HTML.Elements/index.js":"1Q9Es","../Halogen.Query.HalogenM/index.js":"5kldW","../Halogen.VDom.Driver/index.js":"5YCON","../Control.Applicative/index.js":"1ufUD","../Control.Category/index.js":"6QTyW","../Data.Argonaut.Decode.Class/index.js":"1oRcX","../Data.Symbol/index.js":"3AbLb","../Effect.Aff.Class/index.js":"5g637","../Effect.Class/index.js":"70nM9","../GraphQL.Client.Args/index.js":"3Z7dz","../GraphQL.Client.BaseClients.Apollo/index.js":"4J7Fa","../GraphQL.Client.QueryReturns/index.js":"5qehG","../GraphQL.Client.ToGqlString/index.js":"4g2tQ","../GraphQL.Client.Types/index.js":"MVda1","../Halogen.GraphQL.Query/index.js":"7kyWr","../Heterogeneous.Folding/index.js":"5OD3Q","../Heterogeneous.Mapping/index.js":"7kbdv","../Data.Show/index.js":"6nX0c","../Halogen.GraphQL.Error/index.js":"6rrmJ","../Network.RemoteData/index.js":"6FIOI"}],"1hm9k":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Discard = function (discard) {
    this.discard = discard;
};
var Bind = function (Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
var discard = function (dict) {
    return dict.discard;
};
var bindFn = new Bind(function () {
    return Control_Apply.applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function () {
    return Control_Apply.applyArray;
}, $foreign.arrayBind);
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return Data_Function.flip(bind(dictBind));
};
var composeKleisliFlipped = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};
var composeKleisli = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
};
var discardUnit = new Discard(function (dictBind) {
    return bind(dictBind);
});
var ifM = function (dictBind) {
    return function (cond) {
        return function (t) {
            return function (f) {
                return bind(dictBind)(cond)(function (cond$prime) {
                    if (cond$prime) {
                        return t;
                    };
                    return f;
                });
            };
        };
    };
};
var join = function (dictBind) {
    return function (m) {
        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Bind: Bind,
    bind: bind,
    bindFlipped: bindFlipped,
    Discard: Discard,
    discard: discard,
    join: join,
    composeKleisli: composeKleisli,
    composeKleisliFlipped: composeKleisliFlipped,
    ifM: ifM,
    bindFn: bindFn,
    bindArray: bindArray,
    discardUnit: discardUnit
};

},{"./foreign.js":"4u4ZF","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Function/index.js":"tHEWI"}],"4u4ZF":[function(require,module,exports) {
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

},{}],"TgfZ1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Apply = function (Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
var applyFn = new Apply(function () {
    return Data_Functor.functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayApply);
var apply = function (dict) {
    return dict.apply;
};
var applyFirst = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
    };
};
var applySecond = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    Apply: Apply,
    apply: apply,
    applyFirst: applyFirst,
    applySecond: applySecond,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    applyFn: applyFn,
    applyArray: applyArray
};

},{"./foreign.js":"J8RTa","../Control.Category/index.js":"6QTyW","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG"}],"J8RTa":[function(require,module,exports) {
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l*k);
    var n = 0;
    for (var i = 0; i < l; i++) {
      var f = fs[i];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

},{}],"6QTyW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Category = function (Semigroupoid0, identity) {
    this.Semigroupoid0 = Semigroupoid0;
    this.identity = identity;
};
var identity = function (dict) {
    return dict.identity;
};
var categoryFn = new Category(function () {
    return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
    return x;
});
module.exports = {
    Category: Category,
    identity: identity,
    categoryFn: categoryFn
};

},{"../Control.Semigroupoid/index.js":"5fTaI"}],"5fTaI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var compose = function (dict) {
    return dict.compose;
};
var composeFlipped = function (dictSemigroupoid) {
    return function (f) {
        return function (g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};
module.exports = {
    compose: compose,
    Semigroupoid: Semigroupoid,
    composeFlipped: composeFlipped,
    semigroupoidFn: semigroupoidFn
};

},{}],"tHEWI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var applyN = function (f) {
    var go = function ($copy_n) {
        return function ($copy_acc) {
            var $tco_var_n = $copy_n;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(n, acc) {
                if (n <= 0) {
                    $tco_done = true;
                    return acc;
                };
                if (Data_Boolean.otherwise) {
                    $tco_var_n = n - 1 | 0;
                    $copy_acc = f(acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.Function (line 94, column 3 - line 96, column 37): " + [ n.constructor.name, acc.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_n, $copy_acc);
            };
            return $tco_result;
        };
    };
    return go;
};
var applyFlipped = function (x) {
    return function (f) {
        return f(x);
    };
};
var apply = function (f) {
    return function (x) {
        return f(x);
    };
};
module.exports = {
    flip: flip,
    "const": $$const,
    apply: apply,
    applyFlipped: applyFlipped,
    applyN: applyN,
    on: on
};

},{"../Data.Boolean/index.js":"4zMHm"}],"4zMHm":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var otherwise = true;
module.exports = {
    otherwise: otherwise
};

},{}],"5ZkNG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Functor = function (map) {
    this.map = map;
};
var map = function (dict) {
    return dict.map;
};
var mapFlipped = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return map(dictFunctor)(f)(fa);
        };
    };
};
var $$void = function (dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};
var voidLeft = function (dictFunctor) {
    return function (f) {
        return function (x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
        };
    };
};
var voidRight = function (dictFunctor) {
    return function (x) {
        return map(dictFunctor)(Data_Function["const"](x));
    };
};
var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);
var flap = function (dictFunctor) {
    return function (ff) {
        return function (x) {
            return map(dictFunctor)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
module.exports = {
    Functor: Functor,
    map: map,
    mapFlipped: mapFlipped,
    "void": $$void,
    voidRight: voidRight,
    voidLeft: voidLeft,
    flap: flap,
    functorFn: functorFn,
    functorArray: functorArray
};

},{"./foreign.js":"7jWWs","../Control.Semigroupoid/index.js":"5fTaI","../Data.Function/index.js":"tHEWI","../Data.Unit/index.js":"64zbv"}],"7jWWs":[function(require,module,exports) {
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

},{}],"64zbv":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var showUnit = new Data_Show.Show(function (v) {
    return "unit";
});
module.exports = {
    showUnit: showUnit,
    unit: $foreign.unit
};

},{"./foreign.js":"2htdx","../Data.Show/index.js":"6nX0c"}],"2htdx":[function(require,module,exports) {
"use strict";

exports.unit = {};

},{}],"6nX0c":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ShowRecordFields = function (showRecordFields) {
    this.showRecordFields = showRecordFields;
};
var Show = function (show) {
    this.show = show;
};
var showString = new Show($foreign.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function (v) {
    return function (v1) {
        return [  ];
    };
});
var showRecordFields = function (dict) {
    return dict.showRecordFields;
};
var showRecord = function (dictRowToList) {
    return function (dictShowRecordFields) {
        return new Show(function (record) {
            var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
            if (v.length === 0) {
                return "{}";
            };
            return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
        });
    };
};
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    };
    if (!v) {
        return "false";
    };
    throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
var showRecordFieldsCons = function (dictIsSymbol) {
    return function (dictShowRecordFields) {
        return function (dictShow) {
            return new ShowRecordFields(function (v) {
                return function (record) {
                    var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var focus = Record_Unsafe.unsafeGet(key)(record);
                    return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                };
            });
        };
    };
};
module.exports = {
    Show: Show,
    show: show,
    ShowRecordFields: ShowRecordFields,
    showRecordFields: showRecordFields,
    showBoolean: showBoolean,
    showInt: showInt,
    showNumber: showNumber,
    showChar: showChar,
    showString: showString,
    showArray: showArray,
    showRecord: showRecord,
    showRecordFieldsNil: showRecordFieldsNil,
    showRecordFieldsCons: showRecordFieldsCons
};

},{"./foreign.js":"DxDwj","../Data.Symbol/index.js":"3AbLb","../Record.Unsafe/index.js":"5qyzS","../Type.Data.RowList/index.js":"4e8vB"}],"DxDwj":[function(require,module,exports) {
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
    function (c, i) {
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\x07": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

exports.cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

exports.join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};

},{}],"3AbLb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var SProxy = (function () {
    function SProxy() {

    };
    SProxy.value = new SProxy();
    return SProxy;
})();
var IsSymbol = function (reflectSymbol) {
    this.reflectSymbol = reflectSymbol;
};
var reifySymbol = function (s) {
    return function (f) {
        return $foreign.unsafeCoerce(function (dictIsSymbol) {
            return f(dictIsSymbol);
        })({
            reflectSymbol: function (v) {
                return s;
            }
        })(SProxy.value);
    };
};
var reflectSymbol = function (dict) {
    return dict.reflectSymbol;
};
module.exports = {
    IsSymbol: IsSymbol,
    reflectSymbol: reflectSymbol,
    reifySymbol: reifySymbol,
    SProxy: SProxy
};

},{"./foreign.js":"1atwO"}],"1atwO":[function(require,module,exports) {
"use strict";

// module Data.Symbol

exports.unsafeCoerce = function (arg) {
  return arg;
};


},{}],"5qyzS":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeHas: $foreign.unsafeHas,
    unsafeGet: $foreign.unsafeGet,
    unsafeSet: $foreign.unsafeSet,
    unsafeDelete: $foreign.unsafeDelete
};

},{"./foreign.js":"3yhZk"}],"3yhZk":[function(require,module,exports) {
"use strict";

exports.unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

exports.unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

exports.unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      copy[label] = value;
      return copy;
    };
  };
};

exports.unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};
    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
};

},{}],"4e8vB":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var RLProxy = (function () {
    function RLProxy() {

    };
    RLProxy.value = new RLProxy();
    return RLProxy;
})();
module.exports = {
    RLProxy: RLProxy
};

},{}],"7hc9n":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadState = function (Monad0, state) {
    this.Monad0 = Monad0;
    this.state = state;
};
var state = function (dict) {
    return dict.state;
};
var put = function (dictMonadState) {
    return function (s) {
        return state(dictMonadState)(function (v) {
            return new Data_Tuple.Tuple(Data_Unit.unit, s);
        });
    };
};
var modify_ = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
        });
    };
};
var modify = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            var s$prime = f(s);
            return new Data_Tuple.Tuple(s$prime, s$prime);
        });
    };
};
var gets = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(f(s), s);
        });
    };
};
var get = function (dictMonadState) {
    return state(dictMonadState)(function (s) {
        return new Data_Tuple.Tuple(s, s);
    });
};
module.exports = {
    state: state,
    MonadState: MonadState,
    get: get,
    gets: gets,
    put: put,
    modify: modify,
    modify_: modify_
};

},{"../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv"}],"43VFo":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function (dictSemiring) {
    return function (dictSemiring1) {
        return new Data_Semiring.Semiring(function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function (dictRing) {
    return function (dictRing1) {
        return new Data_Ring.Ring(function () {
            return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function (dictMonoid) {
    return function (dictMonoid1) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var lookup = function (dictFoldable) {
    return function (dictEq) {
        return function (a) {
            var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
            var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                if ($163) {
                    return new Data_Maybe.Just(v.value1);
                };
                return Data_Maybe.Nothing.value;
            });
            return function ($314) {
                return $312($313($314));
            };
        };
    };
};
var heytingAlgebraTuple = function (dictHeytingAlgebra) {
    return function (dictHeytingAlgebra1) {
        return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
        }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
    };
};
var functorTuple = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new Tuple(m.value0, f(m.value1));
    };
});
var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorTuple;
}, function (f) {
    return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    return function (dictLazy1) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                return fst(f(Data_Unit.unit));
            }), Control_Lazy.defer(dictLazy1)(function (v) {
                return snd(f(Data_Unit.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableTuple;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(Data_Unit.unit)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexTuple;
}, function () {
    return functorWithIndexTuple;
}, function () {
    return traversableTuple;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
        };
    };
});
var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableTuple;
}, function (dictSemigroup) {
    return function (v) {
        return v.value1;
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
});
var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Tuple;
}, function () {
    return traversableTuple;
}, function (dictApply) {
    return function (v) {
        return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordTuple = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var eq1Tuple = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
    });
};
var ord1Tuple = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Tuple(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
    });
};
var distributiveTuple = function (dictTypeEquals) {
    return new Data_Distributive.Distributive(function () {
        return functorTuple;
    }, function (dictFunctor) {
        return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
    }, function (dictFunctor) {
        var $315 = Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
        var $316 = Data_Functor.map(dictFunctor)(snd);
        return function ($317) {
            return $315($316($317));
        };
    });
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var commutativeRingTuple = function (dictCommutativeRing) {
    return function (dictCommutativeRing1) {
        return new Data_CommutativeRing.CommutativeRing(function () {
            return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
        });
    };
};
var boundedTuple = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    return function (dictBooleanAlgebra1) {
        return new Data_BooleanAlgebra.BooleanAlgebra(function () {
            return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (v) {
    return function (v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorTuple;
    }, function (v) {
        return function (v1) {
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function (dictSemigroup) {
    return new Control_Bind.Bind(function () {
        return applyTuple(dictSemigroup);
    }, function (v) {
        return function (f) {
            var v1 = f(v.value1);
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
        };
    });
};
var applicativeTuple = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyTuple(dictMonoid.Semigroup0());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function (dictMonoid) {
    return new Control_Monad.Monad(function () {
        return applicativeTuple(dictMonoid);
    }, function () {
        return bindTuple(dictMonoid.Semigroup0());
    });
};
module.exports = {
    Tuple: Tuple,
    fst: fst,
    snd: snd,
    curry: curry,
    uncurry: uncurry,
    swap: swap,
    lookup: lookup,
    showTuple: showTuple,
    eqTuple: eqTuple,
    eq1Tuple: eq1Tuple,
    ordTuple: ordTuple,
    ord1Tuple: ord1Tuple,
    boundedTuple: boundedTuple,
    semigroupoidTuple: semigroupoidTuple,
    semigroupTuple: semigroupTuple,
    monoidTuple: monoidTuple,
    semiringTuple: semiringTuple,
    ringTuple: ringTuple,
    commutativeRingTuple: commutativeRingTuple,
    heytingAlgebraTuple: heytingAlgebraTuple,
    booleanAlgebraTuple: booleanAlgebraTuple,
    functorTuple: functorTuple,
    functorWithIndexTuple: functorWithIndexTuple,
    invariantTuple: invariantTuple,
    bifunctorTuple: bifunctorTuple,
    applyTuple: applyTuple,
    biapplyTuple: biapplyTuple,
    applicativeTuple: applicativeTuple,
    biapplicativeTuple: biapplicativeTuple,
    bindTuple: bindTuple,
    monadTuple: monadTuple,
    extendTuple: extendTuple,
    comonadTuple: comonadTuple,
    lazyTuple: lazyTuple,
    foldableTuple: foldableTuple,
    foldable1Tuple: foldable1Tuple,
    foldableWithIndexTuple: foldableWithIndexTuple,
    bifoldableTuple: bifoldableTuple,
    traversableTuple: traversableTuple,
    traversable1Tuple: traversable1Tuple,
    traversableWithIndexTuple: traversableWithIndexTuple,
    bitraversableTuple: bitraversableTuple,
    distributiveTuple: distributiveTuple
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Biapplicative/index.js":"25QJy","../Control.Biapply/index.js":"18U0Y","../Control.Bind/index.js":"1hm9k","../Control.Comonad/index.js":"7w5wx","../Control.Extend/index.js":"7m0n7","../Control.Lazy/index.js":"79VGa","../Control.Monad/index.js":"4SDam","../Control.Semigroupoid/index.js":"5fTaI","../Data.Bifoldable/index.js":"4OFNy","../Data.Bifunctor/index.js":"4Uonh","../Data.Bitraversable/index.js":"5R51a","../Data.BooleanAlgebra/index.js":"ayR4z","../Data.Bounded/index.js":"4LlpW","../Data.CommutativeRing/index.js":"75WGG","../Data.Distributive/index.js":"57mKo","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Invariant/index.js":"1Revu","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Maybe/index.js":"1Cwwt","../Data.Maybe.First/index.js":"7nBAO","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Ring/index.js":"3ezk6","../Data.Semigroup/index.js":"3qtmP","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Unit/index.js":"64zbv","../Type.Equality/index.js":"1LiTJ"}],"1ufUD":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Applicative = function (Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
var pure = function (dict) {
    return dict.pure;
};
var unless = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            };
            if (v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var when = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return Control_Apply.applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});
var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
}, function (x) {
    return [ x ];
});
module.exports = {
    Applicative: Applicative,
    pure: pure,
    liftA1: liftA1,
    unless: unless,
    when: when,
    applicativeFn: applicativeFn,
    applicativeArray: applicativeArray
};

},{"../Control.Apply/index.js":"TgfZ1","../Data.Unit/index.js":"64zbv"}],"25QJy":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Biapplicative = function (Biapply0, bipure) {
    this.Biapply0 = Biapply0;
    this.bipure = bipure;
};
var bipure = function (dict) {
    return dict.bipure;
};
module.exports = {
    bipure: bipure,
    Biapplicative: Biapplicative
};

},{}],"18U0Y":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Function = require("../Data.Function/index.js");
var Biapply = function (Bifunctor0, biapply) {
    this.Bifunctor0 = Bifunctor0;
    this.biapply = biapply;
};
var biapply = function (dict) {
    return dict.biapply;
};
var biapplyFirst = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
        };
    };
};
var biapplySecond = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
        };
    };
};
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
module.exports = {
    biapply: biapply,
    Biapply: Biapply,
    biapplyFirst: biapplyFirst,
    biapplySecond: biapplySecond,
    bilift2: bilift2,
    bilift3: bilift3
};

},{"../Control.Category/index.js":"6QTyW","../Data.Bifunctor/index.js":"4Uonh","../Data.Function/index.js":"tHEWI"}],"4Uonh":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};
var bimap = function (dict) {
    return dict.bimap;
};
var lmap = function (dictBifunctor) {
    return function (f) {
        return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function (dictBifunctor) {
    return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
};
module.exports = {
    bimap: bimap,
    Bifunctor: Bifunctor,
    lmap: lmap,
    rmap: rmap
};

},{"../Control.Category/index.js":"6QTyW"}],"7w5wx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Comonad = function (Extend0, extract) {
    this.Extend0 = Extend0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad,
    extract: extract
};

},{}],"7m0n7":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Extend = function (Functor0, extend) {
    this.Functor0 = Functor0;
    this.extend = extend;
};
var extendFn = function (dictSemigroup) {
    return new Extend(function () {
        return Data_Functor.functorFn;
    }, function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extendArray = new Extend(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayExtend);
var extend = function (dict) {
    return dict.extend;
};
var extendFlipped = function (dictExtend) {
    return function (w) {
        return function (f) {
            return extend(dictExtend)(f)(w);
        };
    };
};
var duplicate = function (dictExtend) {
    return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
};
var composeCoKleisliFlipped = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f(extend(dictExtend)(g)(w));
            };
        };
    };
};
var composeCoKleisli = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g(extend(dictExtend)(f)(w));
            };
        };
    };
};
module.exports = {
    Extend: Extend,
    extend: extend,
    extendFlipped: extendFlipped,
    composeCoKleisli: composeCoKleisli,
    composeCoKleisliFlipped: composeCoKleisliFlipped,
    duplicate: duplicate,
    extendFn: extendFn,
    extendArray: extendArray
};

},{"./foreign.js":"7t0Eb","../Control.Category/index.js":"6QTyW","../Data.Functor/index.js":"5ZkNG","../Data.Semigroup/index.js":"3qtmP"}],"7t0Eb":[function(require,module,exports) {
"use strict";

exports.arrayExtend = function(f) {
  return function(xs) {
    return xs.map(function (_, i, xs) {
      return f(xs.slice(i));
    });
  };
};

},{}],"3qtmP":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemigroupRecord = function (appendRecord) {
    this.appendRecord = appendRecord;
};
var Semigroup = function (append) {
    this.append = append;
};
var semigroupVoid = new Semigroup(function (v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupRecordNil = new SemigroupRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var semigroupArray = new Semigroup($foreign.concatArray);
var appendRecord = function (dict) {
    return dict.appendRecord;
};
var semigroupRecord = function (dictRowToList) {
    return function (dictSemigroupRecord) {
        return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var append = function (dict) {
    return dict.append;
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var semigroupRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSemigroupRecord) {
            return function (dictSemigroup) {
                return new SemigroupRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
module.exports = {
    Semigroup: Semigroup,
    append: append,
    SemigroupRecord: SemigroupRecord,
    appendRecord: appendRecord,
    semigroupString: semigroupString,
    semigroupUnit: semigroupUnit,
    semigroupVoid: semigroupVoid,
    semigroupFn: semigroupFn,
    semigroupArray: semigroupArray,
    semigroupRecord: semigroupRecord,
    semigroupRecordNil: semigroupRecordNil,
    semigroupRecordCons: semigroupRecordCons
};

},{"./foreign.js":"3G9TM","../Data.Symbol/index.js":"3AbLb","../Data.Unit/index.js":"64zbv","../Data.Void/index.js":"6qLQE","../Record.Unsafe/index.js":"5qyzS","../Type.Data.RowList/index.js":"4e8vB"}],"3G9TM":[function(require,module,exports) {
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};

},{}],"6qLQE":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Void = function (x) {
    return x;
};
var absurd = function (a) {
    var spin = function ($copy_v) {
        var $tco_result;
        function $tco_loop(v) {
            $copy_v = v;
            return;
        };
        while (!false) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return spin(a);
};
var showVoid = new Data_Show.Show(absurd);
module.exports = {
    absurd: absurd,
    showVoid: showVoid
};

},{"../Data.Show/index.js":"6nX0c"}],"79VGa":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Unit = require("../Data.Unit/index.js");
var Lazy = function (defer) {
    this.defer = defer;
};
var lazyUnit = new Lazy(function (v) {
    return Data_Unit.unit;
});
var lazyFn = new Lazy(function (f) {
    return function (x) {
        return f(Data_Unit.unit)(x);
    };
});
var defer = function (dict) {
    return dict.defer;
};
var fix = function (dictLazy) {
    return function (f) {
        var go = defer(dictLazy)(function (v) {
            return f(go);
        });
        return go;
    };
};
module.exports = {
    defer: defer,
    Lazy: Lazy,
    fix: fix,
    lazyFn: lazyFn,
    lazyUnit: lazyUnit
};

},{"../Data.Unit/index.js":"64zbv"}],"4SDam":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Monad = function (Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
var whenM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
            });
        };
    };
};
var unlessM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
            });
        };
    };
};
var monadFn = new Monad(function () {
    return Control_Applicative.applicativeFn;
}, function () {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Bind.bindArray;
});
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
            });
        };
    };
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                });
            });
        };
    };
};
module.exports = {
    Monad: Monad,
    liftM1: liftM1,
    ap: ap,
    whenM: whenM,
    unlessM: unlessM,
    monadFn: monadFn,
    monadArray: monadArray
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k"}],"4OFNy":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
var bifoldr = function (dict) {
    return dict.bifoldr;
};
var bitraverse_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)((function () {
                    var $97 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function ($98) {
                        return $97(f($98));
                    };
                })())((function () {
                    var $99 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function ($100) {
                        return $99(g($100));
                    };
                })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
            };
        };
    };
};
var bifor_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bifoldl = function (dict) {
    return dict.bifoldl;
};
var bifoldableJoker = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                };
            };
        };
    });
};
var bifoldableClown = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                };
            };
        };
    });
};
var bifoldMapDefaultR = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)((function () {
                    var $101 = Data_Semigroup.append(dictMonoid.Semigroup0());
                    return function ($102) {
                        return $101(f($102));
                    };
                })())((function () {
                    var $103 = Data_Semigroup.append(dictMonoid.Semigroup0());
                    return function ($104) {
                        return $103(g($104));
                    };
                })())(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMapDefaultL = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldl(dictBifoldable)(function (m) {
                    return function (a) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                    };
                })(function (m) {
                    return function (b) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMap = function (dict) {
    return dict.bifoldMap;
};
var bifoldableFlip = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldableWrap = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldlDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                        var $105 = Data_Function.flip(f);
                        return function ($106) {
                            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($105($106)));
                        };
                    })())((function () {
                        var $107 = Data_Function.flip(g);
                        return function ($108) {
                            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($107($108)));
                        };
                    })())(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($109) {
                        return Data_Monoid_Endo.Endo(f($109));
                    })(function ($110) {
                        return Data_Monoid_Endo.Endo(g($110));
                    })(p))(z);
                };
            };
        };
    };
};
var bifoldableProduct = function (dictBifoldable) {
    return function (dictBifoldable1) {
        return new Bifoldable(function (dictMonoid) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        });
    };
};
var bifold = function (dictBifoldable) {
    return function (dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var biany = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                var $111 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
                var $112 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($114) {
                    return Data_Monoid_Disj.Disj(p($114));
                })(function ($115) {
                    return Data_Monoid_Disj.Disj(q($115));
                });
                return function ($113) {
                    return $111($112($113));
                };
            };
        };
    };
};
var biall = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                var $116 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
                var $117 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($119) {
                    return Data_Monoid_Conj.Conj(p($119));
                })(function ($120) {
                    return Data_Monoid_Conj.Conj(q($120));
                });
                return function ($118) {
                    return $116($117($118));
                };
            };
        };
    };
};
module.exports = {
    bifoldMap: bifoldMap,
    bifoldl: bifoldl,
    bifoldr: bifoldr,
    Bifoldable: Bifoldable,
    bifoldrDefault: bifoldrDefault,
    bifoldlDefault: bifoldlDefault,
    bifoldMapDefaultR: bifoldMapDefaultR,
    bifoldMapDefaultL: bifoldMapDefaultL,
    bifold: bifold,
    bitraverse_: bitraverse_,
    bifor_: bifor_,
    bisequence_: bisequence_,
    biany: biany,
    biall: biall,
    bifoldableClown: bifoldableClown,
    bifoldableJoker: bifoldableJoker,
    bifoldableFlip: bifoldableFlip,
    bifoldableProduct: bifoldableProduct,
    bifoldableWrap: bifoldableWrap
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Monoid/index.js":"2Wlmd","../Data.Monoid.Conj/index.js":"2cizJ","../Data.Monoid.Disj/index.js":"36707","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Endo/index.js":"5yQLY","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv"}],"6ATDN":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var indexr = function (dictFoldable) {
    return function (idx) {
        var go = function (a) {
            return function (cursor) {
                if (cursor.elem instanceof Data_Maybe.Just) {
                    return cursor;
                };
                var $106 = cursor.pos === idx;
                if ($106) {
                    return {
                        elem: new Data_Maybe.Just(a),
                        pos: cursor.pos
                    };
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        var $193 = foldr(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
        });
        return function ($194) {
            return (function (v) {
                return v.elem;
            })($193($194));
        };
    };
};
var $$null = function (dictFoldable) {
    return foldr(dictFoldable)(function (v) {
        return function (v1) {
            return false;
        };
    })(true);
};
var oneOf = function (dictFoldable) {
    return function (dictPlus) {
        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
    };
};
var oneOfMap = function (dictFoldable) {
    return function (dictPlus) {
        return function (f) {
            return foldr(dictFoldable)((function () {
                var $195 = Control_Alt.alt(dictPlus.Alt0());
                return function ($196) {
                    return $195(f($196));
                };
            })())(Control_Plus.empty(dictPlus));
        };
    };
};
var traverse_ = function (dictApplicative) {
    return function (dictFoldable) {
        return function (f) {
            return foldr(dictFoldable)((function () {
                var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                return function ($198) {
                    return $197(f($198));
                };
            })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var for_ = function (dictApplicative) {
    return function (dictFoldable) {
        return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function (dictApplicative) {
    return function (dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var indexl = function (dictFoldable) {
    return function (idx) {
        var go = function (cursor) {
            return function (a) {
                if (cursor.elem instanceof Data_Maybe.Just) {
                    return cursor;
                };
                var $109 = cursor.pos === idx;
                if ($109) {
                    return {
                        elem: new Data_Maybe.Just(a),
                        pos: cursor.pos
                    };
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        var $199 = foldl(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
        });
        return function ($200) {
            return (function (v) {
                return v.elem;
            })($199($200));
        };
    };
};
var intercalate = function (dictFoldable) {
    return function (dictMonoid) {
        return function (sep) {
            return function (xs) {
                var go = function (v) {
                    return function (x) {
                        if (v.init) {
                            return {
                                init: false,
                                acc: x
                            };
                        };
                        return {
                            init: false,
                            acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                        };
                    };
                };
                return (foldl(dictFoldable)(go)({
                    init: true,
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs)).acc;
            };
        };
    };
};
var length = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(function (c) {
            return function (v) {
                return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
            };
        })(Data_Semiring.zero(dictSemiring));
    };
};
var maximumBy = function (dictFoldable) {
    return function (cmp) {
        var max$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                        if ($116) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable) {
        return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var minimumBy = function (dictFoldable) {
    return function (cmp) {
        var min$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                        if ($120) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable) {
        return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var product = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
    };
};
var sum = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldr(dictFoldable)(function (x) {
                return function (acc) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldl(dictFoldable)(function (acc) {
                return function (x) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                    var $201 = Data_Function.flip(c);
                    return function ($202) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($201($202)));
                    };
                })())(xs)))(u);
            };
        };
    };
};
var foldrDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($203) {
                    return Data_Monoid_Endo.Endo(c($203));
                })(xs))(u);
            };
        };
    };
};
var surroundMap = function (dictFoldable) {
    return function (dictSemigroup) {
        return function (d) {
            return function (t) {
                return function (f) {
                    var joined = function (a) {
                        return function (m) {
                            return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var surround = function (dictFoldable) {
    return function (dictSemigroup) {
        return function (d) {
            return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var foldM = function (dictFoldable) {
    return function (dictMonad) {
        return function (f) {
            return function (a0) {
                return foldl(dictFoldable)(function (ma) {
                    return function (b) {
                        return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var fold = function (dictFoldable) {
    return function (dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var findMap = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return p(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var find = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing && p(v1)) {
                    return new Data_Maybe.Just(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var any = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
    };
};
var elem = function (dictFoldable) {
    return function (dictEq) {
        var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
        var $205 = Data_Eq.eq(dictEq);
        return function ($206) {
            return $204($205($206));
        };
    };
};
var notElem = function (dictFoldable) {
    return function (dictEq) {
        return function (x) {
            var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            var $208 = elem(dictFoldable)(dictEq)(x);
            return function ($209) {
                return $207($208($209));
            };
        };
    };
};
var or = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var all = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
    };
};
var and = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable,
    foldr: foldr,
    foldl: foldl,
    foldMap: foldMap,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefaultL: foldMapDefaultL,
    foldMapDefaultR: foldMapDefaultR,
    fold: fold,
    foldM: foldM,
    traverse_: traverse_,
    for_: for_,
    sequence_: sequence_,
    oneOf: oneOf,
    oneOfMap: oneOfMap,
    intercalate: intercalate,
    surroundMap: surroundMap,
    surround: surround,
    and: and,
    or: or,
    all: all,
    any: any,
    sum: sum,
    product: product,
    elem: elem,
    notElem: notElem,
    indexl: indexl,
    indexr: indexr,
    find: find,
    findMap: findMap,
    maximum: maximum,
    maximumBy: maximumBy,
    minimum: minimum,
    minimumBy: minimumBy,
    "null": $$null,
    length: length,
    foldableArray: foldableArray,
    foldableMaybe: foldableMaybe,
    foldableFirst: foldableFirst,
    foldableLast: foldableLast,
    foldableAdditive: foldableAdditive,
    foldableDual: foldableDual,
    foldableDisj: foldableDisj,
    foldableConj: foldableConj,
    foldableMultiplicative: foldableMultiplicative
};

},{"./foreign.js":"6LPRe","../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Plus/index.js":"2CmD1","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Monoid.Conj/index.js":"2cizJ","../Data.Monoid.Disj/index.js":"36707","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Endo/index.js":"5yQLY","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Unit/index.js":"64zbv"}],"6LPRe":[function(require,module,exports) {
"use strict";

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

},{}],"wxs4v":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Alt = function (Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));
var alt = function (dict) {
    return dict.alt;
};
module.exports = {
    Alt: Alt,
    alt: alt,
    altArray: altArray
};

},{"../Data.Functor/index.js":"5ZkNG","../Data.Semigroup/index.js":"3qtmP"}],"2CmD1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Plus = function (Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus,
    empty: empty,
    plusArray: plusArray
};

},{"../Control.Alt/index.js":"wxs4v"}],"2htS8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var EqRecord = function (eqRecord) {
    this.eqRecord = eqRecord;
};
var Eq1 = function (eq1) {
    this.eq1 = eq1;
};
var Eq = function (eq) {
    this.eq = eq;
};
var eqVoid = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqString = new Eq($foreign.eqStringImpl);
var eqRowNil = new EqRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return true;
        };
    };
});
var eqRecord = function (dict) {
    return dict.eqRecord;
};
var eqRec = function (dictRowToList) {
    return function (dictEqRecord) {
        return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var eqNumber = new Eq($foreign.eqNumberImpl);
var eqInt = new Eq($foreign.eqIntImpl);
var eqChar = new Eq($foreign.eqCharImpl);
var eqBoolean = new Eq($foreign.eqBooleanImpl);
var eq1 = function (dict) {
    return dict.eq1;
};
var eq = function (dict) {
    return dict.eq;
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};
var eq1Array = new Eq1(function (dictEq) {
    return eq(eqArray(dictEq));
});
var eqRowCons = function (dictEqRecord) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (dictEq) {
                return new EqRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var get = Record_Unsafe.unsafeGet(key);
                            return eq(dictEq)(get(ra))(get(rb)) && tail;
                        };
                    };
                });
            };
        };
    };
};
var notEq = function (dictEq) {
    return function (x) {
        return function (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
var notEq1 = function (dictEq1) {
    return function (dictEq) {
        return function (x) {
            return function (y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
};
module.exports = {
    Eq: Eq,
    eq: eq,
    notEq: notEq,
    Eq1: Eq1,
    eq1: eq1,
    notEq1: notEq1,
    EqRecord: EqRecord,
    eqRecord: eqRecord,
    eqBoolean: eqBoolean,
    eqInt: eqInt,
    eqNumber: eqNumber,
    eqChar: eqChar,
    eqString: eqString,
    eqUnit: eqUnit,
    eqVoid: eqVoid,
    eqArray: eqArray,
    eqRec: eqRec,
    eq1Array: eq1Array,
    eqRowNil: eqRowNil,
    eqRowCons: eqRowCons
};

},{"./foreign.js":"7wD2Z","../Data.Symbol/index.js":"3AbLb","../Record.Unsafe/index.js":"5qyzS","../Type.Data.RowList/index.js":"4e8vB"}],"7wD2Z":[function(require,module,exports) {
"use strict";

var refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs === ys) return true;
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

},{}],"3tNLi":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var HeytingAlgebraRecord = function (conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
    this.conjRecord = conjRecord;
    this.disjRecord = disjRecord;
    this.ffRecord = ffRecord;
    this.impliesRecord = impliesRecord;
    this.notRecord = notRecord;
    this.ttRecord = ttRecord;
};
var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
};
var ttRecord = function (dict) {
    return dict.ttRecord;
};
var tt = function (dict) {
    return dict.tt;
};
var notRecord = function (dict) {
    return dict.notRecord;
};
var not = function (dict) {
    return dict.not;
};
var impliesRecord = function (dict) {
    return dict.impliesRecord;
};
var implies = function (dict) {
    return dict.implies;
};
var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return Data_Unit.unit;
}, Data_Unit.unit);
var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return {};
    };
});
var ffRecord = function (dict) {
    return dict.ffRecord;
};
var ff = function (dict) {
    return dict.ff;
};
var disjRecord = function (dict) {
    return dict.disjRecord;
};
var disj = function (dict) {
    return dict.disj;
};
var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
    return function (b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);
var conjRecord = function (dict) {
    return dict.conjRecord;
};
var heytingAlgebraRecord = function (dictRowToList) {
    return function (dictHeytingAlgebraRecord) {
        return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var conj = function (dict) {
    return dict.conj;
};
var heytingAlgebraFunction = function (dictHeytingAlgebra) {
    return new HeytingAlgebra(function (f) {
        return function (g) {
            return function (a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (g) {
            return function (a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (v) {
        return ff(dictHeytingAlgebra);
    }, function (f) {
        return function (g) {
            return function (a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, function (v) {
        return tt(dictHeytingAlgebra);
    });
};
var heytingAlgebraRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictHeytingAlgebraRecord) {
            return function (dictHeytingAlgebra) {
                return new HeytingAlgebraRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (row) {
                        var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(ff(dictHeytingAlgebra))(tail);
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (row) {
                        var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        var get = Record_Unsafe.unsafeGet(key);
                        return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                    };
                }, function (v) {
                    return function (row) {
                        var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(tt(dictHeytingAlgebra))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    HeytingAlgebra: HeytingAlgebra,
    tt: tt,
    ff: ff,
    implies: implies,
    conj: conj,
    disj: disj,
    not: not,
    HeytingAlgebraRecord: HeytingAlgebraRecord,
    ffRecord: ffRecord,
    ttRecord: ttRecord,
    impliesRecord: impliesRecord,
    conjRecord: conjRecord,
    disjRecord: disjRecord,
    notRecord: notRecord,
    heytingAlgebraBoolean: heytingAlgebraBoolean,
    heytingAlgebraUnit: heytingAlgebraUnit,
    heytingAlgebraFunction: heytingAlgebraFunction,
    heytingAlgebraRecord: heytingAlgebraRecord,
    heytingAlgebraRecordNil: heytingAlgebraRecordNil,
    heytingAlgebraRecordCons: heytingAlgebraRecordCons
};

},{"./foreign.js":"1UJpu","../Data.Symbol/index.js":"3AbLb","../Data.Unit/index.js":"64zbv","../Record.Unsafe/index.js":"5qyzS","../Type.Data.Row/index.js":"1OuJU","../Type.Data.RowList/index.js":"4e8vB"}],"1UJpu":[function(require,module,exports) {
"use strict";

exports.boolConj = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolDisj = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};

},{}],"1OuJU":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var RProxy = (function () {
    function RProxy() {

    };
    RProxy.value = new RProxy();
    return RProxy;
})();
module.exports = {
    RProxy: RProxy
};

},{}],"1Cwwt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Just) {
            return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [ v.constructor.name ]);
    });
};
var semigroupMaybe = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            if (v instanceof Nothing) {
                return v1;
            };
            if (v1 instanceof Nothing) {
                return v;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var optional = function (dictAlternative) {
    return function (a) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
    };
};
var monoidMaybe = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v(Data_Unit.unit);
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        };
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function (a) {
    return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromMaybe = function (a) {
    return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromJust = function (dictPartial) {
    return function (v) {
        if (v instanceof Just) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
    };
};
var extendMaybe = new Control_Extend.Extend(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(v(v1));
    };
});
var eqMaybe = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return true;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMaybe(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Nothing) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Nothing) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function () {
    return eq1Maybe;
}, function (dictOrd) {
    return Data_Ord.compare(ordMaybe(dictOrd));
});
var boundedMaybe = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordMaybe(dictBounded.Ord0());
    }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};
var applyMaybe = new Control_Apply.Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return Data_Functor.map(functorMaybe)(v.value0)(v1);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindMaybe = new Control_Bind.Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeMaybe = new Control_Applicative.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Nothing) {
            return v1;
        };
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return applicativeMaybe;
}, function () {
    return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing,
    Just: Just,
    maybe: maybe,
    "maybe'": maybe$prime,
    fromMaybe: fromMaybe,
    "fromMaybe'": fromMaybe$prime,
    isJust: isJust,
    isNothing: isNothing,
    fromJust: fromJust,
    optional: optional,
    functorMaybe: functorMaybe,
    applyMaybe: applyMaybe,
    applicativeMaybe: applicativeMaybe,
    altMaybe: altMaybe,
    plusMaybe: plusMaybe,
    alternativeMaybe: alternativeMaybe,
    bindMaybe: bindMaybe,
    monadMaybe: monadMaybe,
    monadZeroMaybe: monadZeroMaybe,
    extendMaybe: extendMaybe,
    invariantMaybe: invariantMaybe,
    semigroupMaybe: semigroupMaybe,
    monoidMaybe: monoidMaybe,
    eqMaybe: eqMaybe,
    eq1Maybe: eq1Maybe,
    ordMaybe: ordMaybe,
    ord1Maybe: ord1Maybe,
    boundedMaybe: boundedMaybe,
    showMaybe: showMaybe
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Extend/index.js":"7m0n7","../Control.Monad/index.js":"4SDam","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Bounded/index.js":"4LlpW","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Invariant/index.js":"1Revu","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Unit/index.js":"64zbv"}],"1KL8w":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Alternative = function (Applicative0, Plus1) {
    this.Applicative0 = Applicative0;
    this.Plus1 = Plus1;
};
var alternativeArray = new Alternative(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Plus.plusArray;
});
module.exports = {
    Alternative: Alternative,
    alternativeArray: alternativeArray
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Plus/index.js":"2CmD1"}],"5ZMCc":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadZero = function (Alternative1, Monad0) {
    this.Alternative1 = Alternative1;
    this.Monad0 = Monad0;
};
var monadZeroArray = new MonadZero(function () {
    return Control_Alternative.alternativeArray;
}, function () {
    return Control_Monad.monadArray;
});
var guard = function (dictMonadZero) {
    return function (v) {
        if (v) {
            return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
        };
        if (!v) {
            return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
        };
        throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [ v.constructor.name ]);
    };
};
module.exports = {
    MonadZero: MonadZero,
    guard: guard,
    monadZeroArray: monadZeroArray
};

},{"../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Monad/index.js":"4SDam","../Control.Plus/index.js":"2CmD1","../Data.Unit/index.js":"64zbv"}],"4LlpW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bounded = function (Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
};
var top = function (dict) {
    return dict.top;
};
var boundedUnit = new Bounded(function () {
    return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
    return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedNumber = new Bounded(function () {
    return Data_Ord.ordNumber;
}, $foreign.bottomNumber, $foreign.topNumber);
var boundedInt = new Bounded(function () {
    return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function () {
    return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
    return Data_Ord.ordBoolean;
}, false, true);
var bottom = function (dict) {
    return dict.bottom;
};
module.exports = {
    Bounded: Bounded,
    bottom: bottom,
    top: top,
    boundedBoolean: boundedBoolean,
    boundedInt: boundedInt,
    boundedChar: boundedChar,
    boundedOrdering: boundedOrdering,
    boundedUnit: boundedUnit,
    boundedNumber: boundedNumber
};

},{"./foreign.js":"JUjAF","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Unit/index.js":"64zbv"}],"JUjAF":[function(require,module,exports) {
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;

exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);

exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;

},{}],"4OchK":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var OrdRecord = function (EqRecord0, compareRecord) {
    this.EqRecord0 = EqRecord0;
    this.compareRecord = compareRecord;
};
var Ord1 = function (Eq10, compare1) {
    this.Eq10 = Eq10;
    this.compare1 = compare1;
};
var Ord = function (Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
};
var ordVoid = new Ord(function () {
    return Data_Eq.eqVoid;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordUnit = new Ord(function () {
    return Data_Eq.eqUnit;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordString = new Ord(function () {
    return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordRecordNil = new OrdRecord(function () {
    return Data_Eq.eqRowNil;
}, function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Ordering.EQ.value;
        };
    };
});
var ordOrdering = new Ord(function () {
    return Data_Ordering.eqOrdering;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.GT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        throw new Error("Failed pattern match at Data.Ord (line 112, column 1 - line 119, column 21): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordNumber = new Ord(function () {
    return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordInt = new Ord(function () {
    return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordChar = new Ord(function () {
    return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordBoolean = new Ord(function () {
    return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var compareRecord = function (dict) {
    return dict.compareRecord;
};
var ordRecord = function (dictRowToList) {
    return function (dictOrdRecord) {
        return new Ord(function () {
            return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
        }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var compare1 = function (dict) {
    return dict.compare1;
};
var compare = function (dict) {
    return dict.compare;
};
var comparing = function (dictOrd) {
    return function (f) {
        return function (x) {
            return function (y) {
                return compare(dictOrd)(f(x))(f(y));
            };
        };
    };
};
var greaterThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return true;
            };
            return false;
        };
    };
};
var greaterThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return false;
            };
            return true;
        };
    };
};
var signum = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($43) {
                return Data_Semiring.one(dictRing.Semiring0());
            };
            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
        };
    };
};
var lessThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return true;
            };
            return false;
        };
    };
};
var lessThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return false;
            };
            return true;
        };
    };
};
var max = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return y;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return x;
            };
            throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
        };
    };
};
var min = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return x;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return y;
            };
            throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
        };
    };
};
var ordArray = function (dictOrd) {
    return new Ord(function () {
        return Data_Eq.eqArray(dictOrd.Eq0());
    }, (function () {
        var toDelta = function (x) {
            return function (y) {
                var v = compare(dictOrd)(x)(y);
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.GT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 68, column 17): " + [ v.constructor.name ]);
            };
        };
        return function (xs) {
            return function (ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
        };
    })());
};
var ord1Array = new Ord1(function () {
    return Data_Eq.eq1Array;
}, function (dictOrd) {
    return compare(ordArray(dictOrd));
});
var ordRecordCons = function (dictOrdRecord) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (dictOrd) {
                return new OrdRecord(function () {
                    return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                            var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                            if ($49) {
                                return left;
                            };
                            return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                        };
                    };
                });
            };
        };
    };
};
var clamp = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
        };
    };
};
var between = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                if (lessThan(dictOrd)(x)(low)) {
                    return false;
                };
                if (greaterThan(dictOrd)(x)(hi)) {
                    return false;
                };
                return true;
            };
        };
    };
};
var abs = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($53) {
                return x;
            };
            return Data_Ring.negate(dictRing)(x);
        };
    };
};
module.exports = {
    Ord: Ord,
    compare: compare,
    Ord1: Ord1,
    compare1: compare1,
    lessThan: lessThan,
    lessThanOrEq: lessThanOrEq,
    greaterThan: greaterThan,
    greaterThanOrEq: greaterThanOrEq,
    comparing: comparing,
    min: min,
    max: max,
    clamp: clamp,
    between: between,
    abs: abs,
    signum: signum,
    OrdRecord: OrdRecord,
    compareRecord: compareRecord,
    ordBoolean: ordBoolean,
    ordInt: ordInt,
    ordNumber: ordNumber,
    ordString: ordString,
    ordChar: ordChar,
    ordUnit: ordUnit,
    ordVoid: ordVoid,
    ordArray: ordArray,
    ordOrdering: ordOrdering,
    ord1Array: ord1Array,
    ordRecordNil: ordRecordNil,
    ordRecordCons: ordRecordCons,
    ordRecord: ordRecord
};

},{"./foreign.js":"z1ZOp","../Data.Eq/index.js":"2htS8","../Data.Ordering/index.js":"5YcVa","../Data.Ring/index.js":"3ezk6","../Data.Semiring/index.js":"42GiG","../Data.Symbol/index.js":"3AbLb","../Record.Unsafe/index.js":"5qyzS","../Type.Data.RowList/index.js":"4e8vB"}],"z1ZOp":[function(require,module,exports) {
"use strict";

var unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

},{}],"5YcVa":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var showOrdering = new Data_Show.Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    };
    if (v instanceof GT) {
        return "GT";
    };
    if (v instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [ v.constructor.name ]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        if (v instanceof EQ) {
            return v1;
        };
        throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invert = function (v) {
    if (v instanceof GT) {
        return LT.value;
    };
    if (v instanceof EQ) {
        return EQ.value;
    };
    if (v instanceof LT) {
        return GT.value;
    };
    throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [ v.constructor.name ]);
};
var eqOrdering = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        };
        return false;
    };
});
module.exports = {
    LT: LT,
    GT: GT,
    EQ: EQ,
    invert: invert,
    eqOrdering: eqOrdering,
    semigroupOrdering: semigroupOrdering,
    showOrdering: showOrdering
};

},{"../Data.Eq/index.js":"2htS8","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"3ezk6":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var RingRecord = function (SemiringRecord0, subRecord) {
    this.SemiringRecord0 = SemiringRecord0;
    this.subRecord = subRecord;
};
var Ring = function (Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
};
var subRecord = function (dict) {
    return dict.subRecord;
};
var sub = function (dict) {
    return dict.sub;
};
var ringUnit = new Ring(function () {
    return Data_Semiring.semiringUnit;
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var ringRecordNil = new RingRecord(function () {
    return Data_Semiring.semiringRecordNil;
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var ringRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictRingRecord) {
            return function (dictRing) {
                return new RingRecord(function () {
                    return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
var ringRecord = function (dictRowToList) {
    return function (dictRingRecord) {
        return new Ring(function () {
            return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
        }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var ringNumber = new Ring(function () {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);
var ringFn = function (dictRing) {
    return new Ring(function () {
        return Data_Semiring.semiringFn(dictRing.Semiring0());
    }, function (f) {
        return function (g) {
            return function (x) {
                return sub(dictRing)(f(x))(g(x));
            };
        };
    });
};
var negate = function (dictRing) {
    return function (a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
    };
};
module.exports = {
    Ring: Ring,
    sub: sub,
    negate: negate,
    RingRecord: RingRecord,
    subRecord: subRecord,
    ringInt: ringInt,
    ringNumber: ringNumber,
    ringUnit: ringUnit,
    ringFn: ringFn,
    ringRecord: ringRecord,
    ringRecordNil: ringRecordNil,
    ringRecordCons: ringRecordCons
};

},{"./foreign.js":"44QSD","../Data.Semiring/index.js":"42GiG","../Data.Symbol/index.js":"3AbLb","../Data.Unit/index.js":"64zbv","../Record.Unsafe/index.js":"5qyzS","../Type.Data.RowList/index.js":"4e8vB"}],"44QSD":[function(require,module,exports) {
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

},{}],"42GiG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
    this.addRecord = addRecord;
    this.mulRecord = mulRecord;
    this.oneRecord = oneRecord;
    this.zeroRecord = zeroRecord;
};
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var zeroRecord = function (dict) {
    return dict.zeroRecord;
};
var zero = function (dict) {
    return dict.zero;
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, Data_Unit.unit);
var semiringRecordNil = new SemiringRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return {};
    };
});
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var oneRecord = function (dict) {
    return dict.oneRecord;
};
var one = function (dict) {
    return dict.one;
};
var mulRecord = function (dict) {
    return dict.mulRecord;
};
var mul = function (dict) {
    return dict.mul;
};
var addRecord = function (dict) {
    return dict.addRecord;
};
var semiringRecord = function (dictRowToList) {
    return function (dictSemiringRecord) {
        return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var add = function (dict) {
    return dict.add;
};
var semiringFn = function (dictSemiring) {
    return new Semiring(function (f) {
        return function (g) {
            return function (x) {
                return add(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (f) {
        return function (g) {
            return function (x) {
                return mul(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (v) {
        return one(dictSemiring);
    }, function (v) {
        return zero(dictSemiring);
    });
};
var semiringRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSemiringRecord) {
            return function (dictSemiring) {
                return new SemiringRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (v1) {
                        var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(one(dictSemiring))(tail);
                    };
                }, function (v) {
                    return function (v1) {
                        var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(zero(dictSemiring))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    Semiring: Semiring,
    add: add,
    zero: zero,
    mul: mul,
    one: one,
    SemiringRecord: SemiringRecord,
    addRecord: addRecord,
    mulRecord: mulRecord,
    oneRecord: oneRecord,
    zeroRecord: zeroRecord,
    semiringInt: semiringInt,
    semiringNumber: semiringNumber,
    semiringFn: semiringFn,
    semiringUnit: semiringUnit,
    semiringRecord: semiringRecord,
    semiringRecordNil: semiringRecordNil,
    semiringRecordCons: semiringRecordCons
};

},{"./foreign.js":"2J90c","../Data.Symbol/index.js":"3AbLb","../Data.Unit/index.js":"64zbv","../Record.Unsafe/index.js":"5qyzS","../Type.Data.Row/index.js":"1OuJU","../Type.Data.RowList/index.js":"4e8vB"}],"2J90c":[function(require,module,exports) {
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

},{}],"1Revu":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Invariant = function (imap) {
    this.imap = imap;
};
var invariantMultiplicative = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantEndo = new Invariant(function (ab) {
    return function (ba) {
        return function (v) {
            return function ($31) {
                return ab(v(ba($31)));
            };
        };
    };
});
var invariantDual = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantDisj = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantConj = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantAdditive = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var imapF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(f);
        };
    };
};
var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    imap: imap,
    Invariant: Invariant,
    imapF: imapF,
    invariantFn: invariantFn,
    invariantArray: invariantArray,
    invariantAdditive: invariantAdditive,
    invariantConj: invariantConj,
    invariantDisj: invariantDisj,
    invariantDual: invariantDual,
    invariantEndo: invariantEndo,
    invariantMultiplicative: invariantMultiplicative
};

},{"../Data.Functor/index.js":"5ZkNG"}],"2Wlmd":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
    this.SemigroupRecord0 = SemigroupRecord0;
    this.memptyRecord = memptyRecord;
};
var Monoid = function (Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function () {
    return Data_Semigroup.semigroupString;
}, "");
var monoidRecordNil = new MonoidRecord(function () {
    return Data_Semigroup.semigroupRecordNil;
}, function (v) {
    return {};
});
var monoidOrdering = new Monoid(function () {
    return Data_Ordering.semigroupOrdering;
}, Data_Ordering.EQ.value);
var monoidArray = new Monoid(function () {
    return Data_Semigroup.semigroupArray;
}, [  ]);
var memptyRecord = function (dict) {
    return dict.memptyRecord;
};
var monoidRecord = function (dictRowToList) {
    return function (dictMonoidRecord) {
        return new Monoid(function () {
            return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
        }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
    }, function (v) {
        return mempty(dictMonoid);
    });
};
var monoidRecordCons = function (dictIsSymbol) {
    return function (dictMonoid) {
        return function (dictCons) {
            return function (dictMonoidRecord) {
                return new MonoidRecord(function () {
                    return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                }, function (v) {
                    var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(mempty(dictMonoid))(tail);
                });
            };
        };
    };
};
var power = function (dictMonoid) {
    return function (x) {
        var go = function (p) {
            if (p <= 0) {
                return mempty(dictMonoid);
            };
            if (p === 1) {
                return x;
            };
            if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
            };
            if (Data_Boolean.otherwise) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
            };
            throw new Error("Failed pattern match at Data.Monoid (line 65, column 3 - line 65, column 17): " + [ p.constructor.name ]);
        };
        return go;
    };
};
var guard = function (dictMonoid) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return mempty(dictMonoid);
            };
            throw new Error("Failed pattern match at Data.Monoid (line 73, column 1 - line 73, column 49): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
module.exports = {
    Monoid: Monoid,
    mempty: mempty,
    power: power,
    guard: guard,
    MonoidRecord: MonoidRecord,
    memptyRecord: memptyRecord,
    monoidUnit: monoidUnit,
    monoidOrdering: monoidOrdering,
    monoidFn: monoidFn,
    monoidString: monoidString,
    monoidArray: monoidArray,
    monoidRecord: monoidRecord,
    monoidRecordNil: monoidRecordNil,
    monoidRecordCons: monoidRecordCons
};

},{"../Data.Boolean/index.js":"4zMHm","../Data.EuclideanRing/index.js":"4eAMZ","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Symbol/index.js":"3AbLb","../Data.Unit/index.js":"64zbv","../Record.Unsafe/index.js":"5qyzS","../Type.Data.RowList/index.js":"4e8vB"}],"4eAMZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
var mod = function (dict) {
    return dict.mod;
};
var gcd = function ($copy_dictEq) {
    return function ($copy_dictEuclideanRing) {
        return function ($copy_a) {
            return function ($copy_b) {
                var $tco_var_dictEq = $copy_dictEq;
                var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                var $tco_var_a = $copy_a;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                    var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                    if ($7) {
                        $tco_done = true;
                        return a;
                    };
                    $tco_var_dictEq = dictEq;
                    $tco_var_dictEuclideanRing = dictEuclideanRing;
                    $tco_var_a = b;
                    $copy_b = mod(dictEuclideanRing)(a)(b);
                    return;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                };
                return $tco_result;
            };
        };
    };
};
var euclideanRingNumber = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
    return 1;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var euclideanRingInt = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
var div = function (dict) {
    return dict.div;
};
var lcm = function (dictEq) {
    return function (dictEuclideanRing) {
        return function (a) {
            return function (b) {
                var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                if ($8) {
                    return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                };
                return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
            };
        };
    };
};
var degree = function (dict) {
    return dict.degree;
};
module.exports = {
    EuclideanRing: EuclideanRing,
    degree: degree,
    div: div,
    mod: mod,
    gcd: gcd,
    lcm: lcm,
    euclideanRingInt: euclideanRingInt,
    euclideanRingNumber: euclideanRingNumber
};

},{"./foreign.js":"4lAV1","../Data.CommutativeRing/index.js":"75WGG","../Data.Eq/index.js":"2htS8","../Data.Semiring/index.js":"42GiG"}],"4lAV1":[function(require,module,exports) {
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
};

// See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.
exports.intDiv = function (x) {
  return function (y) {
    if (y === 0) return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};

exports.intMod = function (x) {
  return function (y) {
    if (y === 0) return 0;
    var yy = Math.abs(y);
    return ((x % yy) + yy) % yy;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

},{}],"75WGG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var CommutativeRingRecord = function (RingRecord0) {
    this.RingRecord0 = RingRecord0;
};
var CommutativeRing = function (Ring0) {
    this.Ring0 = Ring0;
};
var commutativeRingUnit = new CommutativeRing(function () {
    return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function () {
    return Data_Ring.ringRecordNil;
});
var commutativeRingRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCommutativeRingRecord) {
            return function (dictCommutativeRing) {
                return new CommutativeRingRecord(function () {
                    return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                });
            };
        };
    };
};
var commutativeRingRecord = function (dictRowToList) {
    return function (dictCommutativeRingRecord) {
        return new CommutativeRing(function () {
            return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
        });
    };
};
var commutativeRingNumber = new CommutativeRing(function () {
    return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
    return Data_Ring.ringInt;
});
var commutativeRingFn = function (dictCommutativeRing) {
    return new CommutativeRing(function () {
        return Data_Ring.ringFn(dictCommutativeRing.Ring0());
    });
};
module.exports = {
    CommutativeRing: CommutativeRing,
    CommutativeRingRecord: CommutativeRingRecord,
    commutativeRingInt: commutativeRingInt,
    commutativeRingNumber: commutativeRingNumber,
    commutativeRingUnit: commutativeRingUnit,
    commutativeRingFn: commutativeRingFn,
    commutativeRingRecord: commutativeRingRecord,
    commutativeRingRecordNil: commutativeRingRecordNil,
    commutativeRingRecordCons: commutativeRingRecordCons
};

},{"../Data.Ring/index.js":"3ezk6"}],"2cizJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Conj = function (x) {
    return x;
};
var showConj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var semigroupConj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordConj = function (dictOrd) {
    return dictOrd;
};
var monoidConj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var functorConj = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqConj = function (dictEq) {
    return dictEq;
};
var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqConj(dictEq));
});
var ord1Conj = new Data_Ord.Ord1(function () {
    return eq1Conj;
}, function (dictOrd) {
    return Data_Ord.compare(ordConj(dictOrd));
});
var boundedConj = function (dictBounded) {
    return dictBounded;
};
var applyConj = new Control_Apply.Apply(function () {
    return functorConj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindConj = new Control_Bind.Bind(function () {
    return applyConj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeConj = new Control_Applicative.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj,
    eqConj: eqConj,
    eq1Conj: eq1Conj,
    ordConj: ordConj,
    ord1Conj: ord1Conj,
    boundedConj: boundedConj,
    showConj: showConj,
    functorConj: functorConj,
    applyConj: applyConj,
    applicativeConj: applicativeConj,
    bindConj: bindConj,
    monadConj: monadConj,
    semigroupConj: semigroupConj,
    monoidConj: monoidConj,
    semiringConj: semiringConj
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c"}],"36707":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Disj = function (x) {
    return x;
};
var showDisj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var semigroupDisj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordDisj = function (dictOrd) {
    return dictOrd;
};
var monoidDisj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var functorDisj = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqDisj = function (dictEq) {
    return dictEq;
};
var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqDisj(dictEq));
});
var ord1Disj = new Data_Ord.Ord1(function () {
    return eq1Disj;
}, function (dictOrd) {
    return Data_Ord.compare(ordDisj(dictOrd));
});
var boundedDisj = function (dictBounded) {
    return dictBounded;
};
var applyDisj = new Control_Apply.Apply(function () {
    return functorDisj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDisj = new Control_Bind.Bind(function () {
    return applyDisj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDisj = new Control_Applicative.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj,
    eqDisj: eqDisj,
    eq1Disj: eq1Disj,
    ordDisj: ordDisj,
    ord1Disj: ord1Disj,
    boundedDisj: boundedDisj,
    showDisj: showDisj,
    functorDisj: functorDisj,
    applyDisj: applyDisj,
    applicativeDisj: applicativeDisj,
    bindDisj: bindDisj,
    monadDisj: monadDisj,
    semigroupDisj: semigroupDisj,
    monoidDisj: monoidDisj,
    semiringDisj: semiringDisj
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c"}],"7Gyqq":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Dual = function (x) {
    return x;
};
var showDual = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v1)(v);
        };
    });
};
var ordDual = function (dictOrd) {
    return dictOrd;
};
var monoidDual = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(dictMonoid.Semigroup0());
    }, Data_Monoid.mempty(dictMonoid));
};
var functorDual = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqDual = function (dictEq) {
    return dictEq;
};
var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqDual(dictEq));
});
var ord1Dual = new Data_Ord.Ord1(function () {
    return eq1Dual;
}, function (dictOrd) {
    return Data_Ord.compare(ordDual(dictOrd));
});
var boundedDual = function (dictBounded) {
    return dictBounded;
};
var applyDual = new Control_Apply.Apply(function () {
    return functorDual;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDual = new Control_Bind.Bind(function () {
    return applyDual;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDual = new Control_Applicative.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual,
    eqDual: eqDual,
    eq1Dual: eq1Dual,
    ordDual: ordDual,
    ord1Dual: ord1Dual,
    boundedDual: boundedDual,
    showDual: showDual,
    functorDual: functorDual,
    applyDual: applyDual,
    applicativeDual: applicativeDual,
    bindDual: bindDual,
    monadDual: monadDual,
    semigroupDual: semigroupDual,
    monoidDual: monoidDual
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"5yQLY":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Endo = function (x) {
    return x;
};
var showEndo = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupEndo = function (dictSemigroupoid) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
        };
    });
};
var ordEndo = function (dictOrd) {
    return dictOrd;
};
var monoidEndo = function (dictCategory) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEndo(dictCategory.Semigroupoid0());
    }, Control_Category.identity(dictCategory));
};
var eqEndo = function (dictEq) {
    return dictEq;
};
var boundedEndo = function (dictBounded) {
    return dictBounded;
};
module.exports = {
    Endo: Endo,
    eqEndo: eqEndo,
    ordEndo: ordEndo,
    boundedEndo: boundedEndo,
    showEndo: showEndo,
    semigroupEndo: semigroupEndo,
    monoidEndo: monoidEndo
};

},{"../Control.Category/index.js":"6QTyW","../Control.Semigroupoid/index.js":"5fTaI","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"2rjOq":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_First = require("../Data.Semigroup.First/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Newtype = function (unwrap, wrap) {
    this.unwrap = unwrap;
    this.wrap = wrap;
};
var wrap = function (dict) {
    return dict.wrap;
};
var unwrap = function (dict) {
    return dict.unwrap;
};
var underF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $66 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1)));
                        var $67 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)));
                        return function ($68) {
                            return $66($67($68));
                        };
                    };
                };
            };
        };
    };
};
var underF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $69 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                        var $70 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                        return function ($71) {
                            return $69(f($70($71)));
                        };
                    };
                };
            };
        };
    };
};
var under2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $72 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(unwrap(dictNewtype1));
                var $73 = Data_Function.on(f)(wrap(dictNewtype));
                return function ($74) {
                    return $72($73($74));
                };
            };
        };
    };
};
var under = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $75 = unwrap(dictNewtype1);
                var $76 = wrap(dictNewtype);
                return function ($77) {
                    return $75(f($76($77)));
                };
            };
        };
    };
};
var un = function (dictNewtype) {
    return function (v) {
        return unwrap(dictNewtype);
    };
};
var traverse = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                var $78 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                var $79 = unwrap(dictNewtype);
                return function ($80) {
                    return $78(f($79($80)));
                };
            };
        };
    };
};
var overF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $81 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(wrap(dictNewtype1)));
                        var $82 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)));
                        return function ($83) {
                            return $81($82($83));
                        };
                    };
                };
            };
        };
    };
};
var overF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $84 = Data_Functor.map(dictFunctor1)(wrap(dictNewtype1));
                        var $85 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
                        return function ($86) {
                            return $84(f($85($86)));
                        };
                    };
                };
            };
        };
    };
};
var over2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $87 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(wrap(dictNewtype1));
                var $88 = Data_Function.on(f)(unwrap(dictNewtype));
                return function ($89) {
                    return $87($88($89));
                };
            };
        };
    };
};
var over = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $90 = wrap(dictNewtype1);
                var $91 = unwrap(dictNewtype);
                return function ($92) {
                    return $90(f($91($92)));
                };
            };
        };
    };
};
var op = function (dictNewtype) {
    return un(dictNewtype);
};
var newtypeMultiplicative = new Newtype(function (v) {
    return v;
}, Data_Monoid_Multiplicative.Multiplicative);
var newtypeLast = new Newtype(function (v) {
    return v;
}, Data_Semigroup_Last.Last);
var newtypeFirst = new Newtype(function (v) {
    return v;
}, Data_Semigroup_First.First);
var newtypeEndo = new Newtype(function (v) {
    return v;
}, Data_Monoid_Endo.Endo);
var newtypeDual = new Newtype(function (v) {
    return v;
}, Data_Monoid_Dual.Dual);
var newtypeDisj = new Newtype(function (v) {
    return v;
}, Data_Monoid_Disj.Disj);
var newtypeConj = new Newtype(function (v) {
    return v;
}, Data_Monoid_Conj.Conj);
var newtypeAdditive = new Newtype(function (v) {
    return v;
}, Data_Monoid_Additive.Additive);
var collect = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                var $93 = wrap(dictNewtype);
                var $94 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
                return function ($95) {
                    return $93(f($94($95)));
                };
            };
        };
    };
};
var alaF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                        var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                        return function ($98) {
                            return $96(f($97($98)));
                        };
                    };
                };
            };
        };
    };
};
var ala = function (dictFunctor) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (v) {
                return function (f) {
                    return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                };
            };
        };
    };
};
module.exports = {
    unwrap: unwrap,
    wrap: wrap,
    Newtype: Newtype,
    un: un,
    op: op,
    ala: ala,
    alaF: alaF,
    over: over,
    overF: overF,
    under: under,
    underF: underF,
    over2: over2,
    overF2: overF2,
    under2: under2,
    underF2: underF2,
    traverse: traverse,
    collect: collect,
    newtypeAdditive: newtypeAdditive,
    newtypeMultiplicative: newtypeMultiplicative,
    newtypeConj: newtypeConj,
    newtypeDisj: newtypeDisj,
    newtypeDual: newtypeDual,
    newtypeEndo: newtypeEndo,
    newtypeFirst: newtypeFirst,
    newtypeLast: newtypeLast
};

},{"../Control.Semigroupoid/index.js":"5fTaI","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Monoid.Additive/index.js":"3Wc8S","../Data.Monoid.Conj/index.js":"2cizJ","../Data.Monoid.Disj/index.js":"36707","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Endo/index.js":"5yQLY","../Data.Monoid.Multiplicative/index.js":"6MI0d","../Data.Semigroup.First/index.js":"2Xlcr","../Data.Semigroup.Last/index.js":"1qZvU"}],"3Wc8S":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Additive = function (x) {
    return x;
};
var showAdditive = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.add(dictSemiring)(v)(v1);
        };
    });
};
var ordAdditive = function (dictOrd) {
    return dictOrd;
};
var monoidAdditive = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(dictSemiring);
    }, Data_Semiring.zero(dictSemiring));
};
var functorAdditive = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqAdditive = function (dictEq) {
    return dictEq;
};
var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqAdditive(dictEq));
});
var ord1Additive = new Data_Ord.Ord1(function () {
    return eq1Additive;
}, function (dictOrd) {
    return Data_Ord.compare(ordAdditive(dictOrd));
});
var boundedAdditive = function (dictBounded) {
    return dictBounded;
};
var applyAdditive = new Control_Apply.Apply(function () {
    return functorAdditive;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindAdditive = new Control_Bind.Bind(function () {
    return applyAdditive;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeAdditive = new Control_Applicative.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive,
    eqAdditive: eqAdditive,
    eq1Additive: eq1Additive,
    ordAdditive: ordAdditive,
    ord1Additive: ord1Additive,
    boundedAdditive: boundedAdditive,
    showAdditive: showAdditive,
    functorAdditive: functorAdditive,
    applyAdditive: applyAdditive,
    applicativeAdditive: applicativeAdditive,
    bindAdditive: bindAdditive,
    monadAdditive: monadAdditive,
    semigroupAdditive: semigroupAdditive,
    monoidAdditive: monoidAdditive
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c"}],"6MI0d":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.mul(dictSemiring)(v)(v1);
        };
    });
};
var ordMultiplicative = function (dictOrd) {
    return dictOrd;
};
var monoidMultiplicative = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(dictSemiring);
    }, Data_Semiring.one(dictSemiring));
};
var functorMultiplicative = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqMultiplicative = function (dictEq) {
    return dictEq;
};
var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMultiplicative(dictEq));
});
var ord1Multiplicative = new Data_Ord.Ord1(function () {
    return eq1Multiplicative;
}, function (dictOrd) {
    return Data_Ord.compare(ordMultiplicative(dictOrd));
});
var boundedMultiplicative = function (dictBounded) {
    return dictBounded;
};
var applyMultiplicative = new Control_Apply.Apply(function () {
    return functorMultiplicative;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Control_Bind.Bind(function () {
    return applyMultiplicative;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative,
    eqMultiplicative: eqMultiplicative,
    eq1Multiplicative: eq1Multiplicative,
    ordMultiplicative: ordMultiplicative,
    ord1Multiplicative: ord1Multiplicative,
    boundedMultiplicative: boundedMultiplicative,
    showMultiplicative: showMultiplicative,
    functorMultiplicative: functorMultiplicative,
    applyMultiplicative: applyMultiplicative,
    applicativeMultiplicative: applicativeMultiplicative,
    bindMultiplicative: bindMultiplicative,
    monadMultiplicative: monadMultiplicative,
    semigroupMultiplicative: semigroupMultiplicative,
    monoidMultiplicative: monoidMultiplicative
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c"}],"2Xlcr":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(First " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
    return function (v) {
        return x;
    };
});
var ordFirst = function (dictOrd) {
    return dictOrd;
};
var functorFirst = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqFirst = function (dictEq) {
    return dictEq;
};
var eq1First = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqFirst(dictEq));
});
var ord1First = new Data_Ord.Ord1(function () {
    return eq1First;
}, function (dictOrd) {
    return Data_Ord.compare(ordFirst(dictOrd));
});
var boundedFirst = function (dictBounded) {
    return dictBounded;
};
var applyFirst = new Control_Apply.Apply(function () {
    return functorFirst;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindFirst = new Control_Bind.Bind(function () {
    return applyFirst;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeFirst = new Control_Applicative.Applicative(function () {
    return applyFirst;
}, First);
var monadFirst = new Control_Monad.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    showFirst: showFirst,
    functorFirst: functorFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    semigroupFirst: semigroupFirst
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"1qZvU":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (x) {
        return x;
    };
});
var ordLast = function (dictOrd) {
    return dictOrd;
};
var functorLast = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqLast = function (dictEq) {
    return dictEq;
};
var eq1Last = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLast(dictEq));
});
var ord1Last = new Data_Ord.Ord1(function () {
    return eq1Last;
}, function (dictOrd) {
    return Data_Ord.compare(ordLast(dictOrd));
});
var boundedLast = function (dictBounded) {
    return dictBounded;
};
var applyLast = new Control_Apply.Apply(function () {
    return functorLast;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindLast = new Control_Bind.Bind(function () {
    return applyLast;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeLast = new Control_Applicative.Applicative(function () {
    return applyLast;
}, Last);
var monadLast = new Control_Monad.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    showLast: showLast,
    functorLast: functorLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    semigroupLast: semigroupLast
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"5R51a":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown/index.js");
var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip/index.js");
var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker/index.js");
var Data_Bifunctor_Product = require("../Data.Bifunctor.Product/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
    this.Bifoldable1 = Bifoldable1;
    this.Bifunctor0 = Bifunctor0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var lfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
            };
        };
    };
};
var ltraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
        };
    };
};
var rfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
            };
        };
    };
};
var rtraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
    };
};
var bitraversableJoker = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                };
            };
        };
    });
};
var bitraversableClown = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                };
            };
        };
    });
};
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bisequence = function (dict) {
    return dict.bisequence;
};
var bitraversableFlip = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraversableProduct = function (dictBitraversable) {
    return function (dictBitraversable1) {
        return new Bitraversable(function () {
            return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
        }, function () {
            return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
        }, function (dictApplicative) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
            };
        }, function (dictApplicative) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                    };
                };
            };
        });
    };
};
var bitraversableWrap = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable,
    bitraverse: bitraverse,
    bisequence: bisequence,
    bitraverseDefault: bitraverseDefault,
    bisequenceDefault: bisequenceDefault,
    ltraverse: ltraverse,
    rtraverse: rtraverse,
    bifor: bifor,
    lfor: lfor,
    rfor: rfor,
    bitraversableClown: bitraversableClown,
    bitraversableJoker: bitraversableJoker,
    bitraversableFlip: bitraversableFlip,
    bitraversableProduct: bitraversableProduct,
    bitraversableWrap: bitraversableWrap
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Bifoldable/index.js":"4OFNy","../Data.Bifunctor/index.js":"4Uonh","../Data.Bifunctor.Clown/index.js":"55hCZ","../Data.Bifunctor.Flip/index.js":"1kdxx","../Data.Bifunctor.Joker/index.js":"2IIEm","../Data.Bifunctor.Product/index.js":"6OpxW","../Data.Bifunctor.Wrap/index.js":"n3n1N","../Data.Functor/index.js":"5ZkNG","../Data.Traversable/index.js":"2NLLF"}],"55hCZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Clown = function (x) {
    return x;
};
var showClown = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordClown = function (dictOrd) {
    return dictOrd;
};
var newtypeClown = new Data_Newtype.Newtype(function (n) {
    return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function (v) {
    return function (v1) {
        return v1;
    };
});
var eqClown = function (dictEq) {
    return dictEq;
};
var bifunctorClown = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(f)(v1);
            };
        };
    });
};
var biapplyClown = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorClown(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeClown = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyClown(dictApplicative.Apply0());
    }, function (a) {
        return function (v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
module.exports = {
    Clown: Clown,
    newtypeClown: newtypeClown,
    eqClown: eqClown,
    ordClown: ordClown,
    showClown: showClown,
    functorClown: functorClown,
    bifunctorClown: bifunctorClown,
    biapplyClown: biapplyClown,
    biapplicativeClown: biapplicativeClown
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Biapplicative/index.js":"25QJy","../Control.Biapply/index.js":"18U0Y","../Data.Bifunctor/index.js":"4Uonh","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Show/index.js":"6nX0c"}],"1kdxx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Flip = function (x) {
    return x;
};
var showFlip = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordFlip = function (dictOrd) {
    return dictOrd;
};
var newtypeFlip = new Data_Newtype.Newtype(function (n) {
    return n;
}, Flip);
var functorFlip = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
        };
    });
};
var eqFlip = function (dictEq) {
    return dictEq;
};
var bifunctorFlip = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
            };
        };
    });
};
var biapplyFlip = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorFlip(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeFlip = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyFlip(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
        };
    });
};
module.exports = {
    Flip: Flip,
    newtypeFlip: newtypeFlip,
    eqFlip: eqFlip,
    ordFlip: ordFlip,
    showFlip: showFlip,
    functorFlip: functorFlip,
    bifunctorFlip: bifunctorFlip,
    biapplyFlip: biapplyFlip,
    biapplicativeFlip: biapplicativeFlip
};

},{"../Control.Biapplicative/index.js":"25QJy","../Control.Biapply/index.js":"18U0Y","../Data.Bifunctor/index.js":"4Uonh","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Show/index.js":"6nX0c"}],"2IIEm":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Joker = function (x) {
    return x;
};
var showJoker = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordJoker = function (dictOrd) {
    return dictOrd;
};
var newtypeJoker = new Data_Newtype.Newtype(function (n) {
    return n;
}, Joker);
var functorJoker = function (dictFunctor) {
    return new Data_Functor.Functor(function (g) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(g)(v);
        };
    });
};
var eqJoker = function (dictEq) {
    return dictEq;
};
var bifunctorJoker = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (v) {
        return function (g) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(g)(v1);
            };
        };
    });
};
var biapplyJoker = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorJoker(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeJoker = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyJoker(dictApplicative.Apply0());
    }, function (v) {
        return function (b) {
            return Control_Applicative.pure(dictApplicative)(b);
        };
    });
};
module.exports = {
    Joker: Joker,
    newtypeJoker: newtypeJoker,
    eqJoker: eqJoker,
    ordJoker: ordJoker,
    showJoker: showJoker,
    functorJoker: functorJoker,
    bifunctorJoker: bifunctorJoker,
    biapplyJoker: biapplyJoker,
    biapplicativeJoker: biapplicativeJoker
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Biapplicative/index.js":"25QJy","../Control.Biapply/index.js":"18U0Y","../Data.Bifunctor/index.js":"4Uonh","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Show/index.js":"6nX0c"}],"6OpxW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var showProduct = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var eqProduct = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordProduct = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var bifunctorProduct = function (dictBifunctor) {
    return function (dictBifunctor1) {
        return new Data_Bifunctor.Bifunctor(function (f) {
            return function (g) {
                return function (v) {
                    return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                };
            };
        });
    };
};
var biapplyProduct = function (dictBiapply) {
    return function (dictBiapply1) {
        return new Control_Biapply.Biapply(function () {
            return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
        }, function (v) {
            return function (v1) {
                return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
            };
        });
    };
};
var biapplicativeProduct = function (dictBiapplicative) {
    return function (dictBiapplicative1) {
        return new Control_Biapplicative.Biapplicative(function () {
            return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
        }, function (a) {
            return function (b) {
                return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
            };
        });
    };
};
module.exports = {
    Product: Product,
    eqProduct: eqProduct,
    ordProduct: ordProduct,
    showProduct: showProduct,
    bifunctorProduct: bifunctorProduct,
    biapplyProduct: biapplyProduct,
    biapplicativeProduct: biapplicativeProduct
};

},{"../Control.Biapplicative/index.js":"25QJy","../Control.Biapply/index.js":"18U0Y","../Data.Bifunctor/index.js":"4Uonh","../Data.Eq/index.js":"2htS8","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c"}],"n3n1N":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Wrap = function (x) {
    return x;
};
var showWrap = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordWrap = function (dictOrd) {
    return dictOrd;
};
var newtypeWrap = new Data_Newtype.Newtype(function (n) {
    return n;
}, Wrap);
var functorWrap = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
        };
    });
};
var eqWrap = function (dictEq) {
    return dictEq;
};
var bifunctorWrap = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
            };
        };
    });
};
var biapplyWrap = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorWrap(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeWrap = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyWrap(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
        };
    });
};
module.exports = {
    Wrap: Wrap,
    newtypeWrap: newtypeWrap,
    eqWrap: eqWrap,
    ordWrap: ordWrap,
    showWrap: showWrap,
    functorWrap: functorWrap,
    bifunctorWrap: bifunctorWrap,
    biapplyWrap: biapplyWrap,
    biapplicativeWrap: biapplicativeWrap
};

},{"../Control.Biapplicative/index.js":"25QJy","../Control.Biapply/index.js":"18U0Y","../Data.Bifunctor/index.js":"4Uonh","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Show/index.js":"6nX0c"}],"2NLLF":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Traversable = function (Foldable1, Functor0, sequence, traverse) {
    this.Foldable1 = Foldable1;
    this.Functor0 = Functor0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function () {
    return Data_Foldable.foldableDisj;
}, function () {
    return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function () {
    return Data_Foldable.foldableConj;
}, function () {
    return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var sequenceDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Functor.functorArray;
}, function (dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
    return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
});
var sequence = function (dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (ta) {
                return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
            };
        };
    };
};
var mapAccumR = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumR(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var mapAccumL = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumL(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var $$for = function (dictApplicative) {
    return function (dictTraversable) {
        return function (x) {
            return function (f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
module.exports = {
    Traversable: Traversable,
    traverse: traverse,
    sequence: sequence,
    traverseDefault: traverseDefault,
    sequenceDefault: sequenceDefault,
    "for": $$for,
    scanl: scanl,
    scanr: scanr,
    mapAccumL: mapAccumL,
    mapAccumR: mapAccumR,
    traversableArray: traversableArray,
    traversableMaybe: traversableMaybe,
    traversableFirst: traversableFirst,
    traversableLast: traversableLast,
    traversableAdditive: traversableAdditive,
    traversableDual: traversableDual,
    traversableConj: traversableConj,
    traversableDisj: traversableDisj,
    traversableMultiplicative: traversableMultiplicative
};

},{"./foreign.js":"44jID","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Foldable/index.js":"6ATDN","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Maybe.First/index.js":"7nBAO","../Data.Maybe.Last/index.js":"6wJ3s","../Data.Monoid.Additive/index.js":"3Wc8S","../Data.Monoid.Conj/index.js":"2cizJ","../Data.Monoid.Disj/index.js":"36707","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Multiplicative/index.js":"6MI0d","../Data.Traversable.Accum.Internal/index.js":"7Jb56"}],"44jID":[function(require,module,exports) {
"use strict";

// jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function array1(a) {
    return [a];
  }

  function array2(a) {
    return function (b) {
      return [a, b];
    };
  }

  function array3(a) {
    return function (b) {
      return function (c) {
        return [a, b, c];
      };
    };
  }

  function concat2(xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          return function (array) {
            function go(bot, top) {
              switch (top - bot) {
              case 0: return pure([]);
              case 1: return map(array1)(f(array[bot]));
              case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
              case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
              default:
                // This slightly tricky pivot selection aims to produce two
                // even-length partitions where possible.
                var pivot = bot + Math.floor((top - bot) / 4) * 2;
                return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
              }
            }
            return go(0, array.length);
          };
        };
      };
    };
  };
}();

},{}],"7nBAO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return v;
        };
        return v1;
    };
});
var ordFirst = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function (n) {
    return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;
var eqFirst = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1First = Data_Maybe.eq1Maybe;
var boundedFirst = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
var altFirst = new Control_Alt.Alt(function () {
    return functorFirst;
}, Data_Semigroup.append(semigroupFirst));
var plusFirst = new Control_Plus.Plus(function () {
    return altFirst;
}, Data_Monoid.mempty(monoidFirst));
var alternativeFirst = new Control_Alternative.Alternative(function () {
    return applicativeFirst;
}, function () {
    return plusFirst;
});
var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
    return alternativeFirst;
}, function () {
    return monadFirst;
});
module.exports = {
    First: First,
    newtypeFirst: newtypeFirst,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    functorFirst: functorFirst,
    invariantFirst: invariantFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    extendFirst: extendFirst,
    showFirst: showFirst,
    semigroupFirst: semigroupFirst,
    monoidFirst: monoidFirst,
    altFirst: altFirst,
    plusFirst: plusFirst,
    alternativeFirst: alternativeFirst,
    monadZeroFirst: monadZeroFirst
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"6wJ3s":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return v1;
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return v;
        };
        throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordLast = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function (n) {
    return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;
var eqLast = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1Last = Data_Maybe.eq1Maybe;
var boundedLast = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
var altLast = new Control_Alt.Alt(function () {
    return functorLast;
}, Data_Semigroup.append(semigroupLast));
var plusLast = new Control_Plus.Plus(function () {
    return altLast;
}, Data_Monoid.mempty(monoidLast));
var alternativeLast = new Control_Alternative.Alternative(function () {
    return applicativeLast;
}, function () {
    return plusLast;
});
var monadZeroLast = new Control_MonadZero.MonadZero(function () {
    return alternativeLast;
}, function () {
    return monadLast;
});
module.exports = {
    Last: Last,
    newtypeLast: newtypeLast,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    functorLast: functorLast,
    invariantLast: invariantLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    extendLast: extendLast,
    showLast: showLast,
    semigroupLast: semigroupLast,
    monoidLast: monoidLast,
    altLast: altLast,
    plusLast: plusLast,
    alternativeLast: alternativeLast,
    monadZeroLast: monadZeroLast
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"7Jb56":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var StateR = function (x) {
    return x;
};
var StateL = function (x) {
    return x;
};
var stateR = function (v) {
    return v;
};
var stateL = function (v) {
    return v;
};
var functorStateR = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateR(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var functorStateL = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateL(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var applyStateR = new Control_Apply.Apply(function () {
    return functorStateR;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateR(x)(s);
            var v1 = stateR(f)(v.accum);
            return {
                accum: v1.accum,
                value: v1.value(v.value)
            };
        };
    };
});
var applyStateL = new Control_Apply.Apply(function () {
    return functorStateL;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateL(f)(s);
            var v1 = stateL(x)(v.accum);
            return {
                accum: v1.accum,
                value: v.value(v1.value)
            };
        };
    };
});
var applicativeStateR = new Control_Applicative.Applicative(function () {
    return applyStateR;
}, function (a) {
    return function (s) {
        return {
            accum: s,
            value: a
        };
    };
});
var applicativeStateL = new Control_Applicative.Applicative(function () {
    return applyStateL;
}, function (a) {
    return function (s) {
        return {
            accum: s,
            value: a
        };
    };
});
module.exports = {
    StateL: StateL,
    stateL: stateL,
    StateR: StateR,
    stateR: stateR,
    functorStateL: functorStateL,
    applyStateL: applyStateL,
    applicativeStateL: applicativeStateL,
    functorStateR: functorStateR,
    applyStateR: applyStateR,
    applicativeStateR: applicativeStateR
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Data.Functor/index.js":"5ZkNG"}],"ayR4z":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var BooleanAlgebraRecord = function (HeytingAlgebraRecord0) {
    this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
};
var BooleanAlgebra = function (HeytingAlgebra0) {
    this.HeytingAlgebra0 = HeytingAlgebra0;
};
var booleanAlgebraUnit = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
    return Data_HeytingAlgebra.heytingAlgebraRecordNil;
});
var booleanAlgebraRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictBooleanAlgebraRecord) {
            return function (dictBooleanAlgebra) {
                return new BooleanAlgebraRecord(function () {
                    return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
                });
            };
        };
    };
};
var booleanAlgebraRecord = function (dictRowToList) {
    return function (dictBooleanAlgebraRecord) {
        return new BooleanAlgebra(function () {
            return Data_HeytingAlgebra.heytingAlgebraRecord()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
        });
    };
};
var booleanAlgebraFn = function (dictBooleanAlgebra) {
    return new BooleanAlgebra(function () {
        return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
    BooleanAlgebra: BooleanAlgebra,
    BooleanAlgebraRecord: BooleanAlgebraRecord,
    booleanAlgebraBoolean: booleanAlgebraBoolean,
    booleanAlgebraUnit: booleanAlgebraUnit,
    booleanAlgebraFn: booleanAlgebraFn,
    booleanAlgebraRecord: booleanAlgebraRecord,
    booleanAlgebraRecordNil: booleanAlgebraRecordNil,
    booleanAlgebraRecordCons: booleanAlgebraRecordCons
};

},{"../Data.HeytingAlgebra/index.js":"3tNLi"}],"57mKo":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Distributive = function (Functor0, collect, distribute) {
    this.Functor0 = Functor0;
    this.collect = collect;
    this.distribute = distribute;
};
var distributiveIdentity = new Distributive(function () {
    return Data_Identity.functorIdentity;
}, function (dictFunctor) {
    return function (f) {
        var $11 = Data_Functor.map(dictFunctor)((function () {
            var $13 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
            return function ($14) {
                return $13(f($14));
            };
        })());
        return function ($12) {
            return Data_Identity.Identity($11($12));
        };
    };
}, function (dictFunctor) {
    var $15 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity));
    return function ($16) {
        return Data_Identity.Identity($15($16));
    };
});
var distribute = function (dict) {
    return dict.distribute;
};
var distributiveFunction = new Distributive(function () {
    return Data_Functor.functorFn;
}, function (dictFunctor) {
    return function (f) {
        var $17 = distribute(distributiveFunction)(dictFunctor);
        var $18 = Data_Functor.map(dictFunctor)(f);
        return function ($19) {
            return $17($18($19));
        };
    };
}, function (dictFunctor) {
    return function (a) {
        return function (e) {
            return Data_Functor.map(dictFunctor)(function (v) {
                return v(e);
            })(a);
        };
    };
});
var cotraverse = function (dictDistributive) {
    return function (dictFunctor) {
        return function (f) {
            var $20 = Data_Functor.map(dictDistributive.Functor0())(f);
            var $21 = distribute(dictDistributive)(dictFunctor);
            return function ($22) {
                return $20($21($22));
            };
        };
    };
};
var collectDefault = function (dictDistributive) {
    return function (dictFunctor) {
        return function (f) {
            var $23 = distribute(dictDistributive)(dictFunctor);
            var $24 = Data_Functor.map(dictFunctor)(f);
            return function ($25) {
                return $23($24($25));
            };
        };
    };
};
var collect = function (dict) {
    return dict.collect;
};
var distributeDefault = function (dictDistributive) {
    return function (dictFunctor) {
        return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    collect: collect,
    distribute: distribute,
    Distributive: Distributive,
    distributeDefault: distributeDefault,
    collectDefault: collectDefault,
    cotraverse: cotraverse,
    distributiveIdentity: distributiveIdentity,
    distributiveFunction: distributiveFunction
};

},{"../Control.Category/index.js":"6QTyW","../Data.Functor/index.js":"5ZkNG","../Data.Identity/index.js":"29odg","../Data.Newtype/index.js":"2rjOq"}],"29odg":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Identity = function (x) {
    return x;
};
var showIdentity = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringIdentity = function (dictSemiring) {
    return dictSemiring;
};
var semigroupIdenity = function (dictSemigroup) {
    return dictSemigroup;
};
var ringIdentity = function (dictRing) {
    return dictRing;
};
var ordIdentity = function (dictOrd) {
    return dictOrd;
};
var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
    return n;
}, Identity);
var monoidIdentity = function (dictMonoid) {
    return dictMonoid;
};
var lazyIdentity = function (dictLazy) {
    return dictLazy;
};
var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorIdentity = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorIdentity;
}, function (f) {
    return function (v) {
        return f(Data_Unit.unit)(v);
    };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableIdentity;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(Data_Unit.unit)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(v)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
        };
    };
});
var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexIdentity;
}, function () {
    return functorWithIndexIdentity;
}, function () {
    return traversableIdentity;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(Data_Unit.unit)(v));
        };
    };
});
var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableIdentity;
}, function (dictSemigroup) {
    return function (v) {
        return v;
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Identity;
}, function () {
    return traversableIdentity;
}, function (dictApply) {
    return function (v) {
        return Data_Functor.map(dictApply.Functor0())(Identity)(v);
    };
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function () {
    return functorIdentity;
}, function (f) {
    return function (m) {
        return f(m);
    };
});
var euclideanRingIdentity = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqIdentity = function (dictEq) {
    return dictEq;
};
var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function () {
    return eq1Identity;
}, function (dictOrd) {
    return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (v) {
    return v;
});
var commutativeRingIdentity = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedIdentity = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var applyIdentity = new Control_Apply.Apply(function () {
    return functorIdentity;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindIdentity = new Control_Bind.Bind(function () {
    return applyIdentity;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeIdentity = new Control_Applicative.Applicative(function () {
    return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function () {
    return functorIdentity;
}, function (x) {
    return function (v) {
        return x;
    };
});
module.exports = {
    Identity: Identity,
    newtypeIdentity: newtypeIdentity,
    eqIdentity: eqIdentity,
    ordIdentity: ordIdentity,
    boundedIdentity: boundedIdentity,
    heytingAlgebraIdentity: heytingAlgebraIdentity,
    booleanAlgebraIdentity: booleanAlgebraIdentity,
    semigroupIdenity: semigroupIdenity,
    monoidIdentity: monoidIdentity,
    semiringIdentity: semiringIdentity,
    euclideanRingIdentity: euclideanRingIdentity,
    ringIdentity: ringIdentity,
    commutativeRingIdentity: commutativeRingIdentity,
    lazyIdentity: lazyIdentity,
    showIdentity: showIdentity,
    eq1Identity: eq1Identity,
    ord1Identity: ord1Identity,
    functorIdentity: functorIdentity,
    functorWithIndexIdentity: functorWithIndexIdentity,
    invariantIdentity: invariantIdentity,
    altIdentity: altIdentity,
    applyIdentity: applyIdentity,
    applicativeIdentity: applicativeIdentity,
    bindIdentity: bindIdentity,
    monadIdentity: monadIdentity,
    extendIdentity: extendIdentity,
    comonadIdentity: comonadIdentity,
    foldableIdentity: foldableIdentity,
    foldable1Identity: foldable1Identity,
    foldableWithIndexIdentity: foldableWithIndexIdentity,
    traversableIdentity: traversableIdentity,
    traversable1Identity: traversable1Identity,
    traversableWithIndexIdentity: traversableWithIndexIdentity
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Comonad/index.js":"7w5wx","../Control.Extend/index.js":"7m0n7","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Invariant/index.js":"1Revu","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Unit/index.js":"64zbv"}],"72SUz":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
    this.Foldable0 = Foldable0;
    this.foldMapWithIndex = foldMapWithIndex;
    this.foldlWithIndex = foldlWithIndex;
    this.foldrWithIndex = foldrWithIndex;
};
var foldrWithIndex = function (dict) {
    return dict.foldrWithIndex;
};
var traverseWithIndex_ = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return function (f) {
            return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                var $46 = Control_Apply.applySecond(dictApplicative.Apply0());
                var $47 = f(i);
                return function ($48) {
                    return $46($47($48));
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var forWithIndex_ = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
    };
};
var foldrDefault = function (dictFoldableWithIndex) {
    return function (f) {
        return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldlWithIndex = function (dict) {
    return dict.foldlWithIndex;
};
var foldlDefault = function (dictFoldableWithIndex) {
    return function (f) {
        return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
    return Data_Foldable.foldableMultiplicative;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
});
var foldableWithIndexMaybe = new FoldableWithIndex(function () {
    return Data_Foldable.foldableMaybe;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
});
var foldableWithIndexLast = new FoldableWithIndex(function () {
    return Data_Foldable.foldableLast;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
});
var foldableWithIndexFirst = new FoldableWithIndex(function () {
    return Data_Foldable.foldableFirst;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
});
var foldableWithIndexDual = new FoldableWithIndex(function () {
    return Data_Foldable.foldableDual;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
});
var foldableWithIndexDisj = new FoldableWithIndex(function () {
    return Data_Foldable.foldableDisj;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
});
var foldableWithIndexConj = new FoldableWithIndex(function () {
    return Data_Foldable.foldableConj;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
});
var foldableWithIndexAdditive = new FoldableWithIndex(function () {
    return Data_Foldable.foldableAdditive;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
});
var foldWithIndexM = function (dictFoldableWithIndex) {
    return function (dictMonad) {
        return function (f) {
            return function (a0) {
                return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                    return function (ma) {
                        return function (b) {
                            return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                        };
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                return function (x) {
                    return function (acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableWithIndexArray = new FoldableWithIndex(function () {
    return Data_Foldable.foldableArray;
}, function (dictMonoid) {
    return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
}, function (f) {
    return function (z) {
        var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
            return function (v) {
                return f(v.value0)(y)(v.value1);
            };
        })(z);
        var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
        return function ($51) {
            return $49($50($51));
        };
    };
}, function (f) {
    return function (z) {
        var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
            return function (y) {
                return f(v.value0)(v.value1)(y);
            };
        })(z);
        var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
        return function ($54) {
            return $52($53($54));
        };
    };
});
var foldMapWithIndexDefaultL = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                return function (acc) {
                    return function (x) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMapWithIndex = function (dict) {
    return dict.foldMapWithIndex;
};
var foldlWithIndexDefault = function (dictFoldableWithIndex) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
                    var $55 = Data_Function.flip(c(i));
                    return function ($56) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($55($56)));
                    };
                })(xs)))(u);
            };
        };
    };
};
var foldrWithIndexDefault = function (dictFoldableWithIndex) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
                    var $57 = c(i);
                    return function ($58) {
                        return Data_Monoid_Endo.Endo($57($58));
                    };
                })(xs))(u);
            };
        };
    };
};
var surroundMapWithIndex = function (dictFoldableWithIndex) {
    return function (dictSemigroup) {
        return function (d) {
            return function (t) {
                return function (f) {
                    var joined = function (i) {
                        return function (a) {
                            return function (m) {
                                return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                            };
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var foldMapDefault = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
        };
    };
};
var findWithIndex = function (dictFoldableWithIndex) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                return function (v2) {
                    if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                        return new Data_Maybe.Just({
                            index: v,
                            value: v2
                        });
                    };
                    return v1;
                };
            };
        };
        return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
    };
};
var anyWithIndex = function (dictFoldableWithIndex) {
    return function (dictHeytingAlgebra) {
        return function (t) {
            var $59 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $60 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
                var $62 = t(i);
                return function ($63) {
                    return Data_Monoid_Disj.Disj($62($63));
                };
            });
            return function ($61) {
                return $59($60($61));
            };
        };
    };
};
var allWithIndex = function (dictFoldableWithIndex) {
    return function (dictHeytingAlgebra) {
        return function (t) {
            var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                var $67 = t(i);
                return function ($68) {
                    return Data_Monoid_Conj.Conj($67($68));
                };
            });
            return function ($66) {
                return $64($65($66));
            };
        };
    };
};
module.exports = {
    FoldableWithIndex: FoldableWithIndex,
    foldrWithIndex: foldrWithIndex,
    foldlWithIndex: foldlWithIndex,
    foldMapWithIndex: foldMapWithIndex,
    foldrWithIndexDefault: foldrWithIndexDefault,
    foldlWithIndexDefault: foldlWithIndexDefault,
    foldMapWithIndexDefaultR: foldMapWithIndexDefaultR,
    foldMapWithIndexDefaultL: foldMapWithIndexDefaultL,
    foldWithIndexM: foldWithIndexM,
    traverseWithIndex_: traverseWithIndex_,
    forWithIndex_: forWithIndex_,
    surroundMapWithIndex: surroundMapWithIndex,
    allWithIndex: allWithIndex,
    anyWithIndex: anyWithIndex,
    findWithIndex: findWithIndex,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefault: foldMapDefault,
    foldableWithIndexArray: foldableWithIndexArray,
    foldableWithIndexMaybe: foldableWithIndexMaybe,
    foldableWithIndexFirst: foldableWithIndexFirst,
    foldableWithIndexLast: foldableWithIndexLast,
    foldableWithIndexAdditive: foldableWithIndexAdditive,
    foldableWithIndexDual: foldableWithIndexDual,
    foldableWithIndexDisj: foldableWithIndexDisj,
    foldableWithIndexConj: foldableWithIndexConj,
    foldableWithIndexMultiplicative: foldableWithIndexMultiplicative
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Monoid.Conj/index.js":"2cizJ","../Data.Monoid.Disj/index.js":"36707","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Endo/index.js":"5yQLY","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv"}],"7KyY4":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var FunctorWithIndex = function (Functor0, mapWithIndex) {
    this.Functor0 = Functor0;
    this.mapWithIndex = mapWithIndex;
};
var mapWithIndex = function (dict) {
    return dict.mapWithIndex;
};
var mapDefault = function (dictFunctorWithIndex) {
    return function (f) {
        return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
    };
};
var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
});
var functorWithIndexMaybe = new FunctorWithIndex(function () {
    return Data_Maybe.functorMaybe;
}, function (f) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
});
var functorWithIndexLast = new FunctorWithIndex(function () {
    return Data_Maybe_Last.functorLast;
}, function (f) {
    return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
});
var functorWithIndexFirst = new FunctorWithIndex(function () {
    return Data_Maybe_First.functorFirst;
}, function (f) {
    return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
});
var functorWithIndexDual = new FunctorWithIndex(function () {
    return Data_Monoid_Dual.functorDual;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
});
var functorWithIndexDisj = new FunctorWithIndex(function () {
    return Data_Monoid_Disj.functorDisj;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
});
var functorWithIndexConj = new FunctorWithIndex(function () {
    return Data_Monoid_Conj.functorConj;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
});
var functorWithIndexArray = new FunctorWithIndex(function () {
    return Data_Functor.functorArray;
}, $foreign.mapWithIndexArray);
var functorWithIndexAdditive = new FunctorWithIndex(function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
});
module.exports = {
    FunctorWithIndex: FunctorWithIndex,
    mapWithIndex: mapWithIndex,
    mapDefault: mapDefault,
    functorWithIndexArray: functorWithIndexArray,
    functorWithIndexMaybe: functorWithIndexMaybe,
    functorWithIndexFirst: functorWithIndexFirst,
    functorWithIndexLast: functorWithIndexLast,
    functorWithIndexAdditive: functorWithIndexAdditive,
    functorWithIndexDual: functorWithIndexDual,
    functorWithIndexConj: functorWithIndexConj,
    functorWithIndexDisj: functorWithIndexDisj,
    functorWithIndexMultiplicative: functorWithIndexMultiplicative
};

},{"./foreign.js":"7klmi","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Maybe.First/index.js":"7nBAO","../Data.Maybe.Last/index.js":"6wJ3s","../Data.Monoid.Additive/index.js":"3Wc8S","../Data.Monoid.Conj/index.js":"2cizJ","../Data.Monoid.Disj/index.js":"36707","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Multiplicative/index.js":"6MI0d","../Data.Unit/index.js":"64zbv"}],"7klmi":[function(require,module,exports) {
"use strict";

exports.mapWithIndexArray = function (f) {
  return function (xs) {
    var l = xs.length;
    var result = Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(i)(xs[i]);
    }
    return result;
  };
};

},{}],"38dno":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord_Max = require("../Data.Ord.Max/index.js");
var Data_Ord_Min = require("../Data.Ord.Min/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var JoinWith = function (x) {
    return x;
};
var Act = function (x) {
    return x;
};
var Foldable1 = function (Foldable0, fold1, foldMap1) {
    this.Foldable0 = Foldable0;
    this.fold1 = fold1;
    this.foldMap1 = foldMap1;
};
var semigroupJoinWith = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return JoinWith(function (j) {
                return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
            });
        };
    });
};
var semigroupAct = function (dictApply) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var joinee = function (v) {
    return v;
};
var getAct = function (v) {
    return v;
};
var foldMap1 = function (dict) {
    return dict.foldMap1;
};
var intercalateMap = function (dictFoldable1) {
    return function (dictSemigroup) {
        return function (j) {
            return function (f) {
                return function (foldable) {
                    return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($43) {
                        return JoinWith(Data_Function["const"](f($43)));
                    })(foldable))(j);
                };
            };
        };
    };
};
var intercalate = function (dictFoldable1) {
    return function (dictSemigroup) {
        return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
    };
};
var traverse1_ = function (dictFoldable1) {
    return function (dictApply) {
        return function (f) {
            return function (t) {
                return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($44) {
                    return Act(f($44));
                })(t)));
            };
        };
    };
};
var for1_ = function (dictFoldable1) {
    return function (dictApply) {
        return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
    };
};
var sequence1_ = function (dictFoldable1) {
    return function (dictApply) {
        return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var fold1Default = function (dictFoldable1) {
    return function (dictSemigroup) {
        return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldableDual = new Foldable1(function () {
    return Data_Foldable.foldableDual;
}, function (dictSemigroup) {
    return fold1Default(foldableDual)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var foldableMultiplicative = new Foldable1(function () {
    return Data_Foldable.foldableMultiplicative;
}, function (dictSemigroup) {
    return fold1Default(foldableMultiplicative)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var fold1 = function (dict) {
    return dict.fold1;
};
var foldMap1Default = function (dictFoldable1) {
    return function (dictFunctor) {
        return function (dictSemigroup) {
            return function (f) {
                var $45 = fold1(dictFoldable1)(dictSemigroup);
                var $46 = Data_Functor.map(dictFunctor)(f);
                return function ($47) {
                    return $45($46($47));
                };
            };
        };
    };
};
module.exports = {
    Foldable1: Foldable1,
    foldMap1: foldMap1,
    fold1: fold1,
    traverse1_: traverse1_,
    for1_: for1_,
    sequence1_: sequence1_,
    foldMap1Default: foldMap1Default,
    fold1Default: fold1Default,
    intercalate: intercalate,
    intercalateMap: intercalateMap,
    maximum: maximum,
    minimum: minimum,
    foldableDual: foldableDual,
    foldableMultiplicative: foldableMultiplicative
};

},{"../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Ord.Max/index.js":"3xrdk","../Data.Ord.Min/index.js":"6xopK","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv"}],"3xrdk":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Max = function (x) {
    return x;
};
var showMax = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Max " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMax = function (dictOrd) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Ord.max(dictOrd)(v)(v1);
        };
    });
};
var newtypeMax = new Data_Newtype.Newtype(function (n) {
    return n;
}, Max);
var monoidMax = function (dictBounded) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMax(dictBounded.Ord0());
    }, Data_Bounded.bottom(dictBounded));
};
var eqMax = function (dictEq) {
    return dictEq;
};
var ordMax = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMax(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Max: Max,
    newtypeMax: newtypeMax,
    eqMax: eqMax,
    ordMax: ordMax,
    semigroupMax: semigroupMax,
    monoidMax: monoidMax,
    showMax: showMax
};

},{"../Data.Bounded/index.js":"4LlpW","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"6xopK":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Min = function (x) {
    return x;
};
var showMin = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Min " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMin = function (dictOrd) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Ord.min(dictOrd)(v)(v1);
        };
    });
};
var newtypeMin = new Data_Newtype.Newtype(function (n) {
    return n;
}, Min);
var monoidMin = function (dictBounded) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMin(dictBounded.Ord0());
    }, Data_Bounded.top(dictBounded));
};
var eqMin = function (dictEq) {
    return dictEq;
};
var ordMin = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMin(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Min: Min,
    newtypeMin: newtypeMin,
    eqMin: eqMin,
    ordMin: ordMin,
    semigroupMin: semigroupMin,
    monoidMin: monoidMin,
    showMin: showMin
};

},{"../Data.Bounded/index.js":"4LlpW","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"5W1D8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
    this.Foldable10 = Foldable10;
    this.Traversable1 = Traversable1;
    this.sequence1 = sequence1;
    this.traverse1 = traverse1;
};
var traverse1 = function (dict) {
    return dict.traverse1;
};
var sequence1Default = function (dictTraversable1) {
    return function (dictApply) {
        return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableDual = new Traversable1(function () {
    return Data_Semigroup_Foldable.foldableDual;
}, function () {
    return Data_Traversable.traversableDual;
}, function (dictApply) {
    return sequence1Default(traversableDual)(dictApply);
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableMultiplicative = new Traversable1(function () {
    return Data_Semigroup_Foldable.foldableMultiplicative;
}, function () {
    return Data_Traversable.traversableMultiplicative;
}, function (dictApply) {
    return sequence1Default(traversableMultiplicative)(dictApply);
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var sequence1 = function (dict) {
    return dict.sequence1;
};
var traverse1Default = function (dictTraversable1) {
    return function (dictApply) {
        return function (f) {
            return function (ta) {
                return sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(f)(ta));
            };
        };
    };
};
module.exports = {
    sequence1: sequence1,
    traverse1: traverse1,
    Traversable1: Traversable1,
    traverse1Default: traverse1Default,
    sequence1Default: sequence1Default,
    traversableDual: traversableDual,
    traversableMultiplicative: traversableMultiplicative
};

},{"../Control.Category/index.js":"6QTyW","../Data.Functor/index.js":"5ZkNG","../Data.Monoid.Dual/index.js":"7Gyqq","../Data.Monoid.Multiplicative/index.js":"6MI0d","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Traversable/index.js":"2NLLF"}],"3Xep8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
    this.FoldableWithIndex1 = FoldableWithIndex1;
    this.FunctorWithIndex0 = FunctorWithIndex0;
    this.Traversable2 = Traversable2;
    this.traverseWithIndex = traverseWithIndex;
};
var traverseWithIndexDefault = function (dictTraversableWithIndex) {
    return function (dictApplicative) {
        return function (f) {
            var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
            var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
            return function ($21) {
                return $19($20($21));
            };
        };
    };
};
var traverseWithIndex = function (dict) {
    return dict.traverseWithIndex;
};
var traverseDefault = function (dictTraversableWithIndex) {
    return function (dictApplicative) {
        return function (f) {
            return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
        };
    };
};
var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexMultiplicative;
}, function () {
    return Data_Traversable.traversableMultiplicative;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexMaybe = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexMaybe;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexMaybe;
}, function () {
    return Data_Traversable.traversableMaybe;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexLast = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexLast;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexLast;
}, function () {
    return Data_Traversable.traversableLast;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexFirst = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexFirst;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexFirst;
}, function () {
    return Data_Traversable.traversableFirst;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDual = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexDual;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexDual;
}, function () {
    return Data_Traversable.traversableDual;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDisj = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexDisj;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexDisj;
}, function () {
    return Data_Traversable.traversableDisj;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexConj = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexConj;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexConj;
}, function () {
    return Data_Traversable.traversableConj;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexArray = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexArray;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexArray;
}, function () {
    return Data_Traversable.traversableArray;
}, function (dictApplicative) {
    return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
});
var traversableWithIndexAdditive = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexAdditive;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexAdditive;
}, function () {
    return Data_Traversable.traversableAdditive;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
    };
});
var mapAccumRWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
                    return function (a) {
                        return function (s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanrWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
                    return function (b) {
                        return function (a) {
                            var b$prime = f(i)(a)(b);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var mapAccumLWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
                    return function (a) {
                        return function (s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanlWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
                    return function (b) {
                        return function (a) {
                            var b$prime = f(i)(b)(a);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var forWithIndex = function (dictApplicative) {
    return function (dictTraversableWithIndex) {
        return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
    };
};
module.exports = {
    TraversableWithIndex: TraversableWithIndex,
    traverseWithIndex: traverseWithIndex,
    traverseWithIndexDefault: traverseWithIndexDefault,
    forWithIndex: forWithIndex,
    scanlWithIndex: scanlWithIndex,
    mapAccumLWithIndex: mapAccumLWithIndex,
    scanrWithIndex: scanrWithIndex,
    mapAccumRWithIndex: mapAccumRWithIndex,
    traverseDefault: traverseDefault,
    traversableWithIndexArray: traversableWithIndexArray,
    traversableWithIndexMaybe: traversableWithIndexMaybe,
    traversableWithIndexFirst: traversableWithIndexFirst,
    traversableWithIndexLast: traversableWithIndexLast,
    traversableWithIndexAdditive: traversableWithIndexAdditive,
    traversableWithIndexDual: traversableWithIndexDual,
    traversableWithIndexConj: traversableWithIndexConj,
    traversableWithIndexDisj: traversableWithIndexDisj,
    traversableWithIndexMultiplicative: traversableWithIndexMultiplicative
};

},{"../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Traversable/index.js":"2NLLF","../Data.Traversable.Accum.Internal/index.js":"7Jb56","../Data.Unit/index.js":"64zbv"}],"1LiTJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var TypeEquals = function (from, to) {
    this.from = from;
    this.to = to;
};
var to = function (dict) {
    return dict.to;
};
var refl = new TypeEquals(function (a) {
    return a;
}, function (a) {
    return a;
});
var from = function (dict) {
    return dict.from;
};
module.exports = {
    TypeEquals: TypeEquals,
    to: to,
    from: from,
    refl: refl
};

},{}],"1PqJZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Fiber = function (x) {
    return x;
};
var FFIUtil = function (x) {
    return x;
};
var Canceler = function (x) {
    return x;
};
var suspendAff = $foreign["_fork"](false);
var newtypeCanceler = new Data_Newtype.Newtype(function (n) {
    return n;
}, Canceler);
var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
var functorAff = new Data_Functor.Functor($foreign["_map"]);
var forkAff = $foreign["_fork"](true);
var ffiUtil = (function () {
    var unsafeFromRight = function (v) {
        if (v instanceof Data_Either.Right) {
            return v.value0;
        };
        if (v instanceof Data_Either.Left) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
    };
    var unsafeFromLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return v.value0;
        };
        if (v instanceof Data_Either.Right) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
    };
    var isLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return true;
        };
        if (v instanceof Data_Either.Right) {
            return false;
        };
        throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
    };
    return {
        isLeft: isLeft,
        fromLeft: unsafeFromLeft,
        fromRight: unsafeFromRight,
        left: Data_Either.Left.create,
        right: Data_Either.Right.create
    };
})();
var makeFiber = function (aff) {
    return $foreign["_makeFiber"](ffiUtil, aff);
};
var launchAff = function (aff) {
    return function __do() {
        var fiber = makeFiber(aff)();
        fiber.run();
        return fiber;
    };
};
var launchAff_ = (function () {
    var $43 = Data_Functor["void"](Effect.functorEffect);
    return function ($44) {
        return $43(launchAff($44));
    };
})();
var launchSuspendedAff = makeFiber;
var delay = function (v) {
    return $foreign["_delay"](Data_Either.Right.create, v);
};
var bracket = function (acquire) {
    return function (completed) {
        return $foreign.generalBracket(acquire)({
            killed: Data_Function["const"](completed),
            failed: Data_Function["const"](completed),
            completed: Data_Function["const"](completed)
        });
    };
};
var applyParAff = new Control_Apply.Apply(function () {
    return functorParAff;
}, $foreign["_parAffApply"]);
var semigroupParAff = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
};
var monadAff = new Control_Monad.Monad(function () {
    return applicativeAff;
}, function () {
    return bindAff;
});
var bindAff = new Control_Bind.Bind(function () {
    return applyAff;
}, $foreign["_bind"]);
var applyAff = new Control_Apply.Apply(function () {
    return functorAff;
}, Control_Monad.ap(monadAff));
var applicativeAff = new Control_Applicative.Applicative(function () {
    return applyAff;
}, $foreign["_pure"]);
var cancelWith = function (aff) {
    return function (v) {
        return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
            killed: function (e) {
                return function (v1) {
                    return v(e);
                };
            },
            failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
            completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
        })(Data_Function["const"](aff));
    };
};
var $$finally = function (fin) {
    return function (a) {
        return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
    };
};
var invincible = function (a) {
    return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
};
var lazyAff = new Control_Lazy.Lazy(function (f) {
    return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
});
var semigroupAff = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
};
var monadEffectAff = new Effect_Class.MonadEffect(function () {
    return monadAff;
}, $foreign["_liftEffect"]);
var effectCanceler = (function () {
    var $45 = Effect_Class.liftEffect(monadEffectAff);
    return function ($46) {
        return Canceler(Data_Function["const"]($45($46)));
    };
})();
var joinFiber = function (v) {
    return $foreign.makeAff(function (k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
    });
};
var functorFiber = new Data_Functor.Functor(function (f) {
    return function (t) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
    };
});
var applyFiber = new Control_Apply.Apply(function () {
    return functorFiber;
}, function (t1) {
    return function (t2) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
    };
});
var applicativeFiber = new Control_Applicative.Applicative(function () {
    return applyFiber;
}, function (a) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
});
var killFiber = function (e) {
    return function (v) {
        return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
            if (v1) {
                return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
            };
            return $foreign.makeAff(function (k) {
                return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
            });
        });
    };
};
var fiberCanceler = (function () {
    var $47 = Data_Function.flip(killFiber);
    return function ($48) {
        return Canceler($47($48));
    };
})();
var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
    return monadAff;
}, $foreign["_throwError"]);
var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowAff;
}, $foreign["_catchError"]);
var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
var runAff = function (k) {
    return function (aff) {
        return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
            var $49 = Effect_Class.liftEffect(monadEffectAff);
            return function ($50) {
                return $49(k($50));
            };
        })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var runAff_ = function (k) {
    return function (aff) {
        return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
    };
};
var runSuspendedAff = function (k) {
    return function (aff) {
        return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)((function () {
            var $51 = Effect_Class.liftEffect(monadEffectAff);
            return function ($52) {
                return $51(k($52));
            };
        })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var parallelAff = new Control_Parallel_Class.Parallel(function () {
    return applicativeParAff;
}, function () {
    return monadAff;
}, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
var applicativeParAff = new Control_Applicative.Applicative(function () {
    return applyParAff;
}, (function () {
    var $53 = Control_Parallel_Class.parallel(parallelAff);
    var $54 = Control_Applicative.pure(applicativeAff);
    return function ($55) {
        return $53($54($55));
    };
})());
var monoidParAff = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupParAff(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
};
var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (err) {
            return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
        };
    };
});
var supervise = function (aff) {
    var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
    var killAll = function (err) {
        return function (sup) {
            return $foreign.makeAff(function (k) {
                return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
            });
        };
    };
    var acquire = function __do() {
        var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
        sup.fiber.run();
        return sup;
    };
    return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
        killed: function (err) {
            return function (sup) {
                return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
            };
        },
        failed: Data_Function["const"](killAll(killError)),
        completed: Data_Function["const"](killAll(killError))
    })(function ($56) {
        return joinFiber((function (v) {
            return v.fiber;
        })($56));
    });
};
var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadAff;
}, function (k) {
    var go = function (a) {
        return Control_Bind.bind(bindAff)(k(a))(function (res) {
            if (res instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeAff)(res.value0);
            };
            if (res instanceof Control_Monad_Rec_Class.Loop) {
                return go(res.value0);
            };
            throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [ res.constructor.name ]);
        });
    };
    return go;
});
var monoidAff = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAff(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
};
var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
var monoidCanceler = new Data_Monoid.Monoid(function () {
    return semigroupCanceler;
}, nonCanceler);
var never = $foreign.makeAff(function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
});
var apathize = (function () {
    var $57 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
    return function ($58) {
        return $57(attempt($58));
    };
})();
var altParAff = new Control_Alt.Alt(function () {
    return functorParAff;
}, $foreign["_parAffAlt"]);
var altAff = new Control_Alt.Alt(function () {
    return functorAff;
}, function (a1) {
    return function (a2) {
        return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
    };
});
var plusAff = new Control_Plus.Plus(function () {
    return altAff;
}, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
var plusParAff = new Control_Plus.Plus(function () {
    return altParAff;
}, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
var alternativeParAff = new Control_Alternative.Alternative(function () {
    return applicativeParAff;
}, function () {
    return plusParAff;
});
module.exports = {
    Canceler: Canceler,
    launchAff: launchAff,
    launchAff_: launchAff_,
    launchSuspendedAff: launchSuspendedAff,
    runAff: runAff,
    runAff_: runAff_,
    runSuspendedAff: runSuspendedAff,
    forkAff: forkAff,
    suspendAff: suspendAff,
    supervise: supervise,
    attempt: attempt,
    apathize: apathize,
    delay: delay,
    never: never,
    "finally": $$finally,
    invincible: invincible,
    killFiber: killFiber,
    joinFiber: joinFiber,
    cancelWith: cancelWith,
    bracket: bracket,
    nonCanceler: nonCanceler,
    effectCanceler: effectCanceler,
    fiberCanceler: fiberCanceler,
    functorAff: functorAff,
    applyAff: applyAff,
    applicativeAff: applicativeAff,
    bindAff: bindAff,
    monadAff: monadAff,
    semigroupAff: semigroupAff,
    monoidAff: monoidAff,
    altAff: altAff,
    plusAff: plusAff,
    monadRecAff: monadRecAff,
    monadThrowAff: monadThrowAff,
    monadErrorAff: monadErrorAff,
    monadEffectAff: monadEffectAff,
    lazyAff: lazyAff,
    functorParAff: functorParAff,
    applyParAff: applyParAff,
    applicativeParAff: applicativeParAff,
    semigroupParAff: semigroupParAff,
    monoidParAff: monoidParAff,
    altParAff: altParAff,
    plusParAff: plusParAff,
    alternativeParAff: alternativeParAff,
    parallelAff: parallelAff,
    functorFiber: functorFiber,
    applyFiber: applyFiber,
    applicativeFiber: applicativeFiber,
    newtypeCanceler: newtypeCanceler,
    semigroupCanceler: semigroupCanceler,
    monoidCanceler: monoidCanceler,
    makeAff: $foreign.makeAff,
    generalBracket: $foreign.generalBracket
};

},{"./foreign.js":"bMPsl","../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Lazy/index.js":"79VGa","../Control.Monad/index.js":"4SDam","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Parallel/index.js":"2HNTv","../Control.Parallel.Class/index.js":"65Cks","../Control.Plus/index.js":"2CmD1","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Class/index.js":"70nM9","../Effect.Exception/index.js":"neabt","../Effect.Unsafe/index.js":"3YDNn","../Partial.Unsafe/index.js":"6SrgG","../Unsafe.Coerce/index.js":"3fQke"}],"bMPsl":[function(require,module,exports) {
/* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
/* jshint -W083, -W098, -W003 */
"use strict";

var Aff = function () {
  // A unique value for empty.
  var EMPTY = {};

  /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */
  var PURE    = "Pure";
  var THROW   = "Throw";
  var CATCH   = "Catch";
  var SYNC    = "Sync";
  var ASYNC   = "Async";
  var BIND    = "Bind";
  var BRACKET = "Bracket";
  var FORK    = "Fork";
  var SEQ     = "Sequential";

  /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */
  var MAP   = "Map";
  var APPLY = "Apply";
  var ALT   = "Alt";

  // Various constructors used in interpretation
  var CONS      = "Cons";      // Cons-list, for stacks
  var RESUME    = "Resume";    // Continue indiscriminately
  var RELEASE   = "Release";   // Continue with bracket finalizers
  var FINALIZER = "Finalizer"; // A non-interruptible effect
  var FINALIZED = "Finalized"; // Marker for finalization
  var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
  var FIBER     = "Fiber";     // Actual fiber reference
  var THUNK     = "Thunk";     // Primed effect, ready to invoke

  function Aff(tag, _1, _2, _3) {
    this.tag = tag;
    this._1  = _1;
    this._2  = _2;
    this._3  = _3;
  }

  function AffCtr(tag) {
    var fn = function (_1, _2, _3) {
      return new Aff(tag, _1, _2, _3);
    };
    fn.tag = tag;
    return fn;
  }

  function nonCanceler(error) {
    return new Aff(PURE, void 0);
  }

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function runSync(left, right, eff) {
    try {
      return right(eff());
    } catch (error) {
      return left(error);
    }
  }

  function runAsync(left, eff, k) {
    try {
      return eff(k)();
    } catch (error) {
      k(left(error))();
      return nonCanceler;
    }
  }

  var Scheduler = function () {
    var limit    = 1024;
    var size     = 0;
    var ix       = 0;
    var queue    = new Array(limit);
    var draining = false;

    function drain() {
      var thunk;
      draining = true;
      while (size !== 0) {
        size--;
        thunk     = queue[ix];
        queue[ix] = void 0;
        ix        = (ix + 1) % limit;
        thunk();
      }
      draining = false;
    }

    return {
      isDraining: function () {
        return draining;
      },
      enqueue: function (cb) {
        var i, tmp;
        if (size === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }

        queue[(ix + size) % limit] = cb;
        size++;

        if (!draining) {
          drain();
        }
      }
    };
  }();

  function Supervisor(util) {
    var fibers  = {};
    var fiberId = 0;
    var count   = 0;

    return {
      register: function (fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function (result) {
            return function () {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function () {
        return count === 0;
      },
      killAll: function (killError, cb) {
        return function () {
          if (count === 0) {
            return cb();
          }

          var killCount = 0;
          var kills     = {};

          function kill(fid) {
            kills[fid] = fibers[fid].kill(killError, function (result) {
              return function () {
                delete kills[fid];
                killCount--;
                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function () {
                    throw util.fromLeft(result);
                  }, 0);
                }
                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }

          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill(k);
            }
          }

          fibers  = {};
          fiberId = 0;
          count   = 0;

          return function (error) {
            return new Aff(SYNC, function () {
              for (var k in kills) {
                if (kills.hasOwnProperty(k)) {
                  kills[k]();
                }
              }
            });
          };
        };
      }
    };
  }

  // Fiber state machine
  var SUSPENDED   = 0; // Suspended, pending a join.
  var CONTINUE    = 1; // Interpret the next instruction.
  var STEP_BIND   = 2; // Apply the next bind.
  var STEP_RESULT = 3; // Handle potential failure from a result.
  var PENDING     = 4; // An async effect is running.
  var RETURN      = 5; // The current stack has returned.
  var COMPLETED   = 6; // The entire fiber has completed.

  function Fiber(util, supervisor, aff) {
    // Monotonically increasing tick, increased on each asynchronous turn.
    var runTick = 0;

    // The current branch of the state machine.
    var status = SUSPENDED;

    // The current point of interest for the state machine branch.
    var step      = aff;  // Successful step
    var fail      = null; // Failure step
    var interrupt = null; // Asynchronous interrupt

    // Stack of continuations for the current fiber.
    var bhead = null;
    var btail = null;

    // Stack of attempts and finalizers for error recovery. Every `Cons` is also
    // tagged with current `interrupt` state. We use this to track which items
    // should be ignored or evaluated as a result of a kill.
    var attempts = null;

    // A special state is needed for Bracket, because it cannot be killed. When
    // we enter a bracket acquisition or finalizer, we increment the counter,
    // and then decrement once complete.
    var bracketCount = 0;

    // Each join gets a new id so they can be revoked.
    var joinId  = 0;
    var joins   = null;
    var rethrow = true;

    // Each invocation of `run` requires a tick. When an asynchronous effect is
    // resolved, we must check that the local tick coincides with the fiber
    // tick before resuming. This prevents multiple async continuations from
    // accidentally resuming the same fiber. A common example may be invoking
    // the provided callback in `makeAff` more than once, but it may also be an
    // async effect resuming after the fiber was already cancelled.
    function run(localRunTick) {
      var tmp, result, attempt;
      while (true) {
        tmp       = null;
        result    = null;
        attempt   = null;

        switch (status) {
        case STEP_BIND:
          status = CONTINUE;
          try {
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
          } catch (e) {
            status = RETURN;
            fail   = util.left(e);
            step   = null;
          }
          break;

        case STEP_RESULT:
          if (util.isLeft(step)) {
            status = RETURN;
            fail   = step;
            step   = null;
          } else if (bhead === null) {
            status = RETURN;
          } else {
            status = STEP_BIND;
            step   = util.fromRight(step);
          }
          break;

        case CONTINUE:
          switch (step.tag) {
          case BIND:
            if (bhead) {
              btail = new Aff(CONS, bhead, btail);
            }
            bhead  = step._2;
            status = CONTINUE;
            step   = step._1;
            break;

          case PURE:
            if (bhead === null) {
              status = RETURN;
              step   = util.right(step._1);
            } else {
              status = STEP_BIND;
              step   = step._1;
            }
            break;

          case SYNC:
            status = STEP_RESULT;
            step   = runSync(util.left, util.right, step._1);
            break;

          case ASYNC:
            status = PENDING;
            step   = runAsync(util.left, step._1, function (result) {
              return function () {
                if (runTick !== localRunTick) {
                  return;
                }
                runTick++;
                Scheduler.enqueue(function () {
                  // It's possible to interrupt the fiber between enqueuing and
                  // resuming, so we need to check that the runTick is still
                  // valid.
                  if (runTick !== localRunTick + 1) {
                    return;
                  }
                  status = STEP_RESULT;
                  step   = result;
                  run(runTick);
                });
              };
            });
            return;

          case THROW:
            status = RETURN;
            fail   = util.left(step._1);
            step   = null;
            break;

          // Enqueue the Catch so that we can call the error handler later on
          // in case of an exception.
          case CATCH:
            if (bhead === null) {
              attempts = new Aff(CONS, step, attempts, interrupt);
            } else {
              attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
            }
            bhead    = null;
            btail    = null;
            status   = CONTINUE;
            step     = step._1;
            break;

          // Enqueue the Bracket so that we can call the appropriate handlers
          // after resource acquisition.
          case BRACKET:
            bracketCount++;
            if (bhead === null) {
              attempts = new Aff(CONS, step, attempts, interrupt);
            } else {
              attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
            }
            bhead  = null;
            btail  = null;
            status = CONTINUE;
            step   = step._1;
            break;

          case FORK:
            status = STEP_RESULT;
            tmp    = Fiber(util, supervisor, step._2);
            if (supervisor) {
              supervisor.register(tmp);
            }
            if (step._1) {
              tmp.run();
            }
            step = util.right(tmp);
            break;

          case SEQ:
            status = CONTINUE;
            step   = sequential(util, supervisor, step._1);
            break;
          }
          break;

        case RETURN:
          bhead = null;
          btail = null;
          // If the current stack has returned, and we have no other stacks to
          // resume or finalizers to run, the fiber has halted and we can
          // invoke all join callbacks. Otherwise we need to resume.
          if (attempts === null) {
            status = COMPLETED;
            step   = interrupt || fail || step;
          } else {
            // The interrupt status for the enqueued item.
            tmp      = attempts._3;
            attempt  = attempts._1;
            attempts = attempts._2;

            switch (attempt.tag) {
            // We cannot recover from an unmasked interrupt. Otherwise we should
            // continue stepping, or run the exception handler if an exception
            // was raised.
            case CATCH:
              // We should compare the interrupt status as well because we
              // only want it to apply if there has been an interrupt since
              // enqueuing the catch.
              if (interrupt && interrupt !== tmp && bracketCount === 0) {
                status = RETURN;
              } else if (fail) {
                status = CONTINUE;
                step   = attempt._2(util.fromLeft(fail));
                fail   = null;
              }
              break;

            // We cannot resume from an unmasked interrupt or exception.
            case RESUME:
              // As with Catch, we only want to ignore in the case of an
              // interrupt since enqueing the item.
              if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                status = RETURN;
              } else {
                bhead  = attempt._1;
                btail  = attempt._2;
                status = STEP_BIND;
                step   = util.fromRight(step);
              }
              break;

            // If we have a bracket, we should enqueue the handlers,
            // and continue with the success branch only if the fiber has
            // not been interrupted. If the bracket acquisition failed, we
            // should not run either.
            case BRACKET:
              bracketCount--;
              if (fail === null) {
                result   = util.fromRight(step);
                // We need to enqueue the Release with the same interrupt
                // status as the Bracket that is initiating it.
                attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                // We should only coninue as long as the interrupt status has not changed or
                // we are currently within a non-interruptable finalizer.
                if (interrupt === tmp || bracketCount > 0) {
                  status = CONTINUE;
                  step   = attempt._3(result);
                }
              }
              break;

            // Enqueue the appropriate handler. We increase the bracket count
            // because it should not be cancelled.
            case RELEASE:
              attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
              status   = CONTINUE;
              // It has only been killed if the interrupt status has changed
              // since we enqueued the item, and the bracket count is 0. If the
              // bracket count is non-zero then we are in a masked state so it's
              // impossible to be killed.
              if (interrupt && interrupt !== tmp && bracketCount === 0) {
                step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
              } else if (fail) {
                step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
              } else {
                step = attempt._1.completed(util.fromRight(step))(attempt._2);
              }
              fail = null;
              bracketCount++;
              break;

            case FINALIZER:
              bracketCount++;
              attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
              status   = CONTINUE;
              step     = attempt._1;
              break;

            case FINALIZED:
              bracketCount--;
              status = RETURN;
              step   = attempt._1;
              fail   = attempt._2;
              break;
            }
          }
          break;

        case COMPLETED:
          for (var k in joins) {
            if (joins.hasOwnProperty(k)) {
              rethrow = rethrow && joins[k].rethrow;
              runEff(joins[k].handler(step));
            }
          }
          joins = null;
          // If we have an interrupt and a fail, then the thread threw while
          // running finalizers. This should always rethrow in a fresh stack.
          if (interrupt && fail) {
            setTimeout(function () {
              throw util.fromLeft(fail);
            }, 0);
          // If we have an unhandled exception, and no other fiber has joined
          // then we need to throw the exception in a fresh stack.
          } else if (util.isLeft(step) && rethrow) {
            setTimeout(function () {
              // Guard on reathrow because a completely synchronous fiber can
              // still have an observer which was added after-the-fact.
              if (rethrow) {
                throw util.fromLeft(step);
              }
            }, 0);
          }
          return;
        case SUSPENDED:
          status = CONTINUE;
          break;
        case PENDING: return;
        }
      }
    }

    function onComplete(join) {
      return function () {
        if (status === COMPLETED) {
          rethrow = rethrow && join.rethrow;
          join.handler(step)();
          return function () {};
        }

        var jid    = joinId++;
        joins      = joins || {};
        joins[jid] = join;

        return function() {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }

    function kill(error, cb) {
      return function () {
        if (status === COMPLETED) {
          cb(util.right(void 0))();
          return function () {};
        }

        var canceler = onComplete({
          rethrow: false,
          handler: function (/* unused */) {
            return cb(util.right(void 0));
          }
        })();

        switch (status) {
        case SUSPENDED:
          interrupt = util.left(error);
          status    = COMPLETED;
          step      = interrupt;
          run(runTick);
          break;
        case PENDING:
          if (interrupt === null) {
            interrupt = util.left(error);
          }
          if (bracketCount === 0) {
            if (status === PENDING) {
              attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
            }
            status   = RETURN;
            step     = null;
            fail     = null;
            run(++runTick);
          }
          break;
        default:
          if (interrupt === null) {
            interrupt = util.left(error);
          }
          if (bracketCount === 0) {
            status = RETURN;
            step   = null;
            fail   = null;
          }
        }

        return canceler;
      };
    }

    function join(cb) {
      return function () {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();
        if (status === SUSPENDED) {
          run(runTick);
        }
        return canceler;
      };
    }

    return {
      kill: kill,
      join: join,
      onComplete: onComplete,
      isSuspended: function () {
        return status === SUSPENDED;
      },
      run: function () {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function () {
              run(runTick);
            });
          } else {
            run(runTick);
          }
        }
      }
    };
  }

  function runPar(util, supervisor, par, cb) {
    // Table of all forked fibers.
    var fiberId   = 0;
    var fibers    = {};

    // Table of currently running cancelers, as a product of `Alt` behavior.
    var killId    = 0;
    var kills     = {};

    // Error used for early cancelation on Alt branches.
    var early     = new Error("[ParAff] Early exit");

    // Error used to kill the entire tree.
    var interrupt = null;

    // The root pointer of the tree.
    var root      = EMPTY;

    // Walks a tree, invoking all the cancelers. Returns the table of pending
    // cancellation fibers.
    function kill(error, par, cb) {
      var step  = par;
      var head  = null;
      var tail  = null;
      var count = 0;
      var kills = {};
      var tmp, kid;

      loop: while (true) {
        tmp = null;

        switch (step.tag) {
        case FORKED:
          if (step._3 === EMPTY) {
            tmp = fibers[step._1];
            kills[count++] = tmp.kill(error, function (result) {
              return function () {
                count--;
                if (count === 0) {
                  cb(result)();
                }
              };
            });
          }
          // Terminal case.
          if (head === null) {
            break loop;
          }
          // Go down the right side of the tree.
          step = head._2;
          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
          break;
        case MAP:
          step = step._2;
          break;
        case APPLY:
        case ALT:
          if (head) {
            tail = new Aff(CONS, head, tail);
          }
          head = step;
          step = step._1;
          break;
        }
      }

      if (count === 0) {
        cb(util.right(void 0))();
      } else {
        // Run the cancelation effects. We alias `count` because it's mutable.
        kid = 0;
        tmp = count;
        for (; kid < tmp; kid++) {
          kills[kid] = kills[kid]();
        }
      }

      return kills;
    }

    // When a fiber resolves, we need to bubble back up the tree with the
    // result, computing the applicative nodes.
    function join(result, head, tail) {
      var fail, step, lhs, rhs, tmp, kid;

      if (util.isLeft(result)) {
        fail = result;
        step = null;
      } else {
        step = result;
        fail = null;
      }

      loop: while (true) {
        lhs = null;
        rhs = null;
        tmp = null;
        kid = null;

        // We should never continue if the entire tree has been interrupted.
        if (interrupt !== null) {
          return;
        }

        // We've made it all the way to the root of the tree, which means
        // the tree has fully evaluated.
        if (head === null) {
          cb(fail || step)();
          return;
        }

        // The tree has already been computed, so we shouldn't try to do it
        // again. This should never happen.
        // TODO: Remove this?
        if (head._3 !== EMPTY) {
          return;
        }

        switch (head.tag) {
        case MAP:
          if (fail === null) {
            head._3 = util.right(head._1(util.fromRight(step)));
            step    = head._3;
          } else {
            head._3 = fail;
          }
          break;
        case APPLY:
          lhs = head._1._3;
          rhs = head._2._3;
          // If we have a failure we should kill the other side because we
          // can't possible yield a result anymore.
          if (fail) {
            head._3 = fail;
            tmp     = true;
            kid     = killId++;

            kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
              return function () {
                delete kills[kid];
                if (tmp) {
                  tmp = false;
                } else if (tail === null) {
                  join(fail, null, null);
                } else {
                  join(fail, tail._1, tail._2);
                }
              };
            });

            if (tmp) {
              tmp = false;
              return;
            }
          } else if (lhs === EMPTY || rhs === EMPTY) {
            // We can only proceed if both sides have resolved.
            return;
          } else {
            step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
            head._3 = step;
          }
          break;
        case ALT:
          lhs = head._1._3;
          rhs = head._2._3;
          // We can only proceed if both have resolved or we have a success
          if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
            return;
          }
          // If both sides resolve with an error, we should continue with the
          // first error
          if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
            fail    = step === lhs ? rhs : lhs;
            step    = null;
            head._3 = fail;
          } else {
            head._3 = step;
            tmp     = true;
            kid     = killId++;
            // Once a side has resolved, we need to cancel the side that is still
            // pending before we can continue.
            kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
              return function () {
                delete kills[kid];
                if (tmp) {
                  tmp = false;
                } else if (tail === null) {
                  join(step, null, null);
                } else {
                  join(step, tail._1, tail._2);
                }
              };
            });

            if (tmp) {
              tmp = false;
              return;
            }
          }
          break;
        }

        if (tail === null) {
          head = null;
        } else {
          head = tail._1;
          tail = tail._2;
        }
      }
    }

    function resolve(fiber) {
      return function (result) {
        return function () {
          delete fibers[fiber._1];
          fiber._3 = result;
          join(result, fiber._2._1, fiber._2._2);
        };
      };
    }

    // Walks the applicative tree, substituting non-applicative nodes with
    // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
    // as a mutable slot for memoization. In an unresolved state, the `_3`
    // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
    // the left side first, because both operations are left-associative. As
    // we `RETURN` from those branches, we then walk the right side.
    function run() {
      var status = CONTINUE;
      var step   = par;
      var head   = null;
      var tail   = null;
      var tmp, fid;

      loop: while (true) {
        tmp = null;
        fid = null;

        switch (status) {
        case CONTINUE:
          switch (step.tag) {
          case MAP:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(MAP, step._1, EMPTY, EMPTY);
            step = step._2;
            break;
          case APPLY:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(APPLY, EMPTY, step._2, EMPTY);
            step = step._1;
            break;
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(ALT, EMPTY, step._2, EMPTY);
            step = step._1;
            break;
          default:
            // When we hit a leaf value, we suspend the stack in the `FORKED`.
            // When the fiber resolves, it can bubble back up the tree.
            fid    = fiberId++;
            status = RETURN;
            tmp    = step;
            step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
            tmp    = Fiber(util, supervisor, tmp);
            tmp.onComplete({
              rethrow: false,
              handler: resolve(step)
            })();
            fibers[fid] = tmp;
            if (supervisor) {
              supervisor.register(tmp);
            }
          }
          break;
        case RETURN:
          // Terminal case, we are back at the root.
          if (head === null) {
            break loop;
          }
          // If we are done with the right side, we need to continue down the
          // left. Otherwise we should continue up the stack.
          if (head._1 === EMPTY) {
            head._1 = step;
            status  = CONTINUE;
            step    = head._2;
            head._2 = EMPTY;
          } else {
            head._2 = step;
            step    = head;
            if (tail === null) {
              head  = null;
            } else {
              head  = tail._1;
              tail  = tail._2;
            }
          }
        }
      }

      // Keep a reference to the tree root so it can be cancelled.
      root = step;

      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    }

    // Cancels the entire tree. If there are already subtrees being canceled,
    // we need to first cancel those joins. We will then add fresh joins for
    // all pending branches including those that were in the process of being
    // canceled.
    function cancel(error, cb) {
      interrupt = util.left(error);
      var innerKills;
      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];
          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }

      kills = null;
      var newKills = kill(error, root, cb);

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            for (var kid in newKills) {
              if (newKills.hasOwnProperty(kid)) {
                newKills[kid]();
              }
            }
            return nonCanceler;
          };
        });
      };
    }

    run();

    return function (killError) {
      return new Aff(ASYNC, function (killCb) {
        return function () {
          return cancel(killError, killCb);
        };
      });
    };
  }

  function sequential(util, supervisor, par) {
    return new Aff(ASYNC, function (cb) {
      return function () {
        return runPar(util, supervisor, par, cb);
      };
    });
  }

  Aff.EMPTY       = EMPTY;
  Aff.Pure        = AffCtr(PURE);
  Aff.Throw       = AffCtr(THROW);
  Aff.Catch       = AffCtr(CATCH);
  Aff.Sync        = AffCtr(SYNC);
  Aff.Async       = AffCtr(ASYNC);
  Aff.Bind        = AffCtr(BIND);
  Aff.Bracket     = AffCtr(BRACKET);
  Aff.Fork        = AffCtr(FORK);
  Aff.Seq         = AffCtr(SEQ);
  Aff.ParMap      = AffCtr(MAP);
  Aff.ParApply    = AffCtr(APPLY);
  Aff.ParAlt      = AffCtr(ALT);
  Aff.Fiber       = Fiber;
  Aff.Supervisor  = Supervisor;
  Aff.Scheduler   = Scheduler;
  Aff.nonCanceler = nonCanceler;

  return Aff;
}();

exports._pure = Aff.Pure;

exports._throwError = Aff.Throw;

exports._catchError = function (aff) {
  return function (k) {
    return Aff.Catch(aff, k);
  };
};

exports._map = function (f) {
  return function (aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function (value) {
        return Aff.Pure(f(value));
      });
    }
  };
};

exports._bind = function (aff) {
  return function (k) {
    return Aff.Bind(aff, k);
  };
};

exports._fork = function (immediate) {
  return function (aff) {
    return Aff.Fork(immediate, aff);
  };
};

exports._liftEffect = Aff.Sync;

exports._parAffMap = function (f) {
  return function (aff) {
    return Aff.ParMap(f, aff);
  };
};

exports._parAffApply = function (aff1) {
  return function (aff2) {
    return Aff.ParApply(aff1, aff2);
  };
};

exports._parAffAlt = function (aff1) {
  return function (aff2) {
    return Aff.ParAlt(aff1, aff2);
  };
};

exports.makeAff = Aff.Async;

exports.generalBracket = function (acquire) {
  return function (options) {
    return function (k) {
      return Aff.Bracket(acquire, options, k);
    };
  };
};

exports._makeFiber = function (util, aff) {
  return function () {
    return Aff.Fiber(util, null, aff);
  };
};

exports._makeSupervisedFiber = function (util, aff) {
  return function () {
    var supervisor = Aff.Supervisor(util);
    return {
      fiber: Aff.Fiber(util, supervisor, aff),
      supervisor: supervisor
    };
  };
};

exports._killAll = function (error, supervisor, cb) {
  return supervisor.killAll(error, cb);
};

exports._delay = function () {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }

  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }

  return function (right, ms) {
    return Aff.Async(function (cb) {
      return function () {
        var timer = setDelay(ms, cb(right()));
        return function () {
          return Aff.Sync(function () {
            return right(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();

exports._sequential = Aff.Seq;

},{}],"6mmaT":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var MonadThrow = function (Monad0, throwError) {
    this.Monad0 = Monad0;
    this.throwError = throwError;
};
var MonadError = function (MonadThrow0, catchError) {
    this.MonadThrow0 = MonadThrow0;
    this.catchError = catchError;
};
var throwError = function (dict) {
    return dict.throwError;
};
var monadThrowMaybe = new MonadThrow(function () {
    return Data_Maybe.monadMaybe;
}, Data_Function["const"](Data_Maybe.Nothing.value));
var monadThrowEither = new MonadThrow(function () {
    return Data_Either.monadEither;
}, Data_Either.Left.create);
var monadThrowEffect = new MonadThrow(function () {
    return Effect.monadEffect;
}, Effect_Exception.throwException);
var monadErrorMaybe = new MonadError(function () {
    return monadThrowMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
            return v1(Data_Unit.unit);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v.value0);
        };
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monadErrorEither = new MonadError(function () {
    return monadThrowEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Either.Left) {
            return v1(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Either.Right(v.value0);
        };
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monadErrorEffect = new MonadError(function () {
    return monadThrowEffect;
}, Data_Function.flip(Effect_Exception.catchException));
var catchError = function (dict) {
    return dict.catchError;
};
var catchJust = function (dictMonadError) {
    return function (p) {
        return function (act) {
            return function (handler) {
                var handle = function (e) {
                    var v = p(e);
                    if (v instanceof Data_Maybe.Nothing) {
                        return throwError(dictMonadError.MonadThrow0())(e);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return handler(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [ v.constructor.name ]);
                };
                return catchError(dictMonadError)(act)(handle);
            };
        };
    };
};
var $$try = function (dictMonadError) {
    return function (a) {
        return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
            var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
            return function ($18) {
                return $17(Data_Either.Left.create($18));
            };
        })());
    };
};
var withResource = function (dictMonadError) {
    return function (acquire) {
        return function (release) {
            return function (kleisli) {
                return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(acquire)(function (resource) {
                    return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())($$try(dictMonadError)(kleisli(resource)))(function (result) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(release(resource))(function () {
                            return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()))(result);
                        });
                    });
                });
            };
        };
    };
};
module.exports = {
    catchError: catchError,
    throwError: throwError,
    MonadThrow: MonadThrow,
    MonadError: MonadError,
    catchJust: catchJust,
    "try": $$try,
    withResource: withResource,
    monadThrowEither: monadThrowEither,
    monadErrorEither: monadErrorEither,
    monadThrowMaybe: monadThrowMaybe,
    monadErrorMaybe: monadErrorMaybe,
    monadThrowEffect: monadThrowEffect,
    monadErrorEffect: monadErrorEffect
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Data.Either/index.js":"5Va79","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Exception/index.js":"neabt"}],"5Va79":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Left) {
                return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Right) {
                return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [ v.constructor.name ]);
        });
    };
};
var note$prime = function (f) {
    return Data_Maybe["maybe'"](function ($198) {
        return Left.create(f($198));
    })(Right.create);
};
var note = function (a) {
    return Data_Maybe.maybe(new Left(a))(Right.create);
};
var functorEither = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Left) {
            return new Left(m.value0);
        };
        if (m instanceof Right) {
            return new Right(f(m.value0));
        };
        throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
    };
});
var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorEither;
}, function (f) {
    return Data_Functor.map(functorEither)(f(Data_Unit.unit));
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
var fromRight = function (dictPartial) {
    return function (v) {
        if (v instanceof Right) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
    };
};
var fromLeft = function (dictPartial) {
    return function (v) {
        if (v instanceof Left) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [ v.constructor.name ]);
    };
};
var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableEither;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(Data_Unit.unit)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(Data_Unit.unit)(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(Data_Unit.unit)(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexEither;
}, function () {
    return functorWithIndexEither;
}, function () {
    return traversableEither;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 217, column 1 - line 219, column 53): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        return new Right(v(v1));
    };
});
var eqEither = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof Left) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof Left) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 179, column 1 - line 179, column 64): " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var eq1Either = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqEither(dictEq)(dictEq1));
    });
};
var ord1Either = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Either(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
    });
};
var either = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
var choose = function (dictAlt) {
    return function (a) {
        return function (b) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
        };
    };
};
var boundedEither = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return new Left(v(v2.value0));
            };
            if (v2 instanceof Right) {
                return new Right(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(z)(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0)(z);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0)(z);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                };
                if (v2 instanceof Right) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyEither = new Control_Apply.Apply(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return new Left(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map(functorEither)(v.value0)(v1);
        };
        throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindEither = new Control_Bind.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (v) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (x) {
        return function (y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
        };
    });
};
var applicativeEither = new Control_Applicative.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return v1;
        };
        return v;
    };
});
module.exports = {
    Left: Left,
    Right: Right,
    either: either,
    choose: choose,
    isLeft: isLeft,
    isRight: isRight,
    fromLeft: fromLeft,
    fromRight: fromRight,
    note: note,
    "note'": note$prime,
    hush: hush,
    functorEither: functorEither,
    functorWithIndexEither: functorWithIndexEither,
    invariantEither: invariantEither,
    bifunctorEither: bifunctorEither,
    applyEither: applyEither,
    applicativeEither: applicativeEither,
    altEither: altEither,
    bindEither: bindEither,
    monadEither: monadEither,
    extendEither: extendEither,
    showEither: showEither,
    eqEither: eqEither,
    eq1Either: eq1Either,
    ordEither: ordEither,
    ord1Either: ord1Either,
    boundedEither: boundedEither,
    foldableEither: foldableEither,
    foldableWithIndexEither: foldableWithIndexEither,
    bifoldableEither: bifoldableEither,
    traversableEither: traversableEither,
    traversableWithIndexEither: traversableWithIndexEither,
    bitraversableEither: bitraversableEither,
    semigroupEither: semigroupEither
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Extend/index.js":"7m0n7","../Control.Monad/index.js":"4SDam","../Data.Bifoldable/index.js":"4OFNy","../Data.Bifunctor/index.js":"4Uonh","../Data.Bitraversable/index.js":"5R51a","../Data.Bounded/index.js":"4LlpW","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Invariant/index.js":"1Revu","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Unit/index.js":"64zbv"}],"32R8a":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var monadEffect = new Control_Monad.Monad(function () {
    return applicativeEffect;
}, function () {
    return bindEffect;
});
var bindEffect = new Control_Bind.Bind(function () {
    return applyEffect;
}, $foreign.bindE);
var applyEffect = new Control_Apply.Apply(function () {
    return functorEffect;
}, Control_Monad.ap(monadEffect));
var applicativeEffect = new Control_Applicative.Applicative(function () {
    return applyEffect;
}, $foreign.pureE);
var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
var semigroupEffect = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
};
var monoidEffect = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEffect(dictMonoid.Semigroup0());
    }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
};
module.exports = {
    functorEffect: functorEffect,
    applyEffect: applyEffect,
    applicativeEffect: applicativeEffect,
    bindEffect: bindEffect,
    monadEffect: monadEffect,
    semigroupEffect: semigroupEffect,
    monoidEffect: monoidEffect,
    untilE: $foreign.untilE,
    whileE: $foreign.whileE,
    forE: $foreign.forE,
    foreachE: $foreign.foreachE
};

},{"./foreign.js":"4OEIw","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP"}],"4OEIw":[function(require,module,exports) {
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

},{}],"neabt":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var $$try = function (action) {
    return $foreign.catchException((function () {
        var $0 = Control_Applicative.pure(Effect.applicativeEffect);
        return function ($1) {
            return $0(Data_Either.Left.create($1));
        };
    })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};
var $$throw = function ($2) {
    return $foreign.throwException($foreign.error($2));
};
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack,
    "throw": $$throw,
    "try": $$try,
    showError: showError,
    error: $foreign.error,
    message: $foreign.message,
    name: $foreign.name,
    throwException: $foreign.throwException,
    catchException: $foreign.catchException
};

},{"./foreign.js":"7mc1k","../Control.Applicative/index.js":"1ufUD","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Show/index.js":"6nX0c","../Effect/index.js":"32R8a"}],"7mc1k":[function(require,module,exports) {
"use strict";

exports.showErrorImpl = function (err) {
  return err.stack || err.toString();
};

exports.error = function (msg) {
  return new Error(msg);
};

exports.message = function (e) {
  return e.message;
};

exports.name = function (e) {
  return e.name || "Error";
};

exports.stackImpl = function (just) {
  return function (nothing) {
    return function (e) {
      return e.stack ? just(e.stack) : nothing;
    };
  };
};

exports.throwException = function (e) {
  return function () {
    throw e;
  };
};

exports.catchException = function (c) {
  return function (t) {
    return function () {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c(e)();
        } else {
          return c(new Error(e.toString()))();
        }
      }
    };
  };
};

},{}],"1JlzL":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Loop = (function () {
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    return Loop;
})();
var Done = (function () {
    function Done(value0) {
        this.value0 = value0;
    };
    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();
var MonadRec = function (Monad0, tailRecM) {
    this.Monad0 = Monad0;
    this.tailRecM = tailRecM;
};
var tailRecM = function (dict) {
    return dict.tailRecM;
};
var tailRecM2 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return tailRecM(dictMonadRec)(function (o) {
                    return f(o.a)(o.b);
                })({
                    a: a,
                    b: b
                });
            };
        };
    };
};
var tailRecM3 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return tailRecM(dictMonadRec)(function (o) {
                        return f(o.a)(o.b)(o.c);
                    })({
                        a: a,
                        b: b,
                        c: c
                    });
                };
            };
        };
    };
};
var untilJust = function (dictMonadRec) {
    return function (m) {
        return tailRecM(dictMonadRec)(function (v) {
            return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(m)(function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return new Loop(Data_Unit.unit);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new Done(v1.value0);
                };
                throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [ v1.constructor.name ]);
            });
        })(Data_Unit.unit);
    };
};
var whileJust = function (dictMonoid) {
    return function (dictMonadRec) {
        return function (m) {
            return tailRecM(dictMonadRec)(function (v) {
                return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(m)(function (v1) {
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return new Done(v);
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [ v1.constructor.name ]);
                });
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var tailRec = function (f) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Loop) {
                $copy_v = f(v.value0);
                return;
            };
            if (v instanceof Done) {
                $tco_done = true;
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($58) {
        return go(f($58));
    };
};
var monadRecMaybe = new MonadRec(function () {
    return Data_Maybe.monadMaybe;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return new Done(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                return new Done(new Data_Maybe.Just(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecIdentity = new MonadRec(function () {
    return Data_Identity.monadIdentity;
}, function (f) {
    var runIdentity = function (v) {
        return v;
    };
    var $59 = tailRec(function ($61) {
        return runIdentity(f($61));
    });
    return function ($60) {
        return Data_Identity.Identity($59($60));
    };
});
var monadRecFunction = new MonadRec(function () {
    return Control_Monad.monadFn;
}, function (f) {
    return function (a0) {
        return function (e) {
            return tailRec(function (a) {
                return f(a)(e);
            })(a0);
        };
    };
});
var monadRecEither = new MonadRec(function () {
    return Data_Either.monadEither;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Either.Left) {
                return new Done(new Data_Either.Left(v.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                return new Done(new Data_Either.Right(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecEffect = new MonadRec(function () {
    return Effect.monadEffect;
}, function (f) {
    return function (a) {
        var fromDone = function (v) {
            if (v instanceof Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
        };
        return function __do() {
            var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
            (function () {
                while (!(function __do() {
                    var v = Effect_Ref.read(r)();
                    if (v instanceof Loop) {
                        var e = f(v.value0)();
                        Effect_Ref.write(e)(r)();
                        return false;
                    };
                    if (v instanceof Done) {
                        return true;
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                })()) {

                };
                return {};
            })();
            return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
        };
    };
});
var functorStep = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Loop) {
            return new Loop(m.value0);
        };
        if (m instanceof Done) {
            return new Done(f(m.value0));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [ m.constructor.name ]);
    };
});
var forever = function (dictMonadRec) {
    return function (ma) {
        return tailRecM(dictMonadRec)(function (u) {
            return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
        })(Data_Unit.unit);
    };
};
var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Loop) {
                return new Loop(v(v2.value0));
            };
            if (v2 instanceof Done) {
                return new Done(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
module.exports = {
    Loop: Loop,
    Done: Done,
    MonadRec: MonadRec,
    tailRec: tailRec,
    tailRecM: tailRecM,
    tailRecM2: tailRecM2,
    tailRecM3: tailRecM3,
    forever: forever,
    whileJust: whileJust,
    untilJust: untilJust,
    functorStep: functorStep,
    bifunctorStep: bifunctorStep,
    monadRecIdentity: monadRecIdentity,
    monadRecEffect: monadRecEffect,
    monadRecFunction: monadRecFunction,
    monadRecEither: monadRecEither,
    monadRecMaybe: monadRecMaybe
};

},{"../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Identity/index.js":"29odg","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Ref/index.js":"3qwJS"}],"3qwJS":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var modify = function (f) {
    return $foreign["modify'"](function (s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var modify_ = function (f) {
    return function (s) {
        return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
    };
};
module.exports = {
    modify: modify,
    modify_: modify_,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"./foreign.js":"EkSNq","../Data.Functor/index.js":"5ZkNG","../Effect/index.js":"32R8a"}],"EkSNq":[function(require,module,exports) {
"use strict";

exports.new = function (val) {
  return function () {
    return { value: val };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (val) {
  return function (ref) {
    return function () {
      ref.value = val;
      return {};
    };
  };
};

},{}],"2HNTv":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var parTraverse_ = function (dictParallel) {
    return function (dictFoldable) {
        return function (f) {
            var $17 = Control_Parallel_Class.sequential(dictParallel);
            var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                var $20 = Control_Parallel_Class.parallel(dictParallel);
                return function ($21) {
                    return $20(f($21));
                };
            })());
            return function ($19) {
                return $17($18($19));
            };
        };
    };
};
var parTraverse = function (dictParallel) {
    return function (dictTraversable) {
        return function (f) {
            var $22 = Control_Parallel_Class.sequential(dictParallel);
            var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())((function () {
                var $25 = Control_Parallel_Class.parallel(dictParallel);
                return function ($26) {
                    return $25(f($26));
                };
            })());
            return function ($24) {
                return $22($23($24));
            };
        };
    };
};
var parSequence_ = function (dictParallel) {
    return function (dictFoldable) {
        return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var parSequence = function (dictParallel) {
    return function (dictTraversable) {
        return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var parOneOfMap = function (dictParallel) {
    return function (dictAlternative) {
        return function (dictFoldable) {
            return function (dictFunctor) {
                return function (f) {
                    var $27 = Control_Parallel_Class.sequential(dictParallel);
                    var $28 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())((function () {
                        var $30 = Control_Parallel_Class.parallel(dictParallel);
                        return function ($31) {
                            return $30(f($31));
                        };
                    })());
                    return function ($29) {
                        return $27($28($29));
                    };
                };
            };
        };
    };
};
var parOneOf = function (dictParallel) {
    return function (dictAlternative) {
        return function (dictFoldable) {
            return function (dictFunctor) {
                var $32 = Control_Parallel_Class.sequential(dictParallel);
                var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
                return function ($34) {
                    return $32($33($34));
                };
            };
        };
    };
};
var parApply = function (dictParallel) {
    return function (mf) {
        return function (ma) {
            return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
        };
    };
};
module.exports = {
    parApply: parApply,
    parTraverse: parTraverse,
    parTraverse_: parTraverse_,
    parSequence: parSequence,
    parSequence_: parSequence_,
    parOneOf: parOneOf,
    parOneOfMap: parOneOfMap
};

},{"../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Control.Parallel.Class/index.js":"65Cks","../Data.Foldable/index.js":"6ATDN","../Data.Traversable/index.js":"2NLLF"}],"65Cks":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var ParCont = function (x) {
    return x;
};
var Parallel = function (Applicative1, Monad0, parallel, sequential) {
    this.Applicative1 = Applicative1;
    this.Monad0 = Monad0;
    this.parallel = parallel;
    this.sequential = sequential;
};
var sequential = function (dict) {
    return dict.sequential;
};
var parallel = function (dict) {
    return dict.parallel;
};
var newtypeParCont = new Data_Newtype.Newtype(function (n) {
    return n;
}, ParCont);
var monadParWriterT = function (dictMonoid) {
    return function (dictParallel) {
        return new Parallel(function () {
            return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
        }, function () {
            return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
        }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
    };
};
var monadParReaderT = function (dictParallel) {
    return new Parallel(function () {
        return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
    }, function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
    }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
};
var monadParMaybeT = function (dictParallel) {
    return new Parallel(function () {
        return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
    }, function () {
        return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
    }, function (v) {
        return parallel(dictParallel)(v);
    }, function (v) {
        return sequential(dictParallel)(v);
    });
};
var monadParExceptT = function (dictParallel) {
    return new Parallel(function () {
        return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
    }, function () {
        return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
    }, function (v) {
        return parallel(dictParallel)(v);
    }, function (v) {
        return sequential(dictParallel)(v);
    });
};
var monadParParCont = function (dictMonadEffect) {
    return new Parallel(function () {
        return applicativeParCont(dictMonadEffect);
    }, function () {
        return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
    }, ParCont, function (v) {
        return v;
    });
};
var functorParCont = function (dictMonadEffect) {
    return new Data_Functor.Functor(function (f) {
        var $40 = parallel(monadParParCont(dictMonadEffect));
        var $41 = Data_Functor.map(Control_Monad_Cont_Trans.functorContT((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0()))(f);
        var $42 = sequential(monadParParCont(dictMonadEffect));
        return function ($43) {
            return $40($41($42($43)));
        };
    });
};
var applyParCont = function (dictMonadEffect) {
    return new Control_Apply.Apply(function () {
        return functorParCont(dictMonadEffect);
    }, function (v) {
        return function (v1) {
            return ParCont(function (k) {
                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (ra) {
                    return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (rb) {
                        return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(rb)))(function (mb) {
                                if (mb instanceof Data_Maybe.Nothing) {
                                    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(ra));
                                };
                                if (mb instanceof Data_Maybe.Just) {
                                    return k(a(mb.value0));
                                };
                                throw new Error("Failed pattern match at Control.Parallel.Class (line 71, column 7 - line 73, column 26): " + [ mb.constructor.name ]);
                            });
                        }))(function () {
                            return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(ra)))(function (ma) {
                                    if (ma instanceof Data_Maybe.Nothing) {
                                        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(rb));
                                    };
                                    if (ma instanceof Data_Maybe.Just) {
                                        return k(ma.value0(b));
                                    };
                                    throw new Error("Failed pattern match at Control.Parallel.Class (line 77, column 7 - line 79, column 26): " + [ ma.constructor.name ]);
                                });
                            });
                        });
                    });
                });
            });
        };
    });
};
var applicativeParCont = function (dictMonadEffect) {
    return new Control_Applicative.Applicative(function () {
        return applyParCont(dictMonadEffect);
    }, (function () {
        var $44 = parallel(monadParParCont(dictMonadEffect));
        var $45 = Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT((dictMonadEffect.Monad0()).Applicative0()));
        return function ($46) {
            return $44($45($46));
        };
    })());
};
var altParCont = function (dictMonadEffect) {
    return new Control_Alt.Alt(function () {
        return functorParCont(dictMonadEffect);
    }, function (v) {
        return function (v1) {
            return ParCont(function (k) {
                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (done) {
                    return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                        return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
                            if (b) {
                                return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                                return k(a);
                            });
                        });
                    }))(function () {
                        return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
                                if (b) {
                                    return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                                };
                                return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                                    return k(a);
                                });
                            });
                        });
                    });
                });
            });
        };
    });
};
var plusParCont = function (dictMonadEffect) {
    return new Control_Plus.Plus(function () {
        return altParCont(dictMonadEffect);
    }, ParCont(function (v) {
        return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
    }));
};
var alternativeParCont = function (dictMonadEffect) {
    return new Control_Alternative.Alternative(function () {
        return applicativeParCont(dictMonadEffect);
    }, function () {
        return plusParCont(dictMonadEffect);
    });
};
module.exports = {
    parallel: parallel,
    sequential: sequential,
    Parallel: Parallel,
    ParCont: ParCont,
    monadParExceptT: monadParExceptT,
    monadParReaderT: monadParReaderT,
    monadParWriterT: monadParWriterT,
    monadParMaybeT: monadParMaybeT,
    newtypeParCont: newtypeParCont,
    functorParCont: functorParCont,
    applyParCont: applyParCont,
    applicativeParCont: applicativeParCont,
    altParCont: altParCont,
    plusParCont: plusParCont,
    alternativeParCont: alternativeParCont,
    monadParParCont: monadParParCont
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad.Cont.Trans/index.js":"6JAjN","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Control.Monad.Maybe.Trans/index.js":"71d9O","../Control.Monad.Reader.Trans/index.js":"1T7Hb","../Control.Monad.Writer.Trans/index.js":"2nVMU","../Control.Plus/index.js":"2CmD1","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Compose/index.js":"6d3st","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Unit/index.js":"64zbv","../Effect.Class/index.js":"70nM9","../Effect.Ref/index.js":"3qwJS"}],"6JAjN":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ContT = function (x) {
    return x;
};
var withContT = function (f) {
    return function (v) {
        return function (k) {
            return v(f(k));
        };
    };
};
var runContT = function (v) {
    return function (k) {
        return v(k);
    };
};
var newtypeContT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ContT);
var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(k);
        };
    };
});
var mapContT = function (f) {
    return function (v) {
        return function (k) {
            return f(v(k));
        };
    };
};
var functorContT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (k) {
                return v(function (a) {
                    return k(f(a));
                });
            };
        };
    });
};
var applyContT = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorContT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (k) {
                return v(function (g) {
                    return v1(function (a) {
                        return k(g(a));
                    });
                });
            };
        };
    });
};
var bindContT = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyContT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (k$prime) {
                return v(function (a) {
                    var v1 = k(a);
                    return v1(k$prime);
                });
            };
        };
    });
};
var applicativeContT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyContT(dictApplicative.Apply0());
    }, function (a) {
        return function (k) {
            return k(a);
        };
    });
};
var monadContT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeContT(dictMonad.Applicative0());
    }, function () {
        return bindContT(dictMonad.Bind1());
    });
};
var monadAskContT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadContT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderContT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskContT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return function (v) {
            return function (k) {
                return Control_Bind.bind(((dictMonadReader.MonadAsk0()).Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (r) {
                    return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v((function () {
                        var $43 = Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](r));
                        return function ($44) {
                            return $43(k($44));
                        };
                    })()));
                });
            };
        };
    });
};
var monadContContT = function (dictMonad) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadContT(dictMonad);
    }, function (f) {
        return function (k) {
            var v = f(function (a) {
                return function (v1) {
                    return k(a);
                };
            });
            return v(k);
        };
    });
};
var monadEffectContT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadContT(dictMonadEffect.Monad0());
    }, (function () {
        var $45 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0());
        var $46 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($47) {
            return $45($46($47));
        };
    })());
};
var monadStateContT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadContT(dictMonadState.Monad0());
    }, (function () {
        var $48 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0());
        var $49 = Control_Monad_State_Class.state(dictMonadState);
        return function ($50) {
            return $48($49($50));
        };
    })());
};
module.exports = {
    ContT: ContT,
    runContT: runContT,
    mapContT: mapContT,
    withContT: withContT,
    newtypeContT: newtypeContT,
    monadContContT: monadContContT,
    functorContT: functorContT,
    applyContT: applyContT,
    applicativeContT: applicativeContT,
    bindContT: bindContT,
    monadContT: monadContT,
    monadTransContT: monadTransContT,
    monadEffectContT: monadEffectContT,
    monadAskContT: monadAskContT,
    monadReaderContT: monadReaderContT,
    monadStateContT: monadStateContT
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Control.Monad.Cont.Class/index.js":"6O1fp","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Effect.Class/index.js":"70nM9"}],"6O1fp":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MonadCont = function (Monad0, callCC) {
    this.Monad0 = Monad0;
    this.callCC = callCC;
};
var callCC = function (dict) {
    return dict.callCC;
};
module.exports = {
    MonadCont: MonadCont,
    callCC: callCC
};

},{}],"5b4iC":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var MonadAsk = function (Monad0, ask) {
    this.Monad0 = Monad0;
    this.ask = ask;
};
var MonadReader = function (MonadAsk0, local) {
    this.MonadAsk0 = MonadAsk0;
    this.local = local;
};
var monadAskFun = new MonadAsk(function () {
    return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
    return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
var local = function (dict) {
    return dict.local;
};
var ask = function (dict) {
    return dict.ask;
};
var asks = function (dictMonadAsk) {
    return function (f) {
        return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
    };
};
module.exports = {
    ask: ask,
    local: local,
    MonadAsk: MonadAsk,
    asks: asks,
    MonadReader: MonadReader,
    monadAskFun: monadAskFun,
    monadReaderFun: monadReaderFun
};

},{"../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Semigroupoid/index.js":"5fTaI","../Data.Functor/index.js":"5ZkNG"}],"1Hdn6":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MonadTrans = function (lift) {
    this.lift = lift;
};
var lift = function (dict) {
    return dict.lift;
};
module.exports = {
    lift: lift,
    MonadTrans: MonadTrans
};

},{}],"70nM9":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Effect = require("../Effect/index.js");
var MonadEffect = function (Monad0, liftEffect) {
    this.Monad0 = Monad0;
    this.liftEffect = liftEffect;
};
var monadEffectEffect = new MonadEffect(function () {
    return Effect.monadEffect;
}, Control_Category.identity(Control_Category.categoryFn));
var liftEffect = function (dict) {
    return dict.liftEffect;
};
module.exports = {
    liftEffect: liftEffect,
    MonadEffect: MonadEffect,
    monadEffectEffect: monadEffectEffect
};

},{"../Control.Category/index.js":"6QTyW","../Effect/index.js":"32R8a"}],"4X0Lb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ExceptT = function (x) {
    return x;
};
var withExceptT = function (dictFunctor) {
    return function (f) {
        return function (v) {
            var mapLeft = function (v1) {
                return function (v2) {
                    if (v2 instanceof Data_Either.Right) {
                        return new Data_Either.Right(v2.value0);
                    };
                    if (v2 instanceof Data_Either.Left) {
                        return new Data_Either.Left(v1(v2.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                };
            };
            return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
        };
    };
};
var runExceptT = function (v) {
    return v;
};
var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ExceptT);
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
        });
    };
});
var mapExceptT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorExceptT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
    });
};
var except = function (dictApplicative) {
    var $88 = Control_Applicative.pure(dictApplicative);
    return function ($89) {
        return ExceptT($88($89));
    };
};
var monadExceptT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeExceptT(dictMonad);
    }, function () {
        return bindExceptT(dictMonad);
    });
};
var bindExceptT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                return function ($91) {
                    return $90(Data_Either.Left.create($91));
                };
            })())(function (a) {
                var v1 = k(a);
                return v1;
            }));
        };
    });
};
var applyExceptT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadExceptT(dictMonad)));
};
var applicativeExceptT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyExceptT(dictMonad);
    }, (function () {
        var $92 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($93) {
            return ExceptT($92(Data_Either.Right.create($93)));
        };
    })());
};
var monadAskExceptT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadExceptT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderExceptT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskExceptT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContExceptT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadExceptT(dictMonadCont.Monad0());
    }, function (f) {
        return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
            var v = f(function (a) {
                return ExceptT(c(new Data_Either.Right(a)));
            });
            return v;
        }));
    });
};
var monadEffectExceptT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadExceptT(dictMonadEffect.Monad0());
    }, (function () {
        var $94 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
        var $95 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($96) {
            return $94($95($96));
        };
    })());
};
var monadRecExceptT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadExceptT(dictMonadRec.Monad0());
    }, function (f) {
        var $97 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
            var v = f(a);
            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v)(function (m$prime) {
                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                    if (m$prime instanceof Data_Either.Left) {
                        return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                    };
                    if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                        return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                    };
                    if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                        return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 74, column 14 - line 77, column 43): " + [ m$prime.constructor.name ]);
                })());
            });
        });
        return function ($98) {
            return ExceptT($97($98));
        };
    });
};
var monadStateExceptT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadExceptT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellExceptT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadExceptT(dictMonadTell.Monad0());
    }, (function () {
        var $99 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0());
        var $100 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($101) {
            return $99($100($101));
        };
    })());
};
var monadWriterExceptT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellExceptT(dictMonadWriter.MonadTell0());
    }, mapExceptT(function (m) {
        return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapExceptT(function (m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (a) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                if (a instanceof Data_Either.Left) {
                    return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
                };
                if (a instanceof Data_Either.Right) {
                    return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
                };
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 136, column 10 - line 138, column 45): " + [ a.constructor.name ]);
            })());
        }));
    }));
};
var monadThrowExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadExceptT(dictMonad);
    }, (function () {
        var $102 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($103) {
            return ExceptT($102(Data_Either.Left.create($103)));
        };
    })());
};
var monadErrorExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                var v1 = k(a);
                return v1;
            })((function () {
                var $104 = Control_Applicative.pure(dictMonad.Applicative0());
                return function ($105) {
                    return $104(Data_Either.Right.create($105));
                };
            })()));
        };
    });
};
var altExceptT = function (dictSemigroup) {
    return function (dictMonad) {
        return new Control_Alt.Alt(function () {
            return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
        }, function (v) {
            return function (v1) {
                return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                    if (rm instanceof Data_Either.Right) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                    };
                    if (rm instanceof Data_Either.Left) {
                        return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                            if (rn instanceof Data_Either.Right) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                            };
                            if (rn instanceof Data_Either.Left) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [ rn.constructor.name ]);
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [ rm.constructor.name ]);
                });
            };
        });
    };
};
var plusExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Plus.Plus(function () {
            return altExceptT(dictMonoid.Semigroup0())(dictMonad);
        }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
};
var alternativeExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Alternative.Alternative(function () {
            return applicativeExceptT(dictMonad);
        }, function () {
            return plusExceptT(dictMonoid)(dictMonad);
        });
    };
};
var monadZeroExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_MonadZero.MonadZero(function () {
            return alternativeExceptT(dictMonoid)(dictMonad);
        }, function () {
            return monadExceptT(dictMonad);
        });
    };
};
var monadPlusExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_MonadPlus.MonadPlus(function () {
            return monadZeroExceptT(dictMonoid)(dictMonad);
        });
    };
};
module.exports = {
    ExceptT: ExceptT,
    runExceptT: runExceptT,
    withExceptT: withExceptT,
    mapExceptT: mapExceptT,
    except: except,
    newtypeExceptT: newtypeExceptT,
    functorExceptT: functorExceptT,
    applyExceptT: applyExceptT,
    applicativeExceptT: applicativeExceptT,
    bindExceptT: bindExceptT,
    monadExceptT: monadExceptT,
    monadRecExceptT: monadRecExceptT,
    altExceptT: altExceptT,
    plusExceptT: plusExceptT,
    alternativeExceptT: alternativeExceptT,
    monadPlusExceptT: monadPlusExceptT,
    monadZeroExceptT: monadZeroExceptT,
    monadTransExceptT: monadTransExceptT,
    monadEffectExceptT: monadEffectExceptT,
    monadContExceptT: monadContExceptT,
    monadThrowExceptT: monadThrowExceptT,
    monadErrorExceptT: monadErrorExceptT,
    monadAskExceptT: monadAskExceptT,
    monadReaderExceptT: monadReaderExceptT,
    monadStateExceptT: monadStateExceptT,
    monadTellExceptT: monadTellExceptT,
    monadWriterExceptT: monadWriterExceptT
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Monad.Cont.Class/index.js":"6O1fp","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Tuple/index.js":"43VFo","../Effect.Class/index.js":"70nM9"}],"1wcNo":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var MonadTell = function (Monad0, tell) {
    this.Monad0 = Monad0;
    this.tell = tell;
};
var MonadWriter = function (MonadTell0, listen, pass) {
    this.MonadTell0 = MonadTell0;
    this.listen = listen;
    this.pass = pass;
};
var tell = function (dict) {
    return dict.tell;
};
var pass = function (dict) {
    return dict.pass;
};
var listen = function (dict) {
    return dict.listen;
};
var listens = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
        };
    };
};
var censor = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (a) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(a, f));
            }));
        };
    };
};
module.exports = {
    listen: listen,
    pass: pass,
    tell: tell,
    MonadTell: MonadTell,
    MonadWriter: MonadWriter,
    listens: listens,
    censor: censor
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Data.Tuple/index.js":"43VFo"}],"2VInw":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var MonadPlus = function (MonadZero0) {
    this.MonadZero0 = MonadZero0;
};
var monadPlusArray = new MonadPlus(function () {
    return Control_MonadZero.monadZeroArray;
});
module.exports = {
    MonadPlus: MonadPlus,
    monadPlusArray: monadPlusArray
};

},{"../Control.MonadZero/index.js":"5ZMCc"}],"71d9O":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var MaybeT = function (x) {
    return x;
};
var runMaybeT = function (v) {
    return v;
};
var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
    return n;
}, MaybeT);
var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    var $71 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
    return function ($72) {
        return MaybeT($71($72));
    };
});
var mapMaybeT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorMaybeT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
        };
    });
};
var monadMaybeT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeMaybeT(dictMonad);
    }, function () {
        return bindMaybeT(dictMonad);
    });
};
var bindMaybeT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyMaybeT(dictMonad);
    }, function (v) {
        return function (f) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    var v2 = f(v1.value0);
                    return v2;
                };
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [ v1.constructor.name ]);
            });
        };
    });
};
var applyMaybeT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadMaybeT(dictMonad)));
};
var applicativeMaybeT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyMaybeT(dictMonad);
    }, (function () {
        var $73 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($74) {
            return MaybeT($73(Data_Maybe.Just.create($74)));
        };
    })());
};
var monadAskMaybeT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadMaybeT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderMaybeT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskMaybeT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContMaybeT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadMaybeT(dictMonadCont.Monad0());
    }, function (f) {
        return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
            var v = f(function (a) {
                return MaybeT(c(new Data_Maybe.Just(a)));
            });
            return v;
        }));
    });
};
var monadEffectMaybe = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadMaybeT(dictMonadEffect.Monad0());
    }, (function () {
        var $75 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0());
        var $76 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($77) {
            return $75($76($77));
        };
    })());
};
var monadRecMaybeT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadMaybeT(dictMonadRec.Monad0());
    }, function (f) {
        var $78 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
            var v = f(a);
            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v)(function (m$prime) {
                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                    if (m$prime instanceof Data_Maybe.Nothing) {
                        return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                    };
                    if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                        return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                    };
                    if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                        return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 84, column 16 - line 87, column 43): " + [ m$prime.constructor.name ]);
                })());
            });
        });
        return function ($79) {
            return MaybeT($78($79));
        };
    });
};
var monadStateMaybeT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadMaybeT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellMaybeT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadMaybeT(dictMonadTell.Monad0());
    }, (function () {
        var $80 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0());
        var $81 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($82) {
            return $80($81($82));
        };
    })());
};
var monadWriterMaybeT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellMaybeT(dictMonadWriter.MonadTell0());
    }, mapMaybeT(function (m) {
        return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapMaybeT(function (m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (a) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                if (a instanceof Data_Maybe.Nothing) {
                    return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
                };
                if (a instanceof Data_Maybe.Just) {
                    return new Data_Tuple.Tuple(new Data_Maybe.Just(a.value0.value0), a.value0.value1);
                };
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 121, column 10 - line 123, column 43): " + [ a.constructor.name ]);
            })());
        }));
    }));
};
var monadThrowMaybeT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadMaybeT(dictMonadThrow.Monad0());
    }, function (e) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorMaybeT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowMaybeT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                var v1 = h(a);
                return v1;
            }));
        };
    });
};
var altMaybeT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (m) {
                if (m instanceof Data_Maybe.Nothing) {
                    return v1;
                };
                return Control_Applicative.pure(dictMonad.Applicative0())(m);
            });
        };
    });
};
var plusMaybeT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altMaybeT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
};
var alternativeMaybeT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeMaybeT(dictMonad);
    }, function () {
        return plusMaybeT(dictMonad);
    });
};
var monadZeroMaybeT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeMaybeT(dictMonad);
    }, function () {
        return monadMaybeT(dictMonad);
    });
};
var monadPlusMaybeT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroMaybeT(dictMonad);
    });
};
module.exports = {
    MaybeT: MaybeT,
    runMaybeT: runMaybeT,
    mapMaybeT: mapMaybeT,
    newtypeMaybeT: newtypeMaybeT,
    functorMaybeT: functorMaybeT,
    applyMaybeT: applyMaybeT,
    applicativeMaybeT: applicativeMaybeT,
    bindMaybeT: bindMaybeT,
    monadMaybeT: monadMaybeT,
    monadTransMaybeT: monadTransMaybeT,
    altMaybeT: altMaybeT,
    plusMaybeT: plusMaybeT,
    alternativeMaybeT: alternativeMaybeT,
    monadPlusMaybeT: monadPlusMaybeT,
    monadZeroMaybeT: monadZeroMaybeT,
    monadRecMaybeT: monadRecMaybeT,
    monadEffectMaybe: monadEffectMaybe,
    monadContMaybeT: monadContMaybeT,
    monadThrowMaybeT: monadThrowMaybeT,
    monadErrorMaybeT: monadErrorMaybeT,
    monadAskMaybeT: monadAskMaybeT,
    monadReaderMaybeT: monadReaderMaybeT,
    monadStateMaybeT: monadStateMaybeT,
    monadTellMaybeT: monadTellMaybeT,
    monadWriterMaybeT: monadWriterMaybeT
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Monad.Cont.Class/index.js":"6O1fp","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Tuple/index.js":"43VFo","../Effect.Class/index.js":"70nM9"}],"1T7Hb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ReaderT = function (x) {
    return x;
};
var withReaderT = function (f) {
    return function (v) {
        return function ($66) {
            return v(f($66));
        };
    };
};
var runReaderT = function (v) {
    return v;
};
var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ReaderT);
var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($67) {
        return ReaderT(Data_Function["const"]($67));
    };
});
var mapReaderT = function (f) {
    return function (v) {
        return function ($68) {
            return f(v($68));
        };
    };
};
var functorReaderT = function (dictFunctor) {
    return new Data_Functor.Functor((function () {
        var $69 = Data_Functor.map(dictFunctor);
        return function ($70) {
            return mapReaderT($69($70));
        };
    })());
};
var distributiveReaderT = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorReaderT(dictDistributive.Functor0());
    }, function (dictFunctor) {
        return function (f) {
            var $71 = Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor);
            var $72 = Data_Functor.map(dictFunctor)(f);
            return function ($73) {
                return $71($72($73));
            };
        };
    }, function (dictFunctor) {
        return function (a) {
            return function (e) {
                return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                    return r(e);
                })(a);
            };
        };
    });
};
var applyReaderT = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorReaderT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Apply.apply(dictApply)(v(r))(v1(r));
            };
        };
    });
};
var bindReaderT = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyReaderT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (r) {
                return Control_Bind.bind(dictBind)(v(r))(function (a) {
                    var v1 = k(a);
                    return v1(r);
                });
            };
        };
    });
};
var semigroupReaderT = function (dictApply) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeReaderT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyReaderT(dictApplicative.Apply0());
    }, (function () {
        var $74 = Control_Applicative.pure(dictApplicative);
        return function ($75) {
            return ReaderT(Data_Function["const"]($74($75)));
        };
    })());
};
var monadReaderT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeReaderT(dictMonad.Applicative0());
    }, function () {
        return bindReaderT(dictMonad.Bind1());
    });
};
var monadAskReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadReaderT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0()));
};
var monadReaderReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskReaderT(dictMonad);
    }, withReaderT);
};
var monadContReaderT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadReaderT(dictMonadCont.Monad0());
    }, function (f) {
        return function (r) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function ($76) {
                    return ReaderT(Data_Function["const"](c($76)));
                });
                return v(r);
            });
        };
    });
};
var monadEffectReader = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadReaderT(dictMonadEffect.Monad0());
    }, (function () {
        var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
        var $78 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($79) {
            return $77($78($79));
        };
    })());
};
var monadRecReaderT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadReaderT(dictMonadRec.Monad0());
    }, function (k) {
        return function (a) {
            var k$prime = function (r) {
                return function (a$prime) {
                    var v = k(a$prime);
                    return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                };
            };
            return function (r) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
            };
        };
    });
};
var monadStateReaderT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadReaderT(dictMonadState.Monad0());
    }, (function () {
        var $80 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
        var $81 = Control_Monad_State_Class.state(dictMonadState);
        return function ($82) {
            return $80($81($82));
        };
    })());
};
var monadTellReaderT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadReaderT(dictMonadTell.Monad0());
    }, (function () {
        var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0());
        var $84 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($85) {
            return $83($84($85));
        };
    })());
};
var monadWriterReaderT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellReaderT(dictMonadWriter.MonadTell0());
    }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
};
var monadThrowReaderT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadReaderT(dictMonadThrow.Monad0());
    }, (function () {
        var $86 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
        var $87 = Control_Monad_Error_Class.throwError(dictMonadThrow);
        return function ($88) {
            return $86($87($88));
        };
    })());
};
var monadErrorReaderT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowReaderT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return function (r) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                    var v1 = h(e);
                    return v1(r);
                });
            };
        };
    });
};
var monoidReaderT = function (dictApplicative) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
    };
};
var altReaderT = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorReaderT(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Alt.alt(dictAlt)(v(r))(v1(r));
            };
        };
    });
};
var plusReaderT = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altReaderT(dictPlus.Alt0());
    }, Data_Function["const"](Control_Plus.empty(dictPlus)));
};
var alternativeReaderT = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeReaderT(dictAlternative.Applicative0());
    }, function () {
        return plusReaderT(dictAlternative.Plus1());
    });
};
var monadZeroReaderT = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeReaderT(dictMonadZero.Alternative1());
    }, function () {
        return monadReaderT(dictMonadZero.Monad0());
    });
};
var monadPlusReaderT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroReaderT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    ReaderT: ReaderT,
    runReaderT: runReaderT,
    withReaderT: withReaderT,
    mapReaderT: mapReaderT,
    newtypeReaderT: newtypeReaderT,
    functorReaderT: functorReaderT,
    applyReaderT: applyReaderT,
    applicativeReaderT: applicativeReaderT,
    altReaderT: altReaderT,
    plusReaderT: plusReaderT,
    alternativeReaderT: alternativeReaderT,
    bindReaderT: bindReaderT,
    monadReaderT: monadReaderT,
    monadZeroReaderT: monadZeroReaderT,
    semigroupReaderT: semigroupReaderT,
    monoidReaderT: monoidReaderT,
    monadPlusReaderT: monadPlusReaderT,
    monadTransReaderT: monadTransReaderT,
    monadEffectReader: monadEffectReader,
    monadContReaderT: monadContReaderT,
    monadThrowReaderT: monadThrowReaderT,
    monadErrorReaderT: monadErrorReaderT,
    monadAskReaderT: monadAskReaderT,
    monadReaderReaderT: monadReaderReaderT,
    monadStateReaderT: monadStateReaderT,
    monadTellReaderT: monadTellReaderT,
    monadWriterReaderT: monadWriterReaderT,
    distributiveReaderT: distributiveReaderT,
    monadRecReaderT: monadRecReaderT
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Control.Monad.Cont.Class/index.js":"6O1fp","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Distributive/index.js":"57mKo","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Effect.Class/index.js":"70nM9"}],"2nVMU":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var WriterT = function (x) {
    return x;
};
var runWriterT = function (v) {
    return v;
};
var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
    return n;
}, WriterT);
var monadTransWriterT = function (dictMonoid) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
            });
        };
    });
};
var mapWriterT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorWriterT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
            return new Data_Tuple.Tuple(f(v.value0), v.value1);
        }));
    });
};
var execWriterT = function (dictFunctor) {
    return function (v) {
        return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
    };
};
var applyWriterT = function (dictSemigroup) {
    return function (dictApply) {
        return new Control_Apply.Apply(function () {
            return functorWriterT(dictApply.Functor0());
        }, function (v) {
            return function (v1) {
                var k = function (v3) {
                    return function (v4) {
                        return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                    };
                };
                return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
            };
        });
    };
};
var bindWriterT = function (dictSemigroup) {
    return function (dictBind) {
        return new Control_Bind.Bind(function () {
            return applyWriterT(dictSemigroup)(dictBind.Apply0());
        }, function (v) {
            return function (k) {
                return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                    var v2 = k(v1.value0);
                    return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                        return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                    })(v2);
                }));
            };
        });
    };
};
var applicativeWriterT = function (dictMonoid) {
    return function (dictApplicative) {
        return new Control_Applicative.Applicative(function () {
            return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
        }, function (a) {
            return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
        });
    };
};
var monadWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad.Monad(function () {
            return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
        }, function () {
            return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
        });
    };
};
var monadAskWriterT = function (dictMonoid) {
    return function (dictMonadAsk) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
        }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
    };
};
var monadReaderWriterT = function (dictMonoid) {
    return function (dictMonadReader) {
        return new Control_Monad_Reader_Class.MonadReader(function () {
            return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
        }, function (f) {
            return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
        });
    };
};
var monadContWriterT = function (dictMonoid) {
    return function (dictMonadCont) {
        return new Control_Monad_Cont_Class.MonadCont(function () {
            return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
        }, function (f) {
            return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function (a) {
                    return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                });
                return v;
            }));
        });
    };
};
var monadEffectWriter = function (dictMonoid) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
        }, (function () {
            var $121 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
            var $122 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($123) {
                return $121($122($123));
            };
        })());
    };
};
var monadRecWriterT = function (dictMonoid) {
    return function (dictMonadRec) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
        }, function (f) {
            return function (a) {
                var f$prime = function (v) {
                    var v1 = f(v.value0);
                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1)(function (v2) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                            if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                                return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                            };
                            if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                                return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 83, column 16 - line 85, column 47): " + [ v2.value0.constructor.name ]);
                        })());
                    });
                };
                return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
            };
        });
    };
};
var monadStateWriterT = function (dictMonoid) {
    return function (dictMonadState) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadWriterT(dictMonoid)(dictMonadState.Monad0());
        }, function (f) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
        });
    };
};
var monadTellWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadWriterT(dictMonoid)(dictMonad);
        }, (function () {
            var $124 = Control_Applicative.pure(dictMonad.Applicative0());
            var $125 = Data_Tuple.Tuple.create(Data_Unit.unit);
            return function ($126) {
                return WriterT($124($125($126)));
            };
        })());
    };
};
var monadWriterWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadTellWriterT(dictMonoid)(dictMonad);
        }, function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
            });
        }, function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
            });
        });
    };
};
var monadThrowWriterT = function (dictMonoid) {
    return function (dictMonadThrow) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
        }, function (e) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        });
    };
};
var monadErrorWriterT = function (dictMonoid) {
    return function (dictMonadError) {
        return new Control_Monad_Error_Class.MonadError(function () {
            return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
        }, function (v) {
            return function (h) {
                return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                    var v1 = h(e);
                    return v1;
                }));
            };
        });
    };
};
var altWriterT = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorWriterT(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
        };
    });
};
var plusWriterT = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altWriterT(dictPlus.Alt0());
    }, Control_Plus.empty(dictPlus));
};
var alternativeWriterT = function (dictMonoid) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
        }, function () {
            return plusWriterT(dictAlternative.Plus1());
        });
    };
};
var monadZeroWriterT = function (dictMonoid) {
    return function (dictMonadZero) {
        return new Control_MonadZero.MonadZero(function () {
            return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
        }, function () {
            return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
        });
    };
};
var monadPlusWriterT = function (dictMonoid) {
    return function (dictMonadPlus) {
        return new Control_MonadPlus.MonadPlus(function () {
            return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
        });
    };
};
module.exports = {
    WriterT: WriterT,
    runWriterT: runWriterT,
    execWriterT: execWriterT,
    mapWriterT: mapWriterT,
    newtypeWriterT: newtypeWriterT,
    functorWriterT: functorWriterT,
    applyWriterT: applyWriterT,
    applicativeWriterT: applicativeWriterT,
    altWriterT: altWriterT,
    plusWriterT: plusWriterT,
    alternativeWriterT: alternativeWriterT,
    bindWriterT: bindWriterT,
    monadWriterT: monadWriterT,
    monadRecWriterT: monadRecWriterT,
    monadZeroWriterT: monadZeroWriterT,
    monadPlusWriterT: monadPlusWriterT,
    monadTransWriterT: monadTransWriterT,
    monadEffectWriter: monadEffectWriter,
    monadContWriterT: monadContWriterT,
    monadThrowWriterT: monadThrowWriterT,
    monadErrorWriterT: monadErrorWriterT,
    monadAskWriterT: monadAskWriterT,
    monadReaderWriterT: monadReaderWriterT,
    monadStateWriterT: monadStateWriterT,
    monadTellWriterT: monadTellWriterT,
    monadWriterWriterT: monadWriterWriterT
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Control.Monad.Cont.Class/index.js":"6O1fp","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect.Class/index.js":"70nM9"}],"6d3st":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Compose = function (x) {
    return x;
};
var showCompose = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var newtypeCompose = new Data_Newtype.Newtype(function (n) {
    return n;
}, Compose);
var functorCompose = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
            };
        });
    };
};
var functorWithIndexCompose = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return new Data_FunctorWithIndex.FunctorWithIndex(function () {
            return functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
        }, function (f) {
            return function (v) {
                return Compose(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)((function () {
                    var $100 = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1);
                    var $101 = Data_Tuple.curry(f);
                    return function ($102) {
                        return $100($101($102));
                    };
                })())(v));
            };
        });
    };
};
var foldableCompose = function (dictFoldable) {
    return function (dictFoldable1) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f))(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_Foldable.foldl(dictFoldable)(Data_Foldable.foldl(dictFoldable1)(f))(i)(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(Data_Foldable.foldr(dictFoldable1)(f)))(i)(v);
                };
            };
        });
    };
};
var foldableWithIndexCompose = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
        }, function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)((function () {
                        var $103 = Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
                        var $104 = Data_Tuple.curry(f);
                        return function ($105) {
                            return $103($104($105));
                        };
                    })())(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)((function () {
                        var $106 = Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1);
                        var $107 = Data_Tuple.curry(f);
                        return function ($108) {
                            return $106($107($108));
                        };
                    })())(i)(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function (a) {
                        return Data_Function.flip(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                    })(i)(v);
                };
            };
        });
    };
};
var traversableCompose = function (dictTraversable) {
    return function (dictTraversable1) {
        return new Data_Traversable.Traversable(function () {
            return foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
        }, function () {
            return functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
        }, function (dictApplicative) {
            return Data_Traversable.traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f))(v));
                };
            };
        });
    };
};
var traversableWithIndexCompose = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return new Data_TraversableWithIndex.TraversableWithIndex(function () {
            return foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
        }, function () {
            return functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
        }, function () {
            return traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)((function () {
                        var $109 = Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
                        var $110 = Data_Tuple.curry(f);
                        return function ($111) {
                            return $109($110($111));
                        };
                    })())(v));
                };
            };
        });
    };
};
var eqCompose = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (v) {
                return function (v1) {
                    return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
            });
        };
    };
};
var ordCompose = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }, function (v) {
                return function (v1) {
                    return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
            });
        };
    };
};
var eq1Compose = function (dictEq1) {
    return function (dictEq11) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
        });
    };
};
var ord1Compose = function (dictOrd1) {
    return function (dictOrd11) {
        return new Data_Ord.Ord1(function () {
            return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
        }, function (dictOrd) {
            return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
        });
    };
};
var bihoistCompose = function (dictFunctor) {
    return function (natF) {
        return function (natG) {
            return function (v) {
                return natF(Data_Functor.map(dictFunctor)(natG)(v));
            };
        };
    };
};
var applyCompose = function (dictApply) {
    return function (dictApply1) {
        return new Control_Apply.Apply(function () {
            return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
        }, function (v) {
            return function (v1) {
                return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
            };
        });
    };
};
var applicativeCompose = function (dictApplicative) {
    return function (dictApplicative1) {
        return new Control_Applicative.Applicative(function () {
            return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
        }, (function () {
            var $112 = Control_Applicative.pure(dictApplicative);
            var $113 = Control_Applicative.pure(dictApplicative1);
            return function ($114) {
                return Compose($112($113($114)));
            };
        })());
    };
};
var altCompose = function (dictAlt) {
    return function (dictFunctor) {
        return new Control_Alt.Alt(function () {
            return functorCompose(dictAlt.Functor0())(dictFunctor);
        }, function (v) {
            return function (v1) {
                return Compose(Control_Alt.alt(dictAlt)(v)(v1));
            };
        });
    };
};
var plusCompose = function (dictPlus) {
    return function (dictFunctor) {
        return new Control_Plus.Plus(function () {
            return altCompose(dictPlus.Alt0())(dictFunctor);
        }, Control_Plus.empty(dictPlus));
    };
};
var alternativeCompose = function (dictAlternative) {
    return function (dictApplicative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
        }, function () {
            return plusCompose(dictAlternative.Plus1())((dictApplicative.Apply0()).Functor0());
        });
    };
};
module.exports = {
    Compose: Compose,
    bihoistCompose: bihoistCompose,
    newtypeCompose: newtypeCompose,
    eqCompose: eqCompose,
    eq1Compose: eq1Compose,
    ordCompose: ordCompose,
    ord1Compose: ord1Compose,
    showCompose: showCompose,
    functorCompose: functorCompose,
    functorWithIndexCompose: functorWithIndexCompose,
    applyCompose: applyCompose,
    applicativeCompose: applicativeCompose,
    foldableCompose: foldableCompose,
    foldableWithIndexCompose: foldableWithIndexCompose,
    traversableCompose: traversableCompose,
    traversableWithIndexCompose: traversableWithIndexCompose,
    altCompose: altCompose,
    plusCompose: plusCompose,
    alternativeCompose: alternativeCompose
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Control.Plus/index.js":"2CmD1","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Functor.App/index.js":"1pMcd","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo"}],"1pMcd":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var App = function (x) {
    return x;
};
var traversableWithIndexApp = function (dictTraversableWithIndex) {
    return dictTraversableWithIndex;
};
var traversableApp = function (dictTraversable) {
    return dictTraversable;
};
var showApp = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(App " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupApp = function (dictApply) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
            };
        });
    };
};
var plusApp = function (dictPlus) {
    return dictPlus;
};
var newtypeApp = new Data_Newtype.Newtype(function (n) {
    return n;
}, App);
var monoidApp = function (dictApplicative) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
    };
};
var monadZeroApp = function (dictMonadZero) {
    return dictMonadZero;
};
var monadPlusApp = function (dictMonadPlus) {
    return dictMonadPlus;
};
var monadApp = function (dictMonad) {
    return dictMonad;
};
var lazyApp = function (dictLazy) {
    return dictLazy;
};
var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
var hoistApp = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorWithIndexApp = function (dictFunctorWithIndex) {
    return dictFunctorWithIndex;
};
var functorApp = function (dictFunctor) {
    return dictFunctor;
};
var foldableWithIndexApp = function (dictFoldableWithIndex) {
    return dictFoldableWithIndex;
};
var foldableApp = function (dictFoldable) {
    return dictFoldable;
};
var extendApp = function (dictExtend) {
    return dictExtend;
};
var eqApp = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
            };
        });
    };
};
var ordApp = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
            };
        });
    };
};
var eq1App = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqApp(dictEq1)(dictEq));
    });
};
var ord1App = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1App(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
    });
};
var comonadApp = function (dictComonad) {
    return dictComonad;
};
var bindApp = function (dictBind) {
    return dictBind;
};
var applyApp = function (dictApply) {
    return dictApply;
};
var applicativeApp = function (dictApplicative) {
    return dictApplicative;
};
var alternativeApp = function (dictAlternative) {
    return dictAlternative;
};
var altApp = function (dictAlt) {
    return dictAlt;
};
module.exports = {
    App: App,
    hoistApp: hoistApp,
    hoistLiftApp: hoistLiftApp,
    hoistLowerApp: hoistLowerApp,
    newtypeApp: newtypeApp,
    eqApp: eqApp,
    eq1App: eq1App,
    ordApp: ordApp,
    ord1App: ord1App,
    showApp: showApp,
    semigroupApp: semigroupApp,
    monoidApp: monoidApp,
    functorApp: functorApp,
    functorWithIndexApp: functorWithIndexApp,
    applyApp: applyApp,
    applicativeApp: applicativeApp,
    bindApp: bindApp,
    monadApp: monadApp,
    altApp: altApp,
    plusApp: plusApp,
    alternativeApp: alternativeApp,
    monadZeroApp: monadZeroApp,
    monadPlusApp: monadPlusApp,
    lazyApp: lazyApp,
    foldableApp: foldableApp,
    traversableApp: traversableApp,
    foldableWithIndexApp: foldableWithIndexApp,
    traversableWithIndexApp: traversableWithIndexApp,
    extendApp: extendApp,
    comonadApp: comonadApp
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Data.Eq/index.js":"2htS8","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Unsafe.Coerce/index.js":"3fQke"}],"3fQke":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeCoerce: $foreign.unsafeCoerce
};

},{"./foreign.js":"JOn1h"}],"JOn1h":[function(require,module,exports) {
"use strict";

// module Unsafe.Coerce

exports.unsafeCoerce = function (x) {
  return x;
};

},{}],"3YDNn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafePerformEffect: $foreign.unsafePerformEffect
};

},{"./foreign.js":"12Rc3"}],"12Rc3":[function(require,module,exports) {
"use strict";

exports.unsafePerformEffect = function (f) {
  return f();
};

},{}],"6SrgG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Partial = require("../Partial/index.js");
var unsafePartialBecause = function (v) {
    return function (x) {
        return $foreign.unsafePartial(function (dictPartial) {
            return x();
        });
    };
};
var unsafeCrashWith = function (msg) {
    return $foreign.unsafePartial(function (dictPartial) {
        return Partial.crashWith()(msg);
    });
};
module.exports = {
    unsafePartialBecause: unsafePartialBecause,
    unsafeCrashWith: unsafeCrashWith,
    unsafePartial: $foreign.unsafePartial
};

},{"./foreign.js":"13Kxk","../Partial/index.js":"56lAU"}],"13Kxk":[function(require,module,exports) {
"use strict";

// module Partial.Unsafe

exports.unsafePartial = function (f) {
  return f();
};

},{}],"56lAU":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var crash = function (dictPartial) {
    return $foreign.crashWith()("Partial.crash: partial function");
};
module.exports = {
    crash: crash,
    crashWith: $foreign.crashWith
};

},{"./foreign.js":"70UUD"}],"70UUD":[function(require,module,exports) {
"use strict";

// module Partial

exports.crashWith = function () {
  return function (msg) {
    throw new Error(msg);
  };
};

},{}],"5YDDx":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Web_DOM_ParentNode = require("../Web.DOM.ParentNode/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var selectElement = function (query) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)((function () {
        var $2 = Web_DOM_ParentNode.querySelector(query);
        return function ($3) {
            return $2(Web_HTML_HTMLDocument.toParentNode($3));
        };
    })())(Web_HTML_Window.document))(Web_HTML.window)))(function (mel) {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(mel));
    });
};
var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var awaitLoad = Effect_Aff.makeAff(function (callback) {
    return function __do() {
        var rs = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
        if (rs instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
            var et = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
            var listener = Web_Event_EventTarget.eventListener(function (v) {
                return callback(new Data_Either.Right(Data_Unit.unit));
            })();
            Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et)();
            return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et));
        };
        callback(new Data_Either.Right(Data_Unit.unit))();
        return Effect_Aff.nonCanceler;
    };
});
var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(awaitLoad)(function () {
    return Control_Bind.bind(Effect_Aff.bindAff)(selectElement("body"))(function (body) {
        return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not find body")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(body);
    });
});
module.exports = {
    awaitLoad: awaitLoad,
    awaitBody: awaitBody,
    selectElement: selectElement,
    runHalogenAff: runHalogenAff
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Monad.Error.Class/index.js":"6mmaT","../Data.Either/index.js":"5Va79","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff/index.js":"1PqJZ","../Effect.Class/index.js":"70nM9","../Effect.Exception/index.js":"neabt","../Web.DOM.ParentNode/index.js":"6eQUR","../Web.Event.EventTarget/index.js":"6ALxc","../Web.HTML/index.js":"2DSEp","../Web.HTML.Event.EventTypes/index.js":"18ZPf","../Web.HTML.HTMLDocument/index.js":"1c4jR","../Web.HTML.HTMLDocument.ReadyState/index.js":"49eHs","../Web.HTML.HTMLElement/index.js":"5bP3j","../Web.HTML.Window/index.js":"5aURY"}],"6eQUR":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Effect = require("../Effect/index.js");
var QuerySelector = function (x) {
    return x;
};
var querySelector = function (qs) {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $4 = $foreign["_querySelector"](qs);
    return function ($5) {
        return $3($4($5));
    };
};
var ordQuerySelector = Data_Ord.ordString;
var newtypeQuerySelector = new Data_Newtype.Newtype(function (n) {
    return n;
}, QuerySelector);
var lastElementChild = (function () {
    var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($7) {
        return $6($foreign["_lastElementChild"]($7));
    };
})();
var firstElementChild = (function () {
    var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($9) {
        return $8($foreign["_firstElementChild"]($9));
    };
})();
var eqQuerySelector = Data_Eq.eqString;
module.exports = {
    firstElementChild: firstElementChild,
    lastElementChild: lastElementChild,
    QuerySelector: QuerySelector,
    querySelector: querySelector,
    eqQuerySelector: eqQuerySelector,
    ordQuerySelector: ordQuerySelector,
    newtypeQuerySelector: newtypeQuerySelector,
    children: $foreign.children,
    childElementCount: $foreign.childElementCount,
    querySelectorAll: $foreign.querySelectorAll
};

},{"./foreign.js":"4pyVY","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Nullable/index.js":"MeaHd","../Data.Ord/index.js":"4OchK","../Effect/index.js":"32R8a"}],"4pyVY":[function(require,module,exports) {
"use strict";

var getEffProp = function (name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.children = getEffProp("children");

exports._firstElementChild = getEffProp("firstElementChild");

exports._lastElementChild = getEffProp("lastElementChild");

exports.childElementCount = getEffProp("childElementCount");

exports._querySelector = function (selector) {
  return function (node) {
    return function () {
      return node.querySelector(selector);
    };
  };
};

exports.querySelectorAll = function (selector) {
  return function (node) {
    return function () {
      return node.querySelectorAll(selector);
    };
  };
};

},{}],"MeaHd":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
var toMaybe = function (n) {
    return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};
var showNullable = function (dictShow) {
    return new Data_Show.Show((function () {
        var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
        return function ($6) {
            return $5(toMaybe($6));
        };
    })());
};
var eqNullable = function (dictEq) {
    return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
};
var ordNullable = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqNullable(dictOrd.Eq0());
    }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
};
var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqNullable(dictEq));
});
var ord1Nullable = new Data_Ord.Ord1(function () {
    return eq1Nullable;
}, function (dictOrd) {
    return Data_Ord.compare(ordNullable(dictOrd));
});
module.exports = {
    toMaybe: toMaybe,
    toNullable: toNullable,
    showNullable: showNullable,
    eqNullable: eqNullable,
    eq1Nullable: eq1Nullable,
    ordNullable: ordNullable,
    ord1Nullable: ord1Nullable,
    "null": $foreign["null"],
    notNull: $foreign.notNull
};

},{"./foreign.js":"6g8f3","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c"}],"6g8f3":[function(require,module,exports) {
"use strict";

exports["null"] = null;

exports.nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

exports.notNull = function (x) {
  return x;
};

},{}],"6ALxc":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    eventListener: $foreign.eventListener,
    addEventListener: $foreign.addEventListener,
    removeEventListener: $foreign.removeEventListener,
    dispatchEvent: $foreign.dispatchEvent
};

},{"./foreign.js":"2f2I0"}],"2f2I0":[function(require,module,exports) {
"use strict";

exports.eventListener = function (fn) {
  return function () {
    return function (event) {
      return fn(event)();
    };
  };
};

exports.addEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.addEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.removeEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.removeEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.dispatchEvent = function (event) {
  return function (target) {
    return function () {
      return target.dispatchEvent(event);
    };
  };
};

},{}],"2DSEp":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    window: $foreign.window
};

},{"./foreign.js":"orsv2"}],"orsv2":[function(require,module,exports) {
/* global window */
"use strict";

exports.window = function () {
  return window;
};

},{}],"18ZPf":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var unload = "unload";
var toggle = "toggle";
var submit = "submit";
var storage = "storage";
var select = "select";
var reset = "reset";
var readystatechange = "readystatechange";
var progress = "progress";
var paste = "paste";
var online = "online";
var offline = "offline";
var message = "message";
var loadstart = "loadstart";
var loadend = "loadend";
var load = "load";
var languagechange = "languagechange";
var invalid = "invalid";
var input = "input";
var focus = "focus";
var error = "error";
var domcontentloaded = "DOMContentLoaded";
var cut = "cut";
var copy = "copy";
var close = "close";
var click = "click";
var change = "change";
var cancel = "cancel";
var blur = "blur";
var beforescriptexecute = "beforescriptexecute";
var beforeprint = "beforeprint";
var afterscriptexecute = "afterscriptexecute";
var afterprint = "afterprint";
var abort = "abort";
module.exports = {
    abort: abort,
    afterprint: afterprint,
    afterscriptexecute: afterscriptexecute,
    beforeprint: beforeprint,
    beforescriptexecute: beforescriptexecute,
    blur: blur,
    cancel: cancel,
    change: change,
    click: click,
    close: close,
    copy: copy,
    cut: cut,
    domcontentloaded: domcontentloaded,
    error: error,
    focus: focus,
    input: input,
    invalid: invalid,
    languagechange: languagechange,
    load: load,
    loadend: loadend,
    loadstart: loadstart,
    message: message,
    offline: offline,
    online: online,
    paste: paste,
    progress: progress,
    readystatechange: readystatechange,
    reset: reset,
    select: select,
    storage: storage,
    submit: submit,
    toggle: toggle,
    unload: unload
};

},{}],"1c4jR":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toDocument = Unsafe_Coerce.unsafeCoerce;
var readyState = (function () {
    var $0 = Data_Functor.map(Effect.functorEffect)((function () {
        var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
        return function ($3) {
            return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
        };
    })());
    return function ($1) {
        return $0($foreign["_readyState"]($1));
    };
})();
var head = (function () {
    var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($5) {
        return $4($foreign["_head"]($5));
    };
})();
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var currentScript = (function () {
    var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($7) {
        return $6($foreign["_currentScript"]($7));
    };
})();
var body = (function () {
    var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($9) {
        return $8($foreign["_body"]($9));
    };
})();
var activeElement = (function () {
    var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($11) {
        return $10($foreign["_activeElement"]($11));
    };
})();
module.exports = {
    fromDocument: fromDocument,
    fromNode: fromNode,
    fromParentNode: fromParentNode,
    fromNonElementParentNode: fromNonElementParentNode,
    fromEventTarget: fromEventTarget,
    toDocument: toDocument,
    toNode: toNode,
    toParentNode: toParentNode,
    toNonElementParentNode: toNonElementParentNode,
    toEventTarget: toEventTarget,
    head: head,
    body: body,
    readyState: readyState,
    activeElement: activeElement,
    currentScript: currentScript,
    referrer: $foreign.referrer,
    title: $foreign.title,
    setTitle: $foreign.setTitle
};

},{"./foreign.js":"w4qDD","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Nullable/index.js":"MeaHd","../Effect/index.js":"32R8a","../Unsafe.Coerce/index.js":"3fQke","../Web.HTML.HTMLDocument.ReadyState/index.js":"49eHs","../Web.Internal.FFI/index.js":"1fcfs"}],"w4qDD":[function(require,module,exports) {
"use strict";

exports._head = function (doc) {
  return function () {
    return doc.head;
  };
};

exports._body = function (doc) {
  return function () {
    return doc.body;
  };
};

exports._readyState = function (doc) {
  return function () {
    return doc.readyState;
  };
};

exports._activeElement = function (doc) {
  return function () {
    return doc.activeElement;
  };
};

exports._currentScript = function (doc) {
  return function () {
    return doc.currentScript;
  };
};

exports.referrer = function (doc) {
  return function () {
    return doc.referrer;
  };
};

exports.title = function (doc) {
  return function () {
    return doc.title;
  };
};

exports.setTitle = function (title) {
  return function (doc) {
    return function () {
      doc.title = title;
      return {};
    };
  };
};

},{}],"49eHs":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Loading = (function () {
    function Loading() {

    };
    Loading.value = new Loading();
    return Loading;
})();
var Interactive = (function () {
    function Interactive() {

    };
    Interactive.value = new Interactive();
    return Interactive;
})();
var Complete = (function () {
    function Complete() {

    };
    Complete.value = new Complete();
    return Complete;
})();
var showReadyState = new Data_Show.Show(function (v) {
    if (v instanceof Loading) {
        return "Loading";
    };
    if (v instanceof Interactive) {
        return "Interactive";
    };
    if (v instanceof Complete) {
        return "Complete";
    };
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 18, column 27): " + [ v.constructor.name ]);
});
var print = function (v) {
    if (v instanceof Loading) {
        return "loading";
    };
    if (v instanceof Interactive) {
        return "interactive";
    };
    if (v instanceof Complete) {
        return "complete";
    };
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 24, column 25): " + [ v.constructor.name ]);
};
var parse = function (v) {
    if (v === "loading") {
        return new Data_Maybe.Just(Loading.value);
    };
    if (v === "interactive") {
        return new Data_Maybe.Just(Interactive.value);
    };
    if (v === "complete") {
        return new Data_Maybe.Just(Complete.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqReadyState = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Loading && y instanceof Loading) {
            return true;
        };
        if (x instanceof Interactive && y instanceof Interactive) {
            return true;
        };
        if (x instanceof Complete && y instanceof Complete) {
            return true;
        };
        return false;
    };
});
var ordReadyState = new Data_Ord.Ord(function () {
    return eqReadyState;
}, function (x) {
    return function (y) {
        if (x instanceof Loading && y instanceof Loading) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Loading) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Loading) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Interactive && y instanceof Interactive) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Interactive) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Interactive) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Complete && y instanceof Complete) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 1 - line 12, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Loading: Loading,
    Interactive: Interactive,
    Complete: Complete,
    print: print,
    parse: parse,
    eqReadyState: eqReadyState,
    ordReadyState: ordReadyState,
    showReadyState: showReadyState
};

},{"../Data.Eq/index.js":"2htS8","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c"}],"1fcfs":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var unsafeReadProtoTagged = function (name) {
    return function (value) {
        return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
    };
};
module.exports = {
    unsafeReadProtoTagged: unsafeReadProtoTagged
};

},{"./foreign.js":"6Sz4G","../Data.Maybe/index.js":"1Cwwt"}],"6Sz4G":[function(require,module,exports) {
"use strict";

exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
  if (typeof window !== "undefined") {
    var ty = window[name];
    if (ty != null && value instanceof ty) {
      return just(value);
    }
    return nothing;
  } 
  var obj = value;
  while (obj != null) {
    var proto = Object.getPrototypeOf(obj);
    var constructorName = proto.constructor.name;
    if (constructorName === name) {
      return just(value);
    } else if (constructorName === "Object") {
      return nothing;
    }
    obj = proto;
  }
  return nothing;
};

},{}],"5bP3j":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var offsetParent = (function () {
    var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($1) {
        return $0($foreign["_offsetParent"]($1));
    };
})();
var fromParentNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromNonDocumentTypeChildNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromEventTarget = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromElement = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromChildNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
module.exports = {
    fromElement: fromElement,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toElement: toElement,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    offsetParent: offsetParent,
    title: $foreign.title,
    setTitle: $foreign.setTitle,
    lang: $foreign.lang,
    setLang: $foreign.setLang,
    dir: $foreign.dir,
    setDir: $foreign.setDir,
    className: $foreign.className,
    setClassName: $foreign.setClassName,
    classList: $foreign.classList,
    hidden: $foreign.hidden,
    setHidden: $foreign.setHidden,
    tabIndex: $foreign.tabIndex,
    setTabIndex: $foreign.setTabIndex,
    draggable: $foreign.draggable,
    setDraggable: $foreign.setDraggable,
    contentEditable: $foreign.contentEditable,
    setContentEditable: $foreign.setContentEditable,
    isContentEditable: $foreign.isContentEditable,
    spellcheck: $foreign.spellcheck,
    setSpellcheck: $foreign.setSpellcheck,
    click: $foreign.click,
    focus: $foreign.focus,
    blur: $foreign.blur,
    getBoundingClientRect: $foreign.getBoundingClientRect,
    offsetTop: $foreign.offsetTop,
    offsetLeft: $foreign.offsetLeft,
    offsetWidth: $foreign.offsetWidth,
    offsetHeight: $foreign.offsetHeight
};

},{"./foreign.js":"4iruZ","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Nullable/index.js":"MeaHd","../Effect/index.js":"32R8a","../Unsafe.Coerce/index.js":"3fQke"}],"4iruZ":[function(require,module,exports) {
"use strict";

exports._read = function (nothing, just, value) {
  var tag = Object.prototype.toString.call(value);
  if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
    return just(value);
  } else {
    return nothing;
  }
};

// ----------------------------------------------------------------------------

exports.title = function (elt) {
  return function () {
    return elt.title;
  };
};

exports.setTitle = function (title) {
  return function (elt) {
    return function () {
      elt.title = title;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.lang = function (elt) {
  return function () {
    return elt.lang;
  };
};

exports.setLang = function (lang) {
  return function (elt) {
    return function () {
      elt.lang = lang;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.dir = function (elt) {
  return function () {
    return elt.dir;
  };
};

exports.setDir = function (dir) {
  return function (elt) {
    return function () {
      elt.dir = dir;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.className = function (elt) {
  return function () {
    return elt.className;
  };
};

exports.setClassName = function (className) {
  return function (elt) {
    return function () {
      elt.className = className;
      return {};
    };
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

// ----------------------------------------------------------------------------

exports.hidden = function (elt) {
  return function () {
    return elt.hidden;
  };
};

exports.setHidden = function (hidden) {
  return function (elt) {
    return function () {
      elt.hidden = hidden;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.tabIndex = function (elt) {
  return function () {
    return elt.tabIndex;
  };
};

exports.setTabIndex = function (tabIndex) {
  return function (elt) {
    return function () {
      elt.tabIndex = tabIndex;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.draggable = function (elt) {
  return function () {
    return elt.draggable;
  };
};

exports.setDraggable = function (draggable) {
  return function (elt) {
    return function () {
      elt.draggable = draggable;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.contentEditable = function (elt) {
  return function () {
    return elt.contentEditable;
  };
};

exports.setContentEditable = function (contentEditable) {
  return function (elt) {
    return function () {
      elt.contentEditable = contentEditable;
      return {};
    };
  };
};

exports.isContentEditable = function (elt) {
  return function () {
    return elt.isContentEditable;
  };
};

// ----------------------------------------------------------------------------

exports.spellcheck = function (elt) {
  return function () {
    return elt.spellcheck;
  };
};

exports.setSpellcheck = function (spellcheck) {
  return function (elt) {
    return function () {
      elt.spellcheck = spellcheck;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.click = function (elt) {
  return function () {
    return elt.click();
  };
};

exports.focus = function (elt) {
  return function () {
    return elt.focus();
  };
};

exports.blur = function (elt) {
  return function () {
    return elt.blur();
  };
};

// - CSSOM ---------------------------------------------------------------------

exports.getBoundingClientRect = function (el) {
  return function () {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      width: rect.width,
      height: rect.height
    };
  };
};

exports._offsetParent = function (el) {
  return function () {
    return el.offsetParent;
  };
};

exports.offsetTop = function (el) {
  return function () {
    return el.offsetTop;
  };
};

exports.offsetLeft = function (el) {
  return function () {
    return el.offsetLeft;
  };
};

exports.offsetWidth = function (el) {
  return function () {
    return el.offsetWidth;
  };
};

exports.offsetHeight = function (el) {
  return function () {
    return el.offsetHeight;
  };
};

},{}],"5aURY":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var RequestIdleCallbackId = function (x) {
    return x;
};
var RequestAnimationFrameId = function (x) {
    return x;
};
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var requestIdleCallback = function (opts) {
    return function (fn) {
        var $30 = Data_Functor.map(Effect.functorEffect)(RequestIdleCallbackId);
        var $31 = $foreign["_requestIdleCallback"](opts)(fn);
        return function ($32) {
            return $30($31($32));
        };
    };
};
var requestAnimationFrame = function (fn) {
    var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
    var $34 = $foreign["_requestAnimationFrame"](fn);
    return function ($35) {
        return $33($34($35));
    };
};
var promptDefault = function (msg) {
    return function (defaultText) {
        return function (window) {
            return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window));
        };
    };
};
var prompt = function (msg) {
    return function (window) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window));
    };
};
var opener = function (window) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window));
};
var open = function (url$prime) {
    return function (name) {
        return function (features) {
            return function (window) {
                return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window));
            };
        };
    };
};
var newtypeRequestIdleCallbackId = new Data_Newtype.Newtype(function (n) {
    return n;
}, RequestIdleCallbackId);
var newtypeRequestAnimationFrameId = new Data_Newtype.Newtype(function (n) {
    return n;
}, RequestAnimationFrameId);
var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
    return eqRequestIdleCallbackId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
    return eqRequestAnimationFrameId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var cancelIdleCallback = function (idAF) {
    return $foreign["_cancelIdleCallback"](Data_Newtype.unwrap(newtypeRequestIdleCallbackId)(idAF));
};
var cancelAnimationFrame = function (idAF) {
    return $foreign["_cancelAnimationFrame"](Data_Newtype.unwrap(newtypeRequestAnimationFrameId)(idAF));
};
module.exports = {
    toEventTarget: toEventTarget,
    open: open,
    prompt: prompt,
    promptDefault: promptDefault,
    requestAnimationFrame: requestAnimationFrame,
    cancelAnimationFrame: cancelAnimationFrame,
    requestIdleCallback: requestIdleCallback,
    cancelIdleCallback: cancelIdleCallback,
    opener: opener,
    newtypeRequestAnimationFrameId: newtypeRequestAnimationFrameId,
    eqRequestAnimationFrameId: eqRequestAnimationFrameId,
    ordRequestAnimationFrameId: ordRequestAnimationFrameId,
    newtypeRequestIdleCallbackId: newtypeRequestIdleCallbackId,
    eqRequestIdleCallbackId: eqRequestIdleCallbackId,
    ordRequestIdleCallbackId: ordRequestIdleCallbackId,
    document: $foreign.document,
    navigator: $foreign.navigator,
    location: $foreign.location,
    history: $foreign.history,
    innerWidth: $foreign.innerWidth,
    innerHeight: $foreign.innerHeight,
    alert: $foreign.alert,
    confirm: $foreign.confirm,
    moveBy: $foreign.moveBy,
    moveTo: $foreign.moveTo,
    outerHeight: $foreign.outerHeight,
    outerWidth: $foreign.outerWidth,
    print: $foreign.print,
    resizeBy: $foreign.resizeBy,
    resizeTo: $foreign.resizeTo,
    screenX: $foreign.screenX,
    screenY: $foreign.screenY,
    scroll: $foreign.scroll,
    scrollBy: $foreign.scrollBy,
    scrollX: $foreign.scrollX,
    scrollY: $foreign.scrollY,
    localStorage: $foreign.localStorage,
    sessionStorage: $foreign.sessionStorage,
    parent: $foreign.parent
};

},{"./foreign.js":"34C84","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Nullable/index.js":"MeaHd","../Data.Ord/index.js":"4OchK","../Effect/index.js":"32R8a","../Unsafe.Coerce/index.js":"3fQke"}],"34C84":[function(require,module,exports) {
"use strict";

exports.document = function (window) {
  return function () {
    return window.document;
  };
};

exports.navigator = function (window) {
  return function () {
    return window.navigator;
  };
};

exports.location = function (window) {
  return function () {
    return window.location;
  };
};

exports.history = function(window) {
  return function() {
    return window.history;
  };
};

exports.innerWidth = function (window) {
  return function () {
    return window.innerWidth;
  };
};

exports.innerHeight = function (window) {
  return function () {
    return window.innerHeight;
  };
};

exports.alert = function (str) {
  return function (window) {
    return function () {
      window.alert(str);
      return {};
    };
  };
};

exports.confirm = function (str) {
  return function (window) {
    return function () {
      return window.confirm(str);
    };
  };
};

exports.moveBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.moveBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.moveTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.moveTo(width, height);
        return {};
      };
    };
  };
};

exports._open = function (url) {
  return function (name) {
    return function (features) {
      return function (window) {
        return function () {
          return window.open(url, name, features);
        };
      };
    };
  };
};

exports.outerHeight = function (window) {
  return function () {
    return window.outerHeight;
  };
};

exports.outerWidth = function (window) {
  return function () {
    return window.outerWidth;
  };
};

exports.print = function (window) {
  return function () {
    window.print();
    return {};
  };
};

exports._prompt = function (str) {
  return function (defaultText) {
    return function (window) {
      return function () {
        return window.prompt(str, defaultText);
      };
    };
  };
};

exports.resizeBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.resizeBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.resizeTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.resizeTo(width, height);
        return {};
      };
    };
  };
};

exports.screenX = function (window) {
  return function () {
    return window.screenX;
  };
};

exports.screenY = function (window) {
  return function () {
    return window.screenY;
  };
};

exports.scroll = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scroll(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollBy = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scrollBy(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollX = function (window) {
  return function () {
    return window.scrollX;
  };
};

exports.scrollY = function (window) {
  return function () {
    return window.scrollY;
  };
};

exports.localStorage = function (window) {
  return function () {
    return window.localStorage;
  };
};

exports.sessionStorage = function (window) {
  return function () {
    return window.sessionStorage;
  };
};

exports._requestAnimationFrame = function(fn) {
  return function(window) {
    return function() {
      return window.requestAnimationFrame(fn);
    };
  };
};

exports._cancelAnimationFrame = function(id) {
  return function(window) {
    return function() {
      return window.cancelAnimationFrame(id);
    };
  };
};

exports._requestIdleCallback = function(opts) {
  return function(fn) {
    return function(window) {
      return function() {
        return window.requestIdleCallback(fn, opts);
      };
    };
  };
};

exports._cancelIdleCallback = function(id) {
  return function(window) {
    return function() {
      return window.cancelIdleCallback(id);
    };
  };
};

exports.parent = function(window) {
  return function() {
    return window.parent;
  };
};

exports._opener = function(window) {
  return function() {
    return window.opener;
  };
};

},{}],"5H60K":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ComponentSlot = (function () {
    function ComponentSlot(value0) {
        this.value0 = value0;
    };
    ComponentSlot.create = function (value0) {
        return new ComponentSlot(value0);
    };
    return ComponentSlot;
})();
var ThunkSlot = (function () {
    function ThunkSlot(value0) {
        this.value0 = value0;
    };
    ThunkSlot.create = function (value0) {
        return new ThunkSlot(value0);
    };
    return ThunkSlot;
})();
var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
var unComponent = Unsafe_Coerce.unsafeCoerce;
var mkEval = function (args) {
    return function (v) {
        if (v instanceof Halogen_Query_HalogenQ.Initialize) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Finalize) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Receive) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Action) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Query) {
            return Data_Coyoneda.unCoyoneda(function (g) {
                var $28 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
                return function ($29) {
                    return $28(args.handleQuery($29));
                };
            })(v.value0);
        };
        throw new Error("Failed pattern match at Halogen.Component (line 187, column 15 - line 197, column 70): " + [ v.constructor.name ]);
    };
};
var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
var mkComponent = Unsafe_Coerce.unsafeCoerce;
var hoistSlot = function (dictBifunctor) {
    return function (dictFunctor) {
        return function (nat) {
            return function (v) {
                if (v instanceof ComponentSlot) {
                    return unComponentSlot(function (slot) {
                        return ComponentSlot.create(mkComponentSlot({
                            get: slot.get,
                            pop: slot.pop,
                            set: slot.set,
                            component: hoist(dictBifunctor)(dictFunctor)(nat)(slot.component),
                            input: slot.input,
                            output: slot.output
                        }));
                    })(v.value0);
                };
                if (v instanceof ThunkSlot) {
                    return ThunkSlot.create(Halogen_VDom_Thunk.hoist(Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat)))(v.value0));
                };
                throw new Error("Failed pattern match at Halogen.Component (line 286, column 17 - line 291, column 53): " + [ v.constructor.name ]);
            };
        };
    };
};
var hoist = function (dictBifunctor) {
    return function (dictFunctor) {
        return function (nat) {
            return unComponent(function (c) {
                return mkComponent({
                    initialState: c.initialState,
                    render: (function () {
                        var $30 = Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat));
                        return function ($31) {
                            return $30(c.render($31));
                        };
                    })(),
                    "eval": (function () {
                        var $32 = Halogen_Query_HalogenM.hoist(dictFunctor)(nat);
                        return function ($33) {
                            return $32(c["eval"]($33));
                        };
                    })()
                });
            });
        };
    };
};
var functorComponentSlotBox = new Data_Functor.Functor(function (f) {
    return unComponentSlot(function (slot) {
        return mkComponentSlot({
            get: slot.get,
            pop: slot.pop,
            set: slot.set,
            component: slot.component,
            input: slot.input,
            output: Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(slot.output)
        });
    });
});
var functorComponentSlot = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            if (v instanceof ComponentSlot) {
                return new ComponentSlot(Data_Functor.map(functorComponentSlotBox)(f)(v.value0));
            };
            if (v instanceof ThunkSlot) {
                return new ThunkSlot(Halogen_VDom_Thunk.mapThunk((function () {
                    var $34 = Data_Newtype.under(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.Wrap)(Data_Functor.map(Data_Bifunctor_Wrap.functorWrap(dictBifunctor))(f));
                    var $35 = Data_Bifunctor.lmap(dictBifunctor)(Data_Functor.map(functorComponentSlot(dictBifunctor))(f));
                    return function ($36) {
                        return $34($35($36));
                    };
                })())(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.Component (line 215, column 11 - line 217, column 94): " + [ v.constructor.name ]);
        };
    });
};
var defaultEval = {
    handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
    handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
    receive: Data_Function["const"](Data_Maybe.Nothing.value),
    initialize: Data_Maybe.Nothing.value,
    finalize: Data_Maybe.Nothing.value
};
var componentSlot = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (comp) {
                        return function (input) {
                            return function (output) {
                                return mkComponentSlot({
                                    get: Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p),
                                    pop: Halogen_Data_Slot.pop()(dictIsSymbol)(dictOrd)(label)(p),
                                    set: Halogen_Data_Slot.insert()(dictIsSymbol)(dictOrd)(label)(p),
                                    component: comp,
                                    input: input,
                                    output: output
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    mkComponent: mkComponent,
    unComponent: unComponent,
    hoist: hoist,
    mkEval: mkEval,
    defaultEval: defaultEval,
    ComponentSlot: ComponentSlot,
    ThunkSlot: ThunkSlot,
    componentSlot: componentSlot,
    mkComponentSlot: mkComponentSlot,
    unComponentSlot: unComponentSlot,
    hoistSlot: hoistSlot,
    functorComponentSlotBox: functorComponentSlotBox,
    functorComponentSlot: functorComponentSlot
};

},{"../Control.Applicative/index.js":"1ufUD","../Data.Bifunctor/index.js":"4Uonh","../Data.Bifunctor.Wrap/index.js":"n3n1N","../Data.Coyoneda/index.js":"5lDx8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Unit/index.js":"64zbv","../Halogen.Data.Slot/index.js":"61HeD","../Halogen.Query.HalogenM/index.js":"5kldW","../Halogen.Query.HalogenQ/index.js":"2XQ0g","../Halogen.VDom.Thunk/index.js":"57lBX","../Unsafe.Coerce/index.js":"3fQke"}],"5lDx8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var CoyonedaF = (function () {
    function CoyonedaF(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoyonedaF.create = function (value0) {
        return function (value1) {
            return new CoyonedaF(value0, value1);
        };
    };
    return CoyonedaF;
})();
var Coyoneda = function (x) {
    return x;
};
var unCoyoneda = function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return f(v1.value0)(v1.value1);
        })(v);
    };
};
var lowerCoyoneda = function (dictFunctor) {
    return unCoyoneda(Data_Functor.map(dictFunctor));
};
var foldableCoyoneda = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(function ($80) {
                    return f(k($80));
                });
            });
        };
    }, function (f) {
        return function (z) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldl(dictFoldable)(function (x) {
                    var $81 = f(x);
                    return function ($82) {
                        return $81(k($82));
                    };
                })(z);
            });
        };
    }, function (f) {
        return function (z) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldr(dictFoldable)(function ($83) {
                    return f(k($83));
                })(z);
            });
        };
    });
};
var foldable1Coyoneda = function (dictFoldable1) {
    return new Data_Semigroup_Foldable.Foldable1(function () {
        return foldableCoyoneda(dictFoldable1.Foldable0());
    }, function (dictSemigroup) {
        return unCoyoneda(function (k) {
            return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(k);
        });
    }, function (dictSemigroup) {
        return function (f) {
            return unCoyoneda(function (k) {
                return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(function ($84) {
                    return f(k($84));
                });
            });
        };
    });
};
var eqCoyoneda = function (dictFunctor) {
    return function (dictEq1) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    return Data_Eq.eq1(dictEq1)(dictEq)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
                };
            });
        };
    };
};
var ordCoyoneda = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCoyoneda(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }, function (x) {
                return function (y) {
                    return Data_Ord.compare1(dictOrd1)(dictOrd)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
                };
            });
        };
    };
};
var eq1Coyoneda = function (dictFunctor) {
    return function (dictEq1) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqCoyoneda(dictFunctor)(dictEq1)(dictEq));
        });
    };
};
var ord1Coyoneda = function (dictFunctor) {
    return function (dictOrd1) {
        return new Data_Ord.Ord1(function () {
            return eq1Coyoneda(dictFunctor)(dictOrd1.Eq10());
        }, function (dictOrd) {
            return Data_Ord.compare(ordCoyoneda(dictFunctor)(dictOrd1)(dictOrd));
        });
    };
};
var coyoneda = function (k) {
    return function (fi) {
        return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
    };
};
var functorCoyoneda = new Data_Functor.Functor(function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(function ($85) {
                return f(v1.value0($85));
            })(v1.value1);
        })(v);
    };
});
var invatiantCoyoneda = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorCoyoneda));
var hoistCoyoneda = function (nat) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(v1.value0)(nat(v1.value1));
        })(v);
    };
};
var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
var distributiveCoyoneda = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorCoyoneda;
    }, function (dictFunctor) {
        return function (f) {
            var $86 = Data_Distributive.collect(dictDistributive)(dictFunctor)((function () {
                var $88 = lowerCoyoneda(dictDistributive.Functor0());
                return function ($89) {
                    return $88(f($89));
                };
            })());
            return function ($87) {
                return liftCoyoneda($86($87));
            };
        };
    }, function (dictFunctor) {
        var $90 = Data_Distributive.collect(dictDistributive)(dictFunctor)(lowerCoyoneda(dictDistributive.Functor0()));
        return function ($91) {
            return liftCoyoneda($90($91));
        };
    });
};
var extendCoyoneda = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (v) {
            return Data_Exists.runExists(function (v1) {
                return liftCoyoneda(Control_Extend.extend(dictExtend)((function () {
                    var $92 = coyoneda(v1.value0);
                    return function ($93) {
                        return f($92($93));
                    };
                })())(v1.value1));
            })(v);
        };
    });
};
var monadTransCoyoneda = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return liftCoyoneda;
});
var traversableCoyoneda = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableCoyoneda(dictTraversable.Foldable1());
    }, function () {
        return functorCoyoneda;
    }, function (dictApplicative) {
        return unCoyoneda(function (k) {
            var $94 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(liftCoyoneda);
            var $95 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(k);
            return function ($96) {
                return $94($95($96));
            };
        });
    }, function (dictApplicative) {
        return function (f) {
            return unCoyoneda(function (k) {
                var $97 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(liftCoyoneda);
                var $98 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(function ($100) {
                    return f(k($100));
                });
                return function ($99) {
                    return $97($98($99));
                };
            });
        };
    });
};
var traversable1Coyoneda = function (dictTraversable1) {
    return new Data_Semigroup_Traversable.Traversable1(function () {
        return foldable1Coyoneda(dictTraversable1.Foldable10());
    }, function () {
        return traversableCoyoneda(dictTraversable1.Traversable1());
    }, function (dictApply) {
        return unCoyoneda(function (k) {
            var $101 = Data_Functor.map(dictApply.Functor0())(liftCoyoneda);
            var $102 = Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply);
            var $103 = Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(k);
            return function ($104) {
                return $101($102($103($104)));
            };
        });
    }, function (dictApply) {
        return function (f) {
            return unCoyoneda(function (k) {
                var $105 = Data_Functor.map(dictApply.Functor0())(liftCoyoneda);
                var $106 = Data_Semigroup_Traversable.traverse1(dictTraversable1)(dictApply)(function ($108) {
                    return f(k($108));
                });
                return function ($107) {
                    return $105($106($107));
                };
            });
        };
    });
};
var comonadCoyoneda = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendCoyoneda(dictComonad.Extend0());
    }, function (v) {
        return Data_Exists.runExists(function (v1) {
            return v1.value0(Control_Comonad.extract(dictComonad)(v1.value1));
        })(v);
    });
};
var applyCoyoneda = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (g) {
            return liftCoyoneda(Control_Apply.apply(dictApply)(lowerCoyoneda(dictApply.Functor0())(f))(lowerCoyoneda(dictApply.Functor0())(g)));
        };
    });
};
var bindCoyoneda = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyCoyoneda(dictBind.Apply0());
    }, function (v) {
        return function (f) {
            return liftCoyoneda(Data_Exists.runExists(function (v1) {
                return Control_Bind.bindFlipped(dictBind)((function () {
                    var $109 = lowerCoyoneda((dictBind.Apply0()).Functor0());
                    return function ($110) {
                        return $109(f(v1.value0($110)));
                    };
                })())(v1.value1);
            })(v));
        };
    });
};
var applicativeCoyoneda = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyCoyoneda(dictApplicative.Apply0());
    }, (function () {
        var $111 = Control_Applicative.pure(dictApplicative);
        return function ($112) {
            return liftCoyoneda($111($112));
        };
    })());
};
var monadCoyoneda = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeCoyoneda(dictMonad.Applicative0());
    }, function () {
        return bindCoyoneda(dictMonad.Bind1());
    });
};
var altCoyoneda = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorCoyoneda;
    }, function (x) {
        return function (y) {
            return liftCoyoneda(Control_Alt.alt(dictAlt)(lowerCoyoneda(dictAlt.Functor0())(x))(lowerCoyoneda(dictAlt.Functor0())(y)));
        };
    });
};
var plusCoyoneda = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altCoyoneda(dictPlus.Alt0());
    }, liftCoyoneda(Control_Plus.empty(dictPlus)));
};
var alternativeCoyoneda = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeCoyoneda(dictAlternative.Applicative0());
    }, function () {
        return plusCoyoneda(dictAlternative.Plus1());
    });
};
var monadZeroCoyoneda = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeCoyoneda(dictMonadZero.Alternative1());
    }, function () {
        return monadCoyoneda(dictMonadZero.Monad0());
    });
};
var monadPlusCoyoneda = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroCoyoneda(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    Coyoneda: Coyoneda,
    coyoneda: coyoneda,
    unCoyoneda: unCoyoneda,
    liftCoyoneda: liftCoyoneda,
    lowerCoyoneda: lowerCoyoneda,
    hoistCoyoneda: hoistCoyoneda,
    eqCoyoneda: eqCoyoneda,
    eq1Coyoneda: eq1Coyoneda,
    ordCoyoneda: ordCoyoneda,
    ord1Coyoneda: ord1Coyoneda,
    functorCoyoneda: functorCoyoneda,
    invatiantCoyoneda: invatiantCoyoneda,
    applyCoyoneda: applyCoyoneda,
    applicativeCoyoneda: applicativeCoyoneda,
    altCoyoneda: altCoyoneda,
    plusCoyoneda: plusCoyoneda,
    alternativeCoyoneda: alternativeCoyoneda,
    bindCoyoneda: bindCoyoneda,
    monadCoyoneda: monadCoyoneda,
    monadTransCoyoneda: monadTransCoyoneda,
    monadZeroCoyoneda: monadZeroCoyoneda,
    monadPlusCoyoneda: monadPlusCoyoneda,
    extendCoyoneda: extendCoyoneda,
    comonadCoyoneda: comonadCoyoneda,
    foldableCoyoneda: foldableCoyoneda,
    traversableCoyoneda: traversableCoyoneda,
    foldable1Coyoneda: foldable1Coyoneda,
    traversable1Coyoneda: traversable1Coyoneda,
    distributiveCoyoneda: distributiveCoyoneda
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Comonad/index.js":"7w5wx","../Control.Extend/index.js":"7m0n7","../Control.Monad/index.js":"4SDam","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Distributive/index.js":"57mKo","../Data.Eq/index.js":"2htS8","../Data.Exists/index.js":"2h0Nb","../Data.Foldable/index.js":"6ATDN","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Invariant/index.js":"1Revu","../Data.Ord/index.js":"4OchK","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Traversable/index.js":"2NLLF"}],"2h0Nb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var runExists = Unsafe_Coerce.unsafeCoerce;
var mkExists = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    mkExists: mkExists,
    runExists: runExists
};

},{"../Unsafe.Coerce/index.js":"3fQke"}],"61HeD":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Halogen_Data_OrdBox = require("../Halogen.Data.OrdBox/index.js");
var SlotStorage = function (x) {
    return x;
};
var slots = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (v) {
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(sym);
                    var go = function (v1) {
                        return function (val) {
                            if (key === v1.value0) {
                                return Data_Map_Internal.singleton(Halogen_Data_OrdBox.unOrdBox(v1.value1))(val);
                            };
                            if (Data_Boolean.otherwise) {
                                return Data_Monoid.mempty(Data_Map_Internal.monoidMap(dictOrd));
                            };
                            throw new Error("Failed pattern match at Halogen.Data.Slot (line 117, column 3 - line 119, column 25): " + [ v1.constructor.name, val.constructor.name ]);
                        };
                    };
                    return Data_Map_Internal.foldSubmap(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(Data_Map_Internal.monoidMap(dictOrd))(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(go)(v);
                };
            };
        };
    };
};
var pop = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (v) {
                        return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                    };
                };
            };
        };
    };
};
var lookup = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (v) {
                        return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                    };
                };
            };
        };
    };
};
var insert = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (val) {
                        return function (v) {
                            return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
                        };
                    };
                };
            };
        };
    };
};
var foreachSlot = function (dictApplicative) {
    return function (v) {
        return function (k) {
            return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                return k($37);
            })(v);
        };
    };
};
var empty = Data_Map_Internal.empty;
module.exports = {
    empty: empty,
    lookup: lookup,
    insert: insert,
    pop: pop,
    slots: slots,
    foreachSlot: foreachSlot
};

},{"../Data.Boolean/index.js":"4zMHm","../Data.Foldable/index.js":"6ATDN","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Symbol/index.js":"3AbLb","../Data.Tuple/index.js":"43VFo","../Halogen.Data.OrdBox/index.js":"48GWD"}],"3xtL7":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Lazy = require("../Data.List.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();
var Two = (function () {
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two;
})();
var Three = (function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three;
})();
var TwoLeft = (function () {
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    return TwoLeft;
})();
var TwoRight = (function () {
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    return TwoRight;
})();
var ThreeLeft = (function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft;
})();
var ThreeMiddle = (function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle;
})();
var ThreeRight = (function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight;
})();
var KickUp = (function () {
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp;
})();
var values = function (v) {
    if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
    };
    if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
};
var size = function (v) {
    if (v instanceof Leaf) {
        return 0;
    };
    if (v instanceof Two) {
        return (1 + size(v.value0) | 0) + size(v.value3) | 0;
    };
    if (v instanceof Three) {
        return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [ v.constructor.name ]);
};
var singleton = function (k) {
    return function (v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};
var toUnfoldable = function (dictUnfoldable) {
    return function (m) {
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                    };
                    if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                    };
                    if (v.value0 instanceof Two) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                        return;
                    };
                    if (v.value0 instanceof Three) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
var toUnfoldableUnordered = function (dictUnfoldable) {
    return function (m) {
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof Two) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                    };
                    if (v.value0 instanceof Three) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 598, column 18 - line 603, column 77): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 597, column 3 - line 597, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var showTree = function (dictShow) {
    return function (dictShow1) {
        return function (v) {
            if (v instanceof Leaf) {
                return "Leaf";
            };
            if (v instanceof Two) {
                return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
            };
            if (v instanceof Three) {
                return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 153, column 1 - line 153, column 62): " + [ v.constructor.name ]);
        };
    };
};
var showMap = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (m) {
            return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
        });
    };
};
var lookupLE = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value3)));
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return go(v.value0);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 225, column 33 - line 228, column 20): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value4,
                        value: v.value5
                    });
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value4,
                        value: v.value5
                    })(go(v.value6)));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return go(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 229, column 45 - line 232, column 36): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 224, column 5 - line 224, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var lookupGE = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return go(v.value3);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 259, column 33 - line 262, column 21): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return go(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 263, column 45 - line 266, column 37): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 258, column 5 - line 258, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var lookup = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Leaf) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Two) {
                    var v2 = comp(k)(v.value1);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    };
                    if (v2 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    };
                    $copy_v = v.value3;
                    return;
                };
                if (v instanceof Three) {
                    var v3 = comp(k)(v.value1);
                    if (v3 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    };
                    var v4 = comp(k)(v.value4);
                    if (v4 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value5);
                    };
                    if (v3 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    };
                    if (v4 instanceof Data_Ordering.GT) {
                        $copy_v = v.value6;
                        return;
                    };
                    $copy_v = v.value3;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return go;
    };
};
var member = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
        };
    };
};
var keys = function (v) {
    if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
    };
    if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [ v.constructor.name ]);
};
var isSubmap = function (dictOrd) {
    return function (dictEq) {
        return function (m1) {
            return function (m2) {
                var f = function (v) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                };
                return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
            };
        };
    };
};
var isEmpty = function (v) {
    if (v instanceof Leaf) {
        return true;
    };
    return false;
};
var functorMap = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Leaf) {
            return Leaf.value;
        };
        if (v1 instanceof Two) {
            return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
        };
        if (v1 instanceof Three) {
            return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorMap;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Leaf) {
            return Leaf.value;
        };
        if (v1 instanceof Two) {
            return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
        };
        if (v1 instanceof Three) {
            return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 152): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var fromZipper = function ($copy_dictOrd) {
    return function ($copy_v) {
        return function ($copy_tree) {
            var $tco_var_dictOrd = $copy_dictOrd;
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(dictOrd, v, tree) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return tree;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof TwoLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                        return;
                    };
                    if (v.value0 instanceof TwoRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                        return;
                    };
                    if (v.value0 instanceof ThreeLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    };
                    if (v.value0 instanceof ThreeMiddle) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    };
                    if (v.value0 instanceof ThreeRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
            };
            return $tco_result;
        };
    };
};
var insert = function (dictOrd) {
    return function (k) {
        return function (v) {
            var up = function ($copy_v1) {
                return function ($copy_v2) {
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v1, v2) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                        };
                        if (v1 instanceof Data_List_Types.Cons) {
                            if (v1.value0 instanceof TwoLeft) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                            };
                            if (v1.value0 instanceof TwoRight) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                            };
                            if (v1.value0 instanceof ThreeLeft) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            };
                            if (v1.value0 instanceof ThreeMiddle) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            };
                            if (v1.value0 instanceof ThreeRight) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                return;
                            };
                            throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                    };
                    return $tco_result;
                };
            };
            var comp = Data_Ord.compare(dictOrd);
            var down = function ($copy_ctx) {
                return function ($copy_v1) {
                    var $tco_var_ctx = $copy_ctx;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(ctx, v1) {
                        if (v1 instanceof Leaf) {
                            $tco_done = true;
                            return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                        };
                        if (v1 instanceof Two) {
                            var v2 = comp(k)(v1.value1);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                            };
                            if (v2 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            };
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                            $copy_v1 = v1.value3;
                            return;
                        };
                        if (v1 instanceof Three) {
                            var v3 = comp(k)(v1.value1);
                            if (v3 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                            };
                            var v4 = comp(k)(v1.value4);
                            if (v4 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                            };
                            if (v3 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            };
                            if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value3;
                                return;
                            };
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                            $copy_v1 = v1.value6;
                            return;
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return down(Data_List_Types.Nil.value);
        };
    };
};
var pop = function (dictOrd) {
    return function (k) {
        var up = function ($copy_ctxs) {
            return function ($copy_tree) {
                var $tco_var_ctxs = $copy_ctxs;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctxs, tree) {
                    if (ctxs instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return tree;
                    };
                    if (ctxs instanceof Data_List_Types.Cons) {
                        if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                        };
                        if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                        };
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                            return;
                        };
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                            return;
                        };
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                        };
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                        };
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                        };
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                };
                return $tco_result;
            };
        };
        var removeMaxNode = function ($copy_ctx) {
            return function ($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                        $tco_done = true;
                        return up(ctx)(Leaf.value);
                    };
                    if (m instanceof Two) {
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    };
                    if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                        $tco_done = true;
                        return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                    };
                    if (m instanceof Three) {
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                };
                return $tco_result;
            };
        };
        var maxNode = function ($copy_m) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(m) {
                if (m instanceof Two && m.value3 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value1,
                        value: m.value2
                    };
                };
                if (m instanceof Two) {
                    $copy_m = m.value3;
                    return;
                };
                if (m instanceof Three && m.value6 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value4,
                        value: m.value5
                    };
                };
                if (m instanceof Three) {
                    $copy_m = m.value6;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_m);
            };
            return $tco_result;
        };
        var comp = Data_Ord.compare(dictOrd);
        var down = function ($copy_ctx) {
            return function ($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    if (m instanceof Two) {
                        var v = comp(k)(m.value1);
                        if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                        };
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                        };
                        if (v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                            $copy_m = m.value0;
                            return;
                        };
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    };
                    if (m instanceof Three) {
                        var leaves = (function () {
                            if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                return true;
                            };
                            return false;
                        })();
                        var v = comp(k)(m.value4);
                        var v3 = comp(k)(m.value1);
                        if (leaves && v3 instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                        };
                        if (leaves && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                        };
                        if (v3 instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                        };
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value3);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                        };
                        if (v3 instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value0;
                            return;
                        };
                        if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value3;
                            return;
                        };
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                };
                return $tco_result;
            };
        };
        return down(Data_List_Types.Nil.value);
    };
};
var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
});
var traversableMap = new Data_Traversable.Traversable(function () {
    return foldableMap;
}, function () {
    return functorMap;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Leaf) {
                return Control_Applicative.pure(dictApplicative)(Leaf.value);
            };
            if (v instanceof Two) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
            };
            if (v instanceof Three) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 134, column 31): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldSubmap = function (dictOrd) {
    return function (dictMonoid) {
        return function (kmin) {
            return function (kmax) {
                return function (f) {
                    var tooSmall = (function () {
                        if (kmin instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](false);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 319, column 7 - line 323, column 22): " + [ kmin.constructor.name ]);
                    })();
                    var tooLarge = (function () {
                        if (kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmax instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](false);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 326, column 7 - line 330, column 22): " + [ kmax.constructor.name ]);
                    })();
                    var inBounds = (function () {
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](true);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 341, column 21): " + [ kmin.constructor.name, kmax.constructor.name ]);
                    })();
                    var go = function (v) {
                        if (v instanceof Leaf) {
                            return Data_Monoid.mempty(dictMonoid);
                        };
                        if (v instanceof Two) {
                            return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $633 = tooSmall(v.value1);
                                if ($633) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value0);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $634 = inBounds(v.value1);
                                if ($634) {
                                    return f(v.value1)(v.value2);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())((function () {
                                var $635 = tooLarge(v.value1);
                                if ($635) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value3);
                            })()));
                        };
                        if (v instanceof Three) {
                            return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $640 = tooSmall(v.value1);
                                if ($640) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value0);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $641 = inBounds(v.value1);
                                if ($641) {
                                    return f(v.value1)(v.value2);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $642 = tooSmall(v.value4) || tooLarge(v.value1);
                                if ($642) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value3);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $643 = inBounds(v.value4);
                                if ($643) {
                                    return f(v.value4)(v.value5);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())((function () {
                                var $644 = tooLarge(v.value4);
                                if ($644) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value6);
                            })()))));
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 359, column 10 - line 371, column 54): " + [ v.constructor.name ]);
                    };
                    return go;
                };
            };
        };
    };
};
var findMin = (function () {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                };
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                };
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 297, column 5 - line 297, column 22): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
})();
var lookupGT = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return findMin(v.value3);
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return go(v.value3);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 276, column 33 - line 279, column 21): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) {
                    return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return go(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 45 - line 283, column 37): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 275, column 5 - line 275, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var findMax = (function () {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                };
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value3;
                    return;
                };
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value4,
                        value: v1.value5
                    });
                    $copy_v1 = v1.value6;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 289, column 5 - line 289, column 22): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
})();
var lookupLT = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return findMax(v.value0);
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value3)));
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return go(v.value0);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 242, column 33 - line 245, column 20): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) {
                    return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value4,
                        value: v.value5
                    })(go(v.value6)));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return go(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 246, column 45 - line 249, column 36): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var eqMap = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (m1) {
            return function (m2) {
                return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var ordMap = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (m1) {
            return function (m2) {
                return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var eq1Map = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqMap(dictEq)(dictEq1));
    });
};
var ord1Map = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Map(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
    });
};
var empty = Leaf.value;
var fromFoldable = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (v) {
                return insert(dictOrd)(v.value0)(v.value1)(m);
            };
        })(empty);
    };
};
var filterWithKey = function (dictOrd) {
    return function (predicate) {
        var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
        var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
        var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
        return function ($761) {
            return $758($759($760($761)));
        };
    };
};
var filter = function (dictOrd) {
    return function (predicate) {
        return filterWithKey(dictOrd)(Data_Function["const"](predicate));
    };
};
var filterKeys = function (dictOrd) {
    return function (predicate) {
        return filterWithKey(dictOrd)(function ($762) {
            return Data_Function["const"](predicate($762));
        });
    };
};
var fromFoldableWithIndex = function (dictOrd) {
    return function (dictFoldableWithIndex) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
            return function (m) {
                return function (v) {
                    return insert(dictOrd)(k)(v)(m);
                };
            };
        })(empty);
    };
};
var intersectionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function ($copy_v) {
                    return function ($copy_v1) {
                        return function ($copy_m) {
                            var $tco_var_v = $copy_v;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(v, v1, m) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                };
                                if (v1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                };
                                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                    var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);
                                    if (v2 instanceof Data_Ordering.LT) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1;
                                        $copy_m = m;
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.EQ) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.GT) {
                                        $tco_var_v = v;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = m;
                                        return;
                                    };
                                    throw new Error("Failed pattern match at Data.Map.Internal (line 641, column 5 - line 644, column 27): " + [ v2.constructor.name ]);
                                };
                                throw new Error("Failed pattern match at Data.Map.Internal (line 638, column 3 - line 638, column 17): " + [ v.constructor.name, v1.constructor.name, m.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
                            };
                            return $tco_result;
                        };
                    };
                };
                return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
            };
        };
    };
};
var intersection = function (dictOrd) {
    return intersectionWith(dictOrd)(Data_Function["const"]);
};
var $$delete = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
        };
    };
};
var difference = function (dictOrd) {
    return function (m1) {
        return function (m2) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
        };
    };
};
var checkValid = function (tree) {
    var allHeights = function (v) {
        if (v instanceof Leaf) {
            return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
        };
        if (v instanceof Two) {
            return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                return n + 1 | 0;
            })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
        };
        if (v instanceof Three) {
            return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                return n + 1 | 0;
            })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 188, column 3 - line 188, column 36): " + [ v.constructor.name ]);
    };
    return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
};
var asList = Control_Category.identity(Control_Category.categoryFn);
var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableMap;
}, function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                var $763 = Data_Function.flip(f);
                return function ($764) {
                    return Data_Tuple.uncurry($763($764));
                };
            })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
});
var mapMaybeWithKey = function (dictOrd) {
    return function (f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
            return function (a) {
                return function (acc) {
                    return Data_Maybe.maybe(acc)(function (b) {
                        return insert(dictOrd)(k)(b)(acc);
                    })(f(k)(a));
                };
            };
        })(empty);
    };
};
var mapMaybe = function (dictOrd) {
    var $765 = mapMaybeWithKey(dictOrd);
    return function ($766) {
        return $765(Data_Function["const"]($766));
    };
};
var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexMap;
}, function () {
    return functorWithIndexMap;
}, function () {
    return traversableMap;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Leaf) {
                return Control_Applicative.pure(dictApplicative)(Leaf.value);
            };
            if (v instanceof Two) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
            };
            if (v instanceof Three) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 136, column 1 - line 150, column 40): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var alter = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                var v = f(lookup(dictOrd)(k)(m));
                if (v instanceof Data_Maybe.Nothing) {
                    return $$delete(dictOrd)(k)(m);
                };
                if (v instanceof Data_Maybe.Just) {
                    return insert(dictOrd)(k)(v.value0)(m);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
            };
        };
    };
};
var fromFoldableWith = function (dictOrd) {
    return function (dictFoldable) {
        return function (f) {
            var combine = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Maybe.Just) {
                        return Data_Maybe.Just.create(f(v)(v1.value0));
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return new Data_Maybe.Just(v);
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 566, column 3 - line 566, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Foldable.foldl(dictFoldable)(function (m) {
                return function (v) {
                    return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                };
            })(empty);
        };
    };
};
var insertWith = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (v) {
                return alter(dictOrd)((function () {
                    var $767 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                    return function ($768) {
                        return Data_Maybe.Just.create($767($768));
                    };
                })())(k);
            };
        };
    };
};
var unionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function (m) {
                    return function (v) {
                        return alter(dictOrd)((function () {
                            var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
                            return function ($770) {
                                return Data_Maybe.Just.create($769($770));
                            };
                        })())(v.value0)(m);
                    };
                };
                return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
            };
        };
    };
};
var union = function (dictOrd) {
    return unionWith(dictOrd)(Data_Function["const"]);
};
var semigroupMap = function (dictOrd) {
    return new Data_Semigroup.Semigroup(union(dictOrd));
};
var monoidMap = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMap(dictOrd);
    }, empty);
};
var submap = function (dictOrd) {
    return function (kmin) {
        return function (kmax) {
            return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
        };
    };
};
var unions = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var update = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    showTree: showTree,
    empty: empty,
    isEmpty: isEmpty,
    singleton: singleton,
    checkValid: checkValid,
    insert: insert,
    insertWith: insertWith,
    lookup: lookup,
    lookupLE: lookupLE,
    lookupLT: lookupLT,
    lookupGE: lookupGE,
    lookupGT: lookupGT,
    findMin: findMin,
    findMax: findMax,
    foldSubmap: foldSubmap,
    submap: submap,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromFoldableWithIndex: fromFoldableWithIndex,
    toUnfoldable: toUnfoldable,
    toUnfoldableUnordered: toUnfoldableUnordered,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    keys: keys,
    values: values,
    union: union,
    unionWith: unionWith,
    unions: unions,
    intersection: intersection,
    intersectionWith: intersectionWith,
    difference: difference,
    isSubmap: isSubmap,
    size: size,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    mapMaybeWithKey: mapMaybeWithKey,
    mapMaybe: mapMaybe,
    eq1Map: eq1Map,
    eqMap: eqMap,
    ord1Map: ord1Map,
    ordMap: ordMap,
    showMap: showMap,
    semigroupMap: semigroupMap,
    monoidMap: monoidMap,
    functorMap: functorMap,
    functorWithIndexMap: functorWithIndexMap,
    foldableMap: foldableMap,
    foldableWithIndexMap: foldableWithIndexMap,
    traversableMap: traversableMap,
    traversableWithIndexMap: traversableWithIndexMap
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.List/index.js":"3bKr1","../Data.List.Lazy/index.js":"3jygo","../Data.List.Lazy.Types/index.js":"6S0ok","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z"}],"3bKr1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Pattern = function (x) {
    return x;
};
var updateAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(updateAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
var uncons = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var tail = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value1);
    };
    throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
};
var stripPrefix = function (dictEq) {
    return function (v) {
        return function (s) {
            var go = function (prefix) {
                return function (input) {
                    if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                            a: prefix.value1,
                            b: input.value1
                        }));
                    };
                    if (prefix instanceof Data_List_Types.Nil) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    };
                    return Data_Maybe.Nothing.value;
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
            var v2 = span(v)(v1.value1);
            return {
                init: new Data_List_Types.Cons(v1.value0, v2.init),
                rest: v2.rest
            };
        };
        return {
            init: Data_List_Types.Nil.value,
            rest: v1
        };
    };
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
    };
};
var singleton = function (a) {
    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                    return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                };
                if (Data_Boolean.otherwise) {
                    return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return v;
            };
            throw new Error("Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var mergePairs = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        };
        return v;
    };
    var mergeAll = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return v.value0;
            };
            $copy_v = mergePairs(v);
            return;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var sequences = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            };
            if (Data_Boolean.otherwise) {
                return ascending(v.value1.value0)(function (v1) {
                    return new Data_List_Types.Cons(v.value0, v1);
                })(v.value1.value1);
            };
        };
        return singleton(v);
    };
    var descending = function ($copy_a) {
        return function ($copy_as) {
            return function ($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = new Data_List_Types.Cons(a, as);
                        $copy_v = v.value1;
                        return;
                    };
                    $tco_done = true;
                    return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                };
                return $tco_result;
            };
        };
    };
    var ascending = function ($copy_a) {
        return function ($copy_as) {
            return function ($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = function (ys) {
                            return as(new Data_List_Types.Cons(a, ys));
                        };
                        $copy_v = v.value1;
                        return;
                    };
                    $tco_done = true;
                    return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                };
                return $tco_result;
            };
        };
    };
    return function ($331) {
        return mergeAll(sequences($331));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var tails = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return singleton(Data_List_Types.Nil.value);
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(v, tails(v.value1));
    };
    throw new Error("Failed pattern match at Data.List (line 626, column 1 - line 626, column 43): " + [ v.constructor.name ]);
};
var showPattern = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
    });
};
var reverse = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var take = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v, v1) {
                    if (v < 1) {
                        $tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Cons) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $tco_var_v = v - 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var takeWhile = function (p) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                };
                $tco_done = true;
                return reverse(acc);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var unsnoc = function (lst) {
    var go = function ($copy_v) {
        return function ($copy_acc) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, acc) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return new Data_Maybe.Just({
                        revInit: acc,
                        last: v.value0
                    });
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_v = v.value1;
                    $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [ v.constructor.name, acc.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_acc);
            };
            return $tco_result;
        };
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
        return {
            init: reverse(h.revInit),
            last: h.last
        };
    })(go(lst)(Data_List_Types.Nil.value));
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    return function ($copy_acc) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, acc) {
                            if (v instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            };
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            };
                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                return;
                            };
                            throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                        };
                        return $tco_result;
                    };
                };
            };
            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Data_Boolean.otherwise) {
            var go = function ($copy_s) {
                return function ($copy_e) {
                    return function ($copy_step) {
                        return function ($copy_rest) {
                            var $tco_var_s = $copy_s;
                            var $tco_var_e = $copy_e;
                            var $tco_var_step = $copy_step;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(s, e, step, rest) {
                                if (s === e) {
                                    $tco_done = true;
                                    return new Data_List_Types.Cons(s, rest);
                                };
                                if (Data_Boolean.otherwise) {
                                    $tco_var_s = s + step | 0;
                                    $tco_var_e = e;
                                    $tco_var_step = step;
                                    $copy_rest = new Data_List_Types.Cons(s, rest);
                                    return;
                                };
                                throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                            };
                            return $tco_result;
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $220 = start > end;
                if ($220) {
                    return 1;
                };
                return -1 | 0;
            })())(Data_List_Types.Nil.value);
        };
        throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [ start.constructor.name, end.constructor.name ]);
    };
};
var partition = function (p) {
    return function (xs) {
        var select = function (x) {
            return function (v) {
                var $223 = p(x);
                if ($223) {
                    return {
                        no: v.no,
                        yes: new Data_List_Types.Cons(x, v.yes)
                    };
                };
                return {
                    no: new Data_List_Types.Cons(x, v.no),
                    yes: v.yes
                };
            };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            no: Data_List_Types.Nil.value,
            yes: Data_List_Types.Nil.value
        })(xs);
    };
};
var $$null = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
var mapMaybe = function (f) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    var v1 = f(v.value0);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $copy_v = v.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var manyRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (p) {
            var go = function (acc) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                        return new Data_List_Types.Cons(v, acc);
                    })(function (v) {
                        return reverse(acc);
                    })(aa));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
        };
    };
};
var someRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
    return function (v) {
        return acc + 1 | 0;
    };
})(0);
var last = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof Data_List_Types.Cons) {
            $copy_v = v.value1;
            return;
        };
        $tco_done = true;
        return Data_Maybe.Nothing.value;
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var insertBy = function (v) {
    return function (x) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return singleton(x);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                var v2 = v(x)(v1.value0);
                if (v2 instanceof Data_Ordering.GT) {
                    return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                };
                return new Data_List_Types.Cons(x, v1);
            };
            throw new Error("Failed pattern match at Data.List (line 216, column 1 - line 216, column 68): " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
        };
    };
};
var insertAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(insertAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var init = function (lst) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.init;
    })(unsnoc(lst));
};
var index = function ($copy_v) {
    return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Data_List_Types.Cons && v1 === 0) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $copy_v1 = v1 - 1 | 0;
                return;
            };
            throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
        };
        return $tco_result;
    };
};
var head = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
};
var transpose = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
        return transpose(v.value1);
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
    };
    throw new Error("Failed pattern match at Data.List (line 752, column 1 - line 752, column 54): " + [ v.constructor.name ]);
};
var groupBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            var v2 = span(v(v1.value0))(v1.value1);
            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
        };
        throw new Error("Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var group$prime = function (dictOrd) {
    var $332 = group(dictOrd.Eq0());
    var $333 = sort(dictOrd);
    return function ($334) {
        return $332($333($334));
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var foldM = function (dictMonad) {
    return function (v) {
        return function (a) {
            return function (v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v1 instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
                        return foldM(dictMonad)(v)(a$prime)(v1.value1);
                    });
                };
                throw new Error("Failed pattern match at Data.List (line 763, column 1 - line 763, column 72): " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Data_List_Types.Cons) {
                    if (fn(v1.value0)) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v);
                    };
                    if (Data_Boolean.otherwise) {
                        $tco_var_v = v + 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    };
                };
                if (v1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (b) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (xs$prime) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (b) {
                                return new Data_List_Types.Cons(v1.value0, xs$prime);
                            };
                            return xs$prime;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (p(v.value0)) {
                        $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                        $copy_v = v.value1;
                        return;
                    };
                    if (Data_Boolean.otherwise) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    };
                };
                throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var intersectBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
            })(v1);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
                return !v(v1.value0)(y);
            })(v1.value1)));
        };
        throw new Error("Failed pattern match at Data.List (line 644, column 1 - line 644, column 59): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPattern(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                $copy_v = v.value1;
                return;
            };
            $tco_done = true;
            return v;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
};
var dropEnd = function (n) {
    return function (xs) {
        return take(length(xs) - n | 0)(xs);
    };
};
var drop = function ($copy_v) {
    return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v < 1) {
                $tco_done = true;
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_List_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v - 1 | 0;
                $copy_v1 = v1.value1;
                return;
            };
            throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
        };
        return $tco_result;
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var takeEnd = function (n) {
    return function (xs) {
        return drop(length(xs) - n | 0)(xs);
    };
};
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                return v2.value1;
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            };
            throw new Error("Failed pattern match at Data.List (line 671, column 1 - line 671, column 67): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (v) {
    return function (v1) {
        if (v === 0 && v1 instanceof Data_List_Types.Cons) {
            return new Data_Maybe.Just(v1.value1);
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                return new Data_List_Types.Cons(v1.value0, v2);
            })(deleteAt(v - 1 | 0)(v1.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return Data_Maybe.Just.create((function () {
                    var v3 = v1(v2.value0);
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return v2.value1;
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(v3.value0, v2.value1);
                    };
                    throw new Error("Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): " + [ v3.constructor.name ]);
                })());
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(alterAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($335) {
            return Data_Maybe.Just.create(f($335));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    some: some,
    someRec: someRec,
    many: many,
    manyRec: manyRec,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Lazy/index.js":"79VGa","../Control.Monad.Rec.Class/index.js":"1JlzL","../Data.Bifunctor/index.js":"4Uonh","../Data.Boolean/index.js":"4zMHm","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.NonEmpty/index.js":"1NWTO","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unit/index.js":"64zbv"}],"6KoCK":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var toList = function (v) {
    return new Cons(v.value0, v.value1);
};
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var nelCons = function (a) {
    return function (v) {
        return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
    };
};
var listMap = function (f) {
    var chunkedRevMap = function ($copy_chunksAcc) {
        return function ($copy_v) {
            var $tco_var_chunksAcc = $copy_chunksAcc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(chunksAcc, v) {
                if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                    $tco_var_chunksAcc = new Cons(v, chunksAcc);
                    $copy_v = v.value1.value1.value1;
                    return;
                };
                var unrolledMap = function (v1) {
                    if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                        return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                    };
                    if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                        return new Cons(f(v1.value0), Nil.value);
                    };
                    return Nil.value;
                };
                var reverseUnrolledMap = function ($copy_v1) {
                    return function ($copy_acc) {
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v1, acc) {
                            if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                return;
                            };
                            $tco_done = true;
                            return acc;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                        };
                        return $tco_result;
                    };
                };
                $tco_done = true;
                return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
            };
            return $tco_result;
        };
    };
    return chunkedRevMap(Nil.value);
};
var functorList = new Data_Functor.Functor(listMap);
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (acc) {
            var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
            return function ($203) {
                return $202(f($203));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    var go = function ($copy_b) {
        return function ($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    $tco_var_b = f(b)(v.value0);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_v);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (b) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
        return function ($205) {
            return $204(rev($205));
        };
    };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                var $206 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $207 = f(i);
                return function ($208) {
                    return $206($207($208));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        var $209 = Data_Foldable.foldl(foldableList)(function (v) {
            return function (a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
        })(new Data_Tuple.Tuple(0, acc));
        return function ($210) {
            return Data_Tuple.snd($209($210));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = (function () {
                var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
            })();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmptyList;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)((function () {
                var $211 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($212) {
                    return f($211($212));
                };
            })())(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $213 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($214) {
                    return f($213($214));
                };
            })())(b)(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $215 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($216) {
                    return f($215($216));
                };
            })())(b)(v);
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return new Cons(f(i)(x), acc);
            };
        };
    })(Nil.value);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (fn) {
    return function (v) {
        return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))((function () {
            var $217 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
            return function ($218) {
                return fn($217($218));
            };
        })())(v));
    };
});
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
    };
});
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Nil) {
            return "Nil";
        };
        return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
    });
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        var $219 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
        var $220 = Data_Foldable.foldl(foldableList)(function (acc) {
            var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
            return function ($223) {
                return $222(f($223));
            };
        })(Control_Applicative.pure(dictApplicative)(Nil.value));
        return function ($221) {
            return $219($220($221));
        };
    };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexList;
}, function () {
    return functorWithIndexList;
}, function () {
    return traversableList;
}, function (dictApplicative) {
    return function (f) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        var $224 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(rev);
        var $225 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                var $227 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                var $228 = f(i);
                return function ($229) {
                    return $227($228($229));
                };
            };
        })(Control_Applicative.pure(dictApplicative)(Nil.value));
        return function ($226) {
            return $224($225($226));
        };
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmptyList;
}, function () {
    return functorWithIndexNonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)((function () {
                var $230 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($231) {
                    return f($230($231));
                };
            })())(v));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = new Cons(v.value0, memo);
                        return;
                    };
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                    };
                    throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1List;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = new Cons(v.value0.value0, memo);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                    acc: new Cons(a, v1.acc)
                };
            };
        };
        return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
            val: Nil.value,
            acc: Nil.value
        })(v.value1)).val);
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (v) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            var go = function (a$prime) {
                return function (v1) {
                    var acc$prime = new Cons(a$prime, v1.acc);
                    return {
                        val: new Cons(f(acc$prime), v1.val),
                        acc: acc$prime
                    };
                };
            };
            return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: Nil.value,
                acc: Nil.value
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Types (line 180, column 1 - line 187, column 42): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    return function ($copy_v2) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, v2) {
                            if (!v2) {
                                $tco_done = true;
                                return false;
                            };
                            if (v instanceof Nil && v1 instanceof Nil) {
                                $tco_done = true;
                                return v2;
                            };
                            if (v instanceof Cons && v1 instanceof Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                return;
                            };
                            $tco_done = true;
                            return false;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                        };
                        return $tco_result;
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = v.value1;
                                $copy_v1 = v1.value1;
                                return;
                            };
                            $tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(xs)(ys);
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return v.value0;
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
    };
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = f(v.value0);
        return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($232) {
            return toList(f($232));
        })));
    };
});
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, (function () {
    var $233 = Data_NonEmpty.singleton(plusList);
    return function ($234) {
        return NonEmptyList($233($234));
    };
})());
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1NonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApply) {
    return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
                var $235 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
                return function ($236) {
                    return $235(f($236));
                };
            })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
                return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
            });
        };
    };
});
module.exports = {
    Nil: Nil,
    Cons: Cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    nelCons: nelCons,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    foldable1NonEmptyList: foldable1NonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList,
    traversable1NonEmptyList: traversable1NonEmptyList
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Comonad/index.js":"7w5wx","../Control.Extend/index.js":"7m0n7","../Control.Monad/index.js":"4SDam","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.NonEmpty/index.js":"1NWTO","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri"}],"1NWTO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmpty = (function () {
    function NonEmpty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    NonEmpty.create = function (value0) {
        return function (value1) {
            return new NonEmpty(value0, value1);
        };
    };
    return NonEmpty;
})();
var unfoldable1NonEmpty = function (dictUnfoldable) {
    return new Data_Unfoldable1.Unfoldable1(function (f) {
        return function (b) {
            return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
        };
    });
};
var tail = function (v) {
    return v.value1;
};
var singleton = function (dictPlus) {
    return function (a) {
        return new NonEmpty(a, Control_Plus.empty(dictPlus));
    };
};
var showNonEmpty = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var oneOf = function (dictAlternative) {
    return function (v) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
    };
};
var head = function (v) {
    return v.value0;
};
var functorNonEmpty = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (m) {
            return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
        };
    });
};
var functorWithIndex = function (dictFunctorWithIndex) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
        return functorNonEmpty(dictFunctorWithIndex.Functor0());
    }, function (f) {
        return function (v) {
            return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($146) {
                return f(Data_Maybe.Just.create($146));
            })(v.value1));
        };
    });
};
var fromNonEmpty = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var foldl1 = function (dictFoldable) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
        };
    };
};
var foldableNonEmpty = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
            };
        };
    });
};
var foldableWithIndexNonEmpty = function (dictFoldableWithIndex) {
    return new Data_FoldableWithIndex.FoldableWithIndex(function () {
        return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
    }, function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($147) {
                    return f(Data_Maybe.Just.create($147));
                })(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($148) {
                    return f(Data_Maybe.Just.create($148));
                })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($149) {
                    return f(Data_Maybe.Just.create($149));
                })(b)(v.value1));
            };
        };
    });
};
var traversableNonEmpty = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableNonEmpty(dictTraversable.Foldable1());
    }, function () {
        return functorNonEmpty(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var traversableWithIndexNonEmpty = function (dictTraversableWithIndex) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function () {
        return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
    }, function () {
        return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
    }, function () {
        return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($150) {
                    return f(Data_Maybe.Just.create($150));
                })(v.value1));
            };
        };
    });
};
var foldable1NonEmpty = function (dictFoldable) {
    return new Data_Semigroup_Foldable.Foldable1(function () {
        return foldableNonEmpty(dictFoldable);
    }, function (dictSemigroup) {
        return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    }, function (dictSemigroup) {
        return function (f) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(function (s) {
                    return function (a1) {
                        return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                    };
                })(f(v.value0))(v.value1);
            };
        };
    });
};
var eqNonEmpty = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
            };
        });
    };
};
var ordNonEmpty = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
            };
        });
    };
};
var eq1NonEmpty = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
    });
};
var ord1NonEmpty = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1NonEmpty(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
    });
};
module.exports = {
    NonEmpty: NonEmpty,
    singleton: singleton,
    foldl1: foldl1,
    fromNonEmpty: fromNonEmpty,
    oneOf: oneOf,
    head: head,
    tail: tail,
    showNonEmpty: showNonEmpty,
    eqNonEmpty: eqNonEmpty,
    eq1NonEmpty: eq1NonEmpty,
    ordNonEmpty: ordNonEmpty,
    ord1NonEmpty: ord1NonEmpty,
    functorNonEmpty: functorNonEmpty,
    functorWithIndex: functorWithIndex,
    foldableNonEmpty: foldableNonEmpty,
    foldableWithIndexNonEmpty: foldableWithIndexNonEmpty,
    traversableNonEmpty: traversableNonEmpty,
    traversableWithIndexNonEmpty: traversableWithIndexNonEmpty,
    foldable1NonEmpty: foldable1NonEmpty,
    unfoldable1NonEmpty: unfoldable1NonEmpty
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Control.Plus/index.js":"2CmD1","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri"}],"6hu5Z":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Unfoldable = function (Unfoldable10, unfoldr) {
    this.Unfoldable10 = Unfoldable10;
    this.unfoldr = unfoldr;
};
var unfoldr = function (dict) {
    return dict.unfoldr;
};
var unfoldableMaybe = new Unfoldable(function () {
    return Data_Unfoldable1.unfoldable1Maybe;
}, function (f) {
    return function (b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
    };
});
var unfoldableArray = new Unfoldable(function () {
    return Data_Unfoldable1.unfoldable1Array;
}, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate = function (dictUnfoldable) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                var $7 = i <= 0;
                if ($7) {
                    return Data_Maybe.Nothing.value;
                };
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};
var replicateA = function (dictApplicative) {
    return function (dictUnfoldable) {
        return function (dictTraversable) {
            return function (n) {
                return function (m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};
var none = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};
var fromMaybe = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function (b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
    });
};
module.exports = {
    Unfoldable: Unfoldable,
    unfoldr: unfoldr,
    replicate: replicate,
    replicateA: replicateA,
    none: none,
    fromMaybe: fromMaybe,
    unfoldableArray: unfoldableArray,
    unfoldableMaybe: unfoldableMaybe
};

},{"./foreign.js":"4ZQat","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable1/index.js":"1mZri","../Data.Unit/index.js":"64zbv"}],"4ZQat":[function(require,module,exports) {
"use strict";

exports.unfoldrArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var maybe = f(value);
              if (isNothing(maybe)) return result;
              var tuple = fromJust(maybe);
              result.push(fst(tuple));
              value = snd(tuple);
            }
          };
        };
      };
    };
  };
};

},{}],"1mZri":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unfoldable1 = function (unfoldr1) {
    this.unfoldr1 = unfoldr1;
};
var unfoldr1 = function (dict) {
    return dict.unfoldr1;
};
var unfoldable1Maybe = new Unfoldable1(function (f) {
    return function (b) {
        return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
    };
});
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate1 = function (dictUnfoldable1) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                if (i <= 0) {
                    return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                };
                if (Data_Boolean.otherwise) {
                    return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                };
                throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [ i.constructor.name ]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
    };
};
var replicate1A = function (dictApply) {
    return function (dictUnfoldable1) {
        return function (dictTraversable1) {
            return function (n) {
                return function (m) {
                    return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                };
            };
        };
    };
};
var singleton = function (dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
};
var range = function (dictUnfoldable1) {
    return function (start) {
        return function (end) {
            var go = function (delta) {
                return function (i) {
                    var i$prime = i + delta | 0;
                    return new Data_Tuple.Tuple(i, (function () {
                        var $8 = i === end;
                        if ($8) {
                            return Data_Maybe.Nothing.value;
                        };
                        return new Data_Maybe.Just(i$prime);
                    })());
                };
            };
            var delta = (function () {
                var $9 = end >= start;
                if ($9) {
                    return 1;
                };
                return -1 | 0;
            })();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
    };
};
module.exports = {
    Unfoldable1: Unfoldable1,
    unfoldr1: unfoldr1,
    replicate1: replicate1,
    replicate1A: replicate1A,
    singleton: singleton,
    range: range,
    unfoldable1Array: unfoldable1Array,
    unfoldable1Maybe: unfoldable1Maybe
};

},{"./foreign.js":"62hBM","../Data.Boolean/index.js":"4zMHm","../Data.Maybe/index.js":"1Cwwt","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Tuple/index.js":"43VFo"}],"62hBM":[function(require,module,exports) {
"use strict";

exports.unfoldr1ArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var tuple = f(value);
              result.push(fst(tuple));
              var maybe = snd(tuple);
              if (isNothing(maybe)) return result;
              value = fromJust(maybe);
            }
          };
        };
      };
    };
  };
};

},{}],"3jygo":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Pattern = function (x) {
    return x;
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (v) {
                return function (v1) {
                    if (v instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 693, column 3 - line 693, column 35): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(x, v1.value1);
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 367, column 3 - line 367, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
var uncons = function (xs) {
    var v = Data_List_Lazy_Types.step(xs);
    if (v instanceof Data_List_Lazy_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Lazy_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy (line 285, column 13 - line 287, column 44): " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var takeWhile = function (p) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
            return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
        };
        return Data_List_Lazy_Types.Nil.value;
    };
    var $239 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $240 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($241) {
        return Data_List_Lazy_Types.List($239($240($241)));
    };
};
var take = function (n) {
    var go = function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 517, column 3 - line 517, column 32): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var $119 = n <= 0;
    if ($119) {
        return Data_Function["const"](Data_List_Lazy_Types.nil);
    };
    var $242 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
    var $243 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($244) {
        return Data_List_Lazy_Types.List($242($243($244)));
    };
};
var tail = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons(xs));
};
var stripPrefix = function (dictEq) {
    return function (v) {
        return function (s) {
            var go = function (prefix) {
                return function (input) {
                    var v1 = Data_List_Lazy_Types.step(prefix);
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = Data_List_Lazy_Types.step(input);
                        if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
                            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                                a: v1.value1,
                                b: v2.value1
                            }));
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 499, column 21 - line 503, column 19): " + [ v1.constructor.name ]);
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function (p) {
    return function (xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
            var v1 = span(p)(v.value0.tail);
            return {
                init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
                rest: v1.rest
            };
        };
        return {
            init: Data_List_Lazy_Types.nil,
            rest: xs
        };
    };
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
    };
};
var singleton = function (a) {
    return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
};
var showPattern = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
    });
};
var scanrLazy = function (f) {
    return function (acc) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var acc$prime = f(v.value0)(acc);
                    return Data_List_Lazy_Types.Cons.create(acc$prime)(scanrLazy(f)(acc$prime)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 764, column 5 - line 764, column 27): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var reverse = function (xs) {
    return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
        return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
    });
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            };
            if (Data_Boolean.otherwise) {
                return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                    return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (as) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 161, column 1 - line 161, column 62): " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
        return Data_List_Lazy_Types.cons(x)(xs);
    });
};
var replicate = function (i) {
    return function (xs) {
        return take(i)(repeat(xs));
    };
};
var range = function (start) {
    return function (end) {
        if (start > end) {
            var g = function (x) {
                if (x >= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 13 - line 149, column 38): " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
        };
        if (Data_Boolean.otherwise) {
            var f = function (x) {
                if (x <= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 153, column 5 - line 154, column 30): " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 145, column 1 - line 145, column 32): " + [ start.constructor.name, end.constructor.name ]);
    };
};
var partition = function (f) {
    var go = function (x) {
        return function (v) {
            var $147 = f(x);
            if ($147) {
                return {
                    yes: Data_List_Lazy_Types.cons(x)(v.yes),
                    no: v.no
                };
            };
            return {
                yes: v.yes,
                no: Data_List_Lazy_Types.cons(x)(v.no)
            };
        };
    };
    return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
        yes: Data_List_Lazy_Types.nil,
        no: Data_List_Lazy_Types.nil
    });
};
var $$null = function ($245) {
    return Data_Maybe.isNothing(uncons($245));
};
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var mapMaybe = function (f) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v instanceof Data_List_Lazy_Types.Cons) {
                var v1 = f(v.value0);
                if (v1 instanceof Data_Maybe.Nothing) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 460, column 5 - line 462, column 39): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 458, column 3 - line 458, column 15): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var $246 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $247 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($248) {
        return Data_List_Lazy_Types.List($246($247($248)));
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
    return function (v) {
        return l + 1 | 0;
    };
})(0);
var last = (function () {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if ($$null(v.value1)) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($249) {
        return go(Data_List_Lazy_Types.step($249));
    };
})();
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
            return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
        });
    };
};
var insertAt = function (v) {
    return function (x) {
        return function (xs) {
            if (v === 0) {
                return Data_List_Lazy_Types.cons(x)(xs);
            };
            var go = function (v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [ v1.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var init = (function () {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Cons) {
            if ($$null(v.value1)) {
                return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return function ($250) {
        return go(Data_List_Lazy_Types.step($250));
    };
})();
var index = function (xs) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                    $copy_v1 = v1 - 1 | 0;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 299, column 3 - line 299, column 21): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Lazy_Types.step(xs));
};
var head = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.head;
    })(uncons(xs));
};
var transpose = function (xs) {
    var v = uncons(xs);
    if (v instanceof Data_Maybe.Nothing) {
        return xs;
    };
    if (v instanceof Data_Maybe.Just) {
        var v1 = uncons(v.value0.head);
        if (v1 instanceof Data_Maybe.Nothing) {
            return transpose(v.value0.tail);
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 734, column 7 - line 738, column 72): " + [ v1.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.List.Lazy (line 730, column 3 - line 738, column 72): " + [ v.constructor.name ]);
};
var groupBy = function (eq) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
        };
        if (v instanceof Data_List_Lazy_Types.Cons) {
            var v1 = span(eq(v.value0))(v.value1);
            return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
            }), groupBy(eq)(v1.rest));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 588, column 3 - line 588, column 15): " + [ v.constructor.name ]);
    };
    var $251 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $252 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($253) {
        return Data_List_Lazy_Types.List($251($252($253)));
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var fromStep = (function () {
    var $254 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
    return function ($255) {
        return Data_List_Lazy_Types.List($254($255));
    };
})();
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var v1 = cmp(x)(v.value0);
                    if (v1 instanceof Data_Ordering.GT) {
                        return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    };
                    return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 235, column 3 - line 235, column 22): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
};
var foldrLazy = function (dictLazy) {
    return function (op) {
        return function (z) {
            var go = function (xs) {
                var v = Data_List_Lazy_Types.step(xs);
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    return Control_Lazy.defer(dictLazy)(function (v1) {
                        return op(v.value0)(go(v.value1));
                    });
                };
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return z;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 756, column 13 - line 758, column 15): " + [ v.constructor.name ]);
            };
            return go;
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (xs) {
                var v = uncons(xs);
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
                    });
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 747, column 5 - line 750, column 54): " + [ v.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (n) {
        return function (list) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (o) {
                var $199 = fn(o.head);
                if ($199) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                };
                return go(n + 1 | 0)(o.tail);
            });
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (p) {
        return function (list) {
            var v = uncons(list);
            if (v instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            };
            if (v instanceof Data_Maybe.Just) {
                return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (b) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (xs$prime) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (b) {
                                return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
                            };
                            return xs$prime;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 443, column 5 - line 448, column 48): " + [ v.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if (p(v.value0)) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var $256 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $257 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($258) {
        return Data_List_Lazy_Types.List($256($257($258)));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (eq) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
        };
        if (v instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
                return !eq(v.value0)(y);
            })(v.value1)));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 621, column 3 - line 621, column 15): " + [ v.constructor.name ]);
    };
    var $259 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $260 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($261) {
        return Data_List_Lazy_Types.List($259($260($261)));
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPattern(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                $copy_v = Data_List_Lazy_Types.step(v.value1);
                return;
            };
            $tco_done = true;
            return fromStep(v);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($262) {
        return go(Data_List_Lazy_Types.step($262));
    };
};
var drop = function (n) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v === 0) {
                    $tco_done = true;
                    return v1;
                };
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = v - 1 | 0;
                    $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 536, column 3 - line 536, column 15): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    var $263 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
    var $264 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($265) {
        return Data_List_Lazy_Types.List($263($264($265)));
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    if (eq(x)(v.value0)) {
                        return Data_List_Lazy_Types.step(v.value1);
                    };
                    if (Data_Boolean.otherwise) {
                        return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 650, column 3 - line 650, column 15): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                    return Data_List_Lazy_Types.step(v1.value1);
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 353, column 3 - line 353, column 17): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
        return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
    });
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = f(v1.value0);
                        if (v2 instanceof Data_Maybe.Nothing) {
                            return Data_List_Lazy_Types.step(v1.value1);
                        };
                        if (v2 instanceof Data_Maybe.Just) {
                            return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy (line 394, column 22 - line 396, column 26): " + [ v2.constructor.name ]);
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 393, column 3 - line 393, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($266) {
            return Data_Maybe.Just.create(f($266));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    replicate: replicate,
    replicateM: replicateM,
    some: some,
    many: many,
    repeat: repeat,
    iterate: iterate,
    cycle: cycle,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    foldrLazy: foldrLazy,
    scanrLazy: scanrLazy,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Lazy/index.js":"79VGa","../Control.Monad.Rec.Class/index.js":"1JlzL","../Data.Boolean/index.js":"4zMHm","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Lazy/index.js":"weSzE","../Data.List.Lazy.Types/index.js":"6S0ok","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.NonEmpty/index.js":"1NWTO","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z"}],"weSzE":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var showLazy = function (dictShow) {
    return new Data_Show.Show(function (x) {
        return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
    });
};
var semiringLazy = function (dictSemiring) {
    return new Data_Semiring.Semiring(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, $foreign.defer(function (v) {
        return Data_Semiring.one(dictSemiring);
    }), $foreign.defer(function (v) {
        return Data_Semiring.zero(dictSemiring);
    }));
};
var semigroupLazy = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var ringLazy = function (dictRing) {
    return new Data_Ring.Ring(function () {
        return semiringLazy(dictRing.Semiring0());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var monoidLazy = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupLazy(dictMonoid.Semigroup0());
    }, $foreign.defer(function (v) {
        return Data_Monoid.mempty(dictMonoid);
    }));
};
var lazyLazy = new Control_Lazy.Lazy(function (f) {
    return $foreign.defer(function (v) {
        return $foreign.force(f(Data_Unit.unit));
    });
});
var functorLazy = new Data_Functor.Functor(function (f) {
    return function (l) {
        return $foreign.defer(function (v) {
            return f($foreign.force(l));
        });
    };
});
var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorLazy;
}, function (f) {
    return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
});
var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (l) {
            return f($foreign.force(l));
        };
    };
}, function (f) {
    return function (z) {
        return function (l) {
            return f(z)($foreign.force(l));
        };
    };
}, function (f) {
    return function (z) {
        return function (l) {
            return f($foreign.force(l))(z);
        };
    };
});
var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableLazy;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
});
var traversableLazy = new Data_Traversable.Traversable(function () {
    return foldableLazy;
}, function () {
    return functorLazy;
}, function (dictApplicative) {
    return function (l) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($42) {
            return $foreign.defer(Data_Function["const"]($42));
        })($foreign.force(l));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (l) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($43) {
                return $foreign.defer(Data_Function["const"]($43));
            })(f($foreign.force(l)));
        };
    };
});
var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexLazy;
}, function () {
    return functorWithIndexLazy;
}, function () {
    return traversableLazy;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
    };
});
var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableLazy;
}, function (dictSemigroup) {
    return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (l) {
            return f($foreign.force(l));
        };
    };
});
var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Lazy;
}, function () {
    return traversableLazy;
}, function (dictApply) {
    return function (l) {
        return Data_Functor.map(dictApply.Functor0())(function ($44) {
            return $foreign.defer(Data_Function["const"]($44));
        })($foreign.force(l));
    };
}, function (dictApply) {
    return function (f) {
        return function (l) {
            return Data_Functor.map(dictApply.Functor0())(function ($45) {
                return $foreign.defer(Data_Function["const"]($45));
            })(f($foreign.force(l)));
        };
    };
});
var extendLazy = new Control_Extend.Extend(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return f(x);
        });
    };
});
var eqLazy = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
        };
    });
};
var ordLazy = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqLazy(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
        };
    });
};
var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLazy(dictEq));
});
var ord1Lazy = new Data_Ord.Ord1(function () {
    return eq1Lazy;
}, function (dictOrd) {
    return Data_Ord.compare(ordLazy(dictOrd));
});
var comonadLazy = new Control_Comonad.Comonad(function () {
    return extendLazy;
}, $foreign.force);
var commutativeRingLazy = function (dictCommutativeRing) {
    return new Data_CommutativeRing.CommutativeRing(function () {
        return ringLazy(dictCommutativeRing.Ring0());
    });
};
var euclideanRingLazy = function (dictEuclideanRing) {
    return new Data_EuclideanRing.EuclideanRing(function () {
        return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
    }, (function () {
        var $46 = Data_EuclideanRing.degree(dictEuclideanRing);
        return function ($47) {
            return $46($foreign.force($47));
        };
    })(), function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var boundedLazy = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordLazy(dictBounded.Ord0());
    }, $foreign.defer(function (v) {
        return Data_Bounded.bottom(dictBounded);
    }), $foreign.defer(function (v) {
        return Data_Bounded.top(dictBounded);
    }));
};
var applyLazy = new Control_Apply.Apply(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return $foreign.force(f)($foreign.force(x));
        });
    };
});
var bindLazy = new Control_Bind.Bind(function () {
    return applyLazy;
}, function (l) {
    return function (f) {
        return $foreign.defer(function (v) {
            return $foreign.force(f($foreign.force(l)));
        });
    };
});
var heytingAlgebraLazy = function (dictHeytingAlgebra) {
    return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
        };
    }, function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
        };
    }, $foreign.defer(function (v) {
        return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
    }), function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
        };
    }, function (a) {
        return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
    }, $foreign.defer(function (v) {
        return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
    }));
};
var booleanAlgebraLazy = function (dictBooleanAlgebra) {
    return new Data_BooleanAlgebra.BooleanAlgebra(function () {
        return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var applicativeLazy = new Control_Applicative.Applicative(function () {
    return applyLazy;
}, function (a) {
    return $foreign.defer(function (v) {
        return a;
    });
});
var monadLazy = new Control_Monad.Monad(function () {
    return applicativeLazy;
}, function () {
    return bindLazy;
});
module.exports = {
    semiringLazy: semiringLazy,
    ringLazy: ringLazy,
    commutativeRingLazy: commutativeRingLazy,
    euclideanRingLazy: euclideanRingLazy,
    eqLazy: eqLazy,
    eq1Lazy: eq1Lazy,
    ordLazy: ordLazy,
    ord1Lazy: ord1Lazy,
    boundedLazy: boundedLazy,
    semigroupLazy: semigroupLazy,
    monoidLazy: monoidLazy,
    heytingAlgebraLazy: heytingAlgebraLazy,
    booleanAlgebraLazy: booleanAlgebraLazy,
    functorLazy: functorLazy,
    functorWithIndexLazy: functorWithIndexLazy,
    foldableLazy: foldableLazy,
    foldableWithIndexLazy: foldableWithIndexLazy,
    foldable1Lazy: foldable1Lazy,
    traversableLazy: traversableLazy,
    traversableWithIndexLazy: traversableWithIndexLazy,
    traversable1Lazy: traversable1Lazy,
    invariantLazy: invariantLazy,
    applyLazy: applyLazy,
    applicativeLazy: applicativeLazy,
    bindLazy: bindLazy,
    monadLazy: monadLazy,
    extendLazy: extendLazy,
    comonadLazy: comonadLazy,
    showLazy: showLazy,
    lazyLazy: lazyLazy,
    defer: $foreign.defer,
    force: $foreign.force
};

},{"./foreign.js":"1Bh99","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Comonad/index.js":"7w5wx","../Control.Extend/index.js":"7m0n7","../Control.Lazy/index.js":"79VGa","../Control.Monad/index.js":"4SDam","../Data.BooleanAlgebra/index.js":"ayR4z","../Data.Bounded/index.js":"4LlpW","../Data.CommutativeRing/index.js":"75WGG","../Data.Eq/index.js":"2htS8","../Data.EuclideanRing/index.js":"4eAMZ","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Invariant/index.js":"1Revu","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ring/index.js":"3ezk6","../Data.Semigroup/index.js":"3qtmP","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Unit/index.js":"64zbv"}],"1Bh99":[function(require,module,exports) {
"use strict";

exports.defer = function (thunk) {
  var v = null;
  return function() {
    if (thunk === undefined) return v;

    v = thunk();
    thunk = undefined; // eslint-disable-line no-param-reassign
    return v;
  };
};

exports.force = function (l) {
  return l();
};

},{}],"6S0ok":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var nil = List(Data_Lazy.defer(function (v) {
    return Nil.value;
}));
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var newtypeList = new Data_Newtype.Newtype(function (n) {
    return n;
}, List);
var step = (function () {
    var $215 = Data_Newtype.unwrap(newtypeList);
    return function ($216) {
        return Data_Lazy.force($215($216));
    };
})();
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        var go = function (v) {
            if (v instanceof Nil) {
                return step(ys);
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 98, column 5 - line 98, column 21): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return "Nil";
            };
            if (v instanceof Cons) {
                return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 64, column 5 - line 64, column 19): " + [ v.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
    });
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(function ($217) {
        return step(f($217));
    }));
});
var functorList = new Data_Functor.Functor(function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 107, column 5 - line 107, column 17): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var functorNonEmptyList = new Data_Functor.Functor(function (f) {
    return function (v) {
        return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return true;
                        };
                        if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                            $tco_var_v = step(v.value1);
                            $copy_v1 = step(v1.value1);
                            return;
                        };
                        $tco_done = true;
                        return false;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = step(v.value1);
                                $copy_v1 = step(v1.value1);
                                return;
                            };
                            $tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 84, column 5 - line 84, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
};
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (v) {
            return new Cons(x, xs);
        }));
    };
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (b) {
            return function (a) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (op) {
    var go = function ($copy_b) {
        return function ($copy_xs) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, xs) {
                var v = step(xs);
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    $tco_var_b = op(b)(v.value0);
                    $copy_xs = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_xs);
            };
            return $tco_result;
        };
    };
    return go;
}, function (op) {
    return function (z) {
        return function (xs) {
            var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
        };
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (l) {
        var go = function (a) {
            return function (v) {
                var acc$prime = cons(a)(v.acc);
                return {
                    val: cons(f(acc$prime))(v.val),
                    acc: acc$prime
                };
            };
        };
        var v = step(l);
        if (v instanceof Nil) {
            return nil;
        };
        if (v instanceof Cons) {
            return cons(f(l))((Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 194, column 5 - line 197, column 55): " + [ v.constructor.name ]);
    };
});
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: cons(f(Data_Lazy.defer(function (v2) {
                        return new Data_NonEmpty.NonEmpty(a, v1.acc);
                    })))(v1.val),
                    acc: cons(a)(v1.acc)
                };
            };
        };
        var v1 = Data_Lazy.force(v);
        return NonEmptyList(Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v1.value1)).val);
        }));
    };
});
var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
});
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                var $218 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $219 = f(i);
                return function ($220) {
                    return $218($219($220));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        var $221 = Data_Foldable.foldl(foldableList)(function (v) {
            return function (a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
        })(new Data_Tuple.Tuple(0, acc));
        return function ($222) {
            return Data_Tuple.snd($221($222));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = (function () {
                var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, nil))(xs);
            })();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmptyList;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)((function () {
                var $223 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($224) {
                    return f($223($224));
                };
            })())(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $225 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($226) {
                    return f($225($226));
                };
            })())(b)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $227 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($228) {
                    return f($227($228));
                };
            })())(b)(Data_Lazy.force(v));
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return cons(f(i)(x))(acc);
            };
        };
    })(nil);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
            return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))((function () {
                var $229 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($230) {
                    return f($229($230));
                };
            })())(Data_Lazy.force(v));
        }));
    };
});
var toList = function (v) {
    return Control_Lazy.defer(lazyList)(function (v1) {
        var v2 = Data_Lazy.force(v);
        return cons(v2.value0)(v2.value1);
    });
};
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        var v1 = Data_Lazy.force(v);
        return Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
        });
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return Data_Foldable.foldr(foldableList)(function (a) {
            return function (b) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
    return foldableNonEmptyList;
}, function () {
    return functorNonEmptyList;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
            return NonEmptyList(Data_Lazy.defer(function (v1) {
                return xxs;
            }));
        })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                return NonEmptyList(Data_Lazy.defer(function (v1) {
                    return xxs;
                }));
            })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
        };
    };
});
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexList;
}, function () {
    return functorWithIndexList;
}, function () {
    return traversableList;
}, function (dictApplicative) {
    return function (f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
            return function (a) {
                return function (b) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(i)(a)))(b);
                };
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmptyList;
}, function () {
    return functorWithIndexNonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                return NonEmptyList(Data_Lazy.defer(function (v1) {
                    return xxs;
                }));
            })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)((function () {
                var $231 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($232) {
                    return f($231($232));
                };
            })())(Data_Lazy.force(v)));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
    var go = function (f) {
        return function (b) {
            return Control_Lazy.defer(lazyList)(function (v) {
                var v1 = f(b);
                if (v1.value1 instanceof Data_Maybe.Just) {
                    return cons(v1.value0)(go(f)(v1.value1.value0));
                };
                if (v1.value1 instanceof Data_Maybe.Nothing) {
                    return cons(v1.value0)(nil);
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [ v1.constructor.name ]);
            });
        };
    };
    return go;
})());
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1List;
}, (function () {
    var go = function (f) {
        return function (b) {
            return Control_Lazy.defer(lazyList)(function (v) {
                var v1 = f(b);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return nil;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [ v1.constructor.name ]);
            });
        };
    };
    return go;
})());
var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        return NonEmptyList(Data_Lazy.defer(function (v) {
            return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
        }));
    };
});
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return Data_NonEmpty.head(Data_Lazy.force(v));
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (xs) {
    return function (f) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 175, column 5 - line 175, column 17): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return cons(a)(nil);
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        var v2 = Data_Lazy.force(v1);
        var v3 = Data_Lazy.force(v);
        return Data_Lazy.defer(function (v4) {
            return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
        });
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = Data_Lazy.force(v);
        var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
        return Data_Lazy.defer(function (v3) {
            return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($233) {
                return toList(f($233));
            })));
        });
    };
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, function (a) {
    return Data_Lazy.defer(function (v) {
        return Data_NonEmpty.singleton(plusList)(a);
    });
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
module.exports = {
    List: List,
    Nil: Nil,
    Cons: Cons,
    step: step,
    nil: nil,
    cons: cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    newtypeList: newtypeList,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    lazyList: lazyList,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Comonad/index.js":"7w5wx","../Control.Extend/index.js":"7m0n7","../Control.Lazy/index.js":"79VGa","../Control.Monad/index.js":"4SDam","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Lazy/index.js":"weSzE","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.NonEmpty/index.js":"1NWTO","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri"}],"48GWD":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var OrdBox = (function () {
    function OrdBox(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    OrdBox.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new OrdBox(value0, value1, value2);
            };
        };
    };
    return OrdBox;
})();
var unOrdBox = function (v) {
    return v.value2;
};
var mkOrdBox = function (dictOrd) {
    return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
};
var eqOrdBox = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0(v.value2)(v1.value2);
    };
});
var ordOrdBox = new Data_Ord.Ord(function () {
    return eqOrdBox;
}, function (v) {
    return function (v1) {
        return v.value1(v.value2)(v1.value2);
    };
});
module.exports = {
    mkOrdBox: mkOrdBox,
    unOrdBox: unOrdBox,
    eqOrdBox: eqOrdBox,
    ordOrdBox: ordOrdBox
};

},{"../Data.Eq/index.js":"2htS8","../Data.Ord/index.js":"4OchK"}],"5kldW":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var SubscriptionId = function (x) {
    return x;
};
var ForkId = function (x) {
    return x;
};
var State = (function () {
    function State(value0) {
        this.value0 = value0;
    };
    State.create = function (value0) {
        return new State(value0);
    };
    return State;
})();
var Subscribe = (function () {
    function Subscribe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Subscribe.create = function (value0) {
        return function (value1) {
            return new Subscribe(value0, value1);
        };
    };
    return Subscribe;
})();
var Unsubscribe = (function () {
    function Unsubscribe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Unsubscribe.create = function (value0) {
        return function (value1) {
            return new Unsubscribe(value0, value1);
        };
    };
    return Unsubscribe;
})();
var Lift = (function () {
    function Lift(value0) {
        this.value0 = value0;
    };
    Lift.create = function (value0) {
        return new Lift(value0);
    };
    return Lift;
})();
var ChildQuery = (function () {
    function ChildQuery(value0) {
        this.value0 = value0;
    };
    ChildQuery.create = function (value0) {
        return new ChildQuery(value0);
    };
    return ChildQuery;
})();
var Raise = (function () {
    function Raise(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Raise.create = function (value0) {
        return function (value1) {
            return new Raise(value0, value1);
        };
    };
    return Raise;
})();
var Par = (function () {
    function Par(value0) {
        this.value0 = value0;
    };
    Par.create = function (value0) {
        return new Par(value0);
    };
    return Par;
})();
var Fork = (function () {
    function Fork(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Fork.create = function (value0) {
        return function (value1) {
            return new Fork(value0, value1);
        };
    };
    return Fork;
})();
var Kill = (function () {
    function Kill(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Kill.create = function (value0) {
        return function (value1) {
            return new Kill(value0, value1);
        };
    };
    return Kill;
})();
var GetRef = (function () {
    function GetRef(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    GetRef.create = function (value0) {
        return function (value1) {
            return new GetRef(value0, value1);
        };
    };
    return GetRef;
})();
var HalogenAp = function (x) {
    return x;
};
var HalogenM = function (x) {
    return x;
};
var unsubscribe = function (sid) {
    return HalogenM(Control_Monad_Free.liftF(new Unsubscribe(sid, Data_Unit.unit)));
};
var subscribe$prime = function (esc) {
    return HalogenM(Control_Monad_Free.liftF(new Subscribe(esc, Data_Function["const"](Data_Unit.unit))));
};
var subscribe = function (es) {
    return HalogenM(Control_Monad_Free.liftF(new Subscribe(function (v) {
        return es;
    }, Control_Category.identity(Control_Category.categoryFn))));
};
var semigroupHalogenM = function (dictSemigroup) {
    return Control_Monad_Free.semigroupFree(dictSemigroup);
};
var raise = function (o) {
    return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
};
var queryAll = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (q) {
                    var catMapMaybes = function (dictOrd1) {
                        return Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (k) {
                            return function (v) {
                                return function (acc) {
                                    return Data_Maybe.maybe(acc)(Data_Function.flip(Data_Map_Internal.insert(dictOrd1)(k))(acc))(v);
                                };
                            };
                        })(Data_Map_Internal.empty);
                    };
                    return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                        return function (k) {
                            var $131 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(catMapMaybes(dictOrd));
                            var $132 = Data_Traversable.traverse(Data_Map_Internal.traversableMap)(dictApplicative)(k);
                            var $133 = Halogen_Data_Slot.slots()(dictIsSymbol)(dictOrd)(label);
                            return function ($134) {
                                return $131($132($133($134)));
                            };
                        };
                    }, q, Control_Category.identity(Control_Category.categoryFn))))));
                };
            };
        };
    };
};
var query = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (q) {
                        return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            return function (k) {
                                var $135 = Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k);
                                var $136 = Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p);
                                return function ($137) {
                                    return $135($136($137));
                                };
                            };
                        }, q, Control_Category.identity(Control_Category.categoryFn))))));
                    };
                };
            };
        };
    };
};
var ordSubscriptionId = Data_Ord.ordInt;
var ordForkId = Data_Ord.ordInt;
var newtypeHalogenAp = new Data_Newtype.Newtype(function (n) {
    return n;
}, HalogenAp);
var monoidHalogenM = function (dictMonoid) {
    return Control_Monad_Free.monoidFree(dictMonoid);
};
var monadTransHalogenM = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($138) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create($138)));
    };
});
var monadHalogenM = Control_Monad_Free.freeMonad;
var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
    return monadHalogenM;
}, function ($139) {
    return HalogenM(Control_Monad_Free.liftF(State.create($139)));
});
var monadTellHalogenM = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadHalogenM;
    }, (function () {
        var $140 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($141) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($140($141))));
        };
    })());
};
var monadThrowHalogenM = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadHalogenM;
    }, (function () {
        var $142 = Control_Monad_Error_Class.throwError(dictMonadThrow);
        return function ($143) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($142($143))));
        };
    })());
};
var monadEffectHalogenM = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadHalogenM;
    }, (function () {
        var $144 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($145) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($144($145))));
        };
    })());
};
var monadAskHalogenM = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadHalogenM;
    }, HalogenM(Control_Monad_Free.liftF(new Lift(Control_Monad_Reader_Class.ask(dictMonadAsk)))));
};
var monadAffHalogenM = function (dictMonadAff) {
    return new Effect_Aff_Class.MonadAff(function () {
        return monadEffectHalogenM(dictMonadAff.MonadEffect0());
    }, (function () {
        var $146 = Effect_Aff_Class.liftAff(dictMonadAff);
        return function ($147) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($146($147))));
        };
    })());
};
var mapOutput = function (f) {
    return function (v) {
        var go = function (v1) {
            if (v1 instanceof State) {
                return new State(v1.value0);
            };
            if (v1 instanceof Subscribe) {
                return new Subscribe(v1.value0, v1.value1);
            };
            if (v1 instanceof Unsubscribe) {
                return new Unsubscribe(v1.value0, v1.value1);
            };
            if (v1 instanceof Lift) {
                return new Lift(v1.value0);
            };
            if (v1 instanceof ChildQuery) {
                return new ChildQuery(v1.value0);
            };
            if (v1 instanceof Raise) {
                return new Raise(f(v1.value0), v1.value1);
            };
            if (v1 instanceof Par) {
                return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapOutput(f)))(v1.value0));
            };
            if (v1 instanceof Fork) {
                return new Fork(mapOutput(f)(v1.value0), v1.value1);
            };
            if (v1 instanceof Kill) {
                return new Kill(v1.value0, v1.value1);
            };
            if (v1 instanceof GetRef) {
                return new GetRef(v1.value0, v1.value1);
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 278, column 8 - line 288, column 29): " + [ v1.constructor.name ]);
        };
        return Control_Monad_Free.hoistFree(go)(v);
    };
};
var mapAction = function (dictFunctor) {
    return function (f) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(v1.value0);
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe((function () {
                        var $148 = Data_Functor.map(Halogen_Query_EventSource.functorEventSource(dictFunctor))(f);
                        return function ($149) {
                            return $148(v1.value0($149));
                        };
                    })(), v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(v1.value0);
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapAction(dictFunctor)(f)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(mapAction(dictFunctor)(f)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 258, column 8 - line 268, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var kill = function (fid) {
    return HalogenM(Control_Monad_Free.liftF(new Kill(fid, Data_Unit.unit)));
};
var imapState = function (f) {
    return function (f$prime) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State((function () {
                        var $150 = Data_Functor.map(Data_Tuple.functorTuple)(f);
                        return function ($151) {
                            return $150(v1.value0(f$prime($151)));
                        };
                    })());
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(v1.value0);
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(imapState(f)(f$prime)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(imapState(f)(f$prime)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 237, column 8 - line 247, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var hoist = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(v1.value0);
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe((function () {
                        var $152 = Halogen_Query_EventSource.hoist(dictFunctor)(nat);
                        return function ($153) {
                            return $152(v1.value0($153));
                        };
                    })(), v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(nat(v1.value0));
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(hoist(dictFunctor)(nat)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(hoist(dictFunctor)(nat)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 299, column 8 - line 309, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var getRef = function (p) {
    return HalogenM(Control_Monad_Free.liftF(new GetRef(p, Control_Category.identity(Control_Category.categoryFn))));
};
var functorHalogenM = Control_Monad_Free.freeFunctor;
var functorHalogenAp = Control_Applicative_Free.functorFreeAp;
var functorHalogenF = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            if (v instanceof State) {
                return new State((function () {
                    var $154 = Data_Bifunctor.lmap(Data_Tuple.bifunctorTuple)(f);
                    return function ($155) {
                        return $154(v.value0($155));
                    };
                })());
            };
            if (v instanceof Subscribe) {
                return new Subscribe(v.value0, function ($156) {
                    return f(v.value1($156));
                });
            };
            if (v instanceof Unsubscribe) {
                return new Unsubscribe(v.value0, f(v.value1));
            };
            if (v instanceof Lift) {
                return new Lift(Data_Functor.map(dictFunctor)(f)(v.value0));
            };
            if (v instanceof ChildQuery) {
                return new ChildQuery(Data_Functor.map(Halogen_Query_ChildQuery.functorChildQuery)(f)(v.value0));
            };
            if (v instanceof Raise) {
                return new Raise(v.value0, f(v.value1));
            };
            if (v instanceof Par) {
                return new Par(Data_Functor.map(functorHalogenAp)(f)(v.value0));
            };
            if (v instanceof Fork) {
                return new Fork(v.value0, function ($157) {
                    return f(v.value1($157));
                });
            };
            if (v instanceof Kill) {
                return new Kill(v.value0, f(v.value1));
            };
            if (v instanceof GetRef) {
                return new GetRef(v.value0, function ($158) {
                    return f(v.value1($158));
                });
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 55, column 11 - line 65, column 37): " + [ v.constructor.name ]);
        };
    });
};
var fork = function (hmu) {
    return HalogenM(Control_Monad_Free.liftF(new Fork(hmu, Control_Category.identity(Control_Category.categoryFn))));
};
var eqSubscriptionId = Data_Eq.eqInt;
var eqForkId = Data_Eq.eqInt;
var bindHalogenM = Control_Monad_Free.freeBind;
var applyHalogenM = Control_Monad_Free.freeApply;
var applyHalogenAp = Control_Applicative_Free.applyFreeAp;
var applicativeHalogenM = Control_Monad_Free.freeApplicative;
var monadRecHalogenM = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadHalogenM;
}, function (k) {
    return function (a) {
        return Control_Bind.bind(bindHalogenM)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Monad_Rec_Class.tailRecM(monadRecHalogenM)(k)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeHalogenM)(v.value0);
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 102, column 26 - line 104, column 21): " + [ v.constructor.name ]);
        });
    };
});
var applicativeHalogenAp = Control_Applicative_Free.applicativeFreeAp;
var parallelHalogenM = new Control_Parallel_Class.Parallel(function () {
    return applicativeHalogenAp;
}, function () {
    return monadHalogenM;
}, function ($159) {
    return HalogenAp(Control_Applicative_Free.liftFreeAp($159));
}, function ($160) {
    return HalogenM(Control_Monad_Free.liftF(Par.create($160)));
});
module.exports = {
    State: State,
    Subscribe: Subscribe,
    Unsubscribe: Unsubscribe,
    Lift: Lift,
    ChildQuery: ChildQuery,
    Raise: Raise,
    Par: Par,
    Fork: Fork,
    Kill: Kill,
    GetRef: GetRef,
    HalogenM: HalogenM,
    HalogenAp: HalogenAp,
    raise: raise,
    query: query,
    queryAll: queryAll,
    SubscriptionId: SubscriptionId,
    subscribe: subscribe,
    "subscribe'": subscribe$prime,
    unsubscribe: unsubscribe,
    ForkId: ForkId,
    fork: fork,
    kill: kill,
    getRef: getRef,
    imapState: imapState,
    mapAction: mapAction,
    mapOutput: mapOutput,
    hoist: hoist,
    functorHalogenF: functorHalogenF,
    functorHalogenM: functorHalogenM,
    applyHalogenM: applyHalogenM,
    applicativeHalogenM: applicativeHalogenM,
    bindHalogenM: bindHalogenM,
    monadHalogenM: monadHalogenM,
    semigroupHalogenM: semigroupHalogenM,
    monoidHalogenM: monoidHalogenM,
    monadEffectHalogenM: monadEffectHalogenM,
    monadAffHalogenM: monadAffHalogenM,
    parallelHalogenM: parallelHalogenM,
    monadTransHalogenM: monadTransHalogenM,
    monadRecHalogenM: monadRecHalogenM,
    monadStateHalogenM: monadStateHalogenM,
    monadAskHalogenM: monadAskHalogenM,
    monadTellHalogenM: monadTellHalogenM,
    monadThrowHalogenM: monadThrowHalogenM,
    newtypeHalogenAp: newtypeHalogenAp,
    functorHalogenAp: functorHalogenAp,
    applyHalogenAp: applyHalogenAp,
    applicativeHalogenAp: applicativeHalogenAp,
    eqSubscriptionId: eqSubscriptionId,
    ordSubscriptionId: ordSubscriptionId,
    eqForkId: eqForkId,
    ordForkId: ordForkId
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Applicative.Free/index.js":"5xzeK","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Free/index.js":"WgmbH","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.Parallel.Class/index.js":"65Cks","../Data.Bifunctor/index.js":"4Uonh","../Data.Eq/index.js":"2htS8","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect.Aff.Class/index.js":"5g637","../Effect.Class/index.js":"70nM9","../Halogen.Data.Slot/index.js":"61HeD","../Halogen.Query.ChildQuery/index.js":"2UGrF","../Halogen.Query.EventSource/index.js":"3Fogs"}],"5xzeK":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Pure = (function () {
    function Pure(value0) {
        this.value0 = value0;
    };
    Pure.create = function (value0) {
        return new Pure(value0);
    };
    return Pure;
})();
var Lift = (function () {
    function Lift(value0) {
        this.value0 = value0;
    };
    Lift.create = function (value0) {
        return new Lift(value0);
    };
    return Lift;
})();
var Ap = (function () {
    function Ap(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Ap.create = function (value0) {
        return function (value1) {
            return new Ap(value0, value1);
        };
    };
    return Ap;
})();
var mkAp = function (fba) {
    return function (fb) {
        return new Ap(fba, fb);
    };
};
var liftFreeAp = Lift.create;
var goLeft = function ($copy_dictApplicative) {
    return function ($copy_fStack) {
        return function ($copy_valStack) {
            return function ($copy_nat) {
                return function ($copy_func) {
                    return function ($copy_count) {
                        var $tco_var_dictApplicative = $copy_dictApplicative;
                        var $tco_var_fStack = $copy_fStack;
                        var $tco_var_valStack = $copy_valStack;
                        var $tco_var_nat = $copy_nat;
                        var $tco_var_func = $copy_func;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                            if (func instanceof Pure) {
                                $tco_done = true;
                                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                    func: Control_Applicative.pure(dictApplicative)(func.value0),
                                    count: count
                                }, fStack), valStack);
                            };
                            if (func instanceof Lift) {
                                $tco_done = true;
                                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                    func: nat(func.value0),
                                    count: count
                                }, fStack), valStack);
                            };
                            if (func instanceof Ap) {
                                $tco_var_dictApplicative = dictApplicative;
                                $tco_var_fStack = fStack;
                                $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                $tco_var_nat = nat;
                                $tco_var_func = func.value0;
                                $copy_count = count + 1 | 0;
                                return;
                            };
                            throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                        };
                        return $tco_result;
                    };
                };
            };
        };
    };
};
var goApply = function ($copy_dictApplicative) {
    return function ($copy_fStack) {
        return function ($copy_vals) {
            return function ($copy_gVal) {
                var $tco_var_dictApplicative = $copy_dictApplicative;
                var $tco_var_fStack = $copy_fStack;
                var $tco_var_vals = $copy_vals;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictApplicative, fStack, vals, gVal) {
                    if (fStack instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return new Data_Either.Left(gVal);
                    };
                    if (fStack instanceof Data_List_Types.Cons) {
                        var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                        var $14 = fStack.value0.count === 1;
                        if ($14) {
                            if (fStack.value1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return new Data_Either.Left(gRes);
                            };
                            $tco_var_dictApplicative = dictApplicative;
                            $tco_var_fStack = fStack.value1;
                            $tco_var_vals = vals;
                            $copy_gVal = gRes;
                            return;
                        };
                        if (vals instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Data_Either.Left(gRes);
                        };
                        if (vals instanceof Data_List_Types.Cons) {
                            $tco_done = true;
                            return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                func: gRes,
                                count: fStack.value0.count - 1 | 0
                            }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                };
                return $tco_result;
            };
        };
    };
};
var functorFreeAp = new Data_Functor.Functor(function (f) {
    return function (x) {
        return mkAp(new Pure(f))(x);
    };
});
var foldFreeAp = function (dictApplicative) {
    return function (nat) {
        return function (z) {
            var go = function ($copy_v) {
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v) {
                    if (v.value1.value0 instanceof Pure) {
                        var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                        if (v1 instanceof Data_Either.Left) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (v1 instanceof Data_Either.Right) {
                            $copy_v = v1.value0;
                            return;
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                    };
                    if (v.value1.value0 instanceof Lift) {
                        var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                        if (v1 instanceof Data_Either.Left) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (v1 instanceof Data_Either.Right) {
                            $copy_v = v1.value0;
                            return;
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                    };
                    if (v.value1.value0 instanceof Ap) {
                        var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                        $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                        return;
                    };
                    throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [ v.value1.value0.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($copy_v);
                };
                return $tco_result;
            };
            return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
        };
    };
};
var retractFreeAp = function (dictApplicative) {
    return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
};
var applyFreeAp = new Control_Apply.Apply(function () {
    return functorFreeAp;
}, function (fba) {
    return function (fb) {
        return mkAp(fba)(fb);
    };
});
var applicativeFreeAp = new Control_Applicative.Applicative(function () {
    return applyFreeAp;
}, Pure.create);
var hoistFreeAp = function (f) {
    return foldFreeAp(applicativeFreeAp)(function ($37) {
        return liftFreeAp(f($37));
    });
};
var analyzeFreeAp = function (dictMonoid) {
    return function (k) {
        var $38 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        var $39 = foldFreeAp(Data_Const.applicativeConst(dictMonoid))(function ($41) {
            return Data_Const.Const(k($41));
        });
        return function ($40) {
            return $38($39($40));
        };
    };
};
module.exports = {
    liftFreeAp: liftFreeAp,
    retractFreeAp: retractFreeAp,
    foldFreeAp: foldFreeAp,
    hoistFreeAp: hoistFreeAp,
    analyzeFreeAp: analyzeFreeAp,
    functorFreeAp: functorFreeAp,
    applyFreeAp: applyFreeAp,
    applicativeFreeAp: applicativeFreeAp
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Category/index.js":"6QTyW","../Data.Const/index.js":"4h1yP","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.List.NonEmpty/index.js":"2RvxL","../Data.List.Types/index.js":"6KoCK","../Data.Newtype/index.js":"2rjOq","../Data.NonEmpty/index.js":"1NWTO","../Data.Tuple/index.js":"43VFo"}],"4h1yP":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Const = function (x) {
    return x;
};
var showConst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Const " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConst = function (dictSemiring) {
    return dictSemiring;
};
var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return v1;
    };
});
var semigroupConst = function (dictSemigroup) {
    return dictSemigroup;
};
var ringConst = function (dictRing) {
    return dictRing;
};
var ordConst = function (dictOrd) {
    return dictOrd;
};
var newtypeConst = new Data_Newtype.Newtype(function (n) {
    return n;
}, Const);
var monoidConst = function (dictMonoid) {
    return dictMonoid;
};
var heytingAlgebraConst = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorConst = new Data_Functor.Functor(function (f) {
    return function (m) {
        return m;
    };
});
var functorWithIndexConst = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorConst;
}, function (v) {
    return function (v1) {
        return v1;
    };
});
var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
var foldableConst = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Monoid.mempty(dictMonoid);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
});
var foldableWithIndexConst = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableConst;
}, function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Monoid.mempty(dictMonoid);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
});
var traversableConst = new Data_Traversable.Traversable(function () {
    return foldableConst;
}, function () {
    return functorConst;
}, function (dictApplicative) {
    return function (v) {
        return Control_Applicative.pure(dictApplicative)(v);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
        };
    };
});
var traversableWithIndexConst = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexConst;
}, function () {
    return functorWithIndexConst;
}, function () {
    return traversableConst;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
        };
    };
});
var euclideanRingConst = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqConst = function (dictEq) {
    return dictEq;
};
var eq1Const = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqConst(dictEq));
    });
};
var ord1Const = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Const(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordConst(dictOrd));
    });
};
var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
    return function (v1) {
        return v1;
    };
});
var commutativeRingConst = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedConst = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraConst = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var bifunctorConst = new Data_Bifunctor.Bifunctor(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var bifoldableConst = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return function (v1) {
                return f(v1);
            };
        };
    };
}, function (f) {
    return function (v) {
        return function (z) {
            return function (v1) {
                return f(z)(v1);
            };
        };
    };
}, function (f) {
    return function (v) {
        return function (z) {
            return function (v1) {
                return f(v1)(z);
            };
        };
    };
});
var bitraversableConst = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableConst;
}, function () {
    return bifunctorConst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Const)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Const)(f(v1));
            };
        };
    };
});
var applyConst = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorConst;
    }, function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v)(v1);
        };
    });
};
var applicativeConst = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyConst(dictMonoid.Semigroup0());
    }, function (v) {
        return Data_Monoid.mempty(dictMonoid);
    });
};
module.exports = {
    Const: Const,
    newtypeConst: newtypeConst,
    eqConst: eqConst,
    eq1Const: eq1Const,
    ordConst: ordConst,
    ord1Const: ord1Const,
    boundedConst: boundedConst,
    showConst: showConst,
    semigroupoidConst: semigroupoidConst,
    semigroupConst: semigroupConst,
    monoidConst: monoidConst,
    semiringConst: semiringConst,
    ringConst: ringConst,
    euclideanRingConst: euclideanRingConst,
    commutativeRingConst: commutativeRingConst,
    heytingAlgebraConst: heytingAlgebraConst,
    booleanAlgebraConst: booleanAlgebraConst,
    functorConst: functorConst,
    bifunctorConst: bifunctorConst,
    functorWithIndexConst: functorWithIndexConst,
    invariantConst: invariantConst,
    contravariantConst: contravariantConst,
    applyConst: applyConst,
    applicativeConst: applicativeConst,
    foldableConst: foldableConst,
    foldableWithIndexConst: foldableWithIndexConst,
    bifoldableConst: bifoldableConst,
    traversableConst: traversableConst,
    traversableWithIndexConst: traversableWithIndexConst,
    bitraversableConst: bitraversableConst
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Semigroupoid/index.js":"5fTaI","../Data.Bifoldable/index.js":"4OFNy","../Data.Bifunctor/index.js":"4Uonh","../Data.Bitraversable/index.js":"5R51a","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Contravariant/index.js":"5XXaA","../Data.Functor.Invariant/index.js":"1Revu","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8"}],"5XXaA":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Void = require("../Data.Void/index.js");
var Contravariant = function (cmap) {
    this.cmap = cmap;
};
var cmap = function (dict) {
    return dict.cmap;
};
var cmapFlipped = function (dictContravariant) {
    return function (x) {
        return function (f) {
            return cmap(dictContravariant)(f)(x);
        };
    };
};
var coerce = function (dictContravariant) {
    return function (dictFunctor) {
        return function (a) {
            return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
        };
    };
};
var imapC = function (dictContravariant) {
    return function (v) {
        return function (f) {
            return cmap(dictContravariant)(f);
        };
    };
};
module.exports = {
    cmap: cmap,
    Contravariant: Contravariant,
    cmapFlipped: cmapFlipped,
    coerce: coerce,
    imapC: imapC
};

},{"../Data.Functor/index.js":"5ZkNG","../Data.Void/index.js":"6qLQE"}],"2RvxL":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var zipWith = function (f) {
    return function (v) {
        return function (v1) {
            return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var wrappedOperation2 = function (name) {
    return function (f) {
        return function (v) {
            return function (v1) {
                var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
                if (v2 instanceof Data_List_Types.Cons) {
                    return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
                };
                if (v2 instanceof Data_List_Types.Nil) {
                    return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
                };
                throw new Error("Failed pattern match at Data.List.NonEmpty (line 104, column 3 - line 106, column 81): " + [ v2.constructor.name ]);
            };
        };
    };
};
var wrappedOperation = function (name) {
    return function (f) {
        return function (v) {
            var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
            if (v1 instanceof Data_List_Types.Cons) {
                return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 91, column 3 - line 93, column 81): " + [ v1.constructor.name ]);
        };
    };
};
var updateAt = function (i) {
    return function (a) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($161) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($161));
                })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 197, column 1 - line 197, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
        };
    };
};
var unzip = function (ts) {
    return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
};
var unsnoc = function (v) {
    var v1 = Data_List.unsnoc(v.value1);
    if (v1 instanceof Data_Maybe.Nothing) {
        return {
            init: Data_List_Types.Nil.value,
            last: v.value0
        };
    };
    if (v1 instanceof Data_Maybe.Just) {
        return {
            init: new Data_List_Types.Cons(v.value0, v1.value0.init),
            last: v1.value0.last
        };
    };
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 159, column 35 - line 161, column 50): " + [ v1.constructor.name ]);
};
var unionBy = (function () {
    var $162 = wrappedOperation2("unionBy");
    return function ($163) {
        return $162(Data_List.unionBy($163));
    };
})();
var union = function (dictEq) {
    return wrappedOperation2("union")(Data_List.union(dictEq));
};
var uncons = function (v) {
    return {
        head: v.value0,
        tail: v.value1
    };
};
var toList = function (v) {
    return new Data_List_Types.Cons(v.value0, v.value1);
};
var toUnfoldable = function (dictUnfoldable) {
    var $164 = Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(Data_List.uncons(xs));
    });
    return function ($165) {
        return $164(toList($165));
    };
};
var tail = function (v) {
    return v.value1;
};
var sortBy = (function () {
    var $166 = wrappedOperation("sortBy");
    return function ($167) {
        return $166(Data_List.sortBy($167));
    };
})();
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var snoc = function (v) {
    return function (y) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
    };
};
var singleton = (function () {
    var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
    return function ($169) {
        return Data_List_Types.NonEmptyList($168($169));
    };
})();
var snoc$prime = function (v) {
    return function (y) {
        if (v instanceof Data_List_Types.Cons) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
        };
        if (v instanceof Data_List_Types.Nil) {
            return singleton(y);
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 139, column 1 - line 139, column 51): " + [ v.constructor.name, y.constructor.name ]);
    };
};
var reverse = wrappedOperation("reverse")(Data_List.reverse);
var nubBy = (function () {
    var $170 = wrappedOperation("nubBy");
    return function ($171) {
        return $170(Data_List.nubBy($171));
    };
})();
var nub = function (dictEq) {
    return wrappedOperation("nub")(Data_List.nub(dictEq));
};
var modifyAt = function (i) {
    return function (f) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($172) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($172));
                })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 202, column 1 - line 202, column 82): " + [ i.constructor.name, f.constructor.name, v.constructor.name ]);
        };
    };
};
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
var lift = function (f) {
    return function (v) {
        return f(new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var mapMaybe = function ($173) {
    return lift(Data_List.mapMaybe($173));
};
var partition = function ($174) {
    return lift(Data_List.partition($174));
};
var span = function ($175) {
    return lift(Data_List.span($175));
};
var take = function ($176) {
    return lift(Data_List.take($176));
};
var takeWhile = function ($177) {
    return lift(Data_List.takeWhile($177));
};
var length = function (v) {
    return 1 + Data_List.length(v.value1) | 0;
};
var last = function (v) {
    return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
};
var intersectBy = (function () {
    var $178 = wrappedOperation2("intersectBy");
    return function ($179) {
        return $178(Data_List.intersectBy($179));
    };
})();
var intersect = function (dictEq) {
    return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
};
var insertAt = function (i) {
    return function (a) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($180) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($180));
                })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 1 - line 192, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
        };
    };
};
var init = function (v) {
    return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
        return new Data_List_Types.Cons(v.value0, v1);
    })(Data_List.init(v.value1));
};
var index = function (v) {
    return function (i) {
        if (i === 0) {
            return new Data_Maybe.Just(v.value0);
        };
        if (Data_Boolean.otherwise) {
            return Data_List.index(v.value1)(i - 1 | 0);
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 166, column 1 - line 166, column 52): " + [ v.constructor.name, i.constructor.name ]);
    };
};
var head = function (v) {
    return v.value0;
};
var groupBy = (function () {
    var $181 = wrappedOperation("groupBy");
    return function ($182) {
        return $181(Data_List.groupBy($182));
    };
})();
var group$prime = function (dictOrd) {
    return wrappedOperation("group'")(Data_List["group'"](dictOrd));
};
var group = function (dictEq) {
    return wrappedOperation("group")(Data_List.group(dictEq));
};
var fromList = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
    };
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 120, column 1 - line 120, column 57): " + [ v.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    var $183 = Data_List.fromFoldable(dictFoldable);
    return function ($184) {
        return fromList($183($184));
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0))(function (a$prime) {
                    return Data_List.foldM(dictMonad)(f)(a$prime)(v.value1);
                });
            };
        };
    };
};
var findLastIndex = function (f) {
    return function (v) {
        var v1 = Data_List.findLastIndex(f)(v.value1);
        if (v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v1.value0 + 1 | 0);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            if (f(v.value0)) {
                return new Data_Maybe.Just(0);
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 186, column 3 - line 190, column 29): " + [ v1.constructor.name ]);
    };
};
var findIndex = function (f) {
    return function (v) {
        if (f(v.value0)) {
            return new Data_Maybe.Just(0);
        };
        if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                return v1 + 1 | 0;
            })(Data_List.findIndex(f)(v.value1));
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 179, column 1 - line 179, column 69): " + [ f.constructor.name, v.constructor.name ]);
    };
};
var filterM = function (dictMonad) {
    var $185 = Data_List.filterM(dictMonad);
    return function ($186) {
        return lift($185($186));
    };
};
var filter = function ($187) {
    return lift(Data_List.filter($187));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function ($188) {
    return lift(Data_List.dropWhile($188));
};
var drop = function ($189) {
    return lift(Data_List.drop($189));
};
var cons$prime = function (x) {
    return function (xs) {
        return new Data_NonEmpty.NonEmpty(x, xs);
    };
};
var cons = function (y) {
    return function (v) {
        return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = lift(Data_List.catMaybes);
var appendFoldable = function (dictFoldable) {
    return function (v) {
        return function (ys) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
        };
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    fromList: fromList,
    toList: toList,
    singleton: singleton,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    appendFoldable: appendFoldable,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM
};

},{"../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Data.Boolean/index.js":"4zMHm","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.NonEmpty/index.js":"1NWTO","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Partial.Unsafe/index.js":"6SrgG"}],"WgmbH":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_CatList = require("../Data.CatList/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ExpF = function (x) {
    return x;
};
var Free = (function () {
    function Free(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Free.create = function (value0) {
        return function (value1) {
            return new Free(value0, value1);
        };
    };
    return Free;
})();
var Return = (function () {
    function Return(value0) {
        this.value0 = value0;
    };
    Return.create = function (value0) {
        return new Return(value0);
    };
    return Return;
})();
var Bind = (function () {
    function Bind(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bind.create = function (value0) {
        return function (value1) {
            return new Bind(value0, value1);
        };
    };
    return Bind;
})();
var toView = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        var runExpF = function (v2) {
            return v2;
        };
        var concatF = function (v2) {
            return function (r) {
                return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
            };
        };
        if (v.value0 instanceof Return) {
            var v2 = Data_CatList.uncons(v.value1);
            if (v2 instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return new Return(v.value0.value0);
            };
            if (v2 instanceof Data_Maybe.Just) {
                $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                return;
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
        };
        if (v.value0 instanceof Bind) {
            $tco_done = true;
            return new Bind(v.value0.value0, function (a) {
                return concatF(v.value0.value1(a))(v.value1);
            });
        };
        throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var runFreeM = function (dictFunctor) {
    return function (dictMonadRec) {
        return function (k) {
            var go = function (f) {
                var v = toView(f);
                if (v instanceof Return) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
                };
                if (v instanceof Bind) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
                };
                throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
        };
    };
};
var runFree = function (dictFunctor) {
    return function (k) {
        var go = function ($copy_f) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(f) {
                var v = toView(f);
                if (v instanceof Return) {
                    $tco_done = true;
                    return v.value0;
                };
                if (v instanceof Bind) {
                    $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
                    return;
                };
                throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_f);
            };
            return $tco_result;
        };
        return go;
    };
};
var resume$prime = function (k) {
    return function (j) {
        return function (f) {
            var v = toView(f);
            if (v instanceof Return) {
                return j(v.value0);
            };
            if (v instanceof Bind) {
                return k(v.value0)(v.value1);
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
        };
    };
};
var resume = function (dictFunctor) {
    return resume$prime(function (g) {
        return function (i) {
            return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
        };
    })(Data_Either.Right.create);
};
var fromView = function (f) {
    return new Free(f, Data_CatList.empty);
};
var wrap = function (f) {
    return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
};
var suspendF = function (dictApplicative) {
    return function (f) {
        return wrap(Control_Applicative.pure(dictApplicative)(f));
    };
};
var freeMonad = new Control_Monad.Monad(function () {
    return freeApplicative;
}, function () {
    return freeBind;
});
var freeFunctor = new Data_Functor.Functor(function (k) {
    return function (f) {
        return Control_Bind.bindFlipped(freeBind)((function () {
            var $120 = Control_Applicative.pure(freeApplicative);
            return function ($121) {
                return $120(k($121));
            };
        })())(f);
    };
});
var freeBind = new Control_Bind.Bind(function () {
    return freeApply;
}, function (v) {
    return function (k) {
        return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
    };
});
var freeApply = new Control_Apply.Apply(function () {
    return freeFunctor;
}, Control_Monad.ap(freeMonad));
var freeApplicative = new Control_Applicative.Applicative(function () {
    return freeApply;
}, function ($122) {
    return fromView(Return.create($122));
});
var semigroupFree = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(freeApply)(Data_Semigroup.append(dictSemigroup)));
};
var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
    return freeMonad;
}, function (k) {
    return function (a) {
        return Control_Bind.bind(freeBind)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(freeApplicative)(v.value0);
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
        });
    };
});
var liftF = function (f) {
    return fromView(new Bind(f, (function () {
        var $123 = Control_Applicative.pure(freeApplicative);
        return function ($124) {
            return $123($124);
        };
    })()));
};
var freeMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return liftF;
});
var monoidFree = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupFree(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(freeApplicative)(Data_Monoid.mempty(dictMonoid)));
};
var substFree = function (k) {
    var go = function (f) {
        var v = toView(f);
        if (v instanceof Return) {
            return Control_Applicative.pure(freeApplicative)(v.value0);
        };
        if (v instanceof Bind) {
            return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
        };
        throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [ v.constructor.name ]);
    };
    return go;
};
var hoistFree = function (k) {
    return substFree(function ($125) {
        return liftF(k($125));
    });
};
var foldableFree = function (dictFunctor) {
    return function (dictFoldable) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                var go = (function () {
                    var $126 = resume(dictFunctor);
                    return function ($127) {
                        return (function (v) {
                            if (v instanceof Data_Either.Left) {
                                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(v.value0);
                            };
                            if (v instanceof Data_Either.Right) {
                                return f(v.value0);
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free (line 93, column 21 - line 95, column 21): " + [ v.constructor.name ]);
                        })($126($127));
                    };
                })();
                return go;
            };
        }, function (f) {
            var go = function (r) {
                var $128 = resume(dictFunctor);
                return function ($129) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldl(dictFoldable)(go)(r)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(r)(v.value0);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 98, column 23 - line 100, column 23): " + [ v.constructor.name ]);
                    })($128($129));
                };
            };
            return go;
        }, function (f) {
            var go = function (r) {
                var $130 = resume(dictFunctor);
                return function ($131) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(go))(r)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(v.value0)(r);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 103, column 23 - line 105, column 23): " + [ v.constructor.name ]);
                    })($130($131));
                };
            };
            return go;
        });
    };
};
var traversableFree = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableFree(dictTraversable.Functor0())(dictTraversable.Foldable1());
    }, function () {
        return freeFunctor;
    }, function (dictApplicative) {
        return function (tma) {
            return Data_Traversable.traverse(traversableFree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(tma);
        };
    }, function (dictApplicative) {
        return function (f) {
            var go = (function () {
                var $132 = resume(dictTraversable.Functor0());
                return function ($133) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Functor.map((dictApplicative.Apply0()).Functor0())((function () {
                                var $134 = Control_Bind.join(freeBind);
                                return function ($135) {
                                    return $134(liftF($135));
                                };
                            })())(Data_Traversable.traverse(dictTraversable)(dictApplicative)(go)(v.value0));
                        };
                        if (v instanceof Data_Either.Right) {
                            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Control_Applicative.pure(freeApplicative))(f(v.value0));
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 110, column 21 - line 112, column 30): " + [ v.constructor.name ]);
                    })($132($133));
                };
            })();
            return go;
        };
    });
};
var foldFree = function (dictMonadRec) {
    return function (k) {
        var go = function (f) {
            var v = toView(f);
            if (v instanceof Return) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
            };
            if (v instanceof Bind) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($136) {
                    return Control_Monad_Rec_Class.Loop.create(v.value1($136));
                })(k(v.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var eqFree = function (dictFunctor) {
    return function (dictEq1) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    var v = resume(dictFunctor)(y);
                    var v1 = resume(dictFunctor)(x);
                    if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                        return Data_Eq.eq1(dictEq1)(eqFree(dictFunctor)(dictEq1)(dictEq))(v1.value0)(v.value0);
                    };
                    if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                        return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                    };
                    return false;
                };
            });
        };
    };
};
var ordFree = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqFree(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }, function (x) {
                return function (y) {
                    var v = resume(dictFunctor)(y);
                    var v1 = resume(dictFunctor)(x);
                    if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                        return Data_Ord.compare1(dictOrd1)(ordFree(dictFunctor)(dictOrd1)(dictOrd))(v1.value0)(v.value0);
                    };
                    if (v1 instanceof Data_Either.Left) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Either.Left) {
                        return Data_Ordering.GT.value;
                    };
                    if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                        return Data_Ord.compare(dictOrd)(v1.value0)(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free (line 56, column 17 - line 60, column 36): " + [ v1.constructor.name, v.constructor.name ]);
                };
            });
        };
    };
};
var eq1Free = function (dictFunctor) {
    return function (dictEq1) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqFree(dictFunctor)(dictEq1)(dictEq));
        });
    };
};
var ord1Free = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord1(function () {
                return eq1Free(dictFunctor)(dictOrd1.Eq10());
            }, function (dictOrd2) {
                return Data_Ord.compare(ordFree(dictFunctor)(dictOrd1)(dictOrd2));
            });
        };
    };
};
module.exports = {
    suspendF: suspendF,
    wrap: wrap,
    liftF: liftF,
    hoistFree: hoistFree,
    foldFree: foldFree,
    substFree: substFree,
    runFree: runFree,
    runFreeM: runFreeM,
    resume: resume,
    "resume'": resume$prime,
    eqFree: eqFree,
    eq1Free: eq1Free,
    ordFree: ordFree,
    ord1Free: ord1Free,
    freeFunctor: freeFunctor,
    freeBind: freeBind,
    freeApplicative: freeApplicative,
    freeApply: freeApply,
    freeMonad: freeMonad,
    freeMonadTrans: freeMonadTrans,
    freeMonadRec: freeMonadRec,
    foldableFree: foldableFree,
    traversableFree: traversableFree,
    semigroupFree: semigroupFree,
    monoidFree: monoidFree
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Data.CatList/index.js":"1FVYV","../Data.Either/index.js":"5Va79","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Traversable/index.js":"2NLLF","../Unsafe.Coerce/index.js":"3fQke"}],"1FVYV":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_CatQueue = require("../Data.CatQueue/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var CatNil = (function () {
    function CatNil() {

    };
    CatNil.value = new CatNil();
    return CatNil;
})();
var CatCons = (function () {
    function CatCons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CatCons.create = function (value0) {
        return function (value1) {
            return new CatCons(value0, value1);
        };
    };
    return CatCons;
})();
var showCatList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof CatNil) {
            return "CatNil";
        };
        if (v instanceof CatCons) {
            return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
        };
        throw new Error("Failed pattern match at Data.CatList (line 148, column 1 - line 150, column 71): " + [ v.constructor.name ]);
    });
};
var $$null = function (v) {
    if (v instanceof CatNil) {
        return true;
    };
    return false;
};
var link = function (v) {
    return function (v1) {
        if (v instanceof CatNil) {
            return v1;
        };
        if (v1 instanceof CatNil) {
            return v;
        };
        if (v instanceof CatCons) {
            return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var foldr = function (k) {
    return function (b) {
        return function (q) {
            var foldl = function ($copy_v) {
                return function ($copy_c) {
                    return function ($copy_v1) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_c = $copy_c;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, c, v1) {
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return c;
                            };
                            if (v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v;
                                $tco_var_c = v(c)(v1.value0);
                                $copy_v1 = v1.value1;
                                return;
                            };
                            throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                        };
                        return $tco_result;
                    };
                };
            };
            var go = function ($copy_xs) {
                return function ($copy_ys) {
                    var $tco_var_xs = $copy_xs;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(xs, ys) {
                        var v = Data_CatQueue.uncons(xs);
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return foldl(function (x) {
                                return function (i) {
                                    return i(x);
                                };
                            })(b)(ys);
                        };
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_xs = v.value0.value1;
                            $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                            return;
                        };
                        throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                    };
                    return $tco_result;
                };
            };
            return go(q)(Data_List_Types.Nil.value);
        };
    };
};
var uncons = function (v) {
    if (v instanceof CatNil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof CatCons) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
            var $44 = Data_CatQueue["null"](v.value1);
            if ($44) {
                return CatNil.value;
            };
            return foldr(link)(CatNil.value)(v.value1);
        })()));
    };
    throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
};
var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
}, function (f) {
    var go = function ($copy_acc) {
        return function ($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
                var v = uncons(q);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = f(acc)(v.value0.value0);
                    $copy_q = v.value0.value1;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.CatList (line 157, column 16 - line 159, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_q);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (s) {
        return function (l) {
            return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
        };
    };
});
var length = Data_Foldable.length(foldableCatList)(Data_Semiring.semiringInt);
var foldMap = function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof CatNil) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof CatCons) {
                var d = (function () {
                    var $53 = Data_CatQueue["null"](v.value1);
                    if ($53) {
                        return CatNil.value;
                    };
                    return foldr(link)(CatNil.value)(v.value1);
                })();
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
            };
            throw new Error("Failed pattern match at Data.CatList (line 135, column 1 - line 135, column 62): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
};
var empty = CatNil.value;
var append = link;
var cons = function (a) {
    return function (cat) {
        return append(new CatCons(a, Data_CatQueue.empty))(cat);
    };
};
var functorCatList = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof CatNil) {
            return CatNil.value;
        };
        if (v1 instanceof CatCons) {
            var d = (function () {
                var $58 = Data_CatQueue["null"](v1.value1);
                if ($58) {
                    return CatNil.value;
                };
                return foldr(link)(CatNil.value)(v1.value1);
            })();
            return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
        };
        throw new Error("Failed pattern match at Data.CatList (line 185, column 1 - line 189, column 26): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var singleton = function (a) {
    return cons(a)(CatNil.value);
};
var traversableCatList = new Data_Traversable.Traversable(function () {
    return foldableCatList;
}, function () {
    return functorCatList;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof CatNil) {
            return Control_Applicative.pure(dictApplicative)(CatNil.value);
        };
        if (v instanceof CatCons) {
            var d = (function () {
                var $62 = Data_CatQueue["null"](v.value1);
                if ($62) {
                    return CatNil.value;
                };
                return foldr(link)(CatNil.value)(v.value1);
            })();
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(v.value0))(Data_Traversable.sequence(traversableCatList)(dictApplicative)(d));
        };
        throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof CatNil) {
                return Control_Applicative.pure(dictApplicative)(CatNil.value);
            };
            if (v1 instanceof CatCons) {
                var d = (function () {
                    var $67 = Data_CatQueue["null"](v1.value1);
                    if ($67) {
                        return CatNil.value;
                    };
                    return foldr(link)(CatNil.value)(v1.value1);
                })();
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(v(v1.value0)))(Data_Traversable.traverse(traversableCatList)(dictApplicative)(v)(d));
            };
            throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var semigroupCatList = new Data_Semigroup.Semigroup(append);
var monoidCatList = new Data_Monoid.Monoid(function () {
    return semigroupCatList;
}, CatNil.value);
var monadCatList = new Control_Monad.Monad(function () {
    return applicativeCatList;
}, function () {
    return bindCatList;
});
var bindCatList = new Control_Bind.Bind(function () {
    return applyCatList;
}, Data_Function.flip(foldMap(monoidCatList)));
var applyCatList = new Control_Apply.Apply(function () {
    return functorCatList;
}, Control_Monad.ap(monadCatList));
var applicativeCatList = new Control_Applicative.Applicative(function () {
    return applyCatList;
}, singleton);
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatList)(singleton)(f);
    };
};
var snoc = function (cat) {
    return function (a) {
        return append(cat)(new CatCons(a, Data_CatQueue.empty));
    };
};
var unfoldable1CatList = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return snoc(memo)(v.value0);
                    };
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = snoc(memo)(v.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatList (line 171, column 24 - line 173, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(CatNil.value);
    };
});
var unfoldableCatList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1CatList;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return memo;
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = snoc(memo)(v.value0.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatList (line 164, column 24 - line 166, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(CatNil.value);
    };
});
var altCatList = new Control_Alt.Alt(function () {
    return functorCatList;
}, append);
var plusCatList = new Control_Plus.Plus(function () {
    return altCatList;
}, empty);
var alternativeCatList = new Control_Alternative.Alternative(function () {
    return applicativeCatList;
}, function () {
    return plusCatList;
});
var monadZeroCatList = new Control_MonadZero.MonadZero(function () {
    return alternativeCatList;
}, function () {
    return monadCatList;
});
var monadPlusCatList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCatList;
});
module.exports = {
    CatNil: CatNil,
    CatCons: CatCons,
    empty: empty,
    "null": $$null,
    singleton: singleton,
    length: length,
    append: append,
    cons: cons,
    snoc: snoc,
    uncons: uncons,
    fromFoldable: fromFoldable,
    semigroupCatList: semigroupCatList,
    monoidCatList: monoidCatList,
    showCatList: showCatList,
    foldableCatList: foldableCatList,
    unfoldableCatList: unfoldableCatList,
    unfoldable1CatList: unfoldable1CatList,
    traversableCatList: traversableCatList,
    functorCatList: functorCatList,
    applyCatList: applyCatList,
    applicativeCatList: applicativeCatList,
    bindCatList: bindCatList,
    monadCatList: monadCatList,
    altCatList: altCatList,
    plusCatList: plusCatList,
    alternativeCatList: alternativeCatList,
    monadZeroCatList: monadZeroCatList,
    monadPlusCatList: monadPlusCatList
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.CatQueue/index.js":"3005n","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri"}],"3005n":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var CatQueue = (function () {
    function CatQueue(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CatQueue.create = function (value0) {
        return function (value1) {
            return new CatQueue(value0, value1);
        };
    };
    return CatQueue;
})();
var unsnoc = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value1 instanceof Data_List_Types.Cons) {
            $tco_done = true;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1.value0, new CatQueue(v.value0, v.value1.value1)));
        };
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v.value1 instanceof Data_List_Types.Nil) {
            $copy_v = new CatQueue(Data_List_Types.Nil.value, Data_List.reverse(v.value0));
            return;
        };
        throw new Error("Failed pattern match at Data.CatQueue (line 93, column 1 - line 93, column 63): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var uncons = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v.value0 instanceof Data_List_Types.Nil) {
            $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
            return;
        };
        if (v.value0 instanceof Data_List_Types.Cons) {
            $tco_done = true;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
        };
        throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var snoc = function (v) {
    return function (a) {
        return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
    };
};
var showCatQueue = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(CatQueue " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value1) + ")")));
    });
};
var $$null = function (v) {
    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var length = function (v) {
    return Data_List.length(v.value0) + Data_List.length(v.value1) | 0;
};
var functorCatQueue = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new CatQueue(Data_Functor.map(Data_List_Types.functorList)(f)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f)(v.value1));
    };
});
var foldableCatQueue = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableCatQueue)(dictMonoid);
}, function (f) {
    var go = function ($copy_acc) {
        return function ($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
                var v = uncons(q);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = f(acc)(v.value0.value0);
                    $copy_q = v.value0.value1;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.CatQueue (line 148, column 16 - line 150, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_q);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return Data_Foldable.foldrDefault(foldableCatQueue)(f);
});
var semigroupCatQueue = new Data_Semigroup.Semigroup(Data_Foldable.foldl(foldableCatQueue)(snoc));
var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
var monoidCatQueue = new Data_Monoid.Monoid(function () {
    return semigroupCatQueue;
}, empty);
var singleton = snoc(empty);
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatQueue)(singleton)(f);
    };
};
var traversableCatQueue = new Data_Traversable.Traversable(function () {
    return foldableCatQueue;
}, function () {
    return functorCatQueue;
}, function (dictApplicative) {
    return Data_Traversable.sequenceDefault(traversableCatQueue)(dictApplicative);
}, function (dictApplicative) {
    return function (f) {
        var $100 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableCatQueue)(snoc)(empty));
        var $101 = Data_Foldable.foldl(foldableCatQueue)(function (acc) {
            var $103 = Control_Apply.lift2(dictApplicative.Apply0())(snoc)(acc);
            return function ($104) {
                return $103(f($104));
            };
        })(Control_Applicative.pure(dictApplicative)(empty));
        return function ($102) {
            return $100($101($102));
        };
    };
});
var unfoldable1CatQueue = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return snoc(memo)(v.value0);
                    };
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = snoc(memo)(v.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatQueue (line 155, column 24 - line 157, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(empty);
    };
});
var unfoldableCatQueue = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1CatQueue;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return memo;
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = snoc(memo)(v.value0.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatQueue (line 162, column 24 - line 164, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(empty);
    };
});
var cqEq = function (dictEq) {
    var elemEq = Data_Eq.eq(dictEq);
    var go = function ($copy_xs) {
        return function ($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
                var v = uncons(ys);
                var v1 = uncons(xs);
                if (v1 instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && elemEq(v1.value0.value0)(v.value0.value0))) {
                    $tco_var_xs = v1.value0.value1;
                    $copy_ys = v.value0.value1;
                    return;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return true;
                };
                $tco_done = true;
                return false;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            };
            return $tco_result;
        };
    };
    return go;
};
var eqCatQueue = function (dictEq) {
    return new Data_Eq.Eq(cqEq(dictEq));
};
var cqCompare = function (dictOrd) {
    var elemCompare = Data_Ord.compare(dictOrd);
    var go = function ($copy_xs) {
        return function ($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
                var v = uncons(ys);
                var v1 = uncons(xs);
                if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
                    var v2 = elemCompare(v1.value0.value0)(v.value0.value0);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_var_xs = v1.value0.value1;
                        $copy_ys = v.value0.value1;
                        return;
                    };
                    $tco_done = true;
                    return v2;
                };
                if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Ordering.GT.value;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Ordering.EQ.value;
                };
                throw new Error("Failed pattern match at Data.CatQueue (line 118, column 16 - line 125, column 30): " + [ v1.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            };
            return $tco_result;
        };
    };
    return go;
};
var ordCatQueue = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqCatQueue(dictOrd.Eq0());
    }, cqCompare(dictOrd));
};
var cons = function (a) {
    return function (v) {
        return new CatQueue(new Data_List_Types.Cons(a, v.value0), v.value1);
    };
};
var monadCatQueue = new Control_Monad.Monad(function () {
    return applicativeCatQueue;
}, function () {
    return bindCatQueue;
});
var bindCatQueue = new Control_Bind.Bind(function () {
    return applyCatQueue;
}, Data_Function.flip(Data_Foldable.foldMap(foldableCatQueue)(monoidCatQueue)));
var applyCatQueue = new Control_Apply.Apply(function () {
    return functorCatQueue;
}, Control_Monad.ap(monadCatQueue));
var applicativeCatQueue = new Control_Applicative.Applicative(function () {
    return applyCatQueue;
}, singleton);
var altCatQueue = new Control_Alt.Alt(function () {
    return functorCatQueue;
}, Data_Semigroup.append(semigroupCatQueue));
var plusCatQueue = new Control_Plus.Plus(function () {
    return altCatQueue;
}, empty);
var alternativeCatQueue = new Control_Alternative.Alternative(function () {
    return applicativeCatQueue;
}, function () {
    return plusCatQueue;
});
var monadZeroCatQueue = new Control_MonadZero.MonadZero(function () {
    return alternativeCatQueue;
}, function () {
    return monadCatQueue;
});
var monadPlusCatQueue = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCatQueue;
});
module.exports = {
    CatQueue: CatQueue,
    empty: empty,
    "null": $$null,
    singleton: singleton,
    length: length,
    cons: cons,
    snoc: snoc,
    uncons: uncons,
    unsnoc: unsnoc,
    fromFoldable: fromFoldable,
    eqCatQueue: eqCatQueue,
    ordCatQueue: ordCatQueue,
    semigroupCatQueue: semigroupCatQueue,
    monoidCatQueue: monoidCatQueue,
    showCatQueue: showCatQueue,
    foldableCatQueue: foldableCatQueue,
    unfoldable1CatQueue: unfoldable1CatQueue,
    unfoldableCatQueue: unfoldableCatQueue,
    traversableCatQueue: traversableCatQueue,
    functorCatQueue: functorCatQueue,
    applyCatQueue: applyCatQueue,
    applicativeCatQueue: applicativeCatQueue,
    bindCatQueue: bindCatQueue,
    monadCatQueue: monadCatQueue,
    altCatQueue: altCatQueue,
    plusCatQueue: plusCatQueue,
    alternativeCatQueue: alternativeCatQueue,
    monadZeroCatQueue: monadZeroCatQueue,
    monadPlusCatQueue: monadPlusCatQueue
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri"}],"5g637":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var MonadAff = function (MonadEffect0, liftAff) {
    this.MonadEffect0 = MonadEffect0;
    this.liftAff = liftAff;
};
var monadAffAff = new MonadAff(function () {
    return Effect_Aff.monadEffectAff;
}, Control_Category.identity(Control_Category.categoryFn));
var liftAff = function (dict) {
    return dict.liftAff;
};
var monadAffContT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
    }, (function () {
        var $10 = Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)((dictMonadAff.MonadEffect0()).Monad0());
        var $11 = liftAff(dictMonadAff);
        return function ($12) {
            return $10($11($12));
        };
    })());
};
var monadAffExceptT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
    }, (function () {
        var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0());
        var $14 = liftAff(dictMonadAff);
        return function ($15) {
            return $13($14($15));
        };
    })());
};
var monadAffListT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
    }, (function () {
        var $16 = Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)((dictMonadAff.MonadEffect0()).Monad0());
        var $17 = liftAff(dictMonadAff);
        return function ($18) {
            return $16($17($18));
        };
    })());
};
var monadAffMaybe = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
    }, (function () {
        var $19 = Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)((dictMonadAff.MonadEffect0()).Monad0());
        var $20 = liftAff(dictMonadAff);
        return function ($21) {
            return $19($20($21));
        };
    })());
};
var monadAffRWS = function (dictMonadAff) {
    return function (dictMonoid) {
        return new MonadAff(function () {
            return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
        }, (function () {
            var $22 = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
            var $23 = liftAff(dictMonadAff);
            return function ($24) {
                return $22($23($24));
            };
        })());
    };
};
var monadAffReader = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
    }, (function () {
        var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
        var $26 = liftAff(dictMonadAff);
        return function ($27) {
            return $25($26($27));
        };
    })());
};
var monadAffState = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
    }, (function () {
        var $28 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0());
        var $29 = liftAff(dictMonadAff);
        return function ($30) {
            return $28($29($30));
        };
    })());
};
var monadAffWriter = function (dictMonadAff) {
    return function (dictMonoid) {
        return new MonadAff(function () {
            return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
        }, (function () {
            var $31 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
            var $32 = liftAff(dictMonadAff);
            return function ($33) {
                return $31($32($33));
            };
        })());
    };
};
module.exports = {
    liftAff: liftAff,
    MonadAff: MonadAff,
    monadAffAff: monadAffAff,
    monadAffContT: monadAffContT,
    monadAffExceptT: monadAffExceptT,
    monadAffListT: monadAffListT,
    monadAffMaybe: monadAffMaybe,
    monadAffReader: monadAffReader,
    monadAffRWS: monadAffRWS,
    monadAffState: monadAffState,
    monadAffWriter: monadAffWriter
};

},{"../Control.Category/index.js":"6QTyW","../Control.Monad.Cont.Trans/index.js":"6JAjN","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Control.Monad.List.Trans/index.js":"5LTmE","../Control.Monad.Maybe.Trans/index.js":"71d9O","../Control.Monad.RWS.Trans/index.js":"3zNWe","../Control.Monad.Reader.Trans/index.js":"1T7Hb","../Control.Monad.State.Trans/index.js":"4B1mz","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Trans/index.js":"2nVMU","../Effect.Aff/index.js":"1PqJZ"}],"5LTmE":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Yield = (function () {
    function Yield(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Yield.create = function (value0) {
        return function (value1) {
            return new Yield(value0, value1);
        };
    };
    return Yield;
})();
var Skip = (function () {
    function Skip(value0) {
        this.value0 = value0;
    };
    Skip.create = function (value0) {
        return new Skip(value0);
    };
    return Skip;
})();
var Done = (function () {
    function Done() {

    };
    Done.value = new Done();
    return Done;
})();
var ListT = function (x) {
    return x;
};
var wrapLazy = function (dictApplicative) {
    return function (v) {
        return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
    };
};
var wrapEffect = function (dictFunctor) {
    return function (v) {
        return ListT(Data_Functor.map(dictFunctor)(function ($183) {
            return Skip.create(Data_Lazy.defer(Data_Function["const"]($183)));
        })(v));
    };
};
var unfold = function (dictMonad) {
    return function (f) {
        return function (z) {
            var g = function (v) {
                if (v instanceof Data_Maybe.Just) {
                    return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                        return unfold(dictMonad)(f)(v.value0.value0);
                    }));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 130, column 3 - line 130, column 60): " + [ v.constructor.name ]);
            };
            return ListT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(g)(f(z)));
        };
    };
};
var uncons = function (dictMonad) {
    return function (v) {
        var g = function (v1) {
            if (v1 instanceof Yield) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
            };
            if (v1 instanceof Skip) {
                return uncons(dictMonad)(Data_Lazy.force(v1.value0));
            };
            if (v1 instanceof Done) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 195, column 3 - line 195, column 50): " + [ v1.constructor.name ]);
        };
        return Control_Bind.bind(dictMonad.Bind1())(v)(g);
    };
};
var tail = function (dictMonad) {
    return function (l) {
        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
    };
};
var stepMap = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return ListT(Data_Functor.map(dictFunctor)(f)(v));
        };
    };
};
var takeWhile = function (dictApplicative) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var $99 = f(v.value0);
                if ($99) {
                    return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                };
                return Done.value;
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 154, column 3 - line 154, column 68): " + [ v.constructor.name ]);
        };
        return stepMap((dictApplicative.Apply0()).Functor0())(g);
    };
};
var scanl = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (l) {
                var g = function (v) {
                    var h = function (v1) {
                        if (v1 instanceof Yield) {
                            var b$prime$prime = f(v.value0)(v1.value0);
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
                        };
                        if (v1 instanceof Skip) {
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                        };
                        if (v1 instanceof Done) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 248, column 5 - line 248, column 78): " + [ v1.constructor.name ]);
                    };
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(v.value1);
                };
                return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
            };
        };
    };
};
var prepend$prime = function (dictApplicative) {
    return function (h) {
        return function (t) {
            return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
        };
    };
};
var prepend = function (dictApplicative) {
    return function (h) {
        return function (t) {
            return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
        };
    };
};
var nil = function (dictApplicative) {
    return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
};
var singleton = function (dictApplicative) {
    return function (a) {
        return prepend(dictApplicative)(a)(nil(dictApplicative));
    };
};
var take = function (dictApplicative) {
    return function (v) {
        return function (fa) {
            if (v === 0) {
                return nil(dictApplicative);
            };
            var f = function (v1) {
                if (v1 instanceof Yield) {
                    return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
                };
                if (v1 instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                };
                if (v1 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 147, column 3 - line 147, column 47): " + [ v1.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
        };
    };
};
var zipWith$prime = function (dictMonad) {
    return function (f) {
        var g = function (v) {
            return function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                };
                if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
                        return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                    })))(f(v.value0.value0)(v1.value0.value0));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 260, column 3 - line 260, column 25): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        var loop = function (fa) {
            return function (fb) {
                return wrapEffect(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (ua) {
                    return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (ub) {
                        return g(ua)(ub);
                    });
                }));
            };
        };
        return loop;
    };
};
var zipWith = function (dictMonad) {
    return function (f) {
        var g = function (a) {
            return function (b) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
            };
        };
        return zipWith$prime(dictMonad)(g);
    };
};
var newtypeListT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ListT);
var mapMaybe = function (dictFunctor) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 183, column 3 - line 183, column 72): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    };
};
var iterate = function (dictMonad) {
    return function (f) {
        return function (a) {
            var g = function (x) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
            };
            return unfold(dictMonad)(g)(a);
        };
    };
};
var repeat = function (dictMonad) {
    return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var head = function (dictMonad) {
    return function (l) {
        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
    };
};
var functorListT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
            };
            if (v instanceof Skip) {
                return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 280, column 5 - line 280, column 48): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    });
};
var fromEffect = function (dictApplicative) {
    return function (fa) {
        return ListT(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
            return nil(dictApplicative);
        })))(fa));
    };
};
var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return fromEffect(dictMonad.Applicative0());
});
var foldlRec$prime = function (dictMonadRec) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(b)(v.value0.value0))(function (b$prime) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                a: b$prime,
                                b: v.value0.value1
                            }));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 221, column 5 - line 221, column 45): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
    };
};
var runListTRec = function (dictMonadRec) {
    return foldlRec$prime(dictMonadRec)(function (v) {
        return function (v1) {
            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Unit.unit);
        };
    })(Data_Unit.unit);
};
var foldlRec = function (dictMonadRec) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                            a: f(b)(v.value0.value0),
                            b: v.value0.value1
                        }));
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 239, column 7 - line 239, column 47): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
    };
};
var foldl$prime = function (dictMonad) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(b);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 212, column 5 - line 212, column 35): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
            };
        };
        return loop;
    };
};
var runListT = function (dictMonad) {
    return foldl$prime(dictMonad)(function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
        };
    })(Data_Unit.unit);
};
var foldl = function (dictMonad) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(b);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return loop(f(b)(v.value0.value0))(v.value0.value1);
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 229, column 5 - line 229, column 35): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
            };
        };
        return loop;
    };
};
var filter = function (dictFunctor) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                var $150 = f(v.value0);
                if ($150) {
                    return new Yield(v.value0, s$prime);
                };
                return new Skip(s$prime);
            };
            if (v instanceof Skip) {
                var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                return new Skip(s$prime);
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 176, column 3 - line 176, column 80): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    };
};
var dropWhile = function (dictApplicative) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var $155 = f(v.value0);
                if ($155) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                };
                return new Yield(v.value0, v.value1);
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 169, column 3 - line 169, column 70): " + [ v.constructor.name ]);
        };
        return stepMap((dictApplicative.Apply0()).Functor0())(g);
    };
};
var drop = function (dictApplicative) {
    return function (v) {
        return function (fa) {
            if (v === 0) {
                return fa;
            };
            var f = function (v1) {
                if (v1 instanceof Yield) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
                };
                if (v1 instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                };
                if (v1 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 162, column 3 - line 162, column 44): " + [ v1.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
        };
    };
};
var cons = function (dictApplicative) {
    return function (lh) {
        return function (t) {
            return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
        };
    };
};
var unfoldable1ListT = function (dictMonad) {
    return new Data_Unfoldable1.Unfoldable1(function (f) {
        return function (b) {
            var go = function (v) {
                if (v.value1 instanceof Data_Maybe.Nothing) {
                    return singleton(dictMonad.Applicative0())(v.value0);
                };
                if (v.value1 instanceof Data_Maybe.Just) {
                    return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
                        return go(f(v.value1.value0));
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 294, column 12 - line 296, column 67): " + [ v.constructor.name ]);
            };
            return go(f(b));
        };
    });
};
var unfoldableListT = function (dictMonad) {
    return new Data_Unfoldable.Unfoldable(function () {
        return unfoldable1ListT(dictMonad);
    }, function (f) {
        return function (b) {
            var go = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return nil(dictMonad.Applicative0());
                };
                if (v instanceof Data_Maybe.Just) {
                    return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                        return go(f(v.value0.value1));
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 287, column 12 - line 289, column 67): " + [ v.constructor.name ]);
            };
            return go(f(b));
        };
    });
};
var semigroupListT = function (dictApplicative) {
    return new Data_Semigroup.Semigroup(concat(dictApplicative));
};
var concat = function (dictApplicative) {
    return function (x) {
        return function (y) {
            var f = function (v) {
                if (v instanceof Yield) {
                    return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                    })(v.value1));
                };
                if (v instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                    })(v.value0));
                };
                if (v instanceof Done) {
                    return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 106, column 3 - line 106, column 43): " + [ v.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(x);
        };
    };
};
var monoidListT = function (dictApplicative) {
    return new Data_Monoid.Monoid(function () {
        return semigroupListT(dictApplicative);
    }, nil(dictApplicative));
};
var catMaybes = function (dictFunctor) {
    return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};
var monadListT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeListT(dictMonad);
    }, function () {
        return bindListT(dictMonad);
    });
};
var bindListT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyListT(dictMonad);
    }, function (fa) {
        return function (f) {
            var g = function (v) {
                if (v instanceof Yield) {
                    var h = function (s$prime) {
                        return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
                    };
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                };
                if (v instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                    })(v.value0));
                };
                if (v instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 306, column 5 - line 308, column 31): " + [ v.constructor.name ]);
            };
            return stepMap(((dictMonad.Bind1()).Apply0()).Functor0())(g)(fa);
        };
    });
};
var applyListT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorListT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadListT(dictMonad)));
};
var applicativeListT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyListT(dictMonad);
    }, singleton(dictMonad.Applicative0()));
};
var monadEffectListT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadListT(dictMonadEffect.Monad0());
    }, (function () {
        var $184 = Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0());
        var $185 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($186) {
            return $184($185($186));
        };
    })());
};
var altListT = function (dictApplicative) {
    return new Control_Alt.Alt(function () {
        return functorListT((dictApplicative.Apply0()).Functor0());
    }, concat(dictApplicative));
};
var plusListT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altListT(dictMonad.Applicative0());
    }, nil(dictMonad.Applicative0()));
};
var alternativeListT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeListT(dictMonad);
    }, function () {
        return plusListT(dictMonad);
    });
};
var monadZeroListT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeListT(dictMonad);
    }, function () {
        return monadListT(dictMonad);
    });
};
var monadPlusListT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroListT(dictMonad);
    });
};
module.exports = {
    ListT: ListT,
    Yield: Yield,
    Skip: Skip,
    Done: Done,
    catMaybes: catMaybes,
    cons: cons,
    drop: drop,
    dropWhile: dropWhile,
    filter: filter,
    foldl: foldl,
    foldlRec: foldlRec,
    "foldl'": foldl$prime,
    "foldlRec'": foldlRec$prime,
    fromEffect: fromEffect,
    head: head,
    iterate: iterate,
    mapMaybe: mapMaybe,
    nil: nil,
    prepend: prepend,
    "prepend'": prepend$prime,
    repeat: repeat,
    runListT: runListT,
    runListTRec: runListTRec,
    scanl: scanl,
    singleton: singleton,
    tail: tail,
    take: take,
    takeWhile: takeWhile,
    uncons: uncons,
    unfold: unfold,
    wrapEffect: wrapEffect,
    wrapLazy: wrapLazy,
    zipWith: zipWith,
    "zipWith'": zipWith$prime,
    newtypeListT: newtypeListT,
    semigroupListT: semigroupListT,
    monoidListT: monoidListT,
    functorListT: functorListT,
    unfoldableListT: unfoldableListT,
    unfoldable1ListT: unfoldable1ListT,
    applyListT: applyListT,
    applicativeListT: applicativeListT,
    bindListT: bindListT,
    monadListT: monadListT,
    monadTransListT: monadTransListT,
    altListT: altListT,
    plusListT: plusListT,
    alternativeListT: alternativeListT,
    monadZeroListT: monadZeroListT,
    monadPlusListT: monadPlusListT,
    monadEffectListT: monadEffectListT
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Lazy/index.js":"weSzE","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri","../Data.Unit/index.js":"64zbv","../Effect.Class/index.js":"70nM9"}],"3zNWe":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var RWSResult = (function () {
    function RWSResult(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RWSResult.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RWSResult(value0, value1, value2);
            };
        };
    };
    return RWSResult;
})();
var RWST = function (x) {
    return x;
};
var withRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Data_Tuple.uncurry(m)(f(r)(s));
            };
        };
    };
};
var runRWST = function (v) {
    return v;
};
var newtypeRWST = new Data_Newtype.Newtype(function (n) {
    return n;
}, RWST);
var monadTransRWST = function (dictMonoid) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (m) {
            return function (v) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                    });
                };
            };
        };
    });
};
var mapRWST = function (f) {
    return function (v) {
        return function (r) {
            return function (s) {
                return f(v(r)(s));
            };
        };
    };
};
var lazyRWST = new Control_Lazy.Lazy(function (f) {
    return function (r) {
        return function (s) {
            var v = f(Data_Unit.unit);
            return v(r)(s);
        };
    };
});
var functorRWST = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (r) {
                return function (s) {
                    return Data_Functor.map(dictFunctor)(function (v1) {
                        return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                    })(v(r)(s));
                };
            };
        };
    });
};
var execRWST = function (dictMonad) {
    return function (v) {
        return function (r) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                });
            };
        };
    };
};
var evalRWST = function (dictMonad) {
    return function (v) {
        return function (r) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                });
            };
        };
    };
};
var applyRWST = function (dictBind) {
    return function (dictMonoid) {
        return new Control_Apply.Apply(function () {
            return functorRWST((dictBind.Apply0()).Functor0());
        }, function (v) {
            return function (v1) {
                return function (r) {
                    return function (s) {
                        return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                            return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                            });
                        });
                    };
                };
            };
        });
    };
};
var bindRWST = function (dictBind) {
    return function (dictMonoid) {
        return new Control_Bind.Bind(function () {
            return applyRWST(dictBind)(dictMonoid);
        }, function (v) {
            return function (f) {
                return function (r) {
                    return function (s) {
                        return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                            var v2 = f(v1.value1);
                            return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                            });
                        });
                    };
                };
            };
        });
    };
};
var applicativeRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Applicative.Applicative(function () {
            return applyRWST(dictMonad.Bind1())(dictMonoid);
        }, function (a) {
            return function (v) {
                return function (s) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                };
            };
        });
    };
};
var monadRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad.Monad(function () {
            return applicativeRWST(dictMonad)(dictMonoid);
        }, function () {
            return bindRWST(dictMonad.Bind1())(dictMonoid);
        });
    };
};
var monadAskRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (r) {
            return function (s) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
            };
        });
    };
};
var monadReaderRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Reader_Class.MonadReader(function () {
            return monadAskRWST(dictMonad)(dictMonoid);
        }, function (f) {
            return function (m) {
                return function (r) {
                    return function (s) {
                        return m(f(r))(s);
                    };
                };
            };
        });
    };
};
var monadEffectRWS = function (dictMonoid) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
        }, (function () {
            var $155 = Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0());
            var $156 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($157) {
                return $155($156($157));
            };
        })());
    };
};
var monadRecRWST = function (dictMonadRec) {
    return function (dictMonoid) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadRWST(dictMonadRec.Monad0())(dictMonoid);
        }, function (k) {
            return function (a) {
                var k$prime = function (r) {
                    return function (v) {
                        var v1 = k(v.value1);
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(r)(v.value0))(function (v2) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                                if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                                    return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                };
                                if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                                    return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                };
                                throw new Error("Failed pattern match at Control.Monad.RWS.Trans (line 127, column 16 - line 129, column 68): " + [ v2.value1.constructor.name ]);
                            })());
                        });
                    };
                };
                return function (r) {
                    return function (s) {
                        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                    };
                };
            };
        });
    };
};
var monadStateRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (f) {
            return function (v) {
                return function (s) {
                    var v1 = f(s);
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                };
            };
        });
    };
};
var monadTellRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (w) {
            return function (v) {
                return function (s) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                };
            };
        });
    };
};
var monadWriterRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadTellRWST(dictMonad)(dictMonoid);
        }, function (m) {
            return function (r) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                    });
                };
            };
        }, function (m) {
            return function (r) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                    });
                };
            };
        });
    };
};
var monadThrowRWST = function (dictMonadThrow) {
    return function (dictMonoid) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
        }, function (e) {
            return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        });
    };
};
var monadErrorRWST = function (dictMonadError) {
    return function (dictMonoid) {
        return new Control_Monad_Error_Class.MonadError(function () {
            return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
        }, function (m) {
            return function (h) {
                return RWST(function (r) {
                    return function (s) {
                        return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                            var v = h(e);
                            return v(r)(s);
                        });
                    };
                });
            };
        });
    };
};
var altRWST = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorRWST(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return RWST(function (r) {
                return function (s) {
                    return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
                };
            });
        };
    });
};
var plusRWST = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altRWST(dictPlus.Alt0());
    }, function (v) {
        return function (v1) {
            return Control_Plus.empty(dictPlus);
        };
    });
};
var alternativeRWST = function (dictMonoid) {
    return function (dictAlternative) {
        return function (dictMonad) {
            return new Control_Alternative.Alternative(function () {
                return applicativeRWST(dictMonad)(dictMonoid);
            }, function () {
                return plusRWST(dictAlternative.Plus1());
            });
        };
    };
};
module.exports = {
    RWSResult: RWSResult,
    RWST: RWST,
    runRWST: runRWST,
    evalRWST: evalRWST,
    execRWST: execRWST,
    mapRWST: mapRWST,
    withRWST: withRWST,
    newtypeRWST: newtypeRWST,
    functorRWST: functorRWST,
    applyRWST: applyRWST,
    altRWST: altRWST,
    alternativeRWST: alternativeRWST,
    bindRWST: bindRWST,
    applicativeRWST: applicativeRWST,
    monadRWST: monadRWST,
    monadTransRWST: monadTransRWST,
    lazyRWST: lazyRWST,
    monadEffectRWS: monadEffectRWS,
    monadAskRWST: monadAskRWST,
    monadReaderRWST: monadReaderRWST,
    monadStateRWST: monadStateRWST,
    monadTellRWST: monadTellRWST,
    monadWriterRWST: monadWriterRWST,
    monadThrowRWST: monadThrowRWST,
    monadErrorRWST: monadErrorRWST,
    monadRecRWST: monadRecRWST,
    plusRWST: plusRWST
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Lazy/index.js":"79VGa","../Control.Monad/index.js":"4SDam","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.Plus/index.js":"2CmD1","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect.Class/index.js":"70nM9"}],"4B1mz":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var StateT = function (x) {
    return x;
};
var withStateT = function (f) {
    return function (v) {
        return function ($105) {
            return v(f($105));
        };
    };
};
var runStateT = function (v) {
    return v;
};
var newtypeStateT = new Data_Newtype.Newtype(function (n) {
    return n;
}, StateT);
var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (s) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
            });
        };
    };
});
var mapStateT = function (f) {
    return function (v) {
        return function ($106) {
            return f(v($106));
        };
    };
};
var lazyStateT = new Control_Lazy.Lazy(function (f) {
    return function (s) {
        var v = f(Data_Unit.unit);
        return v(s);
    };
});
var functorStateT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (s) {
                return Data_Functor.map(dictFunctor)(function (v1) {
                    return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                })(v(s));
            };
        };
    });
};
var execStateT = function (dictFunctor) {
    return function (v) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
        };
    };
};
var evalStateT = function (dictFunctor) {
    return function (v) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
        };
    };
};
var monadStateT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeStateT(dictMonad);
    }, function () {
        return bindStateT(dictMonad);
    });
};
var bindStateT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyStateT(dictMonad);
    }, function (v) {
        return function (f) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                    var v3 = f(v1.value0);
                    return v3(v1.value1);
                });
            };
        };
    });
};
var applyStateT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadStateT(dictMonad)));
};
var applicativeStateT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyStateT(dictMonad);
    }, function (a) {
        return function (s) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
        };
    });
};
var monadAskStateT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadStateT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderStateT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskStateT(dictMonadReader.MonadAsk0());
    }, (function () {
        var $107 = Control_Monad_Reader_Class.local(dictMonadReader);
        return function ($108) {
            return mapStateT($107($108));
        };
    })());
};
var monadContStateT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadStateT(dictMonadCont.Monad0());
    }, function (f) {
        return function (s) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function (a) {
                    return function (s$prime) {
                        return c(new Data_Tuple.Tuple(a, s$prime));
                    };
                });
                return v(s);
            });
        };
    });
};
var monadEffectState = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadStateT(dictMonadEffect.Monad0());
    }, (function () {
        var $109 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
        var $110 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($111) {
            return $109($110($111));
        };
    })());
};
var monadRecStateT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadStateT(dictMonadRec.Monad0());
    }, function (f) {
        return function (a) {
            var f$prime = function (v) {
                var v1 = f(v.value0);
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(v.value1))(function (v2) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                        if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                            return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                        };
                        if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                            return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                        };
                        throw new Error("Failed pattern match at Control.Monad.State.Trans (line 87, column 16 - line 89, column 40): " + [ v2.value0.constructor.name ]);
                    })());
                });
            };
            return function (s) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
            };
        };
    });
};
var monadStateStateT = function (dictMonad) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadStateT(dictMonad);
    }, function (f) {
        return StateT((function () {
            var $112 = Control_Applicative.pure(dictMonad.Applicative0());
            return function ($113) {
                return $112(f($113));
            };
        })());
    });
};
var monadTellStateT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadStateT(dictMonadTell.Monad0());
    }, (function () {
        var $114 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0());
        var $115 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($116) {
            return $114($115($116));
        };
    })());
};
var monadWriterStateT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellStateT(dictMonadWriter.MonadTell0());
    }, function (m) {
        return function (s) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            });
        };
    }, function (m) {
        return function (s) {
            return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m(s))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            }));
        };
    });
};
var monadThrowStateT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadStateT(dictMonadThrow.Monad0());
    }, function (e) {
        return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorStateT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowStateT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return function (s) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                    var v1 = h(e);
                    return v1(s);
                });
            };
        };
    });
};
var altStateT = function (dictMonad) {
    return function (dictAlt) {
        return new Control_Alt.Alt(function () {
            return functorStateT(dictAlt.Functor0());
        }, function (v) {
            return function (v1) {
                return function (s) {
                    return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                };
            };
        });
    };
};
var plusStateT = function (dictMonad) {
    return function (dictPlus) {
        return new Control_Plus.Plus(function () {
            return altStateT(dictMonad)(dictPlus.Alt0());
        }, function (v) {
            return Control_Plus.empty(dictPlus);
        });
    };
};
var alternativeStateT = function (dictMonad) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeStateT(dictMonad);
        }, function () {
            return plusStateT(dictMonad)(dictAlternative.Plus1());
        });
    };
};
var monadZeroStateT = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
    }, function () {
        return monadStateT(dictMonadZero.Monad0());
    });
};
var monadPlusStateT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroStateT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    StateT: StateT,
    runStateT: runStateT,
    evalStateT: evalStateT,
    execStateT: execStateT,
    mapStateT: mapStateT,
    withStateT: withStateT,
    newtypeStateT: newtypeStateT,
    functorStateT: functorStateT,
    applyStateT: applyStateT,
    applicativeStateT: applicativeStateT,
    altStateT: altStateT,
    plusStateT: plusStateT,
    alternativeStateT: alternativeStateT,
    bindStateT: bindStateT,
    monadStateT: monadStateT,
    monadRecStateT: monadRecStateT,
    monadZeroStateT: monadZeroStateT,
    monadPlusStateT: monadPlusStateT,
    monadTransStateT: monadTransStateT,
    lazyStateT: lazyStateT,
    monadEffectState: monadEffectState,
    monadContStateT: monadContStateT,
    monadThrowStateT: monadThrowStateT,
    monadErrorStateT: monadErrorStateT,
    monadAskStateT: monadAskStateT,
    monadReaderStateT: monadReaderStateT,
    monadStateStateT: monadStateStateT,
    monadTellStateT: monadTellStateT,
    monadWriterStateT: monadWriterStateT
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Lazy/index.js":"79VGa","../Control.Monad/index.js":"4SDam","../Control.Monad.Cont.Class/index.js":"6O1fp","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Control.MonadPlus/index.js":"2VInw","../Control.MonadZero/index.js":"5ZMCc","../Control.Plus/index.js":"2CmD1","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect.Class/index.js":"70nM9"}],"2UGrF":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ChildQuery = (function () {
    function ChildQuery(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ChildQuery.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ChildQuery(value0, value1, value2);
            };
        };
    };
    return ChildQuery;
})();
var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var mkChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var functorChildQuery = new Data_Functor.Functor(function (f) {
    return unChildQueryBox(function (v) {
        return mkChildQueryBox(new ChildQuery(function (dictApplicative) {
            return v.value0(dictApplicative);
        }, v.value1, function ($6) {
            return f(v.value2($6));
        }));
    });
});
module.exports = {
    ChildQuery: ChildQuery,
    mkChildQueryBox: mkChildQueryBox,
    unChildQueryBox: unChildQueryBox,
    functorChildQuery: functorChildQuery
};

},{"../Data.Functor/index.js":"5ZkNG","../Unsafe.Coerce/index.js":"3fQke"}],"3Fogs":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Finalizer = function (x) {
    return x;
};
var EventSource = function (x) {
    return x;
};
var Emitter = function (x) {
    return x;
};
var semigroupFinalizer = function (dictApply) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var newtypeEventSource = new Data_Newtype.Newtype(function (n) {
    return n;
}, EventSource);
var monoidFinalizer = function (dictApplicative) {
    return new Data_Monoid.Monoid(function () {
        return semigroupFinalizer(dictApplicative.Apply0());
    }, Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
};
var hoistFinalizer = function (nat) {
    return function (v) {
        return nat(v);
    };
};
var hoistEmitter = function (nat) {
    return function (v) {
        return function ($37) {
            return nat(v($37));
        };
    };
};
var hoist = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            return EventSource(Data_Functor.map(dictFunctor)(function (e) {
                return {
                    producer: Control_Monad_Free_Trans.hoistFreeT(Control_Coroutine.functorEmit)(dictFunctor)(nat)(e.producer),
                    finalizer: hoistFinalizer(nat)(e.finalizer)
                };
            })(nat(v)));
        };
    };
};
var functorEventSource = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return EventSource(Data_Functor.map(dictFunctor)(function (e) {
                return {
                    producer: Control_Monad_Free_Trans.interpret(Control_Coroutine.functorEmit)(dictFunctor)(Data_Bifunctor.lmap(Control_Coroutine.bifunctorEmit)(f))(e.producer),
                    finalizer: e.finalizer
                };
            })(v));
        };
    });
};
var finalize = function (v) {
    return v;
};
var emit = function (v) {
    return function (a) {
        return v(new Data_Either.Left(a));
    };
};
var close = function (v) {
    return v(new Data_Either.Right(Data_Unit.unit));
};
var affEventSource = function (dictMonadAff) {
    return function (recv) {
        return EventSource(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (inputVar) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (finalizeVar) {
                var producer = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorEmit)((dictMonadAff.MonadEffect0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorEmit))((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(Data_Function.flip(Effect_Aff_AVar.put)(finalizeVar))(recv(Data_Function.flip(Effect_Aff_AVar.put)(inputVar))))))(function () {
                    return Control_Coroutine.producer((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff_AVar.take(inputVar)));
                });
                var finalizer = Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.attempt(Effect_Aff_AVar.take(finalizeVar))))(function (v) {
                    if (v instanceof Data_Either.Left) {
                        return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                    };
                    if (v instanceof Data_Either.Right) {
                        return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.kill(Effect_Exception.error("finalized"))(finalizeVar))(function () {
                            return finalize(v.value0);
                        }));
                    };
                    throw new Error("Failed pattern match at Halogen.Query.EventSource (line 71, column 51 - line 75, column 21): " + [ v.constructor.name ]);
                });
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    producer: producer,
                    finalizer: finalizer
                });
            });
        })));
    };
};
var effectEventSource = function (dictMonadAff) {
    var $38 = affEventSource(dictMonadAff);
    var $39 = Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(hoistEmitter(Effect_Aff.launchAff_))((function () {
        var $41 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
        var $42 = Data_Functor.map(Effect.functorEffect)(hoistFinalizer(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)));
        return function ($43) {
            return $41($42($43));
        };
    })());
    return function ($40) {
        return $38($39($40));
    };
};
var eventListenerEventSource = function (dictMonadAff) {
    return function (eventType) {
        return function (target) {
            return function (f) {
                return effectEventSource(dictMonadAff)(function (emitter) {
                    return function __do() {
                        var listener = Web_Event_EventTarget.eventListener((function () {
                            var $44 = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(emit(emitter));
                            return function ($45) {
                                return $44(f($45));
                            };
                        })())();
                        Web_Event_EventTarget.addEventListener(eventType)(listener)(false)(target)();
                        return Web_Event_EventTarget.removeEventListener(eventType)(listener)(false)(target);
                    };
                });
            };
        };
    };
};
module.exports = {
    EventSource: EventSource,
    hoist: hoist,
    affEventSource: affEventSource,
    effectEventSource: effectEventSource,
    eventListenerEventSource: eventListenerEventSource,
    Emitter: Emitter,
    emit: emit,
    close: close,
    hoistEmitter: hoistEmitter,
    Finalizer: Finalizer,
    finalize: finalize,
    hoistFinalizer: hoistFinalizer,
    newtypeEventSource: newtypeEventSource,
    functorEventSource: functorEventSource,
    semigroupFinalizer: semigroupFinalizer,
    monoidFinalizer: monoidFinalizer
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Coroutine/index.js":"2S32O","../Control.Monad.Free.Trans/index.js":"6iYQw","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Profunctor/index.js":"3X7aj","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff/index.js":"1PqJZ","../Effect.Aff.AVar/index.js":"4IeKf","../Effect.Aff.Class/index.js":"5g637","../Effect.Class/index.js":"70nM9","../Effect.Exception/index.js":"neabt","../Web.Event.EventTarget/index.js":"6ALxc"}],"2S32O":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Transform = function (x) {
    return x;
};
var Emit = (function () {
    function Emit(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Emit.create = function (value0) {
        return function (value1) {
            return new Emit(value0, value1);
        };
    };
    return Emit;
})();
var CoTransform = (function () {
    function CoTransform(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoTransform.create = function (value0) {
        return function (value1) {
            return new CoTransform(value0, value1);
        };
    };
    return CoTransform;
})();
var Await = function (x) {
    return x;
};
var runProcess = function (dictMonadRec) {
    return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)((function () {
        var $176 = Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0());
        var $177 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($178) {
            return $176($177($178));
        };
    })());
};
var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
        };
    };
});
var loop = function (dictFunctor) {
    return function (dictMonad) {
        return function (me) {
            return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
            })(Data_Unit.unit);
        };
    };
};
var fuseWithL = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (zap) {
                    return function (fs) {
                        return function (gs) {
                            var go = function (v) {
                                return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (l) {
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (r) {
                                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                                            return Control_Monad_Free_Trans.freeT(function (v1) {
                                                return go(t);
                                            });
                                        })(zap(Data_Tuple.Tuple.create)(l)(r)));
                                    });
                                }));
                            };
                            return Control_Monad_Free_Trans.freeT(function (v) {
                                return go(new Data_Tuple.Tuple(fs, gs));
                            });
                        };
                    };
                };
            };
        };
    };
};
var fuseWith = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (dictParallel) {
                    return function (zap) {
                        return function (fs) {
                            return function (gs) {
                                var go = function (v) {
                                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Data_Functor.map(((dictParallel.Applicative1()).Apply0()).Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (next) {
                                        if (next instanceof Data_Either.Left) {
                                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(next.value0));
                                        };
                                        if (next instanceof Data_Either.Right) {
                                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                return Control_Monad_Free_Trans.freeT(function (v1) {
                                                    return go(t);
                                                });
                                            })(next.value0)));
                                        };
                                        throw new Error("Failed pattern match at Control.Coroutine (line 79, column 5 - line 81, column 63): " + [ next.constructor.name ]);
                                    });
                                };
                                return Control_Monad_Free_Trans.freeT(function (v) {
                                    return go(new Data_Tuple.Tuple(fs, gs));
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
var joinConsumers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorAwait)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (v2) {
                        return f(v(v2.value0))(v1(v2.value1));
                    };
                };
            };
        });
    };
};
var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            var $179 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g);
            return function ($180) {
                return $179(v($180));
            };
        };
    };
});
var functorTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorTransform));
var composeTransformers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorTransform)(functorTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (i) {
                        var v2 = v(i);
                        var v3 = v1(v2.value0);
                        return new Data_Tuple.Tuple(v3.value0, f(v2.value1)(v3.value1));
                    };
                };
            };
        });
    };
};
var transform = function (dictMonad) {
    return function (f) {
        return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
            return new Data_Tuple.Tuple(f(i), Data_Unit.unit);
        });
    };
};
var transformConsumer = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (i) {
                        var v2 = v(i);
                        return f(v2.value1)(v1(v2.value0));
                    };
                };
            };
        });
    };
};
var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Emit(f(v.value0), g(v.value1));
        };
    };
});
var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
var connect = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return f(v.value1)(v1(v.value0));
                };
            };
        });
    };
};
var emit = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
    };
};
var joinProducers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorEmit)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new Emit(new Data_Tuple.Tuple(v.value0, v1.value0), f(v.value1)(v1.value1));
                };
            };
        });
    };
};
var producer = function (dictMonad) {
    return function (recv) {
        return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (e) {
            if (e instanceof Data_Either.Left) {
                return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad.Bind1()).Apply0()).Functor0()))(emit(dictMonad)(e.value0))(Data_Maybe.Nothing.value);
            };
            if (e instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(e.value0));
            };
            throw new Error("Failed pattern match at Control.Coroutine (line 125, column 3 - line 127, column 29): " + [ e.constructor.name ]);
        }));
    };
};
var pullFrom = function (dictMonadRec) {
    return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
            };
        };
    });
};
var transformProducer = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorTransform)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v1(v.value0);
                    return new Emit(v2.value0, f(v.value1)(v2.value1));
                };
            };
        });
    };
};
var bifunctorCoTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new CoTransform(f(v.value0), function ($181) {
                return g(v.value1($181));
            });
        };
    };
});
var functorCoTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorCoTransform));
var composeCoTransformers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorCoTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new CoTransform(v1.value0, function (i) {
                        return f(v.value1(i))(v1.value1(v.value0));
                    });
                };
            };
        });
    };
};
var cotransform = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.freeT(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(new CoTransform(o, Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCoTransform)(dictMonad)))));
        });
    };
};
var fuseCoTransform = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorCoTransform)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v(v1.value0);
                    return f(v2.value1)(v1.value1(v2.value0));
                };
            };
        });
    };
};
var transformCoTransformL = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new CoTransform(v1.value0, function (i1) {
                        var v2 = v(i1);
                        return f(v2.value1)(v1.value1(v2.value0));
                    });
                };
            };
        });
    };
};
var transformCoTransformR = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorCoTransform)(functorTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v1(v.value0);
                    return new CoTransform(v2.value0, function ($182) {
                        return (function (v3) {
                            return f(v3)(v2.value1);
                        })(v.value1($182));
                    });
                };
            };
        });
    };
};
var $$await = function (dictMonad) {
    return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var consumer = function (dictMonad) {
    return function (send) {
        return loop(functorAwait)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (a) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(a));
        }));
    };
};
module.exports = {
    loop: loop,
    runProcess: runProcess,
    fuseWith: fuseWith,
    fuseWithL: fuseWithL,
    Emit: Emit,
    emit: emit,
    producer: producer,
    Await: Await,
    "await": $$await,
    consumer: consumer,
    Transform: Transform,
    transform: transform,
    CoTransform: CoTransform,
    cotransform: cotransform,
    connect: connect,
    pullFrom: pullFrom,
    transformProducer: transformProducer,
    transformConsumer: transformConsumer,
    composeTransformers: composeTransformers,
    composeCoTransformers: composeCoTransformers,
    fuseCoTransform: fuseCoTransform,
    transformCoTransformL: transformCoTransformL,
    transformCoTransformR: transformCoTransformR,
    joinProducers: joinProducers,
    joinConsumers: joinConsumers,
    bifunctorEmit: bifunctorEmit,
    functorEmit: functorEmit,
    profunctorAwait: profunctorAwait,
    functorAwait: functorAwait,
    bifunctorTransform: bifunctorTransform,
    functorTransform: functorTransform,
    bifunctorCoTransform: bifunctorCoTransform,
    functorCoTransform: functorCoTransform
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Control.Monad.Free.Trans/index.js":"6iYQw","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Parallel.Class/index.js":"65Cks","../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Identity/index.js":"29odg","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Profunctor/index.js":"3X7aj","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv"}],"6iYQw":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Bound = (function () {
    function Bound(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bound.create = function (value0) {
        return function (value1) {
            return new Bound(value0, value1);
        };
    };
    return Bound;
})();
var FreeT = (function () {
    function FreeT(value0) {
        this.value0 = value0;
    };
    FreeT.create = function (value0) {
        return new FreeT(value0);
    };
    return FreeT;
})();
var Bind = (function () {
    function Bind(value0) {
        this.value0 = value0;
    };
    Bind.create = function (value0) {
        return new Bind(value0);
    };
    return Bind;
})();
var monadTransFreeT = function (dictFunctor) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (ma) {
            return new FreeT(function (v) {
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
            });
        };
    });
};
var freeT = FreeT.create;
var bound = function (m) {
    return function (f) {
        return new Bind(Data_Exists.mkExists(new Bound(m, f)));
    };
};
var functorFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                if (v instanceof FreeT) {
                    return new FreeT(function (v1) {
                        return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                    });
                };
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(v1.value0)((function () {
                            var $123 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
                            return function ($124) {
                                return $123(v1.value1($124));
                            };
                        })());
                    })(v.value0);
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 59, column 1 - line 61, column 71): " + [ f.constructor.name, v.constructor.name ]);
            };
        });
    };
};
var bimapFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (nf) {
            return function (nm) {
                return function (v) {
                    if (v instanceof Bind) {
                        return Data_Exists.runExists(function (v1) {
                            return bound((function () {
                                var $125 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                                return function ($126) {
                                    return $125(v1.value0($126));
                                };
                            })())((function () {
                                var $127 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                                return function ($128) {
                                    return $127(v1.value1($128));
                                };
                            })());
                        })(v.value0);
                    };
                    if (v instanceof FreeT) {
                        return new FreeT(function (v1) {
                            return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)((function () {
                                var $129 = Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm));
                                return function ($130) {
                                    return nf($129($130));
                                };
                            })()))(nm(v.value0(Data_Unit.unit)));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 123, column 1 - line 123, column 109): " + [ nf.constructor.name, nm.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
};
var hoistFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var interpret = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (nf) {
            return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var monadFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Monad.Monad(function () {
            return applicativeFreeT(dictFunctor)(dictMonad);
        }, function () {
            return bindFreeT(dictFunctor)(dictMonad);
        });
    };
};
var bindFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Bind.Bind(function () {
            return applyFreeT(dictFunctor)(dictMonad);
        }, function (v) {
            return function (f) {
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(v1.value0)(function (x) {
                            return bound(function (v2) {
                                return v1.value1(x);
                            })(f);
                        });
                    })(v.value0);
                };
                return bound(function (v1) {
                    return v;
                })(f);
            };
        });
    };
};
var applyFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Apply.Apply(function () {
            return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
        }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
    };
};
var applicativeFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Applicative.Applicative(function () {
            return applyFreeT(dictFunctor)(dictMonad);
        }, function (a) {
            return new FreeT(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
            });
        });
    };
};
var liftFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (fa) {
            return new FreeT(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
            });
        };
    };
};
var resume = function (dictFunctor) {
    return function (dictMonadRec) {
        var go = function (v) {
            if (v instanceof FreeT) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
            };
            if (v instanceof Bind) {
                return Data_Exists.runExists(function (v1) {
                    var v2 = v1.value0(Data_Unit.unit);
                    if (v2 instanceof FreeT) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                            };
                            if (v3 instanceof Data_Either.Right) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                    return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                })(v3.value0))));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 54, column 20 - line 56, column 67): " + [ v3.constructor.name ]);
                        });
                    };
                    if (v2 instanceof Bind) {
                        return Data_Exists.runExists(function (v3) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                            })));
                        })(v2.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 52, column 5 - line 57, column 98): " + [ v2.constructor.name ]);
                })(v.value0);
            };
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 49, column 3 - line 49, column 75): " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var runFreeT = function (dictFunctor) {
    return function (dictMonadRec) {
        return function (interp) {
            var go = function (v) {
                if (v instanceof Data_Either.Left) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                };
                if (v instanceof Data_Either.Right) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 141, column 3 - line 141, column 63): " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
        };
    };
};
var semigroupFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (dictSemigroup) {
            return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyFreeT(dictFunctor)(dictMonad))(Data_Semigroup.append(dictSemigroup)));
        };
    };
};
var monadAskFreeT = function (dictFunctor) {
    return function (dictMonadAsk) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadFreeT(dictFunctor)(dictMonadAsk.Monad0());
        }, Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
    };
};
var monadEffectFreeT = function (dictFunctor) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadFreeT(dictFunctor)(dictMonadEffect.Monad0());
        }, (function () {
            var $131 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadEffect.Monad0());
            var $132 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($133) {
                return $131($132($133));
            };
        })());
    };
};
var monadAffFreeT = function (dictFunctor) {
    return function (dictMonadAff) {
        return new Effect_Aff_Class.MonadAff(function () {
            return monadEffectFreeT(dictFunctor)(dictMonadAff.MonadEffect0());
        }, (function () {
            var $134 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))((dictMonadAff.MonadEffect0()).Monad0());
            var $135 = Effect_Aff_Class.liftAff(dictMonadAff);
            return function ($136) {
                return $134($135($136));
            };
        })());
    };
};
var monadStateFreeT = function (dictFunctor) {
    return function (dictMonadState) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadFreeT(dictFunctor)(dictMonadState.Monad0());
        }, (function () {
            var $137 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadState.Monad0());
            var $138 = Control_Monad_State_Class.state(dictMonadState);
            return function ($139) {
                return $137($138($139));
            };
        })());
    };
};
var monadTellFreeT = function (dictFunctor) {
    return function (dictMonadTell) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadFreeT(dictFunctor)(dictMonadTell.Monad0());
        }, (function () {
            var $140 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadTell.Monad0());
            var $141 = Control_Monad_Writer_Class.tell(dictMonadTell);
            return function ($142) {
                return $140($141($142));
            };
        })());
    };
};
var monadThrowFreeT = function (dictFunctor) {
    return function (dictMonadThrow) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadFreeT(dictFunctor)(dictMonadThrow.Monad0());
        }, (function () {
            var $143 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadThrow.Monad0());
            var $144 = Control_Monad_Error_Class.throwError(dictMonadThrow);
            return function ($145) {
                return $143($144($145));
            };
        })());
    };
};
var monadRecFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadFreeT(dictFunctor)(dictMonad);
        }, function (f) {
            var go = function (s) {
                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                    if (v instanceof Control_Monad_Rec_Class.Loop) {
                        return go(v.value0);
                    };
                    if (v instanceof Control_Monad_Rec_Class.Done) {
                        return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 82, column 15 - line 84, column 25): " + [ v.constructor.name ]);
                });
            };
            return go;
        });
    };
};
var monoidFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (dictMonoid) {
            return new Data_Monoid.Monoid(function () {
                return semigroupFreeT(dictFunctor)(dictMonad)(dictMonoid.Semigroup0());
            }, Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(Data_Monoid.mempty(dictMonoid)));
        };
    };
};
var substFreeT = function (dictMonad) {
    return function (dictFunctor) {
        return function (fBind) {
            return function (v) {
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound((function () {
                            var $146 = substFreeT(dictMonad)(dictFunctor)(fBind);
                            return function ($147) {
                                return $146(v1.value0($147));
                            };
                        })())((function () {
                            var $148 = substFreeT(dictMonad)(dictFunctor)(fBind);
                            return function ($149) {
                                return $148(v1.value1($149));
                            };
                        })());
                    })(v.value0);
                };
                if (v instanceof FreeT) {
                    return Control_Bind.join(bindFreeT(dictFunctor)(dictMonad))(new FreeT(function (v1) {
                        return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(v.value0(Data_Unit.unit))(function (v2) {
                            if (v2 instanceof Data_Either.Left) {
                                return Data_Either.Left.create(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v2.value0));
                            };
                            if (v2 instanceof Data_Either.Right) {
                                return Data_Either.Left.create(bound(function (v3) {
                                    return fBind(v2.value0);
                                })(substFreeT(dictMonad)(dictFunctor)(fBind)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 132, column 60 - line 134, column 69): " + [ v2.constructor.name ]);
                        });
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 130, column 1 - line 130, column 101): " + [ fBind.constructor.name, v.constructor.name ]);
            };
        };
    };
};
module.exports = {
    freeT: freeT,
    liftFreeT: liftFreeT,
    hoistFreeT: hoistFreeT,
    interpret: interpret,
    bimapFreeT: bimapFreeT,
    substFreeT: substFreeT,
    resume: resume,
    runFreeT: runFreeT,
    functorFreeT: functorFreeT,
    applyFreeT: applyFreeT,
    applicativeFreeT: applicativeFreeT,
    bindFreeT: bindFreeT,
    monadFreeT: monadFreeT,
    monadTransFreeT: monadTransFreeT,
    monadRecFreeT: monadRecFreeT,
    semigroupFreeT: semigroupFreeT,
    monoidFreeT: monoidFreeT,
    monadEffectFreeT: monadEffectFreeT,
    monadAffFreeT: monadAffFreeT,
    monadAskFreeT: monadAskFreeT,
    monadTellFreeT: monadTellFreeT,
    monadStateFreeT: monadStateFreeT,
    monadThrowFreeT: monadThrowFreeT
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Reader.Class/index.js":"5b4iC","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Monad.Writer.Class/index.js":"1wcNo","../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Exists/index.js":"2h0Nb","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv","../Effect.Aff.Class/index.js":"5g637","../Effect.Class/index.js":"70nM9"}],"3X7aj":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Profunctor = function (dimap) {
    this.dimap = dimap;
};
var profunctorFn = new Profunctor(function (a2b) {
    return function (c2d) {
        return function (b2c) {
            return function ($9) {
                return c2d(b2c(a2b($9)));
            };
        };
    };
});
var dimap = function (dict) {
    return dict.dimap;
};
var lcmap = function (dictProfunctor) {
    return function (a2b) {
        return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function (dictProfunctor) {
    return function (b2c) {
        return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
    };
};
var unwrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return dimap(dictProfunctor)(Data_Newtype.wrap(dictNewtype))(Data_Newtype.unwrap(dictNewtype));
    };
};
var wrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return function (v) {
            return dimap(dictProfunctor)(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype));
        };
    };
};
var arr = function (dictCategory) {
    return function (dictProfunctor) {
        return function (f) {
            return rmap(dictProfunctor)(f)(Control_Category.identity(dictCategory));
        };
    };
};
module.exports = {
    dimap: dimap,
    Profunctor: Profunctor,
    lcmap: lcmap,
    rmap: rmap,
    arr: arr,
    unwrapIso: unwrapIso,
    wrapIso: wrapIso,
    profunctorFn: profunctorFn
};

},{"../Control.Category/index.js":"6QTyW","../Data.Newtype/index.js":"2rjOq"}],"4IeKf":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Effect_AVar = require("../Effect.AVar/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var tryTake = (function () {
    var $0 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($1) {
        return $0(Effect_AVar.tryTake($1));
    };
})();
var tryRead = (function () {
    var $2 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($3) {
        return $2(Effect_AVar.tryRead($3));
    };
})();
var tryPut = function (value) {
    var $4 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $5 = Effect_AVar.tryPut(value);
    return function ($6) {
        return $4($5($6));
    };
};
var take = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var c = Effect_AVar.take(avar)(k)();
            return Effect_Aff.effectCanceler(c);
        };
    });
};
var status = (function () {
    var $7 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($8) {
        return $7(Effect_AVar.status($8));
    };
})();
var read = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var c = Effect_AVar.read(avar)(k)();
            return Effect_Aff.effectCanceler(c);
        };
    });
};
var put = function (value) {
    return function (avar) {
        return Effect_Aff.makeAff(function (k) {
            return function __do() {
                var c = Effect_AVar.put(value)(avar)(k)();
                return Effect_Aff.effectCanceler(c);
            };
        });
    };
};
var $$new = (function () {
    var $9 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($10) {
        return $9(Effect_AVar["new"]($10));
    };
})();
var kill = function (error) {
    var $11 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $12 = Effect_AVar.kill(error);
    return function ($13) {
        return $11($12($13));
    };
};
var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
module.exports = {
    "new": $$new,
    empty: empty,
    status: status,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill
};

},{"../Effect.AVar/index.js":"2yoIJ","../Effect.Aff/index.js":"1PqJZ","../Effect.Class/index.js":"70nM9"}],"2yoIJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var Filled = (function () {
    function Filled(value0) {
        this.value0 = value0;
    };
    Filled.create = function (value0) {
        return new Filled(value0);
    };
    return Filled;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var $$new = $foreign["_newVar"];
var isKilled = function (v) {
    if (v instanceof Killed) {
        return true;
    };
    return false;
};
var isFilled = function (v) {
    if (v instanceof Filled) {
        return true;
    };
    return false;
};
var isEmpty = function (v) {
    if (v instanceof Empty) {
        return true;
    };
    return false;
};
var ffiUtil = {
    left: Data_Either.Left.create,
    right: Data_Either.Right.create,
    nothing: Data_Maybe.Nothing.value,
    just: Data_Maybe.Just.create,
    killed: Killed.create,
    filled: Filled.create,
    empty: Empty.value
};
var kill = function (err) {
    return function (avar) {
        return $foreign["_killVar"](ffiUtil, err, avar);
    };
};
var put = function (value) {
    return function (avar) {
        return function (cb) {
            return $foreign["_putVar"](ffiUtil, value, avar, cb);
        };
    };
};
var read = function (avar) {
    return function (cb) {
        return $foreign["_readVar"](ffiUtil, avar, cb);
    };
};
var status = function (avar) {
    return $foreign["_status"](ffiUtil, avar);
};
var take = function (avar) {
    return function (cb) {
        return $foreign["_takeVar"](ffiUtil, avar, cb);
    };
};
var tryPut = function (value) {
    return function (avar) {
        return $foreign["_tryPutVar"](ffiUtil, value, avar);
    };
};
var tryRead = function (avar) {
    return $foreign["_tryReadVar"](ffiUtil, avar);
};
var tryTake = function (avar) {
    return $foreign["_tryTakeVar"](ffiUtil, avar);
};
module.exports = {
    Killed: Killed,
    Filled: Filled,
    Empty: Empty,
    "new": $$new,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill,
    status: status,
    isEmpty: isEmpty,
    isFilled: isFilled,
    isKilled: isKilled,
    empty: $foreign.empty
};

},{"./foreign.js":"2EGqR","../Data.Either/index.js":"5Va79","../Data.Maybe/index.js":"1Cwwt"}],"2EGqR":[function(require,module,exports) {
/* globals exports, setTimeout */
"use strict";

var AVar = function () {

  function MutableQueue () {
    this.head = null;
    this.last = null;
    this.size = 0;
  }

  function MutableCell (queue, value) {
    this.queue = queue;
    this.value = value;
    this.next  = null;
    this.prev  = null;
  }

  function AVar (value) {
    this.draining = false;
    this.error    = null;
    this.value    = value;
    this.takes    = new MutableQueue();
    this.reads    = new MutableQueue();
    this.puts     = new MutableQueue();
  }

  var EMPTY = {};

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function putLast (queue, value) {
    var cell = new MutableCell(queue, value);
    switch (queue.size) {
    case 0:
      queue.head = cell;
      break;
    case 1:
      cell.prev = queue.head;
      queue.head.next = cell;
      queue.last = cell;
      break;
    default:
      cell.prev = queue.last;
      queue.last.next = cell;
      queue.last = cell;
    }
    queue.size++;
    return cell;
  }

  function takeLast (queue) {
    var cell;
    switch (queue.size) {
    case 0:
      return null;
    case 1:
      cell = queue.head;
      queue.head = null;
      break;
    case 2:
      cell = queue.last;
      queue.head.next = null;
      queue.last = null;
      break;
    default:
      cell = queue.last;
      queue.last = cell.prev;
      queue.last.next = null;
    }
    cell.prev = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function takeHead (queue) {
    var cell;
    switch (queue.size) {
    case 0:
      return null;
    case 1:
      cell = queue.head;
      queue.head = null;
      break;
    case 2:
      cell = queue.head;
      queue.last.prev = null;
      queue.head = queue.last;
      queue.last = null;
      break;
    default:
      cell = queue.head;
      queue.head = cell.next;
      queue.head.prev = null;
    }
    cell.next = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function deleteCell (cell) {
    if (cell.queue === null) {
      return;
    }
    if (cell.queue.last === cell) {
      takeLast(cell.queue);
      return;
    }
    if (cell.queue.head === cell) {
      takeHead(cell.queue);
      return;
    }
    if (cell.prev) {
      cell.prev.next = cell.next;
    }
    if (cell.next) {
      cell.next.prev = cell.prev;
    }
    cell.queue.size--;
    cell.queue = null;
    cell.value = null;
    cell.next  = null;
    cell.prev  = null;
  }

  function drainVar (util, avar) {
    if (avar.draining) {
      return;
    }

    var ps = avar.puts;
    var ts = avar.takes;
    var rs = avar.reads;
    var p, r, t, value, rsize;

    avar.draining = true;

    while (1) { // eslint-disable-line no-constant-condition
      p = null;
      r = null;
      t = null;
      value = avar.value;
      rsize = rs.size;

      if (avar.error !== null) {
        value = util.left(avar.error);
        while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
          runEff(p.cb(value));
        }
        while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
          runEff(r(value));
        }
        while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
          runEff(t(value));
        }
        break;
      }

      // Process the next put. We do not immediately invoke the callback
      // because we want to preserve ordering. If there are takes/reads
      // we want to run those first.
      if (value === EMPTY && (p = takeHead(ps))) {
        avar.value = value = p.value;
      }

      if (value !== EMPTY) {
        // We go ahead and queue up the next take for the same reasons as
        // above. Invoking the read callbacks can affect the mutable queue.
        t = takeHead(ts);
        // We only want to process the reads queued up before running these
        // callbacks so we guard on rsize.
        while (rsize-- && (r = takeHead(rs))) {
          runEff(r(util.right(value)));
        }
        if (t !== null) {
          avar.value = EMPTY;
          runEff(t(util.right(value)));
        }
      }

      if (p !== null) {
        runEff(p.cb(util.right(void 0)));
      }

      // Callbacks could have queued up more items so we need to guard on the
      // actual mutable properties.
      if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
        break;
      }
    }
    avar.draining = false;
  }

  AVar.EMPTY      = EMPTY;
  AVar.putLast    = putLast;
  AVar.takeLast   = takeLast;
  AVar.takeHead   = takeHead;
  AVar.deleteCell = deleteCell;
  AVar.drainVar   = drainVar;

  return AVar;
}();

exports.empty = function () {
  return new AVar(AVar.EMPTY);
};

exports._newVar = function (value) {
  return function () {
    return new AVar(value);
  };
};

exports._killVar = function (util, error, avar) {
  return function () {
    if (avar.error === null) {
      avar.error = error;
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
    }
  };
};

exports._putVar = function (util, value, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._takeVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.takes, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._readVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.reads, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._tryPutVar = function (util, value, avar) {
  return function () {
    if (avar.value === AVar.EMPTY && avar.error === null) {
      avar.value = value;
      AVar.drainVar(util, avar);
      return true;
    } else {
      return false;
    }
  };
};

exports._tryTakeVar = function (util, avar) {
  return function () {
    var value = avar.value;
    if (value === AVar.EMPTY) {
      return util.nothing;
    } else {
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
      return util.just(value);
    }
  };
};

exports._tryReadVar = function (util, avar) {
  return function () {
    if (avar.value === AVar.EMPTY) {
      return util.nothing;
    } else {
      return util.just(avar.value);
    }
  };
};

exports._status = function (util, avar) {
  return function () {
    if (avar.error) {
      return util.killed(avar.error);
    }
    if (avar.value === AVar.EMPTY) {
      return util.empty;
    }
    return util.filled(avar.value);
  };
};


},{}],"2XQ0g":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Initialize = (function () {
    function Initialize(value0) {
        this.value0 = value0;
    };
    Initialize.create = function (value0) {
        return new Initialize(value0);
    };
    return Initialize;
})();
var Finalize = (function () {
    function Finalize(value0) {
        this.value0 = value0;
    };
    Finalize.create = function (value0) {
        return new Finalize(value0);
    };
    return Finalize;
})();
var Receive = (function () {
    function Receive(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Receive.create = function (value0) {
        return function (value1) {
            return new Receive(value0, value1);
        };
    };
    return Receive;
})();
var Action = (function () {
    function Action(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Action.create = function (value0) {
        return function (value1) {
            return new Action(value0, value1);
        };
    };
    return Action;
})();
var Query = (function () {
    function Query(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Query.create = function (value0) {
        return function (value1) {
            return new Query(value0, value1);
        };
    };
    return Query;
})();
var functorHalogenQ = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Initialize) {
            return new Initialize(f(m.value0));
        };
        if (m instanceof Finalize) {
            return new Finalize(f(m.value0));
        };
        if (m instanceof Receive) {
            return new Receive(m.value0, f(m.value1));
        };
        if (m instanceof Action) {
            return new Action(m.value0, f(m.value1));
        };
        if (m instanceof Query) {
            return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(f)(m.value0), Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
        };
        throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 23, column 1 - line 23, column 73): " + [ m.constructor.name ]);
    };
});
var bifunctorHalogenQ = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Initialize) {
                return new Initialize(g(v.value0));
            };
            if (v instanceof Finalize) {
                return new Finalize(g(v.value0));
            };
            if (v instanceof Receive) {
                return new Receive(f(v.value0), g(v.value1));
            };
            if (v instanceof Action) {
                return new Action(v.value0, g(v.value1));
            };
            if (v instanceof Query) {
                return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(g)(v.value0), Data_Functor.map(Data_Functor.functorFn)(g)(v.value1));
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 16, column 15 - line 21, column 45): " + [ v.constructor.name ]);
        };
    };
});
module.exports = {
    Initialize: Initialize,
    Finalize: Finalize,
    Receive: Receive,
    Action: Action,
    Query: Query,
    bifunctorHalogenQ: bifunctorHalogenQ,
    functorHalogenQ: functorHalogenQ
};

},{"../Data.Bifunctor/index.js":"4Uonh","../Data.Coyoneda/index.js":"5lDx8","../Data.Functor/index.js":"5ZkNG"}],"57lBX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Thunk = (function () {
    function Thunk(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Thunk.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Thunk(value0, value1, value2, value3);
                };
            };
        };
    };
    return Thunk;
})();
var unsafeThunkId = Unsafe_Coerce.unsafeCoerce;
var unsafeEqThunk = function (v, v1) {
    return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && v.value1(v.value3, v1.value3));
};
var thunk = function (tid, eqFn, f, a) {
    return new Thunk(tid, eqFn, f, a);
};
var thunk1 = function (f, a) {
    return thunk(unsafeThunkId(f), Halogen_VDom_Util.refEq, f, a);
};
var thunk2 = (function () {
    var eqFn = function (a, b) {
        return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && Halogen_VDom_Util.refEq(a["_2"], b["_2"]);
    };
    return function (f, a, b) {
        return thunk(unsafeThunkId(f), eqFn, function (v) {
            return f(v["_1"])(v["_2"]);
        }, {
            "_1": a,
            "_2": b
        });
    };
})();
var thunk3 = (function () {
    var eqFn = function (a, b) {
        return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && (Halogen_VDom_Util.refEq(a["_2"], b["_2"]) && Halogen_VDom_Util.refEq(a["_3"], b["_3"]));
    };
    return function (f, a, b, c) {
        return thunk(unsafeThunkId(f), eqFn, function (v) {
            return f(v["_1"])(v["_2"])(v["_3"]);
        }, {
            "_1": a,
            "_2": b,
            "_3": c
        });
    };
})();
var thunked = function (eqFn) {
    return function (f) {
        var tid = unsafeThunkId({
            f: f
        });
        var eqFn$prime = Data_Function_Uncurried.mkFn2(eqFn);
        return function (a) {
            return thunk(tid, eqFn$prime, f, a);
        };
    };
};
var runThunk = function (v) {
    return v.value2(v.value3);
};
var mapThunk = function (k) {
    return function (v) {
        return new Thunk(v.value0, v.value1, function ($46) {
            return k(v.value2($46));
        }, v.value3);
    };
};
var hoist = mapThunk;
var functorThunk = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return new Thunk(v.value0, v.value1, (function () {
                var $47 = Data_Functor.map(dictFunctor)(f);
                return function ($48) {
                    return $47(v.value2($48));
                };
            })(), v.value3);
        };
    });
};
var buildThunk = function (toVDom) {
    var haltThunk = function (state) {
        return Halogen_VDom_Machine.halt(state.vdom);
    };
    var patchThunk = function (state, t2) {
        var $43 = unsafeEqThunk(state.thunk, t2);
        if ($43) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
        };
        var vdom = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
            vdom: vdom,
            thunk: t2
        }, patchThunk, haltThunk));
    };
    var renderThunk = function (spec) {
        return function (t) {
            var vdom = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
                thunk: t,
                vdom: vdom
            }, patchThunk, haltThunk));
        };
    };
    return renderThunk;
};
module.exports = {
    buildThunk: buildThunk,
    runThunk: runThunk,
    hoist: hoist,
    mapThunk: mapThunk,
    thunked: thunked,
    thunk1: thunk1,
    thunk2: thunk2,
    thunk3: thunk3,
    functorThunk: functorThunk
};

},{"../Data.Function.Uncurried/index.js":"7B0pM","../Data.Functor/index.js":"5ZkNG","../Halogen.VDom.DOM/index.js":"4ZUZQ","../Halogen.VDom.Machine/index.js":"HDXtI","../Halogen.VDom.Util/index.js":"5orR2","../Unsafe.Coerce/index.js":"3fQke"}],"7B0pM":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var runFn1 = function (f) {
    return f;
};
var mkFn1 = function (f) {
    return f;
};
module.exports = {
    mkFn1: mkFn1,
    runFn1: runFn1,
    mkFn0: $foreign.mkFn0,
    mkFn2: $foreign.mkFn2,
    mkFn3: $foreign.mkFn3,
    mkFn4: $foreign.mkFn4,
    mkFn5: $foreign.mkFn5,
    mkFn6: $foreign.mkFn6,
    mkFn7: $foreign.mkFn7,
    mkFn8: $foreign.mkFn8,
    mkFn9: $foreign.mkFn9,
    mkFn10: $foreign.mkFn10,
    runFn0: $foreign.runFn0,
    runFn2: $foreign.runFn2,
    runFn3: $foreign.runFn3,
    runFn4: $foreign.runFn4,
    runFn5: $foreign.runFn5,
    runFn6: $foreign.runFn6,
    runFn7: $foreign.runFn7,
    runFn8: $foreign.runFn8,
    runFn9: $foreign.runFn9,
    runFn10: $foreign.runFn10
};

},{"./foreign.js":"3I7TM"}],"3I7TM":[function(require,module,exports) {
"use strict";

// module Data.Function.Uncurried

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],"4ZUZQ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var VDomSpec = function (x) {
    return x;
};
var haltWidget = function (v) {
    return Halogen_VDom_Machine.halt(v.widget);
};
var patchWidget = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Widget) {
        var res = Halogen_VDom_Machine.step(state.widget, vdom.value0);
        var res$prime = Halogen_VDom_Machine.unStep(function (v) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v.value0, {
                build: state.build,
                widget: res
            }, patchWidget, haltWidget));
        })(res);
        return res$prime;
    };
    haltWidget(state);
    return state.build(vdom);
};
var haltText = function (v) {
    var parent = Halogen_VDom_Util.parentNode(v.node);
    return Halogen_VDom_Util.removeChild(v.node, parent);
};
var patchText = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Text) {
        if (state.value === vdom.value0) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
        };
        if (Data_Boolean.otherwise) {
            var nextState = {
                build: state.build,
                node: state.node,
                value: vdom.value0
            };
            Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
        };
    };
    haltText(state);
    return state.build(vdom);
};
var haltKeyed = function (v) {
    var parent = Halogen_VDom_Util.parentNode(v.node);
    Halogen_VDom_Util.removeChild(v.node, parent);
    Halogen_VDom_Util.forInE(v.children, function (v1, s) {
        return Halogen_VDom_Machine.halt(s);
    });
    return Halogen_VDom_Machine.halt(v.attrs);
};
var haltElem = function (v) {
    var parent = Halogen_VDom_Util.parentNode(v.node);
    Halogen_VDom_Util.removeChild(v.node, parent);
    Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
    return Halogen_VDom_Machine.halt(v.attrs);
};
var eqElemSpec = function (ns1, v, ns2, v1) {
    var $56 = v === v1;
    if ($56) {
        if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
            return true;
        };
        if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
            return true;
        };
        return false;
    };
    return false;
};
var patchElem = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
        var v = Data_Array.length(vdom.value3);
        var v1 = Data_Array.length(state.children);
        if (v1 === 0 && v === 0) {
            var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
            var nextState = {
                build: state.build,
                node: state.node,
                attrs: attrs2,
                ns: vdom.value0,
                name: vdom.value1,
                children: state.children
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
        };
        var onThis = function (ix, s) {
            return Halogen_VDom_Machine.halt(s);
        };
        var onThese = function (ix, s, v2) {
            var res = Halogen_VDom_Machine.step(s, v2);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
            return res;
        };
        var onThat = function (ix, v2) {
            var res = state.build(v2);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
            return res;
        };
        var children2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
        var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
        var nextState = {
            build: state.build,
            node: state.node,
            attrs: attrs2,
            ns: vdom.value0,
            name: vdom.value1,
            children: children2
        };
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
    };
    haltElem(state);
    return state.build(vdom);
};
var patchKeyed = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
        var v = Data_Array.length(vdom.value3);
        if (state.length === 0 && v === 0) {
            var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
            var nextState = {
                build: state.build,
                node: state.node,
                attrs: attrs2,
                ns: vdom.value0,
                name: vdom.value1,
                children: state.children,
                length: 0
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
        };
        var onThis = function (v2, s) {
            return Halogen_VDom_Machine.halt(s);
        };
        var onThese = function (v2, ix$prime, s, v3) {
            var res = Halogen_VDom_Machine.step(s, v3.value1);
            Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(res), state.node);
            return res;
        };
        var onThat = function (v2, ix, v3) {
            var res = state.build(v3.value1);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
            return res;
        };
        var children2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
        var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
        var nextState = {
            build: state.build,
            node: state.node,
            attrs: attrs2,
            ns: vdom.value0,
            name: vdom.value1,
            children: children2,
            length: v
        };
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
    };
    haltKeyed(state);
    return state.build(vdom);
};
var buildWidget = function (v, build, w) {
    var res = v.buildWidget(v)(w);
    var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
            build: build,
            widget: res
        }, patchWidget, haltWidget));
    })(res);
    return res$prime;
};
var buildText = function (v, build, s) {
    var node = Halogen_VDom_Util.createTextNode(s, v.document);
    var state = {
        build: build,
        node: node,
        value: s
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchText, haltText));
};
var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
    var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
    var node = Web_DOM_Element.toNode(el);
    var onChild = function (k, ix, v1) {
        var res = build(v1.value1);
        Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
        return res;
    };
    var children = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
    var attrs = v.buildAttributes(el)(as1);
    var state = {
        build: build,
        node: node,
        attrs: attrs,
        ns: ns1,
        name: name1,
        children: children,
        length: Data_Array.length(ch1)
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
};
var buildElem = function (v, build, ns1, name1, as1, ch1) {
    var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
    var node = Web_DOM_Element.toNode(el);
    var onChild = function (ix, child) {
        var res = build(child);
        Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
        return res;
    };
    var children = Halogen_VDom_Util.forE(ch1, onChild);
    var attrs = v.buildAttributes(el)(as1);
    var state = {
        build: build,
        node: node,
        attrs: attrs,
        ns: ns1,
        name: name1,
        children: children
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
};
var buildVDom = function (spec) {
    var build = function (v) {
        if (v instanceof Halogen_VDom_Types.Text) {
            return buildText(spec, build, v.value0);
        };
        if (v instanceof Halogen_VDom_Types.Elem) {
            return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
        };
        if (v instanceof Halogen_VDom_Types.Keyed) {
            return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
        };
        if (v instanceof Halogen_VDom_Types.Widget) {
            return buildWidget(spec, build, v.value0);
        };
        if (v instanceof Halogen_VDom_Types.Grafted) {
            return build(Halogen_VDom_Types.runGraft(v.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
    };
    return build;
};
module.exports = {
    VDomSpec: VDomSpec,
    buildVDom: buildVDom,
    buildText: buildText,
    buildElem: buildElem,
    buildKeyed: buildKeyed,
    buildWidget: buildWidget
};

},{"../Data.Array/index.js":"6mZxP","../Data.Boolean/index.js":"4zMHm","../Data.Maybe/index.js":"1Cwwt","../Data.Nullable/index.js":"MeaHd","../Data.Tuple/index.js":"43VFo","../Halogen.VDom.Machine/index.js":"HDXtI","../Halogen.VDom.Types/index.js":"xcoB4","../Halogen.VDom.Util/index.js":"5orR2","../Web.DOM.Element/index.js":"4N2du"}],"6mZxP":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAtIndices = function (dictFoldable) {
    return function (us) {
        return function (xs) {
            return Data_Array_ST.withArray(function (res) {
                return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                    return Data_Array_ST.poke(v.value0)(v.value1)(res);
                })(us);
            })(xs)();
        };
    };
};
var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeIndex = function (dictPartial) {
    return $foreign.unsafeIndexImpl;
};
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x,
            tail: xs
        });
    };
});
var toUnfoldable = function (dictUnfoldable) {
    return function (xs) {
        var len = $foreign.length(xs);
        var f = function (i) {
            if (i < len) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [ i.constructor.name ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};
var takeEnd = function (n) {
    return function (xs) {
        return $foreign.drop($foreign.length(xs) - n | 0)(xs);
    };
};
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};
var nubByEq = function (eq) {
    return function (xs) {
        return (function __do() {
            var arr = Data_Array_ST.empty();
            Control_Monad_ST_Internal.foreach(xs)(function (x) {
                return function __do() {
                    var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                        var $84 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                        var $85 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                            return eq(v)(x);
                        });
                        return function ($86) {
                            return $84($85($86));
                        };
                    })())(Data_Array_ST.unsafeFreeze(arr))();
                    return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                };
            })();
            return Data_Array_ST.unsafeFreeze(arr)();
        })();
    };
};
var nubEq = function (dictEq) {
    return nubByEq(Data_Eq.eq(dictEq));
};
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return function (xs) {
                return Data_Array_ST.withArray(function (res) {
                    return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                        return Data_Array_ST.modify(i)(f)(res);
                    })(is);
                })(xs)();
            };
        };
    };
};
var mapWithIndex = function (f) {
    return function (xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
        };
    };
};
var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    };
    throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var last = function (xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};
var unsnoc = function (xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return function (v1) {
            return {
                init: v,
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
var span = function (p) {
    return function (arr) {
        var go = function ($copy_i) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $60 = p(v.value0);
                    if ($60) {
                        $copy_i = i + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return new Data_Maybe.Just(i);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_i);
            };
            return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
            return {
                init: [  ],
                rest: arr
            };
        };
        if (breakIndex instanceof Data_Maybe.Just) {
            return {
                init: $foreign.slice(0)(breakIndex.value0)(arr),
                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
            };
        };
        if (breakIndex instanceof Data_Maybe.Nothing) {
            return {
                init: arr,
                rest: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [ breakIndex.constructor.name ]);
    };
};
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var unzip = function (xs) {
    return (function __do() {
        var fsts = Data_Array_ST.empty();
        var snds = Data_Array_ST.empty();
        var iter = Data_Array_ST_Iterator.iterator(function (v) {
            return index(xs)(v);
        })();
        Data_Array_ST_Iterator.iterate(iter)(function (v) {
            return function __do() {
                Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
            };
        })();
        var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
        var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
        return new Data_Tuple.Tuple(fsts$prime, snds$prime);
    })();
};
var head = function (xs) {
    return index(xs)(0);
};
var nubBy = function (comp) {
    return function (xs) {
        var indexedAndSorted = sortBy(function (x) {
            return function (y) {
                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
            };
        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
        var v = head(indexedAndSorted);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                    return function __do() {
                        var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                            var $87 = (function (dictPartial) {
                                var $89 = Data_Maybe.fromJust();
                                return function ($90) {
                                    return $89(last($90));
                                };
                            })();
                            return function ($88) {
                                return Data_Tuple.snd($87($88));
                            };
                        })())(Data_Array_ST.unsafeFreeze(result))();
                        return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                    };
                })();
                return Data_Array_ST.unsafeFreeze(result)();
            })()));
        };
        throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [ v.constructor.name ]);
    };
};
var nub = function (dictOrd) {
    return nubBy(Data_Ord.compare(dictOrd));
};
var groupBy = function (op) {
    return function (xs) {
        return (function __do() {
            var result = Data_Array_ST.empty();
            var iter = Data_Array_ST_Iterator.iterator(function (v) {
                return index(xs)(v);
            })();
            Data_Array_ST_Iterator.iterate(iter)(function (x) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                    var sub = Data_Array_ST.empty();
                    Data_Array_ST.push(x)(sub)();
                    Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                    var grp = Data_Array_ST.unsafeFreeze(sub)();
                    return Data_Array_ST.push(grp)(result)();
                });
            })();
            return Data_Array_ST.unsafeFreeze(result)();
        })();
    };
};
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};
var group$prime = function (dictOrd) {
    var $91 = group(dictOrd.Eq0());
    var $92 = sort(dictOrd);
    return function ($93) {
        return $91($92($93));
    };
};
var fromFoldable = function (dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (array) {
                var go = function (res) {
                    return function (i) {
                        if (i >= $foreign.length(array)) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (res$prime) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    a: res$prime,
                                    b: i + 1 | 0
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Data.Array (line 1101, column 3 - line 1105, column 42): " + [ res.constructor.name, i.constructor.name ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function (b) {
                return function (bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var dropEnd = function (n) {
    return function (xs) {
        return $foreign.take($foreign.length(xs) - n | 0)(xs);
    };
};
var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
var mapMaybe = function (f) {
    return concatMap((function () {
        var $94 = Data_Maybe.maybe([  ])(singleton);
        return function ($95) {
            return $94(f($95));
        };
    })());
};
var filterA = function (dictApplicative) {
    return function (p) {
        var $96 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
            if (v.value1) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        }));
        var $97 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
        });
        return function ($98) {
            return $96($97($98));
        };
    };
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if (v instanceof Data_Maybe.Just) {
                    return updateAt(i)(v.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [ v.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    singleton: singleton,
    some: some,
    many: many,
    "null": $$null,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    concatMap: concatMap,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    nub: nub,
    nubEq: nubEq,
    nubBy: nubBy,
    nubByEq: nubByEq,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex,
    range: $foreign.range,
    replicate: $foreign.replicate,
    length: $foreign.length,
    cons: $foreign.cons,
    snoc: $foreign.snoc,
    reverse: $foreign.reverse,
    concat: $foreign.concat,
    filter: $foreign.filter,
    partition: $foreign.partition,
    slice: $foreign.slice,
    take: $foreign.take,
    drop: $foreign.drop,
    zipWith: $foreign.zipWith
};

},{"./foreign.js":"5chuz","../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Lazy/index.js":"79VGa","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.ST.Internal/index.js":"7aLBJ","../Data.Array.ST/index.js":"5rpgZ","../Data.Array.ST.Iterator/index.js":"42iII","../Data.Boolean/index.js":"4zMHm","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Traversable/index.js":"2NLLF","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z"}],"5chuz":[function(require,module,exports) {
"use strict";

//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = new Array(step * (end - start) + 1);
    var i = start, n = 0;
    while (i !== end) {
      result[n++] = i;
      i += step;
    }
    result[n] = i;
    return result;
  };
};

var replicateFill = function (count) {
  return function (value) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value);
  };
};

var replicatePolyfill = function (count) {
  return function (value) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }
    return result;
  };
};

// In browsers that have Array.prototype.fill we use it, as it's faster.
exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

exports.fromFoldableImpl = (function () {
  function Cons(head, tail) {
    this.head = head;
    this.tail = tail;
  }
  var emptyList = {};

  function curryCons(head) {
    return function (tail) {
      return new Cons(head, tail);
    };
  }

  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }

  return function (foldr) {
    return function (xs) {
      return listToArray(foldr(curryCons)(emptyList)(xs));
    };
  };
})();

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.length = function (xs) {
  return xs.length;
};

//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------

exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------

exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------

exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
};

//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------

exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  if (xss.length <= 10000) {
    // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
  }

  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no  = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes: yes, no: no };
  };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.sortImpl = function (f) {
  return function (l) {
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
};

//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.take = function (n) {
  return function (l) {
    return n < 1 ? [] : l.slice(0, n);
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
};

//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};

//------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.unsafeIndexImpl = function (xs) {
  return function (n) {
    return xs[n];
  };
};

},{}],"7aLBJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var modify = function (f) {
    return $foreign["modify'"](function (s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var functorST = new Data_Functor.Functor($foreign.map_);
var monadST = new Control_Monad.Monad(function () {
    return applicativeST;
}, function () {
    return bindST;
});
var bindST = new Control_Bind.Bind(function () {
    return applyST;
}, $foreign.bind_);
var applyST = new Control_Apply.Apply(function () {
    return functorST;
}, Control_Monad.ap(monadST));
var applicativeST = new Control_Applicative.Applicative(function () {
    return applyST;
}, $foreign.pure_);
var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadST;
}, function (f) {
    return function (a) {
        var isLooping = function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return true;
            };
            return false;
        };
        var fromDone = function (v) {
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 54, column 32 - line 54, column 46): " + [ v.constructor.name ]);
        };
        return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (r) {
            return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function (v) {
                if (v instanceof Control_Monad_Rec_Class.Loop) {
                    return Control_Bind.bind(bindST)(f(v.value0))(function (e) {
                        return Data_Functor["void"](functorST)($foreign.write(e)(r));
                    });
                };
                if (v instanceof Control_Monad_Rec_Class.Done) {
                    return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                };
                throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 46, column 18 - line 50, column 28): " + [ v.constructor.name ]);
            })))(function () {
                return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
            });
        });
    };
});
module.exports = {
    modify: modify,
    functorST: functorST,
    applyST: applyST,
    applicativeST: applicativeST,
    bindST: bindST,
    monadST: monadST,
    monadRecST: monadRecST,
    map_: $foreign.map_,
    pure_: $foreign.pure_,
    bind_: $foreign.bind_,
    run: $foreign.run,
    "while": $foreign["while"],
    "for": $foreign["for"],
    foreach: $foreign.foreach,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"./foreign.js":"BuAMR","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Control.Monad.Rec.Class/index.js":"1JlzL","../Data.Functor/index.js":"5ZkNG","../Data.Unit/index.js":"64zbv"}],"BuAMR":[function(require,module,exports) {
"use strict";

exports.map_ = function (f) {
  return function (a) {
    return function () {
      return f(a());
    };
  };
};

exports.pure_ = function (a) {
  return function () {
    return a;
  };
};

exports.bind_ = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.run = function (f) {
  return f();
};

exports["while"] = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
    };
  };
};

exports["for"] = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreach = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

exports.new = function (val) {
  return function () {
    return { value: val };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (a) {
  return function (ref) {
    return function () {
      return ref.value = a; // eslint-disable-line no-return-assign
    };
  };
};

},{}],"5rpgZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var withArray = function (f) {
    return function (xs) {
        return function __do() {
            var result = $foreign.thaw(xs)();
            f(result)();
            return $foreign.unsafeFreeze(result)();
        };
    };
};
var unshift = function (a) {
    return $foreign.unshiftAll([ a ]);
};
var sortBy = function (comp) {
    var comp$prime = function (x) {
        return function (y) {
            var v = comp(x)(y);
            if (v instanceof Data_Ordering.GT) {
                return 1;
            };
            if (v instanceof Data_Ordering.EQ) {
                return 0;
            };
            if (v instanceof Data_Ordering.LT) {
                return -1 | 0;
            };
            throw new Error("Failed pattern match at Data.Array.ST (line 105, column 15 - line 108, column 13): " + [ v.constructor.name ]);
        };
    };
    return $foreign.sortByImpl(comp$prime);
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return sortBy(Data_Ord.compare(dictOrd));
};
var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var run = function (st) {
    return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
};
var push = function (a) {
    return $foreign.pushAll([ a ]);
};
var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var modify = function (i) {
    return function (f) {
        return function (xs) {
            return function __do() {
                var entry = peek(i)(xs)();
                if (entry instanceof Data_Maybe.Just) {
                    return $foreign.poke(i)(f(entry.value0))(xs)();
                };
                if (entry instanceof Data_Maybe.Nothing) {
                    return false;
                };
                throw new Error("Failed pattern match at Data.Array.ST (line 188, column 3 - line 190, column 26): " + [ entry.constructor.name ]);
            };
        };
    };
};
module.exports = {
    run: run,
    withArray: withArray,
    peek: peek,
    modify: modify,
    pop: pop,
    push: push,
    shift: shift,
    unshift: unshift,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    empty: $foreign.empty,
    poke: $foreign.poke,
    pushAll: $foreign.pushAll,
    unshiftAll: $foreign.unshiftAll,
    splice: $foreign.splice,
    freeze: $foreign.freeze,
    thaw: $foreign.thaw,
    unsafeFreeze: $foreign.unsafeFreeze,
    unsafeThaw: $foreign.unsafeThaw,
    toAssocArray: $foreign.toAssocArray
};

},{"./foreign.js":"EQlNt","../Control.Bind/index.js":"1hm9k","../Control.Monad.ST.Internal/index.js":"7aLBJ","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa"}],"EQlNt":[function(require,module,exports) {
"use strict";

exports.empty = function () {
  return [];
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (i) {
      return function (xs) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (i) {
  return function (a) {
    return function (xs) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.popImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.pop()) : nothing;
      };
    };
  };
};

exports.pushAll = function (as) {
  return function (xs) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.shiftImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.shift()) : nothing;
      };
    };
  };
};

exports.unshiftAll = function (as) {
  return function (xs) {
    return function () {
      return xs.unshift.apply(xs, as);
    };
  };
};

exports.splice = function (i) {
  return function (howMany) {
    return function (bs) {
      return function (xs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.unsafeFreeze = function (xs) {
  return function () {
    return xs;
  };
};

exports.unsafeThaw = function (xs) {
  return function () {
    return xs;
  };
};

function copyImpl(xs) {
  return function () {
    return xs.slice();
  };
}

exports.freeze = copyImpl;

exports.thaw = copyImpl;

exports.sortByImpl = function (comp) {
  return function (xs) {
    return function () {
      return xs.sort(function (x, y) {
        return comp(x)(y);
      });
    };
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);
    for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
    return as;
  };
};

},{}],"42iII":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Iterator = (function () {
    function Iterator(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Iterator.create = function (value0) {
        return function (value1) {
            return new Iterator(value0, value1);
        };
    };
    return Iterator;
})();
var peek = function (v) {
    return function __do() {
        var i = Control_Monad_ST_Internal.read(v.value1)();
        return v.value0(i);
    };
};
var next = function (v) {
    return function __do() {
        var i = Control_Monad_ST_Internal.read(v.value1)();
        Control_Monad_ST_Internal.modify(function (v1) {
            return v1 + 1 | 0;
        })(v.value1)();
        return v.value0(i);
    };
};
var pushWhile = function (p) {
    return function (iter) {
        return function (array) {
            return function __do() {
                var $$break = Control_Monad_ST_Internal["new"](false)();
                while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                    (function __do() {
                        var mx = peek(iter)();
                        if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                            Data_Array_ST.push(mx.value0)(array)();
                            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                        };
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                    })();
                };
                return {};
            };
        };
    };
};
var pushAll = pushWhile(Data_Function["const"](true));
var iterator = function (f) {
    return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
};
var iterate = function (iter) {
    return function (f) {
        return function __do() {
            var $$break = Control_Monad_ST_Internal["new"](false)();
            while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                (function __do() {
                    var mx = next(iter)();
                    if (mx instanceof Data_Maybe.Just) {
                        return f(mx.value0)();
                    };
                    if (mx instanceof Data_Maybe.Nothing) {
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                    };
                    throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                })();
            };
            return {};
        };
    };
};
var exhausted = (function () {
    var $13 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
    return function ($14) {
        return $13(peek($14));
    };
})();
module.exports = {
    iterator: iterator,
    iterate: iterate,
    next: next,
    peek: peek,
    exhausted: exhausted,
    pushWhile: pushWhile,
    pushAll: pushAll
};

},{"../Control.Monad.ST.Internal/index.js":"7aLBJ","../Data.Array.ST/index.js":"5rpgZ","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Maybe/index.js":"1Cwwt"}],"HDXtI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Step = (function () {
    function Step(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Step.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Step(value0, value1, value2, value3);
                };
            };
        };
    };
    return Step;
})();
var unStep = Unsafe_Coerce.unsafeCoerce;
var step = function (v, a) {
    return v.value2(v.value1, a);
};
var mkStep = Unsafe_Coerce.unsafeCoerce;
var halt = function (v) {
    return v.value3(v.value1);
};
var extract = unStep(function (v) {
    return v.value0;
});
module.exports = {
    Step: Step,
    mkStep: mkStep,
    unStep: unStep,
    extract: extract,
    step: step,
    halt: halt
};

},{"../Unsafe.Coerce/index.js":"3fQke"}],"xcoB4":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Namespace = function (x) {
    return x;
};
var ElemName = function (x) {
    return x;
};
var Text = (function () {
    function Text(value0) {
        this.value0 = value0;
    };
    Text.create = function (value0) {
        return new Text(value0);
    };
    return Text;
})();
var Elem = (function () {
    function Elem(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Elem.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Elem(value0, value1, value2, value3);
                };
            };
        };
    };
    return Elem;
})();
var Keyed = (function () {
    function Keyed(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Keyed.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Keyed(value0, value1, value2, value3);
                };
            };
        };
    };
    return Keyed;
})();
var Widget = (function () {
    function Widget(value0) {
        this.value0 = value0;
    };
    Widget.create = function (value0) {
        return new Widget(value0);
    };
    return Widget;
})();
var Grafted = (function () {
    function Grafted(value0) {
        this.value0 = value0;
    };
    Grafted.create = function (value0) {
        return new Grafted(value0);
    };
    return Grafted;
})();
var Graft = (function () {
    function Graft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Graft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Graft(value0, value1, value2);
            };
        };
    };
    return Graft;
})();
var unGraft = function (f) {
    return function ($58) {
        return f($58);
    };
};
var ordNamespace = Data_Ord.ordString;
var ordElemName = Data_Ord.ordString;
var newtypeNamespace = new Data_Newtype.Newtype(function (n) {
    return n;
}, Namespace);
var newtypeElemName = new Data_Newtype.Newtype(function (n) {
    return n;
}, ElemName);
var graft = Unsafe_Coerce.unsafeCoerce;
var functorGraft = new Data_Functor.Functor(function (g) {
    return unGraft(function (v) {
        return graft(new Graft(v.value0, function ($59) {
            return g(v.value1($59));
        }, v.value2));
    });
});
var functorVDom = new Data_Functor.Functor(function (g) {
    return function (v) {
        if (v instanceof Text) {
            return new Text(v.value0);
        };
        if (v instanceof Grafted) {
            return new Grafted(Data_Functor.map(functorGraft)(g)(v.value0));
        };
        return new Grafted(graft(new Graft(Control_Category.identity(Control_Category.categoryFn), g, v)));
    };
});
var eqNamespace = Data_Eq.eqString;
var eqElemName = Data_Eq.eqString;
var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return unGraft(function (v) {
            return graft(new Graft(function ($60) {
                return f(v.value0($60));
            }, function ($61) {
                return g(v.value1($61));
            }, v.value2));
        });
    };
});
var bifunctorVDom = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Text) {
                return new Text(v.value0);
            };
            if (v instanceof Grafted) {
                return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(f)(g)(v.value0));
            };
            return new Grafted(graft(new Graft(f, g, v)));
        };
    };
});
var runGraft = unGraft(function (v) {
    var go = function (v2) {
        if (v2 instanceof Text) {
            return new Text(v2.value0);
        };
        if (v2 instanceof Elem) {
            return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
        };
        if (v2 instanceof Keyed) {
            return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
        };
        if (v2 instanceof Widget) {
            return new Widget(v.value1(v2.value0));
        };
        if (v2 instanceof Grafted) {
            return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
    };
    return go(v.value2);
});
var renderWidget = function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Text) {
                return new Text(v.value0);
            };
            if (v instanceof Elem) {
                return new Elem(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(renderWidget(f)(g))(v.value3));
            };
            if (v instanceof Keyed) {
                return new Keyed(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(renderWidget(f)(g)))(v.value3));
            };
            if (v instanceof Widget) {
                return g(v.value0);
            };
            if (v instanceof Grafted) {
                return renderWidget(f)(g)(runGraft(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.VDom.Types (line 48, column 20 - line 53, column 48): " + [ v.constructor.name ]);
        };
    };
};
module.exports = {
    Text: Text,
    Elem: Elem,
    Keyed: Keyed,
    Widget: Widget,
    Grafted: Grafted,
    renderWidget: renderWidget,
    Graft: Graft,
    graft: graft,
    unGraft: unGraft,
    runGraft: runGraft,
    ElemName: ElemName,
    Namespace: Namespace,
    functorVDom: functorVDom,
    bifunctorVDom: bifunctorVDom,
    functorGraft: functorGraft,
    bifunctorGraft: bifunctorGraft,
    newtypeElemName: newtypeElemName,
    eqElemName: eqElemName,
    ordElemName: ordElemName,
    newtypeNamespace: newtypeNamespace,
    eqNamespace: eqNamespace,
    ordNamespace: ordNamespace
};

},{"../Control.Category/index.js":"6QTyW","../Data.Bifunctor/index.js":"4Uonh","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Tuple/index.js":"43VFo","../Unsafe.Coerce/index.js":"3fQke"}],"5orR2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeLookup = $foreign.unsafeGetAny;
var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
var pokeMutMap = $foreign.unsafeSetAny;
var newMutMap = Foreign_Object_ST["new"];
var deleteMutMap = $foreign.unsafeDeleteAny;
module.exports = {
    newMutMap: newMutMap,
    pokeMutMap: pokeMutMap,
    deleteMutMap: deleteMutMap,
    unsafeFreeze: unsafeFreeze,
    unsafeLookup: unsafeLookup,
    unsafeGetAny: $foreign.unsafeGetAny,
    unsafeHasAny: $foreign.unsafeHasAny,
    unsafeSetAny: $foreign.unsafeSetAny,
    unsafeDeleteAny: $foreign.unsafeDeleteAny,
    forE: $foreign.forE,
    forEachE: $foreign.forEachE,
    forInE: $foreign.forInE,
    replicateE: $foreign.replicateE,
    diffWithIxE: $foreign.diffWithIxE,
    diffWithKeyAndIxE: $foreign.diffWithKeyAndIxE,
    strMapWithIxE: $foreign.strMapWithIxE,
    refEq: $foreign.refEq,
    createTextNode: $foreign.createTextNode,
    setTextContent: $foreign.setTextContent,
    createElement: $foreign.createElement,
    insertChildIx: $foreign.insertChildIx,
    removeChild: $foreign.removeChild,
    parentNode: $foreign.parentNode,
    setAttribute: $foreign.setAttribute,
    removeAttribute: $foreign.removeAttribute,
    hasAttribute: $foreign.hasAttribute,
    addEventListener: $foreign.addEventListener,
    removeEventListener: $foreign.removeEventListener,
    jsUndefined: $foreign.jsUndefined
};

},{"./foreign.js":"1aaXV","../Foreign.Object.ST/index.js":"3JJ14","../Unsafe.Coerce/index.js":"3fQke"}],"1aaXV":[function(require,module,exports) {
"use strict";

exports.unsafeGetAny = function (key, obj) {
  return obj[key];
};

exports.unsafeHasAny = function (key, obj) {
  return obj.hasOwnProperty(key);
};

exports.unsafeSetAny = function (key, val, obj) {
    obj[key] = val;
};

exports.unsafeDeleteAny = function (key, obj) {
  delete obj[key];
};

exports.forE = function (a, f) {
  var b = [];
  for (var i = 0; i < a.length; i++) {
    b.push(f(i, a[i]));
  }
  return b;
};

exports.forEachE = function (a, f) {
  for (var i = 0; i < a.length; i++) {
    f(a[i]);
  }
};

exports.forInE = function (o, f) {
  var ks = Object.keys(o);
  for (var i = 0; i < ks.length; i++) {
    var k = ks[i];
    f(k, o[k]);
  }
};

exports.replicateE = function (n, f) {
  for (var i = 0; i < n; i++) {
    f();
  }
};

exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
  var a3 = [];
  var l1 = a1.length;
  var l2 = a2.length;
  var i  = 0;
  while (1) {
    if (i < l1) {
      if (i < l2) {
        a3.push(f1(i, a1[i], a2[i]));
      } else {
        f2(i, a1[i]);
      }
    } else if (i < l2) {
      a3.push(f3(i, a2[i]));
    } else {
      break;
    }
    i++;
  }
  return a3;
};

exports.strMapWithIxE = function (as, fk, f) {
  var o = {};
  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    o[k] = f(k, i, a);
  }
  return o;
};

exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
  var o2 = {};
  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    if (o1.hasOwnProperty(k)) {
      o2[k] = f1(k, i, o1[k], a);
    } else {
      o2[k] = f3(k, i, a);
    }
  }
  for (var k in o1) {
    if (k in o2) {
      continue;
    }
    f2(k, o1[k]);
  }
  return o2;
};

exports.refEq = function (a, b) {
  return a === b;
};

exports.createTextNode = function (s, doc) {
  return doc.createTextNode(s);
};

exports.setTextContent = function (s, n) {
  n.textContent = s;
};

exports.createElement = function (ns, name, doc) {
  if (ns != null) {
    return doc.createElementNS(ns, name);
  } else {
    return doc.createElement(name)
  }
};

exports.insertChildIx = function (i, a, b) {
  var n = b.childNodes.item(i) || null;
  if (n !== a) {
    b.insertBefore(a, n);
  }
};

exports.removeChild = function (a, b) {
  if (b && a.parentNode === b) {
    b.removeChild(a);
  }
};

exports.parentNode = function (a) {
  return a.parentNode;
};

exports.setAttribute = function (ns, attr, val, el) {
  if (ns != null) {
    el.setAttributeNS(ns, attr, val);
  } else {
    el.setAttribute(attr, val);
  }
};

exports.removeAttribute = function (ns, attr, el) {
  if (ns != null) {
    el.removeAttributeNS(ns, attr);
  } else {
    el.removeAttribute(attr);
  }
};

exports.hasAttribute = function (ns, attr, el) {
  if (ns != null) {
    return el.hasAttributeNS(ns, attr);
  } else {
    return el.hasAttribute(attr);
  }
};

exports.addEventListener = function (ev, listener, el) {
  el.addEventListener(ev, listener, false);
};

exports.removeEventListener = function (ev, listener, el) {
  el.removeEventListener(ev, listener, false);
};

exports.jsUndefined = void 0;

},{}],"3JJ14":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    peek: peek,
    "new": $foreign["new"],
    poke: $foreign.poke,
    "delete": $foreign["delete"]
};

},{"./foreign.js":"6Dkj0","../Data.Maybe/index.js":"1Cwwt"}],"6Dkj0":[function(require,module,exports) {
"use strict";

exports["new"] = function () {
  return {};
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (k) {
      return function (m) {
        return function () {
          return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (k) {
  return function (v) {
    return function (m) {
      return function () {
        m[k] = v;
        return m;
      };
    };
  };
};

exports["delete"] = function (k) {
  return function (m) {
    return function () {
      delete m[k];
      return m;
    };
  };
};

},{}],"4N2du":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var prefix = function ($0) {
    return Data_Nullable.toMaybe($foreign["_prefix"]($0));
};
var namespaceURI = function ($1) {
    return Data_Nullable.toMaybe($foreign["_namespaceURI"]($1));
};
var getElementsByTagNameNS = function ($2) {
    return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($2));
};
var getAttribute = function (attr) {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $4 = $foreign["_getAttribute"](attr);
    return function ($5) {
        return $3($4($5));
    };
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
module.exports = {
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    namespaceURI: namespaceURI,
    prefix: prefix,
    getElementsByTagNameNS: getElementsByTagNameNS,
    getAttribute: getAttribute,
    localName: $foreign.localName,
    tagName: $foreign.tagName,
    id: $foreign.id,
    setId: $foreign.setId,
    className: $foreign.className,
    classList: $foreign.classList,
    setClassName: $foreign.setClassName,
    getElementsByTagName: $foreign.getElementsByTagName,
    getElementsByClassName: $foreign.getElementsByClassName,
    setAttribute: $foreign.setAttribute,
    hasAttribute: $foreign.hasAttribute,
    removeAttribute: $foreign.removeAttribute,
    scrollTop: $foreign.scrollTop,
    setScrollTop: $foreign.setScrollTop,
    scrollLeft: $foreign.scrollLeft,
    setScrollLeft: $foreign.setScrollLeft,
    scrollWidth: $foreign.scrollWidth,
    scrollHeight: $foreign.scrollHeight,
    clientTop: $foreign.clientTop,
    clientLeft: $foreign.clientLeft,
    clientWidth: $foreign.clientWidth,
    clientHeight: $foreign.clientHeight
};

},{"./foreign.js":"7AY8N","../Data.Functor/index.js":"5ZkNG","../Data.Nullable/index.js":"MeaHd","../Effect/index.js":"32R8a","../Unsafe.Coerce/index.js":"3fQke","../Web.Internal.FFI/index.js":"1fcfs"}],"7AY8N":[function(require,module,exports) {
"use strict";

var getProp = function (name) {
  return function (doctype) {
    return doctype[name];
  };
};

exports._namespaceURI = getProp("namespaceURI");
exports._prefix = getProp("prefix");
exports.localName = getProp("localName");
exports.tagName = getProp("tagName");

exports.id = function (node) {
  return function () {
    return node.id;
  };
};

exports.setId = function (id) {
  return function (node) {
    return function () {
      node.id = id;
      return {};
    };
  };
};

exports.className = function (node) {
  return function () {
    return node.className;
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

exports.setClassName = function (className) {
  return function (node) {
    return function () {
      node.className = className;
      return {};
    };
  };
};

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.setAttribute = function (name) {
  return function (value) {
    return function (element) {
      return function () {
        element.setAttribute(name, value);
        return {};
      };
    };
  };
};

exports._getAttribute = function (name) {
  return function (element) {
    return function () {
      return element.getAttribute(name);
    };
  };
};

exports.hasAttribute = function(name) {
  return function (element) {
    return function () {
      return element.hasAttribute(name);
    };
  };
};

exports.removeAttribute = function (name) {
  return function (element) {
    return function () {
      element.removeAttribute(name);
      return {};
    };
  };
};

// - CSSOM ---------------------------------------------------------------------

exports.scrollTop = function (node) {
  return function () {
    return node.scrollTop;
  };
};

exports.setScrollTop = function (scrollTop) {
  return function (node) {
    return function () {
      node.scrollTop = scrollTop;
      return {};
    };
  };
};

exports.scrollLeft = function (node) {
  return function () {
    return node.scrollLeft;
  };
};

exports.setScrollLeft = function (scrollLeft) {
  return function (node) {
    return function () {
      node.scrollLeft = scrollLeft;
      return {};
    };
  };
};

exports.scrollWidth = function (el) {
  return function () {
    return el.scrollWidth;
  };
};

exports.scrollHeight = function (el) {
  return function () {
    return el.scrollHeight;
  };
};

exports.clientTop = function (el) {
  return function () {
    return el.clientTop;
  };
};

exports.clientLeft = function (el) {
  return function () {
    return el.clientLeft;
  };
};

exports.clientWidth = function (el) {
  return function () {
    return el.clientWidth;
  };
};

exports.clientHeight = function (el) {
  return function () {
    return el.clientHeight;
  };
};

},{}],"0RFMZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var DOM_HTML_Indexed_ButtonType = require("../DOM.HTML.Indexed.ButtonType/index.js");
var DOM_HTML_Indexed_CrossOriginValue = require("../DOM.HTML.Indexed.CrossOriginValue/index.js");
var DOM_HTML_Indexed_DirValue = require("../DOM.HTML.Indexed.DirValue/index.js");
var DOM_HTML_Indexed_FormMethod = require("../DOM.HTML.Indexed.FormMethod/index.js");
var DOM_HTML_Indexed_InputAcceptType = require("../DOM.HTML.Indexed.InputAcceptType/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var DOM_HTML_Indexed_KindValue = require("../DOM.HTML.Indexed.KindValue/index.js");
var DOM_HTML_Indexed_MenuType = require("../DOM.HTML.Indexed.MenuType/index.js");
var DOM_HTML_Indexed_MenuitemType = require("../DOM.HTML.Indexed.MenuitemType/index.js");
var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");
var DOM_HTML_Indexed_OrderedListType = require("../DOM.HTML.Indexed.OrderedListType/index.js");
var DOM_HTML_Indexed_PreloadValue = require("../DOM.HTML.Indexed.PreloadValue/index.js");
var DOM_HTML_Indexed_ScopeValue = require("../DOM.HTML.Indexed.ScopeValue/index.js");
var DOM_HTML_Indexed_StepValue = require("../DOM.HTML.Indexed.StepValue/index.js");
var DOM_HTML_Indexed_WrapValue = require("../DOM.HTML.Indexed.WrapValue/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var PropName = function (x) {
    return x;
};
var HTML = function (x) {
    return x;
};
var ClassName = function (x) {
    return x;
};
var AttrName = function (x) {
    return x;
};
var IsProp = function (toPropValue) {
    this.toPropValue = toPropValue;
};
var widget = function ($30) {
    return HTML(Halogen_VDom_Types.Widget.create($30));
};
var toPropValue = function (dict) {
    return dict.toPropValue;
};
var text = function ($31) {
    return HTML(Halogen_VDom_Types.Text.create($31));
};
var semigroupClassName = Data_Semigroup.semigroupString;
var ref = function (f) {
    return Halogen_VDom_DOM_Prop.Ref.create(function ($32) {
        return f((function (v) {
            if (v instanceof Halogen_VDom_DOM_Prop.Created) {
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Halogen_VDom_DOM_Prop.Removed) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Halogen.HTML.Core (line 104, column 21 - line 106, column 23): " + [ v.constructor.name ]);
        })($32));
    });
};
var prop = function (dictIsProp) {
    return function (v) {
        var $33 = Halogen_VDom_DOM_Prop.Property.create(v);
        var $34 = toPropValue(dictIsProp);
        return function ($35) {
            return $33($34($35));
        };
    };
};
var ordPropName = Data_Ord.ordString;
var ordClassName = Data_Ord.ordString;
var ordAttrName = Data_Ord.ordString;
var newtypePropName = new Data_Newtype.Newtype(function (n) {
    return n;
}, PropName);
var newtypeHTML = new Data_Newtype.Newtype(function (n) {
    return n;
}, HTML);
var renderWidget = function (f) {
    return function (g) {
        return function (v) {
            return Halogen_VDom_Types.renderWidget(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))))((function () {
                var $36 = Data_Newtype.un(newtypeHTML)(HTML);
                return function ($37) {
                    return $36(g($37));
                };
            })())(v);
        };
    };
};
var newtypeClassName = new Data_Newtype.Newtype(function (n) {
    return n;
}, ClassName);
var newtypeAttrName = new Data_Newtype.Newtype(function (n) {
    return n;
}, AttrName);
var keyed = function (ns) {
    return function (name) {
        return function (props) {
            return function (children) {
                return new Halogen_VDom_Types.Keyed(ns, name, props, children);
            };
        };
    };
};
var isPropWrapValue = new IsProp(function ($38) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_WrapValue.renderWrapValue($38));
});
var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
var isPropStepValue = new IsProp(function ($39) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_StepValue.renderStepValue($39));
});
var isPropScopeValue = new IsProp(function ($40) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ScopeValue.renderScopeValue($40));
});
var isPropPreloadValue = new IsProp(function ($41) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_PreloadValue.renderPreloadValue($41));
});
var isPropOrderedListType = new IsProp(function ($42) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OrderedListType.renderOrderedListType($42));
});
var isPropOnOff = new IsProp(function ($43) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OnOff.renderOnOff($43));
});
var isPropNumber = new IsProp(Halogen_VDom_DOM_Prop.propFromNumber);
var isPropMenuitemType = new IsProp(function ($44) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuitemType.renderMenuitemType($44));
});
var isPropMenuType = new IsProp(function ($45) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuType.renderMenuType($45));
});
var isPropMediaType = new IsProp((function () {
    var $46 = Data_Newtype.unwrap(Data_MediaType.newtypeMediaType);
    return function ($47) {
        return Halogen_VDom_DOM_Prop.propFromString($46($47));
    };
})());
var isPropKindValue = new IsProp(function ($48) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_KindValue.renderKindValue($48));
});
var isPropInt = new IsProp(Halogen_VDom_DOM_Prop.propFromInt);
var isPropInputType = new IsProp(function ($49) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($49));
});
var isPropInputAcceptType = new IsProp(function ($50) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputAcceptType.renderInputAcceptType($50));
});
var isPropFormMethod = new IsProp(function ($51) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_FormMethod.renderFormMethod($51));
});
var isPropDirValue = new IsProp(function ($52) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_DirValue.renderDirValue($52));
});
var isPropCrossOriginValue = new IsProp(function ($53) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_CrossOriginValue.renderCrossOriginValue($53));
});
var isPropButtonType = new IsProp(function ($54) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($54));
});
var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
var handler = Halogen_VDom_DOM_Prop.Handler.create;
var eqPropName = Data_Eq.eqString;
var eqClassName = Data_Eq.eqString;
var eqAttrName = Data_Eq.eqString;
var element = function (ns) {
    return function (name) {
        return function (props) {
            return function (children) {
                return new Halogen_VDom_Types.Elem(ns, name, props, children);
            };
        };
    };
};
var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Bifunctor.bimap(Halogen_VDom_Types.bifunctorVDom)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(g))))(f)(v);
        };
    };
});
var functorHTML = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorHTML));
var attr = function (ns) {
    return function (v) {
        return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
    };
};
module.exports = {
    HTML: HTML,
    renderWidget: renderWidget,
    widget: widget,
    text: text,
    element: element,
    keyed: keyed,
    prop: prop,
    attr: attr,
    handler: handler,
    ref: ref,
    IsProp: IsProp,
    toPropValue: toPropValue,
    PropName: PropName,
    AttrName: AttrName,
    ClassName: ClassName,
    newtypeHTML: newtypeHTML,
    bifunctorHTML: bifunctorHTML,
    functorHTML: functorHTML,
    isPropString: isPropString,
    isPropInt: isPropInt,
    isPropNumber: isPropNumber,
    isPropBoolean: isPropBoolean,
    isPropMediaType: isPropMediaType,
    isPropButtonType: isPropButtonType,
    isPropCrossOriginValue: isPropCrossOriginValue,
    isPropDirValue: isPropDirValue,
    isPropFormMethod: isPropFormMethod,
    isPropInputType: isPropInputType,
    isPropKindValue: isPropKindValue,
    isPropMenuitemType: isPropMenuitemType,
    isPropMenuType: isPropMenuType,
    isPropOnOff: isPropOnOff,
    isPropOrderedListType: isPropOrderedListType,
    isPropPreloadValue: isPropPreloadValue,
    isPropScopeValue: isPropScopeValue,
    isPropStepValue: isPropStepValue,
    isPropWrapValue: isPropWrapValue,
    isPropInputAcceptType: isPropInputAcceptType,
    newtypePropName: newtypePropName,
    eqPropName: eqPropName,
    ordPropName: ordPropName,
    newtypeAttrName: newtypeAttrName,
    eqAttrName: eqAttrName,
    ordAttrName: ordAttrName,
    newtypeClassName: newtypeClassName,
    eqClassName: eqClassName,
    ordClassName: ordClassName,
    semigroupClassName: semigroupClassName
};

},{"../DOM.HTML.Indexed.ButtonType/index.js":"7K5vY","../DOM.HTML.Indexed.CrossOriginValue/index.js":"6mEhC","../DOM.HTML.Indexed.DirValue/index.js":"6Uqxz","../DOM.HTML.Indexed.FormMethod/index.js":"Qwz90","../DOM.HTML.Indexed.InputAcceptType/index.js":"2pZh7","../DOM.HTML.Indexed.InputType/index.js":"1ELaM","../DOM.HTML.Indexed.KindValue/index.js":"6Rd3W","../DOM.HTML.Indexed.MenuType/index.js":"5x0PY","../DOM.HTML.Indexed.MenuitemType/index.js":"5S6lw","../DOM.HTML.Indexed.OnOff/index.js":"4z5G2","../DOM.HTML.Indexed.OrderedListType/index.js":"6Y8xn","../DOM.HTML.Indexed.PreloadValue/index.js":"5zRJ8","../DOM.HTML.Indexed.ScopeValue/index.js":"6b8HA","../DOM.HTML.Indexed.StepValue/index.js":"OEQxX","../DOM.HTML.Indexed.WrapValue/index.js":"2AYDR","../Data.Bifunctor/index.js":"4Uonh","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.MediaType/index.js":"3pOmo","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Halogen.Query.Input/index.js":"3Pep7","../Halogen.VDom.DOM.Prop/index.js":"4jeLh","../Halogen.VDom.Types/index.js":"xcoB4"}],"7K5vY":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var ButtonButton = (function () {
    function ButtonButton() {

    };
    ButtonButton.value = new ButtonButton();
    return ButtonButton;
})();
var ButtonSubmit = (function () {
    function ButtonSubmit() {

    };
    ButtonSubmit.value = new ButtonSubmit();
    return ButtonSubmit;
})();
var ButtonReset = (function () {
    function ButtonReset() {

    };
    ButtonReset.value = new ButtonReset();
    return ButtonReset;
})();
var renderButtonType = function (v) {
    if (v instanceof ButtonButton) {
        return "button";
    };
    if (v instanceof ButtonSubmit) {
        return "submit";
    };
    if (v instanceof ButtonReset) {
        return "reset";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType (line 9, column 20 - line 12, column 25): " + [ v.constructor.name ]);
};
module.exports = {
    ButtonButton: ButtonButton,
    ButtonSubmit: ButtonSubmit,
    ButtonReset: ButtonReset,
    renderButtonType: renderButtonType
};

},{}],"6mEhC":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Anonymous = (function () {
    function Anonymous() {

    };
    Anonymous.value = new Anonymous();
    return Anonymous;
})();
var UseCredentials = (function () {
    function UseCredentials() {

    };
    UseCredentials.value = new UseCredentials();
    return UseCredentials;
})();
var renderCrossOriginValue = function (v) {
    if (v instanceof Anonymous) {
        return "anonymous";
    };
    if (v instanceof UseCredentials) {
        return "use-credentials";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.CrossOriginValue (line 8, column 26 - line 10, column 38): " + [ v.constructor.name ]);
};
module.exports = {
    Anonymous: Anonymous,
    UseCredentials: UseCredentials,
    renderCrossOriginValue: renderCrossOriginValue
};

},{}],"6Uqxz":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var DirLTR = (function () {
    function DirLTR() {

    };
    DirLTR.value = new DirLTR();
    return DirLTR;
})();
var DirRTL = (function () {
    function DirRTL() {

    };
    DirRTL.value = new DirRTL();
    return DirRTL;
})();
var DirAuto = (function () {
    function DirAuto() {

    };
    DirAuto.value = new DirAuto();
    return DirAuto;
})();
var renderDirValue = function (v) {
    if (v instanceof DirLTR) {
        return "ltr";
    };
    if (v instanceof DirRTL) {
        return "rtl";
    };
    if (v instanceof DirAuto) {
        return "auto";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.DirValue (line 9, column 18 - line 12, column 20): " + [ v.constructor.name ]);
};
module.exports = {
    DirLTR: DirLTR,
    DirRTL: DirRTL,
    DirAuto: DirAuto,
    renderDirValue: renderDirValue
};

},{}],"Qwz90":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var renderFormMethod = function (v) {
    if (v instanceof POST) {
        return "post";
    };
    if (v instanceof GET) {
        return "get";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.FormMethod (line 8, column 20 - line 10, column 15): " + [ v.constructor.name ]);
};
module.exports = {
    POST: POST,
    GET: GET,
    renderFormMethod: renderFormMethod
};

},{}],"2pZh7":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var AcceptMediaType = (function () {
    function AcceptMediaType(value0) {
        this.value0 = value0;
    };
    AcceptMediaType.create = function (value0) {
        return new AcceptMediaType(value0);
    };
    return AcceptMediaType;
})();
var AcceptFileExtension = (function () {
    function AcceptFileExtension(value0) {
        this.value0 = value0;
    };
    AcceptFileExtension.create = function (value0) {
        return new AcceptFileExtension(value0);
    };
    return AcceptFileExtension;
})();
var InputAcceptType = function (x) {
    return x;
};
var semigroupInputAcceptType = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)(v1);
    };
});
var renderInputAcceptTypeAtom = function (v) {
    if (v instanceof AcceptMediaType) {
        return v.value0;
    };
    if (v instanceof AcceptFileExtension) {
        return v.value0;
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.InputAcceptType (line 28, column 29 - line 30, column 33): " + [ v.constructor.name ]);
};
var renderInputAcceptType = function (v) {
    return Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(renderInputAcceptTypeAtom)(v));
};
var mediaType = function (mt) {
    return [ new AcceptMediaType(mt) ];
};
var extension = function (ext) {
    return [ new AcceptFileExtension(ext) ];
};
module.exports = {
    InputAcceptType: InputAcceptType,
    mediaType: mediaType,
    extension: extension,
    AcceptMediaType: AcceptMediaType,
    AcceptFileExtension: AcceptFileExtension,
    renderInputAcceptType: renderInputAcceptType,
    renderInputAcceptTypeAtom: renderInputAcceptTypeAtom,
    semigroupInputAcceptType: semigroupInputAcceptType
};

},{"../Data.Functor/index.js":"5ZkNG","../Data.Semigroup/index.js":"3qtmP","../Data.String.Common/index.js":"6Lw5g"}],"6Lw5g":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var $$null = function (s) {
    return s === "";
};
var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
    "null": $$null,
    localeCompare: localeCompare,
    replace: $foreign.replace,
    replaceAll: $foreign.replaceAll,
    split: $foreign.split,
    toLower: $foreign.toLower,
    toUpper: $foreign.toUpper,
    trim: $foreign.trim,
    joinWith: $foreign.joinWith
};

},{"./foreign.js":"44rYS","../Data.Ordering/index.js":"5YcVa"}],"44rYS":[function(require,module,exports) {
"use strict";

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.replaceAll = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
    };
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};

},{}],"1ELaM":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var InputButton = (function () {
    function InputButton() {

    };
    InputButton.value = new InputButton();
    return InputButton;
})();
var InputCheckbox = (function () {
    function InputCheckbox() {

    };
    InputCheckbox.value = new InputCheckbox();
    return InputCheckbox;
})();
var InputColor = (function () {
    function InputColor() {

    };
    InputColor.value = new InputColor();
    return InputColor;
})();
var InputDate = (function () {
    function InputDate() {

    };
    InputDate.value = new InputDate();
    return InputDate;
})();
var InputDatetimeLocal = (function () {
    function InputDatetimeLocal() {

    };
    InputDatetimeLocal.value = new InputDatetimeLocal();
    return InputDatetimeLocal;
})();
var InputEmail = (function () {
    function InputEmail() {

    };
    InputEmail.value = new InputEmail();
    return InputEmail;
})();
var InputFile = (function () {
    function InputFile() {

    };
    InputFile.value = new InputFile();
    return InputFile;
})();
var InputHidden = (function () {
    function InputHidden() {

    };
    InputHidden.value = new InputHidden();
    return InputHidden;
})();
var InputImage = (function () {
    function InputImage() {

    };
    InputImage.value = new InputImage();
    return InputImage;
})();
var InputMonth = (function () {
    function InputMonth() {

    };
    InputMonth.value = new InputMonth();
    return InputMonth;
})();
var InputNumber = (function () {
    function InputNumber() {

    };
    InputNumber.value = new InputNumber();
    return InputNumber;
})();
var InputPassword = (function () {
    function InputPassword() {

    };
    InputPassword.value = new InputPassword();
    return InputPassword;
})();
var InputRadio = (function () {
    function InputRadio() {

    };
    InputRadio.value = new InputRadio();
    return InputRadio;
})();
var InputRange = (function () {
    function InputRange() {

    };
    InputRange.value = new InputRange();
    return InputRange;
})();
var InputReset = (function () {
    function InputReset() {

    };
    InputReset.value = new InputReset();
    return InputReset;
})();
var InputSearch = (function () {
    function InputSearch() {

    };
    InputSearch.value = new InputSearch();
    return InputSearch;
})();
var InputSubmit = (function () {
    function InputSubmit() {

    };
    InputSubmit.value = new InputSubmit();
    return InputSubmit;
})();
var InputTel = (function () {
    function InputTel() {

    };
    InputTel.value = new InputTel();
    return InputTel;
})();
var InputText = (function () {
    function InputText() {

    };
    InputText.value = new InputText();
    return InputText;
})();
var InputTime = (function () {
    function InputTime() {

    };
    InputTime.value = new InputTime();
    return InputTime;
})();
var InputUrl = (function () {
    function InputUrl() {

    };
    InputUrl.value = new InputUrl();
    return InputUrl;
})();
var InputWeek = (function () {
    function InputWeek() {

    };
    InputWeek.value = new InputWeek();
    return InputWeek;
})();
var renderInputType = function (v) {
    if (v instanceof InputButton) {
        return "button";
    };
    if (v instanceof InputCheckbox) {
        return "checkbox";
    };
    if (v instanceof InputColor) {
        return "color";
    };
    if (v instanceof InputDate) {
        return "date";
    };
    if (v instanceof InputDatetimeLocal) {
        return "datetime-local";
    };
    if (v instanceof InputEmail) {
        return "email";
    };
    if (v instanceof InputFile) {
        return "file";
    };
    if (v instanceof InputHidden) {
        return "hidden";
    };
    if (v instanceof InputImage) {
        return "image";
    };
    if (v instanceof InputMonth) {
        return "month";
    };
    if (v instanceof InputNumber) {
        return "number";
    };
    if (v instanceof InputPassword) {
        return "password";
    };
    if (v instanceof InputRadio) {
        return "radio";
    };
    if (v instanceof InputRange) {
        return "range";
    };
    if (v instanceof InputReset) {
        return "reset";
    };
    if (v instanceof InputSearch) {
        return "search";
    };
    if (v instanceof InputSubmit) {
        return "submit";
    };
    if (v instanceof InputTel) {
        return "tel";
    };
    if (v instanceof InputText) {
        return "text";
    };
    if (v instanceof InputTime) {
        return "time";
    };
    if (v instanceof InputUrl) {
        return "url";
    };
    if (v instanceof InputWeek) {
        return "week";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 22): " + [ v.constructor.name ]);
};
module.exports = {
    InputButton: InputButton,
    InputCheckbox: InputCheckbox,
    InputColor: InputColor,
    InputDate: InputDate,
    InputDatetimeLocal: InputDatetimeLocal,
    InputEmail: InputEmail,
    InputFile: InputFile,
    InputHidden: InputHidden,
    InputImage: InputImage,
    InputMonth: InputMonth,
    InputNumber: InputNumber,
    InputPassword: InputPassword,
    InputRadio: InputRadio,
    InputRange: InputRange,
    InputReset: InputReset,
    InputSearch: InputSearch,
    InputSubmit: InputSubmit,
    InputTel: InputTel,
    InputText: InputText,
    InputTime: InputTime,
    InputUrl: InputUrl,
    InputWeek: InputWeek,
    renderInputType: renderInputType
};

},{}],"6Rd3W":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var KindSubtitles = (function () {
    function KindSubtitles() {

    };
    KindSubtitles.value = new KindSubtitles();
    return KindSubtitles;
})();
var KindCaptions = (function () {
    function KindCaptions() {

    };
    KindCaptions.value = new KindCaptions();
    return KindCaptions;
})();
var KindDescriptions = (function () {
    function KindDescriptions() {

    };
    KindDescriptions.value = new KindDescriptions();
    return KindDescriptions;
})();
var KindChapters = (function () {
    function KindChapters() {

    };
    KindChapters.value = new KindChapters();
    return KindChapters;
})();
var KindMetadata = (function () {
    function KindMetadata() {

    };
    KindMetadata.value = new KindMetadata();
    return KindMetadata;
})();
var renderKindValue = function (v) {
    if (v instanceof KindSubtitles) {
        return "subtitles";
    };
    if (v instanceof KindCaptions) {
        return "captions";
    };
    if (v instanceof KindDescriptions) {
        return "descriptions";
    };
    if (v instanceof KindChapters) {
        return "chapters";
    };
    if (v instanceof KindMetadata) {
        return "metadata";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.KindValue (line 11, column 19 - line 16, column 29): " + [ v.constructor.name ]);
};
module.exports = {
    KindSubtitles: KindSubtitles,
    KindCaptions: KindCaptions,
    KindDescriptions: KindDescriptions,
    KindChapters: KindChapters,
    KindMetadata: KindMetadata,
    renderKindValue: renderKindValue
};

},{}],"5x0PY":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MenuList = (function () {
    function MenuList() {

    };
    MenuList.value = new MenuList();
    return MenuList;
})();
var MenuContext = (function () {
    function MenuContext() {

    };
    MenuContext.value = new MenuContext();
    return MenuContext;
})();
var MenuToolbar = (function () {
    function MenuToolbar() {

    };
    MenuToolbar.value = new MenuToolbar();
    return MenuToolbar;
})();
var renderMenuType = function (v) {
    if (v instanceof MenuList) {
        return "list";
    };
    if (v instanceof MenuContext) {
        return "context";
    };
    if (v instanceof MenuToolbar) {
        return "toolbar";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuType (line 9, column 18 - line 12, column 27): " + [ v.constructor.name ]);
};
module.exports = {
    MenuList: MenuList,
    MenuContext: MenuContext,
    MenuToolbar: MenuToolbar,
    renderMenuType: renderMenuType
};

},{}],"5S6lw":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var MenuitemCommand = (function () {
    function MenuitemCommand() {

    };
    MenuitemCommand.value = new MenuitemCommand();
    return MenuitemCommand;
})();
var MenuitemCheckbox = (function () {
    function MenuitemCheckbox() {

    };
    MenuitemCheckbox.value = new MenuitemCheckbox();
    return MenuitemCheckbox;
})();
var MenuitemRadio = (function () {
    function MenuitemRadio() {

    };
    MenuitemRadio.value = new MenuitemRadio();
    return MenuitemRadio;
})();
var renderMenuitemType = function (v) {
    if (v instanceof MenuitemCommand) {
        return "command";
    };
    if (v instanceof MenuitemCheckbox) {
        return "checkbox";
    };
    if (v instanceof MenuitemRadio) {
        return "radio";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuitemType (line 9, column 22 - line 12, column 27): " + [ v.constructor.name ]);
};
module.exports = {
    MenuitemCommand: MenuitemCommand,
    MenuitemCheckbox: MenuitemCheckbox,
    MenuitemRadio: MenuitemRadio,
    renderMenuitemType: renderMenuitemType
};

},{}],"4z5G2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var On = (function () {
    function On() {

    };
    On.value = new On();
    return On;
})();
var Off = (function () {
    function Off() {

    };
    Off.value = new Off();
    return Off;
})();
var renderOnOff = function (v) {
    if (v instanceof On) {
        return "on";
    };
    if (v instanceof Off) {
        return "off";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.OnOff (line 8, column 15 - line 10, column 15): " + [ v.constructor.name ]);
};
module.exports = {
    On: On,
    Off: Off,
    renderOnOff: renderOnOff
};

},{}],"6Y8xn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Uppercase = (function () {
    function Uppercase() {

    };
    Uppercase.value = new Uppercase();
    return Uppercase;
})();
var Lowercase = (function () {
    function Lowercase() {

    };
    Lowercase.value = new Lowercase();
    return Lowercase;
})();
var NumeralDecimal = (function () {
    function NumeralDecimal() {

    };
    NumeralDecimal.value = new NumeralDecimal();
    return NumeralDecimal;
})();
var NumeralRoman = (function () {
    function NumeralRoman(value0) {
        this.value0 = value0;
    };
    NumeralRoman.create = function (value0) {
        return new NumeralRoman(value0);
    };
    return NumeralRoman;
})();
var OrderedListNumeric = (function () {
    function OrderedListNumeric(value0) {
        this.value0 = value0;
    };
    OrderedListNumeric.create = function (value0) {
        return new OrderedListNumeric(value0);
    };
    return OrderedListNumeric;
})();
var OrderedListAlphabetic = (function () {
    function OrderedListAlphabetic(value0) {
        this.value0 = value0;
    };
    OrderedListAlphabetic.create = function (value0) {
        return new OrderedListAlphabetic(value0);
    };
    return OrderedListAlphabetic;
})();
var renderOrderedListType = function (v) {
    if (v instanceof OrderedListNumeric && v.value0 instanceof NumeralDecimal) {
        return "1";
    };
    if (v instanceof OrderedListNumeric && (v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Lowercase)) {
        return "i";
    };
    if (v instanceof OrderedListNumeric && (v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Uppercase)) {
        return "I";
    };
    if (v instanceof OrderedListAlphabetic && v.value0 instanceof Lowercase) {
        return "a";
    };
    if (v instanceof OrderedListAlphabetic && v.value0 instanceof Uppercase) {
        return "A";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.OrderedListType (line 16, column 25 - line 21, column 41): " + [ v.constructor.name ]);
};
module.exports = {
    Uppercase: Uppercase,
    Lowercase: Lowercase,
    NumeralDecimal: NumeralDecimal,
    NumeralRoman: NumeralRoman,
    OrderedListNumeric: OrderedListNumeric,
    OrderedListAlphabetic: OrderedListAlphabetic,
    renderOrderedListType: renderOrderedListType
};

},{}],"5zRJ8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var PreloadNone = (function () {
    function PreloadNone() {

    };
    PreloadNone.value = new PreloadNone();
    return PreloadNone;
})();
var PreloadAuto = (function () {
    function PreloadAuto() {

    };
    PreloadAuto.value = new PreloadAuto();
    return PreloadAuto;
})();
var PreloadMetadata = (function () {
    function PreloadMetadata() {

    };
    PreloadMetadata.value = new PreloadMetadata();
    return PreloadMetadata;
})();
var renderPreloadValue = function (v) {
    if (v instanceof PreloadNone) {
        return "none";
    };
    if (v instanceof PreloadAuto) {
        return "auto";
    };
    if (v instanceof PreloadMetadata) {
        return "metadata";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.PreloadValue (line 9, column 22 - line 12, column 32): " + [ v.constructor.name ]);
};
module.exports = {
    PreloadNone: PreloadNone,
    PreloadAuto: PreloadAuto,
    PreloadMetadata: PreloadMetadata,
    renderPreloadValue: renderPreloadValue
};

},{}],"6b8HA":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var ScopeRow = (function () {
    function ScopeRow() {

    };
    ScopeRow.value = new ScopeRow();
    return ScopeRow;
})();
var ScopeCol = (function () {
    function ScopeCol() {

    };
    ScopeCol.value = new ScopeCol();
    return ScopeCol;
})();
var ScopeRowGroup = (function () {
    function ScopeRowGroup() {

    };
    ScopeRowGroup.value = new ScopeRowGroup();
    return ScopeRowGroup;
})();
var ScopeColGroup = (function () {
    function ScopeColGroup() {

    };
    ScopeColGroup.value = new ScopeColGroup();
    return ScopeColGroup;
})();
var ScopeAuto = (function () {
    function ScopeAuto() {

    };
    ScopeAuto.value = new ScopeAuto();
    return ScopeAuto;
})();
var renderScopeValue = function (v) {
    if (v instanceof ScopeRow) {
        return "row";
    };
    if (v instanceof ScopeCol) {
        return "col";
    };
    if (v instanceof ScopeRowGroup) {
        return "rowgroup";
    };
    if (v instanceof ScopeColGroup) {
        return "colgroup";
    };
    if (v instanceof ScopeAuto) {
        return "auto";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.ScopeValue (line 11, column 20 - line 16, column 22): " + [ v.constructor.name ]);
};
module.exports = {
    ScopeRow: ScopeRow,
    ScopeCol: ScopeCol,
    ScopeRowGroup: ScopeRowGroup,
    ScopeColGroup: ScopeColGroup,
    ScopeAuto: ScopeAuto,
    renderScopeValue: renderScopeValue
};

},{}],"OEQxX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Any = (function () {
    function Any() {

    };
    Any.value = new Any();
    return Any;
})();
var Step = (function () {
    function Step(value0) {
        this.value0 = value0;
    };
    Step.create = function (value0) {
        return new Step(value0);
    };
    return Step;
})();
var renderStepValue = function (v) {
    if (v instanceof Any) {
        return "any";
    };
    if (v instanceof Step) {
        return Data_Show.show(Data_Show.showNumber)(v.value0);
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.StepValue (line 10, column 19 - line 12, column 19): " + [ v.constructor.name ]);
};
module.exports = {
    Any: Any,
    Step: Step,
    renderStepValue: renderStepValue
};

},{"../Data.Show/index.js":"6nX0c"}],"2AYDR":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Hard = (function () {
    function Hard() {

    };
    Hard.value = new Hard();
    return Hard;
})();
var Soft = (function () {
    function Soft() {

    };
    Soft.value = new Soft();
    return Soft;
})();
var renderWrapValue = function (v) {
    if (v instanceof Hard) {
        return "hard";
    };
    if (v instanceof Soft) {
        return "soft";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.WrapValue (line 8, column 19 - line 10, column 17): " + [ v.constructor.name ]);
};
module.exports = {
    Hard: Hard,
    Soft: Soft,
    renderWrapValue: renderWrapValue
};

},{}],"3pOmo":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var MediaType = function (x) {
    return x;
};
var showMediaType = new Data_Show.Show(function (v) {
    return "(MediaType " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
    return n;
}, MediaType);
var eqMediaType = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordMediaType = new Data_Ord.Ord(function () {
    return eqMediaType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    MediaType: MediaType,
    newtypeMediaType: newtypeMediaType,
    eqMediaType: eqMediaType,
    ordMediaType: ordMediaType,
    showMediaType: showMediaType
};

},{"../Data.Eq/index.js":"2htS8","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c"}],"3Pep7":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var RefLabel = function (x) {
    return x;
};
var RefUpdate = (function () {
    function RefUpdate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RefUpdate.create = function (value0) {
        return function (value1) {
            return new RefUpdate(value0, value1);
        };
    };
    return RefUpdate;
})();
var Action = (function () {
    function Action(value0) {
        this.value0 = value0;
    };
    Action.create = function (value0) {
        return new Action(value0);
    };
    return Action;
})();
var ordRefLabel = Data_Ord.ordString;
var newtypeRefLabel = new Data_Newtype.Newtype(function (n) {
    return n;
}, RefLabel);
var functorInput = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof RefUpdate) {
            return new RefUpdate(m.value0, m.value1);
        };
        if (m instanceof Action) {
            return new Action(f(m.value0));
        };
        throw new Error("Failed pattern match at Halogen.Query.Input (line 19, column 1 - line 19, column 46): " + [ m.constructor.name ]);
    };
});
var eqRefLabel = Data_Eq.eqString;
module.exports = {
    RefLabel: RefLabel,
    RefUpdate: RefUpdate,
    Action: Action,
    newtypeRefLabel: newtypeRefLabel,
    eqRefLabel: eqRefLabel,
    ordRefLabel: ordRefLabel,
    functorInput: functorInput
};

},{"../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK"}],"4jeLh":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Created = (function () {
    function Created(value0) {
        this.value0 = value0;
    };
    Created.create = function (value0) {
        return new Created(value0);
    };
    return Created;
})();
var Removed = (function () {
    function Removed(value0) {
        this.value0 = value0;
    };
    Removed.create = function (value0) {
        return new Removed(value0);
    };
    return Removed;
})();
var Attribute = (function () {
    function Attribute(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Attribute.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Attribute(value0, value1, value2);
            };
        };
    };
    return Attribute;
})();
var Property = (function () {
    function Property(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Property.create = function (value0) {
        return function (value1) {
            return new Property(value0, value1);
        };
    };
    return Property;
})();
var Handler = (function () {
    function Handler(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Handler.create = function (value0) {
        return function (value1) {
            return new Handler(value0, value1);
        };
    };
    return Handler;
})();
var Ref = (function () {
    function Ref(value0) {
        this.value0 = value0;
    };
    Ref.create = function (value0) {
        return new Ref(value0);
    };
    return Ref;
})();
var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
var setProperty = Halogen_VDom_Util.unsafeSetAny;
var removeProperty = function (key, el) {
    var v = Halogen_VDom_Util.hasAttribute(Data_Nullable["null"], key, el);
    if (v) {
        return Halogen_VDom_Util.removeAttribute(Data_Nullable["null"], key, el);
    };
    var v1 = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
    if (v1 === "string") {
        return Halogen_VDom_Util.unsafeSetAny(key, "", el);
    };
    if (key === "rowSpan") {
        return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
    };
    if (key === "colSpan") {
        return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
    };
    return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
};
var propToStrKey = function (v) {
    if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
        return "attr/" + (v.value0.value0 + (":" + v.value1));
    };
    if (v instanceof Attribute) {
        return "attr/:" + v.value1;
    };
    if (v instanceof Property) {
        return "prop/" + v.value0;
    };
    if (v instanceof Handler) {
        return "handler/" + v.value0;
    };
    if (v instanceof Ref) {
        return "ref";
    };
    throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [ v.constructor.name ]);
};
var propFromString = Unsafe_Coerce.unsafeCoerce;
var propFromNumber = Unsafe_Coerce.unsafeCoerce;
var propFromInt = Unsafe_Coerce.unsafeCoerce;
var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
var functorProp = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Handler) {
            return new Handler(v.value0, Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value1));
        };
        if (v instanceof Ref) {
            return new Ref(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value0));
        };
        return v;
    };
});
var functorElemRef = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Created) {
            return new Created(f(v.value0));
        };
        if (v instanceof Removed) {
            return new Removed(f(v.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 49, column 1 - line 51, column 36): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var buildProp = function (emit) {
    return function (el) {
        var removeProp = function (prevEvents) {
            return function (v, v1) {
                if (v1 instanceof Attribute) {
                    return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                };
                if (v1 instanceof Property) {
                    return removeProperty(v1.value0, el);
                };
                if (v1 instanceof Handler) {
                    var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                    return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                };
                if (v1 instanceof Ref) {
                    return Data_Unit.unit;
                };
                throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
            };
        };
        var mbEmit = function (v) {
            if (v instanceof Data_Maybe.Just) {
                return emit(v.value0)();
            };
            return Data_Unit.unit;
        };
        var haltProp = function (state) {
            var v = Foreign_Object.lookup("ref")(state.props);
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                return mbEmit(v.value0.value0(new Removed(el)));
            };
            return Data_Unit.unit;
        };
        var diffProp = function (prevEvents, events) {
            return function (v, v1, v11, v2) {
                if (v11 instanceof Attribute && v2 instanceof Attribute) {
                    var $56 = v11.value2 === v2.value2;
                    if ($56) {
                        return v2;
                    };
                    Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                    return v2;
                };
                if (v11 instanceof Property && v2 instanceof Property) {
                    var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                    if (v4) {
                        return v2;
                    };
                    if (v2.value0 === "value") {
                        var elVal = unsafeGetProperty("value", el);
                        var $65 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                        if ($65) {
                            return v2;
                        };
                        setProperty(v2.value0, v2.value1, el);
                        return v2;
                    };
                    setProperty(v2.value0, v2.value1, el);
                    return v2;
                };
                if (v11 instanceof Handler && v2 instanceof Handler) {
                    var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                    Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                    Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                    return v2;
                };
                return v2;
            };
        };
        var applyProp = function (events) {
            return function (v, v1, v2) {
                if (v2 instanceof Attribute) {
                    Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                    return v2;
                };
                if (v2 instanceof Property) {
                    setProperty(v2.value0, v2.value1, el);
                    return v2;
                };
                if (v2 instanceof Handler) {
                    var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                    if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                        Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                        return v2;
                    };
                    var ref = Effect_Ref["new"](v2.value1)();
                    var listener = Web_Event_EventTarget.eventListener(function (ev) {
                        return function __do() {
                            var f$prime = Effect_Ref.read(ref)();
                            return mbEmit(f$prime(ev));
                        };
                    })();
                    Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, ref), events);
                    Halogen_VDom_Util.addEventListener(v2.value0, listener, el);
                    return v2;
                };
                if (v2 instanceof Ref) {
                    mbEmit(v2.value0(new Created(el)));
                    return v2;
                };
                throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
            };
        };
        var patchProp = function (state, ps2) {
            var events = Halogen_VDom_Util.newMutMap();
            var onThis = removeProp(state.events);
            var onThese = diffProp(state.events, events);
            var onThat = applyProp(events);
            var props = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
            var nextState = {
                events: Halogen_VDom_Util.unsafeFreeze(events),
                props: props
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
        };
        var renderProp = function (ps1) {
            var events = Halogen_VDom_Util.newMutMap();
            var ps1$prime = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(events));
            var state = {
                events: Halogen_VDom_Util.unsafeFreeze(events),
                props: ps1$prime
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
        };
        return renderProp;
    };
};
module.exports = {
    Attribute: Attribute,
    Property: Property,
    Handler: Handler,
    Ref: Ref,
    Created: Created,
    Removed: Removed,
    propFromString: propFromString,
    propFromBoolean: propFromBoolean,
    propFromInt: propFromInt,
    propFromNumber: propFromNumber,
    buildProp: buildProp,
    functorProp: functorProp,
    functorElemRef: functorElemRef
};

},{"../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Nullable/index.js":"MeaHd","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect.Ref/index.js":"3qwJS","../Foreign/index.js":"3iOAH","../Foreign.Object/index.js":"1QIU3","../Halogen.VDom.Machine/index.js":"HDXtI","../Halogen.VDom.Util/index.js":"5orR2","../Unsafe.Coerce/index.js":"3fQke","../Web.Event.EventTarget/index.js":"6ALxc"}],"3iOAH":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var ForeignError = (function () {
    function ForeignError(value0) {
        this.value0 = value0;
    };
    ForeignError.create = function (value0) {
        return new ForeignError(value0);
    };
    return ForeignError;
})();
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();
var showForeignError = new Data_Show.Show(function (v) {
    if (v instanceof ForeignError) {
        return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
    };
    if (v instanceof ErrorAtIndex) {
        return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
    };
    if (v instanceof ErrorAtProperty) {
        return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
    };
    if (v instanceof TypeMismatch) {
        return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 67, column 89): " + [ v.constructor.name ]);
});
var renderForeignError = function (v) {
    if (v instanceof ForeignError) {
        return v.value0;
    };
    if (v instanceof ErrorAtIndex) {
        return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
    };
    if (v instanceof ErrorAtProperty) {
        return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
    };
    if (v instanceof TypeMismatch) {
        return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
    };
    throw new Error("Failed pattern match at Foreign (line 72, column 1 - line 72, column 45): " + [ v.constructor.name ]);
};
var readUndefined = function (value) {
    if ($foreign.isUndefined(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 157, column 1 - line 157, column 46): " + [ value.constructor.name ]);
};
var readNullOrUndefined = function (value) {
    if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 162, column 1 - line 162, column 52): " + [ value.constructor.name ]);
};
var readNull = function (value) {
    if ($foreign.isNull(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 152, column 1 - line 152, column 41): " + [ value.constructor.name ]);
};
var fail = (function () {
    var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
    return function ($108) {
        return $107(Data_List_NonEmpty.singleton($108));
    };
})();
var readArray = function (value) {
    if ($foreign.isArray(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
    };
    if (Data_Boolean.otherwise) {
        return fail(new TypeMismatch("array", $foreign.tagOf(value)));
    };
    throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
};
var unsafeReadTagged = function (tag) {
    return function (value) {
        if ($foreign.tagOf(value) === tag) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
        };
        if (Data_Boolean.otherwise) {
            return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
        };
        throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
    };
};
var readBoolean = unsafeReadTagged("Boolean");
var readNumber = unsafeReadTagged("Number");
var readInt = function (value) {
    var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
    var fromNumber = (function () {
        var $109 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
        return function ($110) {
            return $109(Data_Int.fromNumber($110));
        };
    })();
    return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
};
var readString = unsafeReadTagged("String");
var readChar = function (value) {
    var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
    var fromString = (function () {
        var $111 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
        return function ($112) {
            return $111(Data_String_CodeUnits.toChar($112));
        };
    })();
    return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
};
var eqForeignError = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ForeignError && y instanceof ForeignError) {
            return x.value0 === y.value0;
        };
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
        };
        if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
        };
        return false;
    };
});
var ordForeignError = new Data_Ord.Ord(function () {
    return eqForeignError;
}, function (x) {
    return function (y) {
        if (x instanceof ForeignError && y instanceof ForeignError) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof ForeignError) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ForeignError) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof TypeMismatch) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof TypeMismatch) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
        };
        if (x instanceof ErrorAtIndex) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ErrorAtIndex) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at Foreign (line 61, column 1 - line 61, column 52): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    ForeignError: ForeignError,
    TypeMismatch: TypeMismatch,
    ErrorAtIndex: ErrorAtIndex,
    ErrorAtProperty: ErrorAtProperty,
    renderForeignError: renderForeignError,
    unsafeReadTagged: unsafeReadTagged,
    readString: readString,
    readChar: readChar,
    readBoolean: readBoolean,
    readNumber: readNumber,
    readInt: readInt,
    readArray: readArray,
    readNull: readNull,
    readUndefined: readUndefined,
    readNullOrUndefined: readNullOrUndefined,
    fail: fail,
    eqForeignError: eqForeignError,
    ordForeignError: ordForeignError,
    showForeignError: showForeignError,
    unsafeToForeign: $foreign.unsafeToForeign,
    unsafeFromForeign: $foreign.unsafeFromForeign,
    typeOf: $foreign.typeOf,
    tagOf: $foreign.tagOf,
    isNull: $foreign.isNull,
    isUndefined: $foreign.isUndefined,
    isArray: $foreign.isArray
};

},{"./foreign.js":"5BLHR","../Control.Applicative/index.js":"1ufUD","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Except/index.js":"7FRiC","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Data.Boolean/index.js":"4zMHm","../Data.Either/index.js":"5Va79","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Identity/index.js":"29odg","../Data.Int/index.js":"3HdcH","../Data.List.NonEmpty/index.js":"2RvxL","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c","../Data.String.CodeUnits/index.js":"2YsDe"}],"5BLHR":[function(require,module,exports) {
"use strict";

exports.unsafeToForeign = function (value) {
  return value;
};

exports.unsafeFromForeign = function (value) {
  return value;
};

exports.typeOf = function (value) {
  return typeof value;
};

exports.tagOf = function (value) {
  return Object.prototype.toString.call(value).slice(8, -1);
};

exports.isNull = function (value) {
  return value === null;
};

exports.isUndefined = function (value) {
  return value === undefined;
};

exports.isArray = Array.isArray || function (value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};

},{}],"7FRiC":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
var runExcept = (function () {
    var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($1) {
        return $0(Control_Monad_Except_Trans.runExceptT($1));
    };
})();
var mapExcept = function (f) {
    return Control_Monad_Except_Trans.mapExceptT((function () {
        var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($3) {
            return Data_Identity.Identity(f($2($3)));
        };
    })());
};
module.exports = {
    runExcept: runExcept,
    mapExcept: mapExcept,
    withExcept: withExcept
};

},{"../Control.Monad.Except.Trans/index.js":"4X0Lb","../Data.Identity/index.js":"29odg","../Data.Newtype/index.js":"2rjOq"}],"3HdcH":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Global = require("../Global/index.js");
var $$Math = require("../Math/index.js");
var Radix = function (x) {
    return x;
};
var Even = (function () {
    function Even() {

    };
    Even.value = new Even();
    return Even;
})();
var Odd = (function () {
    function Odd() {

    };
    Odd.value = new Odd();
    return Odd;
})();
var showParity = new Data_Show.Show(function (v) {
    if (v instanceof Even) {
        return "Even";
    };
    if (v instanceof Odd) {
        return "Odd";
    };
    throw new Error("Failed pattern match at Data.Int (line 112, column 1 - line 114, column 19): " + [ v.constructor.name ]);
});
var radix = function (n) {
    if (n >= 2 && n <= 36) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Int (line 193, column 1 - line 193, column 28): " + [ n.constructor.name ]);
};
var odd = function (x) {
    return (x & 1) !== 0;
};
var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function (x) {
    if (x === Global.infinity) {
        return 0;
    };
    if (x === -Global.infinity) {
        return 0;
    };
    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
        return Data_Bounded.top(Data_Bounded.boundedInt);
    };
    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
        return Data_Bounded.bottom(Data_Bounded.boundedInt);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.fromMaybe(0)(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
};
var round = function ($23) {
    return unsafeClamp($$Math.round($23));
};
var floor = function ($24) {
    return unsafeClamp($$Math.floor($24));
};
var even = function (x) {
    return (x & 1) === 0;
};
var parity = function (n) {
    var $14 = even(n);
    if ($14) {
        return Even.value;
    };
    return Odd.value;
};
var eqParity = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return true;
        };
        if (x instanceof Odd && y instanceof Odd) {
            return true;
        };
        return false;
    };
});
var ordParity = new Data_Ord.Ord(function () {
    return eqParity;
}, function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Even) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Even) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Odd && y instanceof Odd) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Int (line 110, column 1 - line 110, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var semiringParity = new Data_Semiring.Semiring(function (x) {
    return function (y) {
        var $19 = Data_Eq.eq(eqParity)(x)(y);
        if ($19) {
            return Even.value;
        };
        return Odd.value;
    };
}, function (v) {
    return function (v1) {
        if (v instanceof Odd && v1 instanceof Odd) {
            return Odd.value;
        };
        return Even.value;
    };
}, Odd.value, Even.value);
var ringParity = new Data_Ring.Ring(function () {
    return semiringParity;
}, Data_Semiring.add(semiringParity));
var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
    return ringParity;
}, Control_Category.identity(Control_Category.categoryFn));
var decimal = 10;
var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
    return ringParity;
});
var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingParity;
}, function (v) {
    if (v instanceof Even) {
        return 0;
    };
    if (v instanceof Odd) {
        return 1;
    };
    throw new Error("Failed pattern match at Data.Int (line 132, column 1 - line 136, column 17): " + [ v.constructor.name ]);
}, function (x) {
    return function (v) {
        return x;
    };
}, function (v) {
    return function (v1) {
        return Even.value;
    };
});
var ceil = function ($25) {
    return unsafeClamp($$Math.ceil($25));
};
var boundedParity = new Data_Bounded.Bounded(function () {
    return ordParity;
}, Even.value, Odd.value);
var binary = 2;
var base36 = 36;
module.exports = {
    fromNumber: fromNumber,
    ceil: ceil,
    floor: floor,
    round: round,
    fromString: fromString,
    radix: radix,
    binary: binary,
    octal: octal,
    decimal: decimal,
    hexadecimal: hexadecimal,
    base36: base36,
    fromStringAs: fromStringAs,
    Even: Even,
    Odd: Odd,
    parity: parity,
    even: even,
    odd: odd,
    eqParity: eqParity,
    ordParity: ordParity,
    showParity: showParity,
    boundedParity: boundedParity,
    semiringParity: semiringParity,
    ringParity: ringParity,
    commutativeRingParity: commutativeRingParity,
    euclideanRingParity: euclideanRingParity,
    divisionRingParity: divisionRingParity,
    toNumber: $foreign.toNumber,
    toStringAs: $foreign.toStringAs,
    quot: $foreign.quot,
    rem: $foreign.rem,
    pow: $foreign.pow
};

},{"./foreign.js":"1arow","../Control.Category/index.js":"6QTyW","../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.CommutativeRing/index.js":"75WGG","../Data.DivisionRing/index.js":"5ms7m","../Data.Eq/index.js":"2htS8","../Data.EuclideanRing/index.js":"4eAMZ","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Ring/index.js":"3ezk6","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c","../Global/index.js":"7q8r1","../Math/index.js":"4eXlw"}],"1arow":[function(require,module,exports) {
"use strict";

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

exports.toStringAs = function (radix) {
  return function (i) {
    return i.toString(radix);
  };
};


exports.quot = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.rem = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.pow = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return Math.pow(x,y) | 0;
  };
};

},{}],"5ms7m":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var DivisionRing = function (Ring0, recip) {
    this.Ring0 = Ring0;
    this.recip = recip;
};
var recip = function (dict) {
    return dict.recip;
};
var rightDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));
        };
    };
};
var leftDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);
        };
    };
};
var divisionringNumber = new DivisionRing(function () {
    return Data_Ring.ringNumber;
}, function (x) {
    return 1.0 / x;
});
module.exports = {
    DivisionRing: DivisionRing,
    recip: recip,
    leftDiv: leftDiv,
    rightDiv: rightDiv,
    divisionringNumber: divisionringNumber
};

},{"../Data.Ring/index.js":"3ezk6","../Data.Semiring/index.js":"42GiG"}],"7q8r1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var toPrecision = function (digits) {
    return function (n) {
        return $foreign["_toPrecision"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var toFixed = function (digits) {
    return function (n) {
        return $foreign["_toFixed"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var toExponential = function (digits) {
    return function (n) {
        return $foreign["_toExponential"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var $$encodeURIComponent = function (s) {
    return $foreign["_encodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$encodeURI = function (s) {
    return $foreign["_encodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$decodeURIComponent = function (s) {
    return $foreign["_decodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$decodeURI = function (s) {
    return $foreign["_decodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
module.exports = {
    toFixed: toFixed,
    toExponential: toExponential,
    toPrecision: toPrecision,
    "decodeURI": $$decodeURI,
    "encodeURI": $$encodeURI,
    "decodeURIComponent": $$decodeURIComponent,
    "encodeURIComponent": $$encodeURIComponent,
    nan: $foreign.nan,
    "isNaN": $foreign["isNaN"],
    infinity: $foreign.infinity,
    "isFinite": $foreign["isFinite"],
    readInt: $foreign.readInt,
    readFloat: $foreign.readFloat
};

},{"./foreign.js":"2NFJ9","../Data.Function/index.js":"tHEWI","../Data.Maybe/index.js":"1Cwwt"}],"2NFJ9":[function(require,module,exports) {
/* globals exports */
"use strict";

exports.nan = NaN;

exports.isNaN = isNaN;

exports.infinity = Infinity;

exports.isFinite = isFinite;

exports.readInt = function (radix) {
  return function (n) {
    return parseInt(n, radix);
  };
};

exports.readFloat = parseFloat;

var formatNumber = function (format) {
  return function (fail, succ, digits, n) {
    try {
      return succ(n[format](digits));
    }
    catch (e) {
      return fail(e.message);
    }
  };
};

exports._toFixed = formatNumber("toFixed");
exports._toExponential = formatNumber("toExponential");
exports._toPrecision = formatNumber("toPrecision");

var encdecURI = function (encdec) {
  return function (fail, succ, s) {
    try {
      return succ(encdec(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
};

exports._decodeURI = encdecURI(decodeURI);
exports._encodeURI = encdecURI(encodeURI);
exports._decodeURIComponent = encdecURI(decodeURIComponent);
exports._encodeURIComponent = encdecURI(encodeURIComponent);

},{}],"4eXlw":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    abs: $foreign.abs,
    acos: $foreign.acos,
    asin: $foreign.asin,
    atan: $foreign.atan,
    atan2: $foreign.atan2,
    ceil: $foreign.ceil,
    cos: $foreign.cos,
    exp: $foreign.exp,
    floor: $foreign.floor,
    log: $foreign.log,
    max: $foreign.max,
    min: $foreign.min,
    pow: $foreign.pow,
    round: $foreign.round,
    sin: $foreign.sin,
    sqrt: $foreign.sqrt,
    tan: $foreign.tan,
    trunc: $foreign.trunc,
    remainder: $foreign.remainder,
    e: $foreign.e,
    ln2: $foreign.ln2,
    ln10: $foreign.ln10,
    log2e: $foreign.log2e,
    log10e: $foreign.log10e,
    pi: $foreign.pi,
    tau: $foreign.tau,
    sqrt1_2: $foreign.sqrt1_2,
    sqrt2: $foreign.sqrt2
};

},{"./foreign.js":"OKPop"}],"OKPop":[function(require,module,exports) {
"use strict";

// module Math

exports.abs = Math.abs;

exports.acos = Math.acos;

exports.asin = Math.asin;

exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;

exports.cos = Math.cos;

exports.exp = Math.exp;

exports.floor = Math.floor;

exports.trunc = Math.trunc || function (n) {
  return n < 0 ? Math.ceil(n) : Math.floor(n);
};

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports.remainder = function (n) {
  return function (m) {
    return n % m;
  };
};

exports.round = Math.round;

exports.sin = Math.sin;

exports.sqrt = Math.sqrt;

exports.tan = Math.tan;

exports.e = Math.E;

exports.ln2 = Math.LN2;

exports.ln10 = Math.LN10;

exports.log2e = Math.LOG2E;

exports.log10e = Math.LOG10E;

exports.pi = Math.PI;

exports.tau = 2 * Math.PI;

exports.sqrt1_2 = Math.SQRT1_2;

exports.sqrt2 = Math.SQRT2;

},{}],"2YsDe":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var uncons = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v),
        tail: $foreign.drop(1)(v)
    });
};
var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var takeWhile = function (p) {
    return function (s) {
        return $foreign.take($foreign.countPrefix(p)(s))(s);
    };
};
var takeRight = function (i) {
    return function (s) {
        return $foreign.drop($foreign.length(s) - i | 0)(s);
    };
};
var stripSuffix = function (v) {
    return function (str) {
        var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
        var $9 = v1.after === v;
        if ($9) {
            return new Data_Maybe.Just(v1.before);
        };
        return Data_Maybe.Nothing.value;
    };
};
var stripPrefix = function (v) {
    return function (str) {
        var v1 = $foreign.splitAt($foreign.length(v))(str);
        var $15 = v1.before === v;
        if ($15) {
            return new Data_Maybe.Just(v1.after);
        };
        return Data_Maybe.Nothing.value;
    };
};
var slice = function (b) {
    return function (e) {
        return function (s) {
            var l = $foreign.length(s);
            var norm = function (x) {
                if (x < 0) {
                    return l + x | 0;
                };
                if (Data_Boolean.otherwise) {
                    return x;
                };
                throw new Error("Failed pattern match at Data.String.CodeUnits (line 312, column 5 - line 313, column 27): " + [ x.constructor.name ]);
            };
            var e$prime = norm(e);
            var b$prime = norm(b);
            var $19 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime > l || b$prime > e$prime)));
            if ($19) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
        };
    };
};
var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var dropWhile = function (p) {
    return function (s) {
        return $foreign.drop($foreign.countPrefix(p)(s))(s);
    };
};
var dropRight = function (i) {
    return function (s) {
        return $foreign.take($foreign.length(s) - i | 0)(s);
    };
};
var contains = function (pat) {
    var $20 = indexOf(pat);
    return function ($21) {
        return Data_Maybe.isJust($20($21));
    };
};
var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    charAt: charAt,
    toChar: toChar,
    uncons: uncons,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    takeRight: takeRight,
    takeWhile: takeWhile,
    dropRight: dropRight,
    dropWhile: dropWhile,
    slice: slice,
    singleton: $foreign.singleton,
    fromCharArray: $foreign.fromCharArray,
    toCharArray: $foreign.toCharArray,
    length: $foreign.length,
    countPrefix: $foreign.countPrefix,
    take: $foreign.take,
    drop: $foreign.drop,
    splitAt: $foreign.splitAt
};

},{"./foreign.js":"2j7l3","../Data.Boolean/index.js":"4zMHm","../Data.Maybe/index.js":"1Cwwt","../Data.String.Unsafe/index.js":"1a3Q1"}],"2j7l3":[function(require,module,exports) {
"use strict";

exports.fromCharArray = function (a) {
  return a.join("");
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.singleton = function (c) {
  return c;
};

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports.countPrefix = function (p) {
  return function (s) {
    var i = 0;
    while (i < s.length && p(s.charAt(i))) i++;
    return i;
  };
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports._indexOfStartingAt = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports._lastIndexOfStartingAt = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substring(n);
  };
};

exports._slice = function (b) {
  return function (e) {
    return function (s) {
      return s.slice(b,e);
    };
  };
};

exports.splitAt = function (i) {
  return function (s) {
    return { before: s.substring(0, i), after: s.substring(i) };
  };
};

},{}],"1a3Q1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    "char": $foreign["char"],
    charAt: $foreign.charAt
};

},{"./foreign.js":"4LMYK"}],"4LMYK":[function(require,module,exports) {
"use strict";

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};

},{}],"1QIU3":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var values = $foreign.toArrayWithKey(function (v) {
    return function (v1) {
        return v1;
    };
});
var toUnfoldable = function (dictUnfoldable) {
    var $36 = Data_Array.toUnfoldable(dictUnfoldable);
    var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
    return function ($38) {
        return $36($37($38));
    };
};
var toAscUnfoldable = function (dictUnfoldable) {
    var $39 = Data_Array.toUnfoldable(dictUnfoldable);
    var $40 = Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst);
    var $41 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
    return function ($42) {
        return $39($40($41($42)));
    };
};
var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
var thawST = $foreign["_copyST"];
var singleton = function (k) {
    return function (v) {
        return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
    };
};
var showObject = function (dictShow) {
    return new Data_Show.Show(function (m) {
        return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
    });
};
var mutate = function (f) {
    return function (m) {
        return $foreign.runST(function __do() {
            var s = thawST(m)();
            f(s)();
            return s;
        });
    };
};
var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));
var mapWithKey = function (f) {
    return function (m) {
        return $foreign["_mapWithKey"](m, f);
    };
};
var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var isSubmap = function (dictEq) {
    return function (m1) {
        return function (m2) {
            var f = function (k) {
                return function (v) {
                    return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
                };
            };
            return $foreign.all(f)(m1);
        };
    };
};
var isEmpty = $foreign.all(function (v) {
    return function (v1) {
        return false;
    };
});
var insert = function (k) {
    return function (v) {
        return mutate(Foreign_Object_ST.poke(k)(v));
    };
};
var functorObject = new Data_Functor.Functor(function (f) {
    return function (m) {
        return $foreign["_fmapObject"](m, f);
    };
});
var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorObject;
}, mapWithKey);
var fromHomogeneous = function (dictHomogeneous) {
    return Unsafe_Coerce.unsafeCoerce;
};
var fromFoldableWith = function (dictFoldable) {
    return function (f) {
        return function (l) {
            return $foreign.runST(function __do() {
                var s = Foreign_Object_ST["new"]();
                Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v) {
                    return function __do() {
                        var v$prime = $foreign["_lookupST"](v.value1, f(v.value1), v.value0, s)();
                        return Foreign_Object_ST.poke(v.value0)(v$prime)(s)();
                    };
                })();
                return s;
            });
        };
    };
};
var fromFoldable = function (dictFoldable) {
    return function (l) {
        return $foreign.runST(function __do() {
            var s = Foreign_Object_ST["new"]();
            Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
            })();
            return s;
        });
    };
};
var freezeST = $foreign["_copyST"];
var foldMaybe = function (f) {
    return function (z) {
        return function (m) {
            return $foreign["_foldSCObject"](m, z, f, Data_Maybe.fromMaybe);
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (z) {
            return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
        };
    };
};
var semigroupObject = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (m1) {
        return function (m2) {
            return mutate(function (s1) {
                return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                    return function (k) {
                        return function (v2) {
                            return Foreign_Object_ST.poke(k)($foreign["_lookup"](v2, function (v1) {
                                return Data_Semigroup.append(dictSemigroup)(v1)(v2);
                            }, k, m2))(s2);
                        };
                    };
                })(s1)(m1);
            })(m2);
        };
    });
};
var monoidObject = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupObject(dictSemigroup);
    }, $foreign.empty);
};
var union = function (m) {
    return mutate(function (s) {
        return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
            return function (k) {
                return function (v) {
                    return Foreign_Object_ST.poke(k)(v)(s$prime);
                };
            };
        })(s)(m);
    });
};
var unions = function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
};
var fold = $foreign["_foldM"](Data_Function.applyFlipped);
var foldMap = function (dictMonoid) {
    return function (f) {
        return fold(function (acc) {
            return function (k) {
                return function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
};
var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return foldMap(dictMonoid)(Data_Function["const"](f));
    };
}, function (f) {
    return fold(function (z) {
        return function (v) {
            return f(z);
        };
    });
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
        };
    };
});
var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableObject;
}, function (dictMonoid) {
    return foldMap(dictMonoid);
}, function (f) {
    return fold(Data_Function.flip(f));
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
        };
    };
});
var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexObject;
}, function () {
    return functorWithIndexObject;
}, function () {
    return traversableObject;
}, function (dictApplicative) {
    return function (f) {
        return function (ms) {
            return fold(function (acc) {
                return function (k) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                    };
                };
            })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
        };
    };
});
var traversableObject = new Data_Traversable.Traversable(function () {
    return foldableObject;
}, function () {
    return functorObject;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
    return function ($44) {
        return $43(Data_Function["const"]($44));
    };
});
var filterWithKey = function (predicate) {
    return function (m) {
        var go = (function () {
            var step = function (acc) {
                return function (k) {
                    return function (v) {
                        var $33 = predicate(k)(v);
                        if ($33) {
                            return Foreign_Object_ST.poke(k)(v)(acc);
                        };
                        return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
                    };
                };
            };
            return function __do() {
                var m$prime = Foreign_Object_ST["new"]();
                return foldM(Control_Monad_ST_Internal.monadST)(step)(m$prime)(m)();
            };
        })();
        return $foreign.runST(go);
    };
};
var filterKeys = function (predicate) {
    return filterWithKey(function ($45) {
        return Data_Function["const"](predicate($45));
    });
};
var filter = function (predicate) {
    return filterWithKey(Data_Function["const"](predicate));
};
var eqObject = function (dictEq) {
    return new Data_Eq.Eq(function (m1) {
        return function (m2) {
            return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
        };
    });
};
var ordObject = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqObject(dictOrd.Eq0());
    }, function (m1) {
        return function (m2) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
        };
    });
};
var eq1Object = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqObject(dictEq));
});
var $$delete = function (k) {
    return mutate(Foreign_Object_ST["delete"](k));
};
var pop = function (k) {
    return function (m) {
        return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
            return new Data_Tuple.Tuple(a, $$delete(k)(m));
        });
    };
};
var alter = function (f) {
    return function (k) {
        return function (m) {
            var v = f(lookup(k)(m));
            if (v instanceof Data_Maybe.Nothing) {
                return $$delete(k)(m);
            };
            if (v instanceof Data_Maybe.Just) {
                return insert(k)(v.value0)(m);
            };
            throw new Error("Failed pattern match at Foreign.Object (line 206, column 15 - line 208, column 25): " + [ v.constructor.name ]);
        };
    };
};
var update = function (f) {
    return function (k) {
        return function (m) {
            return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
        };
    };
};
module.exports = {
    isEmpty: isEmpty,
    singleton: singleton,
    insert: insert,
    lookup: lookup,
    toUnfoldable: toUnfoldable,
    toAscUnfoldable: toAscUnfoldable,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromHomogeneous: fromHomogeneous,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    mapWithKey: mapWithKey,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    values: values,
    union: union,
    unions: unions,
    isSubmap: isSubmap,
    fold: fold,
    foldMap: foldMap,
    foldM: foldM,
    foldMaybe: foldMaybe,
    thawST: thawST,
    freezeST: freezeST,
    functorObject: functorObject,
    functorWithIndexObject: functorWithIndexObject,
    foldableObject: foldableObject,
    foldableWithIndexObject: foldableWithIndexObject,
    traversableObject: traversableObject,
    traversableWithIndexObject: traversableWithIndexObject,
    eqObject: eqObject,
    eq1Object: eq1Object,
    ordObject: ordObject,
    showObject: showObject,
    semigroupObject: semigroupObject,
    monoidObject: monoidObject,
    empty: $foreign.empty,
    size: $foreign.size,
    keys: $foreign.keys,
    all: $foreign.all,
    runST: $foreign.runST,
    toArrayWithKey: $foreign.toArrayWithKey
};

},{"./foreign.js":"2upsH","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad.ST.Internal/index.js":"7aLBJ","../Data.Array/index.js":"6mZxP","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Function/index.js":"tHEWI","../Data.Function.Uncurried/index.js":"7B0pM","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Foreign.Object.ST/index.js":"3JJ14","../Unsafe.Coerce/index.js":"3fQke"}],"2upsH":[function(require,module,exports) {
"use strict";

exports._copyST = function (m) {
  return function () {
    var r = {};
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r[k] = m[k];
      }
    }
    return r;
  };
};

exports.empty = {};

exports.runST = function (f) {
  return f();
};

exports._fmapObject = function (m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }
  return m;
};

exports._mapWithKey = function (m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }
  return m;
};

exports._foldM = function (bind) {
  return function (f) {
    return function (mz) {
      return function (m) {
        var acc = mz;
        function g(k) {
          return function (z) {
            return f(z)(k)(m[k]);
          };
        }
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind(acc)(g(k));
          }
        }
        return acc;
      };
    };
  };
};

exports._foldSCObject = function (m, z, f, fromMaybe) {
  var acc = z;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      var maybeR = f(acc)(k)(m[k]);
      var r = fromMaybe(null)(maybeR);
      if (r === null) return acc;
      else acc = r;
    }
  }
  return acc;
};

exports.all = function (f) {
  return function (m) {
    for (var k in m) {
      if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
    }
    return true;
  };
};

exports.size = function (m) {
  var s = 0;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      ++s;
    }
  }
  return s;
};

exports._lookup = function (no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
};

exports._lookupST = function (no, yes, k, m) {
  return function () {
    return k in m ? yes(m[k]) : no;
  };
};

function toArrayWithKey(f) {
  return function (m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}

exports.toArrayWithKey = toArrayWithKey;

exports.keys = Object.keys || toArrayWithKey(function (k) {
  return function () { return k; };
});

},{}],"1Q9Es":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var withKeys_ = function (ctor) {
    return function (children) {
        var v = ctor([  ]);
        if (v instanceof Halogen_VDom_Types.Elem) {
            return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
        };
        return v;
    };
};
var withKeys = function (ctor) {
    return function (props) {
        return function (children) {
            var v = ctor(props)([  ]);
            if (v instanceof Halogen_VDom_Types.Elem) {
                return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
            };
            return v;
        };
    };
};
var keyedNS = (function () {
    var $12 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
    return function ($13) {
        return Halogen_HTML_Core.keyed($12($13));
    };
})();
var keyed = Halogen_HTML_Core.keyed(Data_Maybe.Nothing.value);
var elementNS = (function () {
    var $14 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
    return function ($15) {
        return Halogen_HTML_Core.element($14($15));
    };
})();
var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
var em = element("em");
var em_ = em([  ]);
var embed = element("embed");
var embed_ = embed([  ]);
var fieldset = element("fieldset");
var fieldset_ = fieldset([  ]);
var figcaption = element("figcaption");
var figcaption_ = figcaption([  ]);
var figure = element("figure");
var figure_ = figure([  ]);
var footer = element("footer");
var footer_ = footer([  ]);
var form = element("form");
var form_ = form([  ]);
var h1 = element("h1");
var h1_ = h1([  ]);
var h2 = element("h2");
var h2_ = h2([  ]);
var h3 = element("h3");
var h3_ = h3([  ]);
var h4 = element("h4");
var h4_ = h4([  ]);
var h5 = element("h5");
var h5_ = h5([  ]);
var h6 = element("h6");
var h6_ = h6([  ]);
var head = element("head");
var head_ = head([  ]);
var header = element("header");
var header_ = header([  ]);
var hr = function (props) {
    return element("hr")(props)([  ]);
};
var hr_ = hr([  ]);
var html = element("html");
var html_ = html([  ]);
var i = element("i");
var i_ = i([  ]);
var iframe = function (props) {
    return element("iframe")(props)([  ]);
};
var img = function (props) {
    return element("img")(props)([  ]);
};
var input = function (props) {
    return element("input")(props)([  ]);
};
var ins = element("ins");
var ins_ = ins([  ]);
var kbd = element("kbd");
var kbd_ = kbd([  ]);
var label = element("label");
var label_ = label([  ]);
var legend = element("legend");
var legend_ = legend([  ]);
var li = element("li");
var li_ = li([  ]);
var link = function (props) {
    return element("link")(props)([  ]);
};
var main = element("main");
var main_ = main([  ]);
var map = element("map");
var map_ = map([  ]);
var mark = element("mark");
var mark_ = mark([  ]);
var menu = element("menu");
var menu_ = menu([  ]);
var menuitem = element("menuitem");
var menuitem_ = menuitem([  ]);
var meta = function (props) {
    return element("meta")(props)([  ]);
};
var meter = element("meter");
var meter_ = meter([  ]);
var nav = element("nav");
var nav_ = nav([  ]);
var noscript = element("noscript");
var noscript_ = noscript([  ]);
var object = element("object");
var object_ = object([  ]);
var ol = element("ol");
var ol_ = ol([  ]);
var optgroup = element("optgroup");
var optgroup_ = optgroup([  ]);
var option = element("option");
var option_ = option([  ]);
var output = element("output");
var output_ = output([  ]);
var p = element("p");
var p_ = p([  ]);
var param = function (props) {
    return element("param")(props)([  ]);
};
var pre = element("pre");
var pre_ = pre([  ]);
var progress = element("progress");
var progress_ = progress([  ]);
var q = element("q");
var q_ = q([  ]);
var rp = element("rp");
var rp_ = rp([  ]);
var rt = element("rt");
var rt_ = rt([  ]);
var ruby = element("ruby");
var ruby_ = ruby([  ]);
var samp = element("samp");
var samp_ = samp([  ]);
var script = element("script");
var script_ = script([  ]);
var section = element("section");
var section_ = section([  ]);
var select = element("select");
var select_ = select([  ]);
var small = element("small");
var small_ = small([  ]);
var source = function (props) {
    return element("source")(props)([  ]);
};
var span = element("span");
var span_ = span([  ]);
var strong = element("strong");
var strong_ = strong([  ]);
var style = element("style");
var style_ = style([  ]);
var sub = element("sub");
var sub_ = sub([  ]);
var summary = element("summary");
var summary_ = summary([  ]);
var sup = element("sup");
var sup_ = sup([  ]);
var table = element("table");
var table_ = table([  ]);
var tbody = element("tbody");
var tbody_ = tbody([  ]);
var td = element("td");
var td_ = td([  ]);
var textarea = function (es) {
    return element("textarea")(es)([  ]);
};
var tfoot = element("tfoot");
var tfoot_ = tfoot([  ]);
var th = element("th");
var th_ = th([  ]);
var thead = element("thead");
var thead_ = thead([  ]);
var time = element("time");
var time_ = time([  ]);
var title = element("title");
var title_ = title([  ]);
var tr = element("tr");
var tr_ = tr([  ]);
var track = function (props) {
    return element("track")(props)([  ]);
};
var u = element("u");
var u_ = u([  ]);
var ul = element("ul");
var ul_ = ul([  ]);
var $$var = element("var");
var var_ = $$var([  ]);
var video = element("video");
var video_ = video([  ]);
var wbr = function (props) {
    return element("wbr")(props)([  ]);
};
var dt = element("dt");
var dt_ = dt([  ]);
var dl = element("dl");
var dl_ = dl([  ]);
var div = element("div");
var div_ = div([  ]);
var dialog = element("dialog");
var dialog_ = dialog([  ]);
var dfn = element("dfn");
var dfn_ = dfn([  ]);
var details = element("details");
var details_ = details([  ]);
var del = element("del");
var del_ = del([  ]);
var dd = element("dd");
var dd_ = dd([  ]);
var datalist = element("datalist");
var datalist_ = datalist([  ]);
var command = function (props) {
    return element("command")(props)([  ]);
};
var colgroup = element("colgroup");
var colgroup_ = colgroup([  ]);
var col = function (props) {
    return element("col")(props)([  ]);
};
var code = element("code");
var code_ = code([  ]);
var cite = element("cite");
var cite_ = cite([  ]);
var caption = element("caption");
var caption_ = caption([  ]);
var canvas = function (props) {
    return element("canvas")(props)([  ]);
};
var button = element("button");
var button_ = button([  ]);
var br = function (props) {
    return element("br")(props)([  ]);
};
var br_ = br([  ]);
var body = element("body");
var body_ = body([  ]);
var blockquote = element("blockquote");
var blockquote_ = blockquote([  ]);
var bdo = element("bdo");
var bdo_ = bdo([  ]);
var bdi = element("bdi");
var bdi_ = bdi([  ]);
var base = function (props) {
    return element("base")(props)([  ]);
};
var b = element("b");
var b_ = b([  ]);
var audio = element("audio");
var audio_ = audio([  ]);
var aside = element("aside");
var aside_ = aside([  ]);
var article = element("article");
var article_ = article([  ]);
var area = function (props) {
    return element("area")(props)([  ]);
};
var address = element("address");
var address_ = address([  ]);
var abbr = element("abbr");
var abbr_ = abbr([  ]);
var a = element("a");
var a_ = a([  ]);
module.exports = {
    element: element,
    elementNS: elementNS,
    keyed: keyed,
    keyedNS: keyedNS,
    withKeys: withKeys,
    withKeys_: withKeys_,
    a: a,
    a_: a_,
    abbr: abbr,
    abbr_: abbr_,
    address: address,
    address_: address_,
    area: area,
    article: article,
    article_: article_,
    aside: aside,
    aside_: aside_,
    audio: audio,
    audio_: audio_,
    b: b,
    b_: b_,
    base: base,
    bdi: bdi,
    bdi_: bdi_,
    bdo: bdo,
    bdo_: bdo_,
    blockquote: blockquote,
    blockquote_: blockquote_,
    body: body,
    body_: body_,
    br: br,
    br_: br_,
    button: button,
    button_: button_,
    canvas: canvas,
    caption: caption,
    caption_: caption_,
    cite: cite,
    cite_: cite_,
    code: code,
    code_: code_,
    col: col,
    colgroup: colgroup,
    colgroup_: colgroup_,
    command: command,
    datalist: datalist,
    datalist_: datalist_,
    dd: dd,
    dd_: dd_,
    del: del,
    del_: del_,
    details: details,
    details_: details_,
    dfn: dfn,
    dfn_: dfn_,
    dialog: dialog,
    dialog_: dialog_,
    div: div,
    div_: div_,
    dl: dl,
    dl_: dl_,
    dt: dt,
    dt_: dt_,
    em: em,
    em_: em_,
    embed: embed,
    embed_: embed_,
    fieldset: fieldset,
    fieldset_: fieldset_,
    figcaption: figcaption,
    figcaption_: figcaption_,
    figure: figure,
    figure_: figure_,
    footer: footer,
    footer_: footer_,
    form: form,
    form_: form_,
    h1: h1,
    h1_: h1_,
    h2: h2,
    h2_: h2_,
    h3: h3,
    h3_: h3_,
    h4: h4,
    h4_: h4_,
    h5: h5,
    h5_: h5_,
    h6: h6,
    h6_: h6_,
    head: head,
    head_: head_,
    header: header,
    header_: header_,
    hr: hr,
    hr_: hr_,
    html: html,
    html_: html_,
    i: i,
    i_: i_,
    iframe: iframe,
    img: img,
    input: input,
    ins: ins,
    ins_: ins_,
    kbd: kbd,
    kbd_: kbd_,
    label: label,
    label_: label_,
    legend: legend,
    legend_: legend_,
    li: li,
    li_: li_,
    link: link,
    main: main,
    main_: main_,
    map: map,
    map_: map_,
    mark: mark,
    mark_: mark_,
    menu: menu,
    menu_: menu_,
    menuitem: menuitem,
    menuitem_: menuitem_,
    meta: meta,
    meter: meter,
    meter_: meter_,
    nav: nav,
    nav_: nav_,
    noscript: noscript,
    noscript_: noscript_,
    object: object,
    object_: object_,
    ol: ol,
    ol_: ol_,
    optgroup: optgroup,
    optgroup_: optgroup_,
    option: option,
    option_: option_,
    output: output,
    output_: output_,
    p: p,
    p_: p_,
    param: param,
    pre: pre,
    pre_: pre_,
    progress: progress,
    progress_: progress_,
    q: q,
    q_: q_,
    rp: rp,
    rp_: rp_,
    rt: rt,
    rt_: rt_,
    ruby: ruby,
    ruby_: ruby_,
    samp: samp,
    samp_: samp_,
    script: script,
    script_: script_,
    section: section,
    section_: section_,
    select: select,
    select_: select_,
    small: small,
    small_: small_,
    source: source,
    span: span,
    span_: span_,
    strong: strong,
    strong_: strong_,
    style: style,
    style_: style_,
    sub: sub,
    sub_: sub_,
    summary: summary,
    summary_: summary_,
    sup: sup,
    sup_: sup_,
    table: table,
    table_: table_,
    tbody: tbody,
    tbody_: tbody_,
    td: td,
    td_: td_,
    textarea: textarea,
    tfoot: tfoot,
    tfoot_: tfoot_,
    th: th,
    th_: th_,
    thead: thead,
    thead_: thead_,
    time: time,
    time_: time_,
    title: title,
    title_: title_,
    tr: tr,
    tr_: tr_,
    track: track,
    u: u,
    u_: u_,
    ul: ul,
    ul_: ul_,
    "var": $$var,
    var_: var_,
    video: video,
    video_: video_,
    wbr: wbr
};

},{"../Control.Applicative/index.js":"1ufUD","../Data.Maybe/index.js":"1Cwwt","../Halogen.HTML.Core/index.js":"0RFMZ","../Halogen.VDom.Types/index.js":"xcoB4"}],"5YCON":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver = require("../Halogen.Aff.Driver/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var Web_DOM_Node = require("../Web.DOM.Node/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var RenderState = function (x) {
    return x;
};
var substInParent = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
            };
            if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
            };
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
    };
};
var removeChild = function (v) {
    return function __do() {
        var npn = Web_DOM_Node.parentNode(v.node)();
        return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
            return Web_DOM_Node.removeChild(v.node)(pn);
        })(npn)();
    };
};
var mkSpec = function (handler) {
    return function (renderChildRef) {
        return function (document) {
            var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                return v.node;
            });
            var done = function (st) {
                if (st instanceof Data_Maybe.Just) {
                    return Halogen_VDom_Machine.halt(st.value0);
                };
                return Data_Unit.unit;
            };
            var buildWidget = function (spec) {
                var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeHTML))(spec);
                var renderComponentSlot = function (cs) {
                    var renderChild = Effect_Ref.read(renderChildRef)();
                    var rsx = renderChild(cs)();
                    var node = getNode(rsx);
                    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                };
                var render = function (slot) {
                    if (slot instanceof Halogen_Component.ComponentSlot) {
                        return renderComponentSlot(slot.value0);
                    };
                    if (slot instanceof Halogen_Component.ThunkSlot) {
                        var step = buildThunk(slot.value0);
                        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step), new Data_Maybe.Just(step), patch, done));
                    };
                    throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                };
                var patch = function (st, slot) {
                    if (st instanceof Data_Maybe.Just) {
                        if (slot instanceof Halogen_Component.ComponentSlot) {
                            Halogen_VDom_Machine.halt(st.value0);
                            return renderComponentSlot(slot.value0);
                        };
                        if (slot instanceof Halogen_Component.ThunkSlot) {
                            var step$prime = Halogen_VDom_Machine.step(st.value0, slot.value0);
                            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step$prime), new Data_Maybe.Just(step$prime), patch, done));
                        };
                        throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                    };
                    return render(slot);
                };
                return render;
            };
            var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
            return {
                buildWidget: buildWidget,
                buildAttributes: buildAttributes,
                document: document
            };
        };
    };
};
var renderSpec = function (document) {
    return function (container) {
        var render = function (handler) {
            return function (child) {
                return function (v) {
                    return function (v1) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return function __do() {
                                var renderChildRef = Effect_Ref["new"](child)();
                                var spec = mkSpec(handler)(renderChildRef)(document);
                                var machine = Halogen_VDom_DOM.buildVDom(spec)(v);
                                var node = Halogen_VDom_Machine.extract(machine);
                                Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                return {
                                    machine: machine,
                                    node: node,
                                    renderChildRef: renderChildRef
                                };
                            };
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return function __do() {
                                Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                var parent = Web_DOM_Node.parentNode(v1.value0.node)();
                                var nextSib = Web_DOM_Node.nextSibling(v1.value0.node)();
                                var machine$prime = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                var newNode = Halogen_VDom_Machine.extract(machine$prime);
                                Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent))();
                                return {
                                    machine: machine$prime,
                                    node: newNode,
                                    renderChildRef: v1.value0.renderChildRef
                                };
                            };
                        };
                        throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                    };
                };
            };
        };
        return {
            render: render,
            renderChild: Control_Category.identity(Control_Category.categoryFn),
            removeChild: removeChild,
            dispose: removeChild
        };
    };
};
var runUI = function (component) {
    return function (i) {
        return function (element) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (document) {
                return Halogen_Aff_Driver.runUI(renderSpec(document)(element))(component)(i);
            });
        };
    };
};
module.exports = {
    runUI: runUI
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Data.Foldable/index.js":"6ATDN","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff/index.js":"1PqJZ","../Effect.Class/index.js":"70nM9","../Effect.Ref/index.js":"3qwJS","../Halogen.Aff.Driver/index.js":"34ghX","../Halogen.Aff.Driver.State/index.js":"2E8kR","../Halogen.Component/index.js":"5H60K","../Halogen.HTML.Core/index.js":"0RFMZ","../Halogen.VDom.DOM/index.js":"4ZUZQ","../Halogen.VDom.DOM.Prop/index.js":"4jeLh","../Halogen.VDom.Machine/index.js":"HDXtI","../Halogen.VDom.Thunk/index.js":"57lBX","../Unsafe.Reference/index.js":"7Fr2e","../Web.DOM.Node/index.js":"6DvEJ","../Web.HTML/index.js":"2DSEp","../Web.HTML.HTMLDocument/index.js":"1c4jR","../Web.HTML.HTMLElement/index.js":"5bP3j","../Web.HTML.Window/index.js":"5aURY"}],"34ghX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver_Eval = require("../Halogen.Aff.Driver.Eval/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var newLifecycleHandlers = Effect_Ref["new"]({
    initializers: Data_List_Types.Nil.value,
    finalizers: Data_List_Types.Nil.value
});
var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var handlePending = function (ref) {
    return function __do() {
        var queue = Effect_Ref.read(ref)();
        Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(queue)((function () {
            var $29 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
            return function ($30) {
                return handleAff($29(Data_List.reverse($30)));
            };
        })())();
    };
};
var cleanupSubscriptionsAndForks = function (v) {
    return function __do() {
        Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
            var $31 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)((function () {
                var $33 = Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff);
                return function ($34) {
                    return $33(Halogen_Query_EventSource.finalize($34));
                };
            })());
            return function ($32) {
                return handleAff($31($32));
            };
        })()))(Effect_Ref.read(v.subscriptions))();
        Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
        Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
            var $35 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
            return function ($36) {
                return handleAff($35($36));
            };
        })()))(Effect_Ref.read(v.forks))();
        return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
    };
};
var runUI = function (renderSpec) {
    return function (component) {
        return function (i) {
            var subscribe = function (fresh) {
                return function (ref) {
                    return function (consumer) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (inputVar) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                var listenerId = Effect_Ref.read(fresh)();
                                Effect_Ref.modify_(function (v) {
                                    return v + 1 | 0;
                                })(fresh)();
                                Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordInt)(listenerId)(inputVar))(ref)();
                                return listenerId;
                            }))(function (listenerId) {
                                var producer = Control_Coroutine.producer(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)))(Data_Either.Left.create))(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_AVar.take(inputVar))));
                                return Data_Functor["void"](Effect_Aff.functorAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.connect(Effect_Aff.monadRecAff)(Effect_Aff.parallelAff)(producer)(consumer)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordInt)(listenerId))(ref)))(function () {
                                        return Effect_Aff_AVar.kill(Effect_Exception.error("ended"))(inputVar);
                                    });
                                })));
                            });
                        });
                    };
                };
            };
            var rootHandler = function (ref) {
                return function (message) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (listeners) {
                        return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_Functor.map(Data_Map_Internal.functorMap)(Effect_Aff_AVar.put(message))(listeners));
                    });
                };
            };
            var squashChildInitializers = function (lchs) {
                return function (preInits) {
                    return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                        var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                        return Effect_Ref.modify_(function (handlers) {
                            return {
                                initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                            handlePending(st.pendingQueries)();
                                            return handlePending(st.pendingOuts)();
                                        });
                                    });
                                }), preInits),
                                finalizers: handlers.finalizers
                            };
                        })(lchs);
                    });
                };
            };
            var runComponent = function (lchs) {
                return function (handler) {
                    return function (j) {
                        return Halogen_Component.unComponent(function (c) {
                            return function __do() {
                                var lchs$prime = newLifecycleHandlers();
                                var $$var = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(lchs$prime)();
                                var pre = Effect_Ref.read(lchs)();
                                Effect_Ref.write({
                                    initializers: Data_List_Types.Nil.value,
                                    finalizers: pre.finalizers
                                })(lchs)();
                                Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX((function () {
                                    var $37 = render(lchs);
                                    return function ($38) {
                                        return $37((function (v) {
                                            return v.selfRef;
                                        })($38));
                                    };
                                })()))(Effect_Ref.read($$var))();
                                Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(pre.initializers))(Effect_Ref.read($$var))();
                                return $$var;
                            };
                        });
                    };
                };
            };
            var renderChild = function (lchs) {
                return function (handler) {
                    return function (childrenInRef) {
                        return function (childrenOutRef) {
                            return Halogen_Component.unComponentSlot(function (slot) {
                                return function __do() {
                                    var childrenIn = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();
                                    var $$var = (function () {
                                        if (childrenIn instanceof Data_Maybe.Just) {
                                            Effect_Ref.write(childrenIn.value0.value1)(childrenInRef)();
                                            var dsx = Effect_Ref.read(childrenIn.value0.value0)();
                                            Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                return function __do() {
                                                    Data_Function.flip(Effect_Ref.write)(st.handlerRef)((function () {
                                                        var $39 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                        return function ($40) {
                                                            return $39(slot.output($40));
                                                        };
                                                    })())();
                                                    return handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Receive(slot.input, Data_Unit.unit))))();
                                                };
                                            })(dsx)();
                                            return childrenIn.value0.value0;
                                        };
                                        if (childrenIn instanceof Data_Maybe.Nothing) {
                                            return runComponent(lchs)((function () {
                                                var $41 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                return function ($42) {
                                                    return $41(slot.output($42));
                                                };
                                            })())(slot.input)(slot.component)();
                                        };
                                        throw new Error("Failed pattern match at Halogen.Aff.Driver (line 236, column 14 - line 245, column 98): " + [ childrenIn.constructor.name ]);
                                    })();
                                    var isDuplicate = Data_Functor.map(Effect.functorEffect)(function ($43) {
                                        return Data_Maybe.isJust(slot.get($43));
                                    })(Effect_Ref.read(childrenOutRef))();
                                    Control_Applicative.when(Effect.applicativeEffect)(isDuplicate)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                    Effect_Ref.modify_(slot.set($$var))(childrenOutRef)();
                                    return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read($$var))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v) {
                                        if (v instanceof Data_Maybe.Nothing) {
                                            return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                        };
                                        if (v instanceof Data_Maybe.Just) {
                                            return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v.value0));
                                        };
                                        throw new Error("Failed pattern match at Halogen.Aff.Driver (line 250, column 37 - line 252, column 50): " + [ v.constructor.name ]);
                                    }))();
                                };
                            });
                        };
                    };
                };
            };
            var render = function (lchs) {
                return function ($$var) {
                    return function __do() {
                        var v = Effect_Ref.read($$var)();
                        var shouldProcessHandlers = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                        Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                        Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                        Effect_Ref.write(v.children)(v.childrenIn)();
                        var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
                        var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
                        var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);
                        var handler = (function () {
                            var $44 = Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers);
                            var $45 = Data_Functor["void"](Effect_Aff.functorAff);
                            var $46 = Halogen_Aff_Driver_Eval.evalF(render)(selfRef);
                            return function ($47) {
                                return $44($45($46($47)));
                            };
                        })();
                        var childHandler = (function () {
                            var $48 = Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries);
                            return function ($49) {
                                return $48(handler(Halogen_Query_Input.Action.create($49)));
                            };
                        })();
                        var rendering = renderSpec.render(function ($50) {
                            return handleAff(handler($50));
                        })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                        var children = Effect_Ref.read(v.childrenOut)();
                        var childrenIn = Effect_Ref.read(v.childrenIn)();
                        Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(childrenIn)(function (v1) {
                            return function __do() {
                                var childDS = Effect_Ref.read(v1)();
                                Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(childDS)();
                                return finalize(lchs)(childDS)();
                            };
                        })();
                        Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                            return {
                                component: ds$prime.component,
                                state: ds$prime.state,
                                refs: ds$prime.refs,
                                children: children,
                                childrenIn: ds$prime.childrenIn,
                                childrenOut: ds$prime.childrenOut,
                                selfRef: ds$prime.selfRef,
                                handlerRef: ds$prime.handlerRef,
                                pendingQueries: ds$prime.pendingQueries,
                                pendingOuts: ds$prime.pendingOuts,
                                pendingHandlers: ds$prime.pendingHandlers,
                                rendering: new Data_Maybe.Just(rendering),
                                fresh: ds$prime.fresh,
                                subscriptions: ds$prime.subscriptions,
                                forks: ds$prime.forks,
                                lifecycleHandlers: ds$prime.lifecycleHandlers
                            };
                        }))();
                        return Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v1) {
                            return function __do() {
                                var handlers = Effect_Ref.read(pendingHandlers)();
                                Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                                Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                    var $51 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                                    return function ($52) {
                                        return handleAff($51(Data_List.reverse($52)));
                                    };
                                })())(handlers)();
                                var mmore = Effect_Ref.read(pendingHandlers)();
                                var $22 = Data_Maybe.maybe(false)(Data_List["null"])(mmore);
                                if ($22) {
                                    return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                };
                                return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                            };
                        }))();
                    };
                };
            };
            var finalize = function (lchs) {
                return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                    return function __do() {
                        cleanupSubscriptionsAndForks(st)();
                        var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                        Effect_Ref.modify_(function (handlers) {
                            return {
                                initializers: handlers.initializers,
                                finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                            };
                        })(lchs)();
                        return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                            return function __do() {
                                var dsx = Effect_Ref.read(v)();
                                return finalize(lchs)(dsx)();
                            };
                        })();
                    };
                });
            };
            var evalDriver = function (disposed) {
                return function (ref) {
                    return function (q) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                            if (v) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                            };
                            return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                        });
                    };
                };
            };
            var dispose = function (disposed) {
                return function (lchs) {
                    return function (dsx) {
                        return function (subsRef) {
                            return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                                var v = Effect_Ref.read(disposed)();
                                if (v) {
                                    return Data_Unit.unit;
                                };
                                Effect_Ref.write(true)(disposed)();
                                Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
                                    var $53 = Effect_Aff_AVar.kill(Effect_Exception.error("disposed"));
                                    return function ($54) {
                                        return Effect_Aff.launchAff_($53($54));
                                    };
                                })()))(Effect_Ref.read(subsRef))();
                                finalize(lchs)(dsx)();
                                return Halogen_Aff_Driver_State.unDriverStateX(function (v1) {
                                    return function __do() {
                                        var v2 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(v1.selfRef))();
                                        return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.rendering)(renderSpec.dispose)();
                                    };
                                })(dsx)();
                            });
                        };
                    };
                };
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (lchs) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (fresh) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (disposed) {
                        return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                            var listeners = Effect_Ref["new"](Data_Map_Internal.empty)();
                            var dsx = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(lchs)(rootHandler(listeners))(i)(component))();
                            return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                return Control_Applicative.pure(Effect.applicativeEffect)({
                                    query: evalDriver(disposed)(st.selfRef),
                                    subscribe: subscribe(fresh)(listeners),
                                    dispose: dispose(disposed)(lchs)(dsx)(listeners)
                                });
                            })(dsx)();
                        });
                    });
                });
            });
        };
    };
};
module.exports = {
    runUI: runUI
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Coroutine/index.js":"2S32O","../Control.Monad.Error.Class/index.js":"6mmaT","../Control.Monad.Fork.Class/index.js":"1zCG9","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Parallel/index.js":"2HNTv","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff/index.js":"1PqJZ","../Effect.Aff.AVar/index.js":"4IeKf","../Effect.Class/index.js":"70nM9","../Effect.Console/index.js":"8JaBJ","../Effect.Exception/index.js":"neabt","../Effect.Ref/index.js":"3qwJS","../Halogen.Aff.Driver.Eval/index.js":"hEVKj","../Halogen.Aff.Driver.State/index.js":"2E8kR","../Halogen.Component/index.js":"5H60K","../Halogen.Data.Slot/index.js":"61HeD","../Halogen.Query.EventSource/index.js":"3Fogs","../Halogen.Query.HalogenQ/index.js":"2XQ0g","../Halogen.Query.Input/index.js":"3Pep7"}],"1zCG9":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Completed = (function () {
    function Completed(value0) {
        this.value0 = value0;
    };
    Completed.create = function (value0) {
        return new Completed(value0);
    };
    return Completed;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
    this.Functor1 = Functor1;
    this.Monad0 = Monad0;
    this.fork = fork;
    this.join = join;
    this.suspend = suspend;
};
var MonadKill = function (MonadFork0, MonadThrow1, kill) {
    this.MonadFork0 = MonadFork0;
    this.MonadThrow1 = MonadThrow1;
    this.kill = kill;
};
var MonadBracket = function (MonadError1, MonadKill0, bracket, never, uninterruptible) {
    this.MonadError1 = MonadError1;
    this.MonadKill0 = MonadKill0;
    this.bracket = bracket;
    this.never = never;
    this.uninterruptible = uninterruptible;
};
var uninterruptible = function (dict) {
    return dict.uninterruptible;
};
var suspend = function (dict) {
    return dict.suspend;
};
var never = function (dict) {
    return dict.never;
};
var monadForkAff = new MonadFork(function () {
    return Effect_Aff.functorFiber;
}, function () {
    return Effect_Aff.monadAff;
}, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
var monadKillAff = new MonadKill(function () {
    return monadForkAff;
}, function () {
    return Effect_Aff.monadThrowAff;
}, Effect_Aff.killFiber);
var monadBracketAff = new MonadBracket(function () {
    return Effect_Aff.monadErrorAff;
}, function () {
    return monadKillAff;
}, function (acquire) {
    return function (release) {
        return function (run) {
            return Effect_Aff.generalBracket(acquire)({
                completed: function ($11) {
                    return release(Completed.create($11));
                },
                failed: function ($12) {
                    return release(Failed.create($12));
                },
                killed: function ($13) {
                    return release(Killed.create($13));
                }
            })(run);
        };
    };
}, Effect_Aff.never, Effect_Aff.invincible);
var kill = function (dict) {
    return dict.kill;
};
var join = function (dict) {
    return dict.join;
};
var fork = function (dict) {
    return dict.fork;
};
var monadForkReaderT = function (dictMonadFork) {
    return new MonadFork(dictMonadFork.Functor1, function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictMonadFork.Monad0());
    }, function (v) {
        var $14 = fork(dictMonadFork);
        return function ($15) {
            return $14(v($15));
        };
    }, (function () {
        var $16 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadFork.Monad0());
        var $17 = join(dictMonadFork);
        return function ($18) {
            return $16($17($18));
        };
    })(), function (v) {
        var $19 = suspend(dictMonadFork);
        return function ($20) {
            return $19(v($20));
        };
    });
};
var monadKillReaderT = function (dictMonadKill) {
    return new MonadKill(function () {
        return monadForkReaderT(dictMonadKill.MonadFork0());
    }, function () {
        return Control_Monad_Reader_Trans.monadThrowReaderT(dictMonadKill.MonadThrow1());
    }, function (e) {
        var $21 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadKill.MonadThrow1()).Monad0());
        var $22 = kill(dictMonadKill)(e);
        return function ($23) {
            return $21($22($23));
        };
    });
};
var bracket = function (dict) {
    return dict.bracket;
};
var monadBracketReaderT = function (dictMonadBracket) {
    return new MonadBracket(function () {
        return Control_Monad_Reader_Trans.monadErrorReaderT(dictMonadBracket.MonadError1());
    }, function () {
        return monadKillReaderT(dictMonadBracket.MonadKill0());
    }, function (v) {
        return function (release) {
            return function (run) {
                return function (r) {
                    return bracket(dictMonadBracket)(v(r))(function (c) {
                        return function (a) {
                            return Control_Monad_Reader_Trans.runReaderT(release(c)(a))(r);
                        };
                    })(function (a) {
                        return Control_Monad_Reader_Trans.runReaderT(run(a))(r);
                    });
                };
            };
        };
    }, Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(((dictMonadBracket.MonadError1()).MonadThrow0()).Monad0())(never(dictMonadBracket)), function (k) {
        return function (r) {
            return uninterruptible(dictMonadBracket)(Control_Monad_Reader_Trans.runReaderT(k)(r));
        };
    });
};
module.exports = {
    bracket: bracket,
    fork: fork,
    join: join,
    kill: kill,
    never: never,
    suspend: suspend,
    uninterruptible: uninterruptible,
    MonadFork: MonadFork,
    MonadKill: MonadKill,
    Completed: Completed,
    Failed: Failed,
    Killed: Killed,
    MonadBracket: MonadBracket,
    monadForkAff: monadForkAff,
    monadForkReaderT: monadForkReaderT,
    monadKillAff: monadKillAff,
    monadKillReaderT: monadKillReaderT,
    monadBracketAff: monadBracketAff,
    monadBracketReaderT: monadBracketReaderT
};

},{"../Control.Monad.Reader.Trans/index.js":"1T7Hb","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Effect.Aff/index.js":"1PqJZ"}],"8JaBJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var warnShow = function (dictShow) {
    return function (a) {
        return $foreign.warn(Data_Show.show(dictShow)(a));
    };
};
var logShow = function (dictShow) {
    return function (a) {
        return $foreign.log(Data_Show.show(dictShow)(a));
    };
};
var infoShow = function (dictShow) {
    return function (a) {
        return $foreign.info(Data_Show.show(dictShow)(a));
    };
};
var errorShow = function (dictShow) {
    return function (a) {
        return $foreign.error(Data_Show.show(dictShow)(a));
    };
};
module.exports = {
    logShow: logShow,
    warnShow: warnShow,
    errorShow: errorShow,
    infoShow: infoShow,
    log: $foreign.log,
    warn: $foreign.warn,
    error: $foreign.error,
    info: $foreign.info,
    time: $foreign.time,
    timeLog: $foreign.timeLog,
    timeEnd: $foreign.timeEnd,
    clear: $foreign.clear
};

},{"./foreign.js":"4kTKg","../Data.Show/index.js":"6nX0c"}],"4kTKg":[function(require,module,exports) {
"use strict";

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

exports.info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

exports.time = function (s) {
  return function () {
    console.time(s);
    return {};
  };
};

exports.timeLog = function (s) {
  return function () {
    console.timeLog(s);
    return {};
  };
};

exports.timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
    return {};
  };
};

exports.clear = function () {
  console.clear();
  return {};
};

},{}],"hEVKj":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var unsubscribe = function (sid) {
    return function (ref) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v.subscriptions)))(function (subs) {
                return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Halogen_Query_EventSource.finalize)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs));
            });
        });
    };
};
var queueOrRun = function (ref) {
    return function (au) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return au;
            };
            if (v instanceof Data_Maybe.Just) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
            };
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 195, column 33 - line 197, column 57): " + [ v.constructor.name ]);
        });
    };
};
var handleLifecycle = function (lchs) {
    return function (f) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
            initializers: Data_List_Types.Nil.value,
            finalizers: Data_List_Types.Nil.value
        })(lchs)))(function () {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (result) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v.finalizers))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v.initializers))(function () {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
                        });
                    });
                });
            });
        });
    };
};
var fresh = function (f) {
    return function (ref) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                return {
                    state: i + 1 | 0,
                    value: f(i)
                };
            })(v.fresh));
        });
    };
};
var evalQ = function (render) {
    return function (ref) {
        return function (q) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
            });
        };
    };
};
var evalM = function (render) {
    return function (initRef) {
        return function (v) {
            var evalChildQuery = function (ref) {
                return function (cqb) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                        return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                            var evalChild = function (v3) {
                                return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (dsx) {
                                    return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                        return evalQ(render)(ds.selfRef)(v2.value1);
                                    })(dsx);
                                }));
                            };
                            return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                        })(cqb);
                    });
                };
            };
            var go = function (ref) {
                return function (v1) {
                    if (v1 instanceof Halogen_Query_HalogenM.State) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            var v3 = v1.value0(v2.state);
                            if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                            };
                            if (Data_Boolean.otherwise) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                    component: v2.component,
                                    state: v3.value1,
                                    refs: v2.refs,
                                    children: v2.children,
                                    childrenIn: v2.childrenIn,
                                    childrenOut: v2.childrenOut,
                                    selfRef: v2.selfRef,
                                    handlerRef: v2.handlerRef,
                                    pendingQueries: v2.pendingQueries,
                                    pendingOuts: v2.pendingOuts,
                                    pendingHandlers: v2.pendingHandlers,
                                    rendering: v2.rendering,
                                    fresh: v2.fresh,
                                    subscriptions: v2.subscriptions,
                                    forks: v2.forks,
                                    lifecycleHandlers: v2.lifecycleHandlers
                                })(ref)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                    });
                                });
                            };
                            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 85, column 7 - line 91, column 21): " + [ v3.constructor.name ]);
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (sid) {
                            var v2 = v1.value0(sid);
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v3) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.bind(Effect_Aff.bindAff)(v2)(function (v4) {
                                    var done = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3.subscriptions)))(function (subs) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordSubscriptionId)(sid)))(v3.subscriptions)))(function () {
                                            return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))(Halogen_Query_EventSource.finalize(v4.finalizer));
                                        });
                                    });
                                    var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Coroutine["await"](Effect_Aff.monadAff))(function (act) {
                                        return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3.subscriptions))))(function (subs) {
                                            return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))(new Data_Maybe.Just(true)))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalF(render)(ref)(new Halogen_Query_Input.Action(act)))))(function () {
                                                return consumer;
                                            }));
                                        });
                                    });
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(sid)(done)))(v3.subscriptions)))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.pullFrom(Effect_Aff.monadRecAff)(consumer)(v4.producer)))(function () {
                                            return Halogen_Query_EventSource.finalize(done);
                                        });
                                    });
                                })))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(sid));
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(unsubscribe(v1.value0)(ref))(function () {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                        return v1.value0;
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                        return evalChildQuery(ref)(v1.value0);
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (handler) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(handler(v1.value0)))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Par) {
                        return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp((function () {
                            var $85 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
                            var $86 = evalM(render)(ref);
                            return function ($87) {
                                return $85($86($87));
                            };
                        })())(v1.value0)));
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (fid) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (doneRef) {
                                    return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                        Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(fid))(v2.forks)();
                                        return Effect_Ref.write(true)(doneRef)();
                                    }))(evalM(render)(ref)(v1.value0))))(function (fiber) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(doneRef))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(fid)(fiber))(v2.forks))))(function () {
                                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(fid));
                                        });
                                    });
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (forkMap) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(forkMap)))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                        });
                    };
                    throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 82, column 12 - line 146, column 33): " + [ v1.constructor.name ]);
                };
            };
            return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
        };
    };
};
var evalF = function (render) {
    return function (ref) {
        return function (v) {
            if (v instanceof Halogen_Query_Input.RefUpdate) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                    return {
                        component: st.component,
                        state: st.state,
                        refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                        children: st.children,
                        childrenIn: st.childrenIn,
                        childrenOut: st.childrenOut,
                        selfRef: st.selfRef,
                        handlerRef: st.handlerRef,
                        pendingQueries: st.pendingQueries,
                        pendingOuts: st.pendingOuts,
                        pendingHandlers: st.pendingHandlers,
                        rendering: st.rendering,
                        fresh: st.fresh,
                        subscriptions: st.subscriptions,
                        forks: st.forks,
                        lifecycleHandlers: st.lifecycleHandlers
                    };
                })));
            };
            if (v instanceof Halogen_Query_Input.Action) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                    return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                });
            };
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 51, column 20 - line 57, column 62): " + [ v.constructor.name ]);
        };
    };
};
module.exports = {
    evalF: evalF,
    evalQ: evalQ,
    evalM: evalM,
    handleLifecycle: handleLifecycle,
    queueOrRun: queueOrRun
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Applicative.Free/index.js":"5xzeK","../Control.Bind/index.js":"1hm9k","../Control.Coroutine/index.js":"2S32O","../Control.Monad/index.js":"4SDam","../Control.Monad.Fork.Class/index.js":"1zCG9","../Control.Monad.Free/index.js":"WgmbH","../Control.Monad.Free.Trans/index.js":"6iYQw","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Control.Parallel/index.js":"2HNTv","../Control.Parallel.Class/index.js":"65Cks","../Data.Boolean/index.js":"4zMHm","../Data.Coyoneda/index.js":"5lDx8","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff/index.js":"1PqJZ","../Effect.Class/index.js":"70nM9","../Effect.Exception/index.js":"neabt","../Effect.Ref/index.js":"3qwJS","../Halogen.Aff.Driver.State/index.js":"2E8kR","../Halogen.Query.ChildQuery/index.js":"2UGrF","../Halogen.Query.EventSource/index.js":"3Fogs","../Halogen.Query.HalogenM/index.js":"5kldW","../Halogen.Query.HalogenQ/index.js":"2XQ0g","../Halogen.Query.Input/index.js":"3Pep7","../Unsafe.Reference/index.js":"7Fr2e"}],"2E8kR":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var DriverStateRef = function (x) {
    return x;
};
var DriverState = function (x) {
    return x;
};
var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
var renderStateX_ = function (dictApplicative) {
    return function (f) {
        return unDriverStateX(function (st) {
            return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
        });
    };
};
var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
var renderStateX = function (dictFunctor) {
    return function (f) {
        return unDriverStateX(function (st) {
            return mkRenderStateX(f(st.rendering));
        });
    };
};
var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
var mapDriverState = function (f) {
    return function (v) {
        return f(v);
    };
};
var initDriverState = function (component) {
    return function (input) {
        return function (handler) {
            return function (lchs) {
                return function __do() {
                    var selfRef = Effect_Ref["new"]({})();
                    var childrenIn = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                    var childrenOut = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                    var handlerRef = Effect_Ref["new"](handler)();
                    var pendingQueries = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                    var pendingOuts = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                    var pendingHandlers = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                    var fresh = Effect_Ref["new"](1)();
                    var subscriptions = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                    var forks = Effect_Ref["new"](Data_Map_Internal.empty)();
                    var ds = {
                        component: component,
                        state: component.initialState(input),
                        refs: Data_Map_Internal.empty,
                        children: Halogen_Data_Slot.empty,
                        childrenIn: childrenIn,
                        childrenOut: childrenOut,
                        selfRef: selfRef,
                        handlerRef: handlerRef,
                        pendingQueries: pendingQueries,
                        pendingOuts: pendingOuts,
                        pendingHandlers: pendingHandlers,
                        rendering: Data_Maybe.Nothing.value,
                        fresh: fresh,
                        subscriptions: subscriptions,
                        forks: forks,
                        lifecycleHandlers: lchs
                    };
                    Effect_Ref.write(ds)(selfRef)();
                    return mkDriverStateXRef(selfRef);
                };
            };
        };
    };
};
module.exports = {
    DriverState: DriverState,
    mapDriverState: mapDriverState,
    DriverStateRef: DriverStateRef,
    unDriverStateX: unDriverStateX,
    mkDriverStateXRef: mkDriverStateXRef,
    renderStateX: renderStateX,
    renderStateX_: renderStateX_,
    unRenderStateX: unRenderStateX,
    initDriverState: initDriverState
};

},{"../Data.Foldable/index.js":"6ATDN","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Effect.Ref/index.js":"3qwJS","../Halogen.Data.Slot/index.js":"61HeD","../Unsafe.Coerce/index.js":"3fQke"}],"7Fr2e":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var UnsafeRefEqFallback = function (x) {
    return x;
};
var UnsafeRefEq = function (x) {
    return x;
};
var unsafeRefEq = $foreign.reallyUnsafeRefEq;
var eqUnsafeRefEqFallback = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return unsafeRefEq(v)(v1) || Data_Eq.eq(dictEq)(v)(v1);
        };
    });
};
var eqUnsafeRefEq = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return unsafeRefEq(v)(v1);
    };
});
module.exports = {
    unsafeRefEq: unsafeRefEq,
    UnsafeRefEq: UnsafeRefEq,
    UnsafeRefEqFallback: UnsafeRefEqFallback,
    eqUnsafeRefEq: eqUnsafeRefEq,
    eqUnsafeRefEqFallback: eqUnsafeRefEqFallback,
    reallyUnsafeRefEq: $foreign.reallyUnsafeRefEq
};

},{"./foreign.js":"5d2ua","../Data.Eq/index.js":"2htS8"}],"5d2ua":[function(require,module,exports) {
"use strict";

exports.reallyUnsafeRefEq = function (a) {
  return function (b) {
    return a === b;
  };
};

},{}],"6DvEJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_DOM_NodeType = require("../Web.DOM.NodeType/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var previousSibling = (function () {
    var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($2) {
        return $1($foreign["_previousSibling"]($2));
    };
})();
var parentNode = (function () {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($4) {
        return $3($foreign["_parentNode"]($4));
    };
})();
var parentElement = (function () {
    var $5 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($6) {
        return $5($foreign["_parentElement"]($6));
    };
})();
var ownerDocument = (function () {
    var $7 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($8) {
        return $7($foreign["_ownerDocument"]($8));
    };
})();
var nodeValue = (function () {
    var $9 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($10) {
        return $9($foreign["_nodeValue"]($10));
    };
})();
var nodeType = function (dictPartial) {
    var $11 = Data_Maybe.fromJust();
    var $12 = Data_Enum.toEnum(Web_DOM_NodeType.boundedEnumNodeType);
    return function ($13) {
        return $11($12($foreign.nodeTypeIndex($13)));
    };
};
var nextSibling = (function () {
    var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($15) {
        return $14($foreign["_nextSibling"]($15));
    };
})();
var lookupPrefix = function (p) {
    var $16 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $17 = $foreign["_lookupPrefix"](p);
    return function ($18) {
        return $16($17($18));
    };
};
var lookupNamespaceURI = function (ns) {
    var $19 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $20 = $foreign["_lookupNamespaceURI"](ns);
    return function ($21) {
        return $19($20($21));
    };
};
var lastChild = (function () {
    var $22 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($23) {
        return $22($foreign["_lastChild"]($23));
    };
})();
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Node");
var firstChild = (function () {
    var $24 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($25) {
        return $24($foreign["_firstChild"]($25));
    };
})();
module.exports = {
    fromEventTarget: fromEventTarget,
    toEventTarget: toEventTarget,
    nodeType: nodeType,
    ownerDocument: ownerDocument,
    parentNode: parentNode,
    parentElement: parentElement,
    firstChild: firstChild,
    lastChild: lastChild,
    previousSibling: previousSibling,
    nextSibling: nextSibling,
    nodeValue: nodeValue,
    lookupPrefix: lookupPrefix,
    lookupNamespaceURI: lookupNamespaceURI,
    nodeTypeIndex: $foreign.nodeTypeIndex,
    nodeName: $foreign.nodeName,
    baseURI: $foreign.baseURI,
    hasChildNodes: $foreign.hasChildNodes,
    childNodes: $foreign.childNodes,
    setNodeValue: $foreign.setNodeValue,
    textContent: $foreign.textContent,
    setTextContent: $foreign.setTextContent,
    normalize: $foreign.normalize,
    clone: $foreign.clone,
    deepClone: $foreign.deepClone,
    isEqualNode: $foreign.isEqualNode,
    compareDocumentPositionBits: $foreign.compareDocumentPositionBits,
    contains: $foreign.contains,
    isDefaultNamespace: $foreign.isDefaultNamespace,
    insertBefore: $foreign.insertBefore,
    appendChild: $foreign.appendChild,
    replaceChild: $foreign.replaceChild,
    removeChild: $foreign.removeChild
};

},{"./foreign.js":"5e7Ho","../Data.Enum/index.js":"6tFfO","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Nullable/index.js":"MeaHd","../Effect/index.js":"32R8a","../Unsafe.Coerce/index.js":"3fQke","../Web.DOM.NodeType/index.js":"6AXQg","../Web.Internal.FFI/index.js":"1fcfs"}],"5e7Ho":[function(require,module,exports) {
"use strict";

var getEffProp = function (name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.nodeTypeIndex = function (node) {
  return node.nodeType;
};

exports.nodeName = function (node) {
  return node.nodeName;
};

exports.baseURI = getEffProp("baseURI");

exports._ownerDocument = getEffProp("ownerDocument");

exports._parentNode = getEffProp("parentNode");

exports._parentElement = getEffProp("parentElement");

exports.hasChildNodes = function (node) {
  return function () {
    return node.hasChildNodes();
  };
};

exports.childNodes = getEffProp("childNodes");

exports._firstChild = getEffProp("firstChild");

exports._lastChild = getEffProp("lastChild");

exports._previousSibling = getEffProp("previousSibling");

exports._nextSibling = getEffProp("nextSibling");

exports._nodeValue = getEffProp("nodeValue");

exports.setNodeValue = function (value) {
  return function (node) {
    return function () {
      node.nodeValue = value;
      return {};
    };
  };
};

exports.textContent = getEffProp("textContent");

exports.setTextContent = function (value) {
  return function (node) {
    return function () {
      node.textContent = value;
      return {};
    };
  };
};

exports.normalize = function (node) {
  return function () {
    node.normalize();
    return {};
  };
};

exports.clone = function (node) {
  return function () {
    return node.cloneNode(false);
  };
};

exports.deepClone = function (node) {
  return function () {
    return node.cloneNode(true);
  };
};

exports.isEqualNode = function (node1) {
  return function (node2) {
    return function () {
      return node1.isEqualNode(node2);
    };
  };
};

exports.compareDocumentPositionBits = function (node1) {
  return function (node2) {
    return function () {
      return node1.compareDocumentPosition(node2);
    };
  };
};

exports.contains = function (node1) {
  return function (node2) {
    return function () {
      return node1.contains(node2);
    };
  };
};

exports._lookupPrefix = function (prefix) {
  return function (node) {
    return function () {
      return node.lookupPrefix(prefix);
    };
  };
};

exports._lookupNamespaceURI = function (ns) {
  return function (node) {
    return function () {
      return node.lookupNamespaceURI(ns);
    };
  };
};

exports.isDefaultNamespace = function (ns) {
  return function (node) {
    return function () {
      return node.isDefaultNamespace(ns);
    };
  };
};

exports.insertBefore = function (node1) {
  return function (node2) {
    return function (parent) {
      return function () {
        return parent.insertBefore(node1, node2);
      };
    };
  };
};

exports.appendChild = function (node) {
  return function (parent) {
    return function () {
      return parent.appendChild(node);
    };
  };
};

exports.replaceChild = function (newChild) {
  return function (oldChild) {
    return function (parent) {
      return function () {
        return parent.replaceChild(newChild, oldChild);
      };
    };
  };
};

exports.removeChild = function (node) {
  return function (parent) {
    return function () {
      return parent.removeChild(node);
    };
  };
};

},{}],"6tFfO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cardinality = function (x) {
    return x;
};
var Enum = function (Ord0, pred, succ) {
    this.Ord0 = Ord0;
    this.pred = pred;
    this.succ = succ;
};
var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
    this.Bounded0 = Bounded0;
    this.Enum1 = Enum1;
    this.cardinality = cardinality;
    this.fromEnum = fromEnum;
    this.toEnum = toEnum;
};
var toEnum = function (dict) {
    return dict.toEnum;
};
var succ = function (dict) {
    return dict.succ;
};
var upFromIncluding = function (dictEnum) {
    return function (dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
    };
};
var showCardinality = new Data_Show.Show(function (v) {
    return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var pred = function (dict) {
    return dict.pred;
};
var ordCardinality = Data_Ord.ordInt;
var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
    return n;
}, Cardinality);
var fromEnum = function (dict) {
    return dict.fromEnum;
};
var toEnumWithDefaults = function (dictBoundedEnum) {
    return function (low) {
        return function (high) {
            return function (x) {
                var v = toEnum(dictBoundedEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    return v.value0;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                    if ($54) {
                        return low;
                    };
                    return high;
                };
                throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
            };
        };
    };
};
var eqCardinality = Data_Eq.eqInt;
var enumUnit = new Enum(function () {
    return Data_Ord.ordUnit;
}, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
var enumTuple = function (dictEnum) {
    return function (dictBoundedEnum) {
        return new Enum(function () {
            return Data_Tuple.ordTuple(dictEnum.Ord0())((dictBoundedEnum.Enum1()).Ord0());
        }, function (v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))((function () {
                var $96 = Data_Tuple.Tuple.create(v.value0);
                return function ($97) {
                    return Data_Maybe.Just.create($96($97));
                };
            })())(pred(dictBoundedEnum.Enum1())(v.value1));
        }, function (v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))((function () {
                var $98 = Data_Tuple.Tuple.create(v.value0);
                return function ($99) {
                    return Data_Maybe.Just.create($98($99));
                };
            })())(succ(dictBoundedEnum.Enum1())(v.value1));
        });
    };
};
var enumOrdering = new Enum(function () {
    return Data_Ord.ordOrdering;
}, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_Ordering.EQ) {
        return new Data_Maybe.Just(Data_Ordering.LT.value);
    };
    if (v instanceof Data_Ordering.GT) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [ v.constructor.name ]);
}, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    if (v instanceof Data_Ordering.EQ) {
        return new Data_Maybe.Just(Data_Ordering.GT.value);
    };
    if (v instanceof Data_Ordering.GT) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [ v.constructor.name ]);
});
var enumMaybe = function (dictBoundedEnum) {
    return new Enum(function () {
        return Data_Maybe.ordMaybe((dictBoundedEnum.Enum1()).Ord0());
    }, function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
        };
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [ v.constructor.name ]);
    }, function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
        };
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [ v.constructor.name ]);
    });
};
var enumInt = new Enum(function () {
    return Data_Ord.ordInt;
}, function (n) {
    var $67 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
    if ($67) {
        return new Data_Maybe.Just(n - 1 | 0);
    };
    return Data_Maybe.Nothing.value;
}, function (n) {
    var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);
    if ($68) {
        return new Data_Maybe.Just(n + 1 | 0);
    };
    return Data_Maybe.Nothing.value;
});
var enumFromTo = function (dictEnum) {
    return function (dictUnfoldable1) {
        var go = function (step) {
            return function (op) {
                return function (to) {
                    return function (a) {
                        return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
                            return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
                        }));
                    };
                };
            };
        };
        return function (v) {
            return function (v1) {
                if (Data_Eq.eq((dictEnum.Ord0()).Eq0())(v)(v1)) {
                    return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
                };
                if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
                    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
                };
                if (Data_Boolean.otherwise) {
                    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
                };
                throw new Error("Failed pattern match at Data.Enum (line 183, column 14 - line 187, column 51): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var enumFromThenTo = function (dictUnfoldable) {
    return function (dictFunctor) {
        return function (dictBoundedEnum) {
            var go = function (step) {
                return function (to) {
                    return function (e) {
                        if (e <= to) {
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                        };
                        if (Data_Boolean.otherwise) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Data.Enum (line 214, column 5 - line 216, column 28): " + [ step.constructor.name, to.constructor.name, e.constructor.name ]);
                    };
                };
            };
            return function (a) {
                return function (b) {
                    return function (c) {
                        var c$prime = fromEnum(dictBoundedEnum)(c);
                        var b$prime = fromEnum(dictBoundedEnum)(b);
                        var a$prime = fromEnum(dictBoundedEnum)(a);
                        return Data_Functor.map(dictFunctor)((function () {
                            var $100 = Data_Maybe.fromJust();
                            var $101 = toEnum(dictBoundedEnum);
                            return function ($102) {
                                return $100($101($102));
                            };
                        })())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                    };
                };
            };
        };
    };
};
var enumEither = function (dictBoundedEnum) {
    return function (dictBoundedEnum1) {
        return new Enum(function () {
            return Data_Either.ordEither((dictBoundedEnum.Enum1()).Ord0())((dictBoundedEnum1.Enum1()).Ord0());
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($103) {
                    return Data_Maybe.Just.create(Data_Either.Left.create($103));
                })(pred(dictBoundedEnum.Enum1())(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($104) {
                    return Data_Maybe.Just.create(Data_Either.Right.create($104));
                })(pred(dictBoundedEnum1.Enum1())(v.value0));
            };
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [ v.constructor.name ]);
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($105) {
                    return Data_Maybe.Just.create(Data_Either.Left.create($105));
                })(succ(dictBoundedEnum.Enum1())(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($106) {
                    return Data_Maybe.Just.create(Data_Either.Right.create($106));
                })(succ(dictBoundedEnum1.Enum1())(v.value0));
            };
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [ v.constructor.name ]);
        });
    };
};
var enumBoolean = new Enum(function () {
    return Data_Ord.ordBoolean;
}, function (v) {
    if (v) {
        return new Data_Maybe.Just(false);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    if (!v) {
        return new Data_Maybe.Just(true);
    };
    return Data_Maybe.Nothing.value;
});
var downFromIncluding = function (dictEnum) {
    return function (dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
    };
};
var diag = function (a) {
    return new Data_Tuple.Tuple(a, a);
};
var downFrom = function (dictEnum) {
    return function (dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {
            var $107 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $108 = pred(dictEnum);
            return function ($109) {
                return $107($108($109));
            };
        })());
    };
};
var upFrom = function (dictEnum) {
    return function (dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {
            var $110 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $111 = succ(dictEnum);
            return function ($112) {
                return $110($111($112));
            };
        })());
    };
};
var defaultToEnum = function (dictBounded) {
    return function (dictEnum) {
        return function (i$prime) {
            var go = function ($copy_i) {
                return function ($copy_x) {
                    var $tco_var_i = $copy_i;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(i, x) {
                        var $82 = i === 0;
                        if ($82) {
                            $tco_done = true;
                            return new Data_Maybe.Just(x);
                        };
                        var v = succ(dictEnum)(x);
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_i = i - 1 | 0;
                            $copy_x = v.value0;
                            return;
                        };
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Data.Enum (line 293, column 12 - line 295, column 33): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_i, $copy_x);
                    };
                    return $tco_result;
                };
            };
            var $85 = i$prime < 0;
            if ($85) {
                return Data_Maybe.Nothing.value;
            };
            return go(i$prime)(Data_Bounded.bottom(dictBounded));
        };
    };
};
var defaultSucc = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
    };
};
var defaultPred = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
    };
};
var defaultFromEnum = function (dictEnum) {
    var go = function ($copy_i) {
        return function ($copy_x) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i, x) {
                var v = pred(dictEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_i = i + 1 | 0;
                    $copy_x = v.value0;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return i;
                };
                throw new Error("Failed pattern match at Data.Enum (line 306, column 5 - line 308, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_x);
            };
            return $tco_result;
        };
    };
    return go(0);
};
var defaultCardinality = function (dictBounded) {
    return function (dictEnum) {
        var go = function ($copy_i) {
            return function ($copy_x) {
                var $tco_var_i = $copy_i;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(i, x) {
                    var v = succ(dictEnum)(x);
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_i = i + 1 | 0;
                        $copy_x = v.value0;
                        return;
                    };
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return i;
                    };
                    throw new Error("Failed pattern match at Data.Enum (line 273, column 5 - line 275, column 19): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_i, $copy_x);
                };
                return $tco_result;
            };
        };
        return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
    };
};
var charToEnum = function (v) {
    if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
        return new Data_Maybe.Just($foreign.fromCharCode(v));
    };
    return Data_Maybe.Nothing.value;
};
var enumChar = new Enum(function () {
    return Data_Ord.ordChar;
}, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
var cardinality = function (dict) {
    return dict.cardinality;
};
var boundedEnumUnit = new BoundedEnum(function () {
    return Data_Bounded.boundedUnit;
}, function () {
    return enumUnit;
}, 1, Data_Function["const"](0), function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Data_Unit.unit);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumOrdering = new BoundedEnum(function () {
    return Data_Bounded.boundedOrdering;
}, function () {
    return enumOrdering;
}, 3, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return 0;
    };
    if (v instanceof Data_Ordering.EQ) {
        return 1;
    };
    if (v instanceof Data_Ordering.GT) {
        return 2;
    };
    throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Data_Ordering.LT.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Data_Ordering.GT.value);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumChar = new BoundedEnum(function () {
    return Data_Bounded.boundedChar;
}, function () {
    return enumChar;
}, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
var boundedEnumBoolean = new BoundedEnum(function () {
    return Data_Bounded.boundedBoolean;
}, function () {
    return enumBoolean;
}, 2, function (v) {
    if (!v) {
        return 0;
    };
    if (v) {
        return 1;
    };
    throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(false);
    };
    if (v === 1) {
        return new Data_Maybe.Just(true);
    };
    return Data_Maybe.Nothing.value;
});
module.exports = {
    Enum: Enum,
    succ: succ,
    pred: pred,
    BoundedEnum: BoundedEnum,
    cardinality: cardinality,
    toEnum: toEnum,
    fromEnum: fromEnum,
    toEnumWithDefaults: toEnumWithDefaults,
    Cardinality: Cardinality,
    enumFromTo: enumFromTo,
    enumFromThenTo: enumFromThenTo,
    upFrom: upFrom,
    upFromIncluding: upFromIncluding,
    downFrom: downFrom,
    downFromIncluding: downFromIncluding,
    defaultSucc: defaultSucc,
    defaultPred: defaultPred,
    defaultCardinality: defaultCardinality,
    defaultToEnum: defaultToEnum,
    defaultFromEnum: defaultFromEnum,
    enumBoolean: enumBoolean,
    enumInt: enumInt,
    enumChar: enumChar,
    enumUnit: enumUnit,
    enumOrdering: enumOrdering,
    enumMaybe: enumMaybe,
    enumEither: enumEither,
    enumTuple: enumTuple,
    boundedEnumBoolean: boundedEnumBoolean,
    boundedEnumChar: boundedEnumChar,
    boundedEnumUnit: boundedEnumUnit,
    boundedEnumOrdering: boundedEnumOrdering,
    newtypeCardinality: newtypeCardinality,
    eqCardinality: eqCardinality,
    ordCardinality: ordCardinality,
    showCardinality: showCardinality
};

},{"./foreign.js":"22tJE","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.MonadZero/index.js":"5ZMCc","../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.Either/index.js":"5Va79","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unfoldable1/index.js":"1mZri","../Data.Unit/index.js":"64zbv"}],"22tJE":[function(require,module,exports) {
"use strict";

exports.toCharCode = function (c) {
  return c.charCodeAt(0);
};

exports.fromCharCode = function (c) {
  return String.fromCharCode(c);
};

},{}],"6AXQg":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var ElementNode = (function () {
    function ElementNode() {

    };
    ElementNode.value = new ElementNode();
    return ElementNode;
})();
var AttributeNode = (function () {
    function AttributeNode() {

    };
    AttributeNode.value = new AttributeNode();
    return AttributeNode;
})();
var TextNode = (function () {
    function TextNode() {

    };
    TextNode.value = new TextNode();
    return TextNode;
})();
var CDATASectionNode = (function () {
    function CDATASectionNode() {

    };
    CDATASectionNode.value = new CDATASectionNode();
    return CDATASectionNode;
})();
var EntityReferenceNode = (function () {
    function EntityReferenceNode() {

    };
    EntityReferenceNode.value = new EntityReferenceNode();
    return EntityReferenceNode;
})();
var EntityNode = (function () {
    function EntityNode() {

    };
    EntityNode.value = new EntityNode();
    return EntityNode;
})();
var ProcessingInstructionNode = (function () {
    function ProcessingInstructionNode() {

    };
    ProcessingInstructionNode.value = new ProcessingInstructionNode();
    return ProcessingInstructionNode;
})();
var CommentNode = (function () {
    function CommentNode() {

    };
    CommentNode.value = new CommentNode();
    return CommentNode;
})();
var DocumentNode = (function () {
    function DocumentNode() {

    };
    DocumentNode.value = new DocumentNode();
    return DocumentNode;
})();
var DocumentTypeNode = (function () {
    function DocumentTypeNode() {

    };
    DocumentTypeNode.value = new DocumentTypeNode();
    return DocumentTypeNode;
})();
var DocumentFragmentNode = (function () {
    function DocumentFragmentNode() {

    };
    DocumentFragmentNode.value = new DocumentFragmentNode();
    return DocumentFragmentNode;
})();
var NotationNode = (function () {
    function NotationNode() {

    };
    NotationNode.value = new NotationNode();
    return NotationNode;
})();
var toEnumNodeType = function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(ElementNode.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(AttributeNode.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(TextNode.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(CDATASectionNode.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(EntityReferenceNode.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(EntityNode.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(ProcessingInstructionNode.value);
    };
    if (v === 8) {
        return new Data_Maybe.Just(CommentNode.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(DocumentNode.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(DocumentTypeNode.value);
    };
    if (v === 11) {
        return new Data_Maybe.Just(DocumentFragmentNode.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(NotationNode.value);
    };
    return Data_Maybe.Nothing.value;
};
var showNodeType = new Data_Show.Show(function (v) {
    if (v instanceof ElementNode) {
        return "ElementNode";
    };
    if (v instanceof AttributeNode) {
        return "AttributeNode";
    };
    if (v instanceof TextNode) {
        return "TextNode";
    };
    if (v instanceof CDATASectionNode) {
        return "CDATASectionNode";
    };
    if (v instanceof EntityReferenceNode) {
        return "EntityReferenceNode";
    };
    if (v instanceof EntityNode) {
        return "EntityNode";
    };
    if (v instanceof ProcessingInstructionNode) {
        return "ProcessingInstructionNode";
    };
    if (v instanceof CommentNode) {
        return "CommentNode";
    };
    if (v instanceof DocumentNode) {
        return "DocumentNode";
    };
    if (v instanceof DocumentTypeNode) {
        return "DocumentTypeNode";
    };
    if (v instanceof DocumentFragmentNode) {
        return "DocumentFragmentNode";
    };
    if (v instanceof NotationNode) {
        return "NotationNode";
    };
    throw new Error("Failed pattern match at Web.DOM.NodeType (line 39, column 1 - line 51, column 37): " + [ v.constructor.name ]);
});
var fromEnumNodeType = function (v) {
    if (v instanceof ElementNode) {
        return 1;
    };
    if (v instanceof AttributeNode) {
        return 2;
    };
    if (v instanceof TextNode) {
        return 3;
    };
    if (v instanceof CDATASectionNode) {
        return 4;
    };
    if (v instanceof EntityReferenceNode) {
        return 5;
    };
    if (v instanceof EntityNode) {
        return 6;
    };
    if (v instanceof ProcessingInstructionNode) {
        return 7;
    };
    if (v instanceof CommentNode) {
        return 8;
    };
    if (v instanceof DocumentNode) {
        return 9;
    };
    if (v instanceof DocumentTypeNode) {
        return 10;
    };
    if (v instanceof DocumentFragmentNode) {
        return 11;
    };
    if (v instanceof NotationNode) {
        return 12;
    };
    throw new Error("Failed pattern match at Web.DOM.NodeType (line 68, column 1 - line 68, column 36): " + [ v.constructor.name ]);
};
var eqNodeType = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ElementNode && y instanceof ElementNode) {
            return true;
        };
        if (x instanceof AttributeNode && y instanceof AttributeNode) {
            return true;
        };
        if (x instanceof TextNode && y instanceof TextNode) {
            return true;
        };
        if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
            return true;
        };
        if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
            return true;
        };
        if (x instanceof EntityNode && y instanceof EntityNode) {
            return true;
        };
        if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
            return true;
        };
        if (x instanceof CommentNode && y instanceof CommentNode) {
            return true;
        };
        if (x instanceof DocumentNode && y instanceof DocumentNode) {
            return true;
        };
        if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
            return true;
        };
        if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
            return true;
        };
        if (x instanceof NotationNode && y instanceof NotationNode) {
            return true;
        };
        return false;
    };
});
var ordNodeType = new Data_Ord.Ord(function () {
    return eqNodeType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
    };
});
var enumNodeType = new Data_Enum.Enum(function () {
    return ordNodeType;
}, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
var boundedNodeType = new Data_Bounded.Bounded(function () {
    return ordNodeType;
}, ElementNode.value, NotationNode.value);
var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
    return boundedNodeType;
}, function () {
    return enumNodeType;
}, 12, fromEnumNodeType, toEnumNodeType);
module.exports = {
    ElementNode: ElementNode,
    AttributeNode: AttributeNode,
    TextNode: TextNode,
    CDATASectionNode: CDATASectionNode,
    EntityReferenceNode: EntityReferenceNode,
    EntityNode: EntityNode,
    ProcessingInstructionNode: ProcessingInstructionNode,
    CommentNode: CommentNode,
    DocumentNode: DocumentNode,
    DocumentTypeNode: DocumentTypeNode,
    DocumentFragmentNode: DocumentFragmentNode,
    NotationNode: NotationNode,
    eqNodeType: eqNodeType,
    ordNodeType: ordNodeType,
    boundedNodeType: boundedNodeType,
    enumNodeType: enumNodeType,
    boundedEnumNodeType: boundedEnumNodeType,
    showNodeType: showNodeType
};

},{"../Data.Bounded/index.js":"4LlpW","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c"}],"1oRcX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Decoders = require("../Data.Argonaut.Decode.Decoders/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var GDecodeJson = function (gDecodeJson) {
    this.gDecodeJson = gDecodeJson;
};
var DecodeJson = function (decodeJson) {
    this.decodeJson = decodeJson;
};
var gDecodeJsonNil = new GDecodeJson(function (v) {
    return function (v1) {
        return new Data_Either.Right({});
    };
});
var gDecodeJson = function (dict) {
    return dict.gDecodeJson;
};
var decodeVoid = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeVoid);
var decodeRecord = function (dictGDecodeJson) {
    return function (dictRowToList) {
        return new DecodeJson(function (json) {
            var v = Data_Argonaut_Core.toObject(json);
            if (v instanceof Data_Maybe.Just) {
                return gDecodeJson(dictGDecodeJson)(v.value0)(Type_Data_RowList.RLProxy.value);
            };
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
            };
            throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 99, column 5 - line 101, column 46): " + [ v.constructor.name ]);
        });
    };
};
var decodeJsonString = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeString);
var decodeJsonNumber = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNumber);
var decodeJsonNull = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNull);
var decodeJsonJson = new DecodeJson(Data_Either.Right.create);
var decodeJsonInt = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeInt);
var decodeJsonCodePoint = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeCodePoint);
var decodeJsonBoolean = new DecodeJson(Data_Argonaut_Decode_Decoders.decodeBoolean);
var decodeJson = function (dict) {
    return dict.decodeJson;
};
var decodeJsonEither = function (dictDecodeJson) {
    return function (dictDecodeJson1) {
        return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeEither(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1)));
    };
};
var decodeJsonMaybe = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeMaybe(decodeJson(dictDecodeJson)));
};
var decodeJsonNonEmptyArray = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmptyArray(decodeJson(dictDecodeJson)));
};
var decodeJsonNonEmptyList = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmptyList(decodeJson(dictDecodeJson)));
};
var decodeJsonNonEmpty_Array = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmpty_Array(decodeJson(dictDecodeJson)));
};
var decodeJsonNonEmpty_List = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeNonEmpty_List(decodeJson(dictDecodeJson)));
};
var decodeJsonTuple = function (dictDecodeJson) {
    return function (dictDecodeJson1) {
        return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeTuple(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1)));
    };
};
var decodeList = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeList(decodeJson(dictDecodeJson)));
};
var decodeMap = function (dictOrd) {
    return function (dictDecodeJson) {
        return function (dictDecodeJson1) {
            return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeMap(dictOrd)(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1)));
        };
    };
};
var decodeSet = function (dictOrd) {
    return function (dictDecodeJson) {
        return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeSet(dictOrd)(decodeJson(dictDecodeJson)));
    };
};
var gDecodeJsonCons = function (dictDecodeJson) {
    return function (dictGDecodeJson) {
        return function (dictIsSymbol) {
            return function (dictCons) {
                return function (dictLacks) {
                    return new GDecodeJson(function (object) {
                        return function (v) {
                            var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var v1 = Foreign_Object.lookup(fieldName)(object);
                            if (v1 instanceof Data_Maybe.Just) {
                                return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(decodeJson(dictDecodeJson)(v1.value0)))(function (val) {
                                    return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson(dictGDecodeJson)(object)(Type_Data_RowList.RLProxy.value))(function (rest) {
                                        return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(val)(rest));
                                    });
                                });
                            };
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                            };
                            throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 122, column 5 - line 129, column 44): " + [ v1.constructor.name ]);
                        };
                    });
                };
            };
        };
    };
};
var decodeIdentity = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeIdentity(decodeJson(dictDecodeJson)));
};
var decodeForeignObject = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeForeignObject(decodeJson(dictDecodeJson)));
};
var decodeArray = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson)));
};
module.exports = {
    decodeJson: decodeJson,
    gDecodeJson: gDecodeJson,
    DecodeJson: DecodeJson,
    GDecodeJson: GDecodeJson,
    decodeIdentity: decodeIdentity,
    decodeJsonMaybe: decodeJsonMaybe,
    decodeJsonTuple: decodeJsonTuple,
    decodeJsonEither: decodeJsonEither,
    decodeJsonNull: decodeJsonNull,
    decodeJsonBoolean: decodeJsonBoolean,
    decodeJsonNumber: decodeJsonNumber,
    decodeJsonInt: decodeJsonInt,
    decodeJsonString: decodeJsonString,
    decodeJsonJson: decodeJsonJson,
    decodeJsonNonEmpty_Array: decodeJsonNonEmpty_Array,
    decodeJsonNonEmptyArray: decodeJsonNonEmptyArray,
    decodeJsonNonEmpty_List: decodeJsonNonEmpty_List,
    decodeJsonNonEmptyList: decodeJsonNonEmptyList,
    decodeJsonCodePoint: decodeJsonCodePoint,
    decodeForeignObject: decodeForeignObject,
    decodeArray: decodeArray,
    decodeList: decodeList,
    decodeSet: decodeSet,
    decodeMap: decodeMap,
    decodeVoid: decodeVoid,
    decodeRecord: decodeRecord,
    gDecodeJsonNil: gDecodeJsonNil,
    gDecodeJsonCons: gDecodeJsonCons
};

},{"../Control.Bind/index.js":"1hm9k","../Data.Argonaut.Core/index.js":"2JnJ6","../Data.Argonaut.Decode.Decoders/index.js":"7eUW5","../Data.Argonaut.Decode.Error/index.js":"1Njs1","../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Maybe/index.js":"1Cwwt","../Data.Symbol/index.js":"3AbLb","../Foreign.Object/index.js":"1QIU3","../Record/index.js":"68VO1","../Type.Data.RowList/index.js":"4e8vB"}],"2JnJ6":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var verbJsonType = function (def) {
    return function (f) {
        return function (g) {
            return g(def)(f);
        };
    };
};
var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var jsonZero = $foreign.fromNumber(0.0);
var jsonTrue = $foreign.fromBoolean(true);
var jsonSingletonObject = function (key) {
    return function (val) {
        return $foreign.fromObject(Foreign_Object.singleton(key)(val));
    };
};
var jsonSingletonArray = function (j) {
    return $foreign.fromArray([ j ]);
};
var jsonFalse = $foreign.fromBoolean(false);
var jsonEmptyString = $foreign.fromString("");
var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
var jsonEmptyArray = $foreign.fromArray([  ]);
var isJsonType = verbJsonType(false)(Data_Function["const"](true));
var ordJson = new Data_Ord.Ord(function () {
    return eqJson;
}, function (a) {
    return function (b) {
        return $foreign["_compare"](Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
    };
});
var eqJson = new Data_Eq.Eq(function (j1) {
    return function (j2) {
        return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
    };
});
var eqJNull = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var ordJNull = new Data_Ord.Ord(function () {
    return eqJNull;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var caseJsonString = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isString = isJsonType(caseJsonString);
var toString = toJsonType(caseJsonString);
var caseJsonObject = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
        };
    };
};
var isObject = isJsonType(caseJsonObject);
var toObject = toJsonType(caseJsonObject);
var caseJsonNumber = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isNumber = isJsonType(caseJsonNumber);
var toNumber = toJsonType(caseJsonNumber);
var caseJsonNull = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isNull = isJsonType(caseJsonNull);
var toNull = toJsonType(caseJsonNull);
var caseJsonBoolean = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isBoolean = isJsonType(caseJsonBoolean);
var toBoolean = toJsonType(caseJsonBoolean);
var caseJsonArray = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
        };
    };
};
var isArray = isJsonType(caseJsonArray);
var toArray = toJsonType(caseJsonArray);
var caseJson = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (json) {
                            return $foreign["_caseJson"](a, b, c, d, e, f, json);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    caseJson: caseJson,
    caseJsonNull: caseJsonNull,
    caseJsonBoolean: caseJsonBoolean,
    caseJsonNumber: caseJsonNumber,
    caseJsonString: caseJsonString,
    caseJsonArray: caseJsonArray,
    caseJsonObject: caseJsonObject,
    isNull: isNull,
    isBoolean: isBoolean,
    isNumber: isNumber,
    isString: isString,
    isArray: isArray,
    isObject: isObject,
    toNull: toNull,
    toBoolean: toBoolean,
    toNumber: toNumber,
    toString: toString,
    toArray: toArray,
    toObject: toObject,
    jsonTrue: jsonTrue,
    jsonFalse: jsonFalse,
    jsonZero: jsonZero,
    jsonEmptyString: jsonEmptyString,
    jsonEmptyArray: jsonEmptyArray,
    jsonSingletonArray: jsonSingletonArray,
    jsonEmptyObject: jsonEmptyObject,
    jsonSingletonObject: jsonSingletonObject,
    eqJson: eqJson,
    ordJson: ordJson,
    fromBoolean: $foreign.fromBoolean,
    fromNumber: $foreign.fromNumber,
    fromString: $foreign.fromString,
    fromArray: $foreign.fromArray,
    fromObject: $foreign.fromObject,
    jsonNull: $foreign.jsonNull,
    stringify: $foreign.stringify,
    stringifyWithIndent: $foreign.stringifyWithIndent
};

},{"./foreign.js":"2srja","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Foreign.Object/index.js":"1QIU3"}],"2srja":[function(require,module,exports) {
/* eslint-disable no-eq-null, eqeqeq */
"use strict";

function id(x) {
  return x;
}

exports.fromBoolean = id;
exports.fromNumber = id;
exports.fromString = id;
exports.fromArray = id;
exports.fromObject = id;

exports.jsonNull = null;

exports.stringify = function (j) {
  return JSON.stringify(j);
};

exports.stringifyWithIndent = function (i) {
  return function (j) {
    return JSON.stringify(j, null, i);
  };
};

function isArray(a) {
  return Object.prototype.toString.call(a) === "[object Array]";
}

exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
  if (j == null) return isNull();
  else if (typeof j === "boolean") return isBool(j);
  else if (typeof j === "number") return isNum(j);
  else if (typeof j === "string") return isStr(j);
  else if (Object.prototype.toString.call(j) === "[object Array]")
    return isArr(j);
  else return isObj(j);
};

exports._compare = function _compare(EQ, GT, LT, a, b) {
  if (a == null) {
    if (b == null) return EQ;
    else return LT;
  } else if (typeof a === "boolean") {
    if (typeof b === "boolean") {
      // boolean / boolean
      if (a === b) return EQ;
      else if (a === false) return LT;
      else return GT;
    } else if (b == null) return GT;
    else return LT;
  } else if (typeof a === "number") {
    if (typeof b === "number") {
      if (a === b) return EQ;
      else if (a < b) return LT;
      else return GT;
    } else if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else return LT;
  } else if (typeof a === "string") {
    if (typeof b === "string") {
      if (a === b) return EQ;
      else if (a < b) return LT;
      else return GT;
    } else if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else if (typeof b === "number") return GT;
    else return LT;
  } else if (isArray(a)) {
    if (isArray(b)) {
      for (var i = 0; i < Math.min(a.length, b.length); i++) {
        var ca = _compare(EQ, GT, LT, a[i], b[i]);
        if (ca !== EQ) return ca;
      }
      if (a.length === b.length) return EQ;
      else if (a.length < b.length) return LT;
      else return GT;
    } else if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else if (typeof b === "number") return GT;
    else if (typeof b === "string") return GT;
    else return LT;
  } else {
    if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else if (typeof b === "number") return GT;
    else if (typeof b === "string") return GT;
    else if (isArray(b)) return GT;
    else {
      var akeys = Object.keys(a);
      var bkeys = Object.keys(b);
      if (akeys.length < bkeys.length) return LT;
      else if (akeys.length > bkeys.length) return GT;
      var keys = akeys.concat(bkeys).sort();
      for (var j = 0; j < keys.length; j++) {
        var k = keys[j];
        if (a[k] === undefined) return LT;
        else if (b[k] === undefined) return GT;
        var ck = _compare(EQ, GT, LT, a[k], b[k]);
        if (ck !== EQ) return ck;
      }
      return EQ;
    }
  }
};

},{}],"7eUW5":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var getFieldOptional$prime = function (decoder) {
    return function (obj) {
        return function (str) {
            var decode = function (json) {
                var $5 = Data_Argonaut_Core.isNull(json);
                if ($5) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                };
                return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(json)));
            };
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
        };
    };
};
var getFieldOptional = function (decoder) {
    return function (obj) {
        return function (str) {
            var decode = (function () {
                var $14 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                return function ($15) {
                    return $14(decoder($15));
                };
            })();
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                var $16 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                return function ($17) {
                    return $16(decode($17));
                };
            })())(Foreign_Object.lookup(str)(obj));
        };
    };
};
var getField = function (decoder) {
    return function (obj) {
        return function (str) {
            return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                var $18 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                return function ($19) {
                    return $18(decoder($19));
                };
            })())(Foreign_Object.lookup(str)(obj));
        };
    };
};
var decodeVoid = function (v) {
    return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Data_Argonaut_Core.fromString("Value cannot be Void")));
};
var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
var decodeNull = Data_Argonaut_Core.caseJsonNull(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("null")))(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)));
var decodeMaybe = function (decoder) {
    return function (json) {
        if (Data_Argonaut_Core.isNull(json)) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
        };
        if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decoder(json));
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 35, column 1 - line 39, column 38): " + [ decoder.constructor.name, json.constructor.name ]);
    };
};
var decodeJObject = (function () {
    var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
    return function ($21) {
        return $20(Data_Argonaut_Core.toObject($21));
    };
})();
var decodeJArray = (function () {
    var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
    return function ($23) {
        return $22(Data_Argonaut_Core.toArray($23));
    };
})();
var decodeList = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $24 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("List"));
        var $25 = Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(decoder);
        return function ($26) {
            return $24($25($26));
        };
    })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray));
};
var decodeSet = function (dictOrd) {
    return function (decoder) {
        var $27 = Data_Functor.map(Data_Either.functorEither)(Data_Set.fromFoldable(Data_List_Types.foldableList)(dictOrd));
        var $28 = decodeList(decoder);
        return function ($29) {
            return $27($28($29));
        };
    };
};
var decodeNonEmptyArray = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $30 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyArray"));
        var $31 = Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(Data_Either.applicativeEither)(decoder);
        return function ($32) {
            return $30($31($32));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $33 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return Data_Array_NonEmpty["cons'"](x.head)(x.tail);
        });
        var $34 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyArray"));
        return function ($35) {
            return $33($34(Data_Array.uncons($35)));
        };
    })())(decodeJArray));
};
var decodeNonEmptyList = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $36 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyList"));
        var $37 = Data_Traversable.traverse(Data_List_Types.traversableNonEmptyList)(Data_Either.applicativeEither)(decoder);
        return function ($38) {
            return $36($37($38));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $39 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return Data_List_NonEmpty["cons'"](x.head)(x.tail);
        });
        var $40 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyList"));
        return function ($41) {
            return $39($40(Data_List.uncons($41)));
        };
    })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
};
var decodeNonEmpty_Array = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $42 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty Array"));
        var $43 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_Traversable.traversableArray))(Data_Either.applicativeEither)(decoder);
        return function ($44) {
            return $42($43($44));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $45 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return new Data_NonEmpty.NonEmpty(x.head, x.tail);
        });
        var $46 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty Array"));
        return function ($47) {
            return $45($46(Data_Array.uncons($47)));
        };
    })())(decodeJArray));
};
var decodeNonEmpty_List = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $48 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty List"));
        var $49 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_List_Types.traversableList))(Data_Either.applicativeEither)(decoder);
        return function ($50) {
            return $48($49($50));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $51 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return new Data_NonEmpty.NonEmpty(x.head, x.tail);
        });
        var $52 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty List"));
        return function ($53) {
            return $51($52(Data_List.uncons($53)));
        };
    })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
};
var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
    var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
    return function ($55) {
        return $54(Data_Int.fromNumber($55));
    };
})())(decodeNumber);
var decodeIdentity = function (decoder) {
    return function (json) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Identity.Identity)(decoder(json));
    };
};
var decodeForeignObject = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $56 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
        var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
        return function ($58) {
            return $56($57($58));
        };
    })())(decodeJObject);
};
var decodeEither = function (decoderA) {
    return function (decoderB) {
        return function (json) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Either"))(Control_Bind.bind(Data_Either.bindEither)(decodeJObject(json))(function (obj) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("tag", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("tag")(obj)))(function (tag) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("value", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("value")(obj)))(function (val) {
                        var v = Data_Argonaut_Core.toString(tag);
                        if (v instanceof Data_Maybe.Just && v.value0 === "Right") {
                            return Data_Functor.map(Data_Either.functorEither)(Data_Either.Right.create)(decoderB(val));
                        };
                        if (v instanceof Data_Maybe.Just && v.value0 === "Left") {
                            return Data_Functor.map(Data_Either.functorEither)(Data_Either.Left.create)(decoderA(val));
                        };
                        return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey("tag", new Data_Argonaut_Decode_Error.UnexpectedValue(tag)));
                    });
                });
            }));
        };
    };
};
var decodeCodePoint = function (json) {
    return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.Named.create("CodePoint")(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Functor.map(Data_Either.functorEither)(Data_String_CodePoints.codePointAt(0))(decodeString(json)));
};
var decodeBoolean = Data_Argonaut_Core.caseJsonBoolean(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Boolean")))(Data_Either.Right.create);
var decodeArray = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $59 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
        var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
            var $62 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
            return function ($63) {
                return $62(decoder($63));
            };
        });
        return function ($61) {
            return $59($60($61));
        };
    })())(decodeJArray);
};
var decodeTuple = function (decoderA) {
    return function (decoderB) {
        return function (json) {
            var f = function (v) {
                if (v.length === 2) {
                    return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decoderA(v[0])))(decoderB(v[1]));
                };
                return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Tuple"));
            };
            return Control_Bind.bind(Data_Either.bindEither)(decodeArray(Data_Either.Right.create)(json))(f);
        };
    };
};
var decodeMap = function (dictOrd) {
    return function (decoderA) {
        return function (decoderB) {
            var $64 = Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList));
            var $65 = decodeList(decodeTuple(decoderA)(decoderB));
            return function ($66) {
                return $64($65($66));
            };
        };
    };
};
module.exports = {
    decodeIdentity: decodeIdentity,
    decodeMaybe: decodeMaybe,
    decodeTuple: decodeTuple,
    decodeEither: decodeEither,
    decodeNull: decodeNull,
    decodeBoolean: decodeBoolean,
    decodeNumber: decodeNumber,
    decodeInt: decodeInt,
    decodeString: decodeString,
    decodeNonEmpty_Array: decodeNonEmpty_Array,
    decodeNonEmptyArray: decodeNonEmptyArray,
    decodeNonEmpty_List: decodeNonEmpty_List,
    decodeNonEmptyList: decodeNonEmptyList,
    decodeCodePoint: decodeCodePoint,
    decodeForeignObject: decodeForeignObject,
    decodeArray: decodeArray,
    decodeList: decodeList,
    decodeSet: decodeSet,
    decodeMap: decodeMap,
    decodeVoid: decodeVoid,
    decodeJArray: decodeJArray,
    decodeJObject: decodeJObject,
    getField: getField,
    getFieldOptional: getFieldOptional,
    "getFieldOptional'": getFieldOptional$prime
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Data.Argonaut.Core/index.js":"2JnJ6","../Data.Argonaut.Decode.Error/index.js":"1Njs1","../Data.Array/index.js":"6mZxP","../Data.Array.NonEmpty/index.js":"7itzV","../Data.Array.NonEmpty.Internal/index.js":"6yGIO","../Data.Bifunctor/index.js":"4Uonh","../Data.Boolean/index.js":"4zMHm","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Identity/index.js":"29odg","../Data.Int/index.js":"3HdcH","../Data.List/index.js":"3bKr1","../Data.List.NonEmpty/index.js":"2RvxL","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.NonEmpty/index.js":"1NWTO","../Data.Set/index.js":"dPwDO","../Data.String.CodePoints/index.js":"7IKxJ","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Foreign.Object/index.js":"1QIU3"}],"1Njs1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var TypeMismatch = (function () {
    function TypeMismatch(value0) {
        this.value0 = value0;
    };
    TypeMismatch.create = function (value0) {
        return new TypeMismatch(value0);
    };
    return TypeMismatch;
})();
var UnexpectedValue = (function () {
    function UnexpectedValue(value0) {
        this.value0 = value0;
    };
    UnexpectedValue.create = function (value0) {
        return new UnexpectedValue(value0);
    };
    return UnexpectedValue;
})();
var AtIndex = (function () {
    function AtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AtIndex.create = function (value0) {
        return function (value1) {
            return new AtIndex(value0, value1);
        };
    };
    return AtIndex;
})();
var AtKey = (function () {
    function AtKey(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AtKey.create = function (value0) {
        return function (value1) {
            return new AtKey(value0, value1);
        };
    };
    return AtKey;
})();
var Named = (function () {
    function Named(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Named.create = function (value0) {
        return function (value1) {
            return new Named(value0, value1);
        };
    };
    return Named;
})();
var MissingValue = (function () {
    function MissingValue() {

    };
    MissingValue.value = new MissingValue();
    return MissingValue;
})();
var showJsonDecodeError = new Data_Show.Show(function (v) {
    if (v instanceof TypeMismatch) {
        return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
    };
    if (v instanceof UnexpectedValue) {
        return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
    };
    if (v instanceof AtIndex) {
        return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
    };
    if (v instanceof AtKey) {
        return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
    };
    if (v instanceof Named) {
        return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
    };
    if (v instanceof MissingValue) {
        return "MissingValue";
    };
    throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [ v.constructor.name ]);
});
var printJsonDecodeError = function (err) {
    var go = function (v) {
        if (v instanceof TypeMismatch) {
            return "  Expected value of type '" + (v.value0 + "'.");
        };
        if (v instanceof UnexpectedValue) {
            return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
        };
        if (v instanceof AtIndex) {
            return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\x0a" + go(v.value1)));
        };
        if (v instanceof AtKey) {
            return "  At object key '" + (v.value0 + ("':\x0a" + go(v.value1)));
        };
        if (v instanceof Named) {
            return "  Under '" + (v.value0 + ("':\x0a" + go(v.value1)));
        };
        if (v instanceof MissingValue) {
            return "  No value was found.";
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [ v.constructor.name ]);
    };
    return "An error occurred while decoding a JSON value:\x0a" + go(err);
};
var genericJsonDecodeError = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof TypeMismatch) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof UnexpectedValue) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof AtIndex) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
    };
    if (x instanceof AtKey) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
    };
    if (x instanceof Named) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
    };
    if (x instanceof MissingValue) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
    };
    throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 21, column 1 - line 21, column 68): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new TypeMismatch(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new UnexpectedValue(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new AtIndex(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new AtKey(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return new Named(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return MissingValue.value;
    };
    throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 21, column 1 - line 21, column 68): " + [ x.constructor.name ]);
});
var eqJsonDecodeError = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return x.value0 === y.value0;
        };
        if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
            return Data_Eq.eq(Data_Argonaut_Core.eqJson)(x.value0)(y.value0);
        };
        if (x instanceof AtIndex && y instanceof AtIndex) {
            return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
        };
        if (x instanceof AtKey && y instanceof AtKey) {
            return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
        };
        if (x instanceof Named && y instanceof Named) {
            return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
        };
        if (x instanceof MissingValue && y instanceof MissingValue) {
            return true;
        };
        return false;
    };
});
var ordJsonDecodeError = new Data_Ord.Ord(function () {
    return eqJsonDecodeError;
}, function (x) {
    return function (y) {
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof TypeMismatch) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof TypeMismatch) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
            return Data_Ord.compare(Data_Argonaut_Core.ordJson)(x.value0)(y.value0);
        };
        if (x instanceof UnexpectedValue) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof UnexpectedValue) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AtIndex && y instanceof AtIndex) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
        };
        if (x instanceof AtIndex) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AtIndex) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AtKey && y instanceof AtKey) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
        };
        if (x instanceof AtKey) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AtKey) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Named && y instanceof Named) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
        };
        if (x instanceof Named) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Named) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MissingValue && y instanceof MissingValue) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 20, column 1 - line 20, column 58): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    TypeMismatch: TypeMismatch,
    UnexpectedValue: UnexpectedValue,
    AtIndex: AtIndex,
    AtKey: AtKey,
    Named: Named,
    MissingValue: MissingValue,
    printJsonDecodeError: printJsonDecodeError,
    eqJsonDecodeError: eqJsonDecodeError,
    ordJsonDecodeError: ordJsonDecodeError,
    genericJsonDecodeError: genericJsonDecodeError,
    showJsonDecodeError: showJsonDecodeError
};

},{"../Data.Argonaut.Core/index.js":"2JnJ6","../Data.Eq/index.js":"2htS8","../Data.Generic.Rep/index.js":"3mknB","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c"}],"3mknB":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Inl = (function () {
    function Inl(value0) {
        this.value0 = value0;
    };
    Inl.create = function (value0) {
        return new Inl(value0);
    };
    return Inl;
})();
var Inr = (function () {
    function Inr(value0) {
        this.value0 = value0;
    };
    Inr.create = function (value0) {
        return new Inr(value0);
    };
    return Inr;
})();
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var NoArguments = (function () {
    function NoArguments() {

    };
    NoArguments.value = new NoArguments();
    return NoArguments;
})();
var Constructor = function (x) {
    return x;
};
var Argument = function (x) {
    return x;
};
var Generic = function (from, to) {
    this.from = from;
    this.to = to;
};
var to = function (dict) {
    return dict.to;
};
var genericMaybe = new Generic(function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return new Inl(NoArguments.value);
    };
    if (v instanceof Data_Maybe.Just) {
        return new Inr(v.value0);
    };
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [ v.constructor.name ]);
}, function (v) {
    if (v instanceof Inl) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Inr) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [ v.constructor.name ]);
});
var from = function (dict) {
    return dict.from;
};
module.exports = {
    Generic: Generic,
    to: to,
    from: from,
    NoArguments: NoArguments,
    Inl: Inl,
    Inr: Inr,
    Product: Product,
    Constructor: Constructor,
    Argument: Argument,
    genericMaybe: genericMaybe
};

},{"../Data.Maybe/index.js":"1Cwwt"}],"7itzV":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
var toArray = Unsafe_Coerce.unsafeCoerce;
var unionBy$prime = function (eq) {
    return function (xs) {
        var $39 = Data_Array.unionBy(eq)(toArray(xs));
        return function ($40) {
            return unsafeFromArray($39($40));
        };
    };
};
var union$prime = function (dictEq) {
    return unionBy$prime(Data_Eq.eq(dictEq));
};
var unionBy = function (eq) {
    return function (xs) {
        var $41 = unionBy$prime(eq)(xs);
        return function ($42) {
            return $41(toArray($42));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var unzip = (function () {
    var $43 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
    return function ($44) {
        return $43(Data_Array.unzip(toArray($44)));
    };
})();
var updateAt = function (i) {
    return function (x) {
        var $45 = Data_Array.updateAt(i)(x);
        return function ($46) {
            return unsafeFromArrayF($45(toArray($46)));
        };
    };
};
var zip = function (xs) {
    return function (ys) {
        return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
            };
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        var $47 = Data_Array.some(dictAlternative)(dictLazy);
        return function ($48) {
            return unsafeFromArrayF($47($48));
        };
    };
};
var snoc$prime = function (xs) {
    return function (x) {
        return unsafeFromArray(Data_Array.snoc(xs)(x));
    };
};
var snoc = function (xs) {
    return function (x) {
        return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
    };
};
var singleton = function ($49) {
    return unsafeFromArray(Data_Array.singleton($49));
};
var replicate = function (i) {
    return function (x) {
        return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
    };
};
var range = function (x) {
    return function (y) {
        return unsafeFromArray(Data_Array.range(x)(y));
    };
};
var modifyAt = function (i) {
    return function (f) {
        var $50 = Data_Array.modifyAt(i)(f);
        return function ($51) {
            return unsafeFromArrayF($50(toArray($51)));
        };
    };
};
var intersectBy$prime = function (eq) {
    return function (xs) {
        return Data_Array.intersectBy(eq)(toArray(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        var $52 = intersectBy$prime(eq)(xs);
        return function ($53) {
            return $52(toArray($53));
        };
    };
};
var intersect$prime = function (dictEq) {
    return intersectBy$prime(Data_Eq.eq(dictEq));
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var insertAt = function (i) {
    return function (x) {
        var $54 = Data_Array.insertAt(i)(x);
        return function ($55) {
            return unsafeFromArrayF($54(toArray($55)));
        };
    };
};
var fromFoldable1 = function (dictFoldable1) {
    var $56 = Data_Array.fromFoldable(dictFoldable1.Foldable0());
    return function ($57) {
        return unsafeFromArray($56($57));
    };
};
var fromArray = function (xs) {
    if (Data_Array.length(xs) > 0) {
        return new Data_Maybe.Just(unsafeFromArray(xs));
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    var $58 = Data_Array.fromFoldable(dictFoldable);
    return function ($59) {
        return fromArray($58($59));
    };
};
var difference$prime = function (dictEq) {
    return function (xs) {
        return Data_Array.difference(dictEq)(toArray(xs));
    };
};
var cons$prime = function (x) {
    return function (xs) {
        return unsafeFromArray(Data_Array.cons(x)(xs));
    };
};
var fromNonEmpty = function (v) {
    return cons$prime(v.value0)(v.value1);
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
var concat = (function () {
    var $60 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray);
    return function ($61) {
        return unsafeFromArray(Data_Array.concat(toArray($60($61))));
    };
})();
var appendArray = function (xs) {
    return function (ys) {
        return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
    };
};
var alterAt = function (i) {
    return function (f) {
        var $62 = Data_Array.alterAt(i)(f);
        return function ($63) {
            return $62(toArray($63));
        };
    };
};
var adaptMaybe = function (f) {
    var $64 = Data_Maybe.fromJust();
    return function ($65) {
        return $64(f(toArray($65)));
    };
};
var head = adaptMaybe(Data_Array.head);
var init = adaptMaybe(Data_Array.init);
var last = adaptMaybe(Data_Array.last);
var tail = adaptMaybe(Data_Array.tail);
var uncons = adaptMaybe(Data_Array.uncons);
var toNonEmpty = function ($66) {
    return (function (v) {
        return new Data_NonEmpty.NonEmpty(v.head, v.tail);
    })(uncons($66));
};
var unsnoc = adaptMaybe(Data_Array.unsnoc);
var adaptAny = function (f) {
    return function ($67) {
        return f(toArray($67));
    };
};
var catMaybes = adaptAny(Data_Array.catMaybes);
var $$delete = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array["delete"](dictEq)(x));
    };
};
var deleteAt = function (i) {
    return adaptAny(Data_Array.deleteAt(i));
};
var deleteBy = function (f) {
    return function (x) {
        return adaptAny(Data_Array.deleteBy(f)(x));
    };
};
var difference = function (dictEq) {
    return function (xs) {
        return adaptAny(difference$prime(dictEq)(xs));
    };
};
var drop = function (i) {
    return adaptAny(Data_Array.drop(i));
};
var dropEnd = function (i) {
    return adaptAny(Data_Array.dropEnd(i));
};
var dropWhile = function (f) {
    return adaptAny(Data_Array.dropWhile(f));
};
var elemIndex = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array.elemIndex(dictEq)(x));
    };
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
    };
};
var filter = function (f) {
    return adaptAny(Data_Array.filter(f));
};
var filterA = function (dictApplicative) {
    return function (f) {
        return adaptAny(Data_Array.filterA(dictApplicative)(f));
    };
};
var findIndex = function (x) {
    return adaptAny(Data_Array.findIndex(x));
};
var findLastIndex = function (x) {
    return adaptAny(Data_Array.findLastIndex(x));
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (acc) {
            return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
        };
    };
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (acc) {
            return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
        };
    };
};
var index = adaptAny(Data_Array.index);
var length = adaptAny(Data_Array.length);
var mapMaybe = function (f) {
    return adaptAny(Data_Array.mapMaybe(f));
};
var partition = function (f) {
    return adaptAny(Data_Array.partition(f));
};
var slice = function (start) {
    return function (end) {
        return adaptAny(Data_Array.slice(start)(end));
    };
};
var span = function (f) {
    return adaptAny(Data_Array.span(f));
};
var take = function (i) {
    return adaptAny(Data_Array.take(i));
};
var takeEnd = function (i) {
    return adaptAny(Data_Array.takeEnd(i));
};
var takeWhile = function (f) {
    return adaptAny(Data_Array.takeWhile(f));
};
var toUnfoldable = function (dictUnfoldable) {
    return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
};
var unsafeAdapt = function (f) {
    var $68 = adaptAny(f);
    return function ($69) {
        return unsafeFromArray($68($69));
    };
};
var cons = function (x) {
    return unsafeAdapt(Data_Array.cons(x));
};
var insert = function (dictOrd) {
    return function (x) {
        return unsafeAdapt(Data_Array.insert(dictOrd)(x));
    };
};
var insertBy = function (f) {
    return function (x) {
        return unsafeAdapt(Data_Array.insertBy(f)(x));
    };
};
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
        };
    };
};
var nub = function (dictOrd) {
    return unsafeAdapt(Data_Array.nub(dictOrd));
};
var nubBy = function (f) {
    return unsafeAdapt(Data_Array.nubBy(f));
};
var nubByEq = function (f) {
    return unsafeAdapt(Data_Array.nubByEq(f));
};
var nubEq = function (dictEq) {
    return unsafeAdapt(Data_Array.nubEq(dictEq));
};
var reverse = unsafeAdapt(Data_Array.reverse);
var sort = function (dictOrd) {
    return unsafeAdapt(Data_Array.sort(dictOrd));
};
var sortBy = function (f) {
    return unsafeAdapt(Data_Array.sortBy(f));
};
var sortWith = function (dictOrd) {
    return function (f) {
        return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
    };
};
var updateAtIndices = function (dictFoldable) {
    return function (pairs) {
        return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
    };
};
var unsafeIndex = function (dictPartial) {
    return adaptAny(Data_Array.unsafeIndex());
};
var toUnfoldable1 = function (dictUnfoldable1) {
    return function (xs) {
        var len = length(xs);
        var f = function (i) {
            return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))((function () {
                var $38 = i < (len - 1 | 0);
                if ($38) {
                    return new Data_Maybe.Just(i + 1 | 0);
                };
                return Data_Maybe.Nothing.value;
            })());
        };
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
    };
};
module.exports = {
    fromArray: fromArray,
    fromNonEmpty: fromNonEmpty,
    toArray: toArray,
    toNonEmpty: toNonEmpty,
    fromFoldable: fromFoldable,
    fromFoldable1: fromFoldable1,
    toUnfoldable: toUnfoldable,
    toUnfoldable1: toUnfoldable1,
    singleton: singleton,
    range: range,
    replicate: replicate,
    some: some,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    appendArray: appendArray,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    partition: partition,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    nub: nub,
    nubBy: nubBy,
    nubEq: nubEq,
    nubByEq: nubByEq,
    union: union,
    "union'": union$prime,
    unionBy: unionBy,
    "unionBy'": unionBy$prime,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    "difference'": difference$prime,
    intersect: intersect,
    "intersect'": intersect$prime,
    intersectBy: intersectBy,
    "intersectBy'": intersectBy$prime,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex
};

},{"../Control.Bind/index.js":"1hm9k","../Data.Array/index.js":"6mZxP","../Data.Array.NonEmpty.Internal/index.js":"6yGIO","../Data.Bifunctor/index.js":"4Uonh","../Data.Boolean/index.js":"4zMHm","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.NonEmpty/index.js":"1NWTO","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable1/index.js":"1mZri","../Unsafe.Coerce/index.js":"3fQke"}],"6yGIO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmptyArray = function (x) {
    return x;
};
var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
var traversableNonEmptyArray = Data_Traversable.traversableArray;
var showNonEmptyArray = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
    });
};
var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
var ordNonEmptyArray = function (dictOrd) {
    return Data_Ord.ordArray(dictOrd);
};
var ord1NonEmptyArray = Data_Ord.ord1Array;
var monadNonEmptyArray = Control_Monad.monadArray;
var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
var functorNonEmptyArray = Data_Functor.functorArray;
var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
var foldableNonEmptyArray = Data_Foldable.foldableArray;
var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableNonEmptyArray;
}, function (dictSemigroup) {
    return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
}, function (dictSemigroup) {
    return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
});
var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1NonEmptyArray;
}, function () {
    return traversableNonEmptyArray;
}, function (dictApply) {
    return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
}, function (dictApply) {
    return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
});
var eqNonEmptyArray = function (dictEq) {
    return Data_Eq.eqArray(dictEq);
};
var eq1NonEmptyArray = Data_Eq.eq1Array;
var bindNonEmptyArray = Control_Bind.bindArray;
var applyNonEmptyArray = Control_Apply.applyArray;
var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
var altNonEmptyArray = Control_Alt.altArray;
module.exports = {
    showNonEmptyArray: showNonEmptyArray,
    eqNonEmptyArray: eqNonEmptyArray,
    eq1NonEmptyArray: eq1NonEmptyArray,
    ordNonEmptyArray: ordNonEmptyArray,
    ord1NonEmptyArray: ord1NonEmptyArray,
    semigroupNonEmptyArray: semigroupNonEmptyArray,
    functorNonEmptyArray: functorNonEmptyArray,
    functorWithIndexNonEmptyArray: functorWithIndexNonEmptyArray,
    foldableNonEmptyArray: foldableNonEmptyArray,
    foldableWithIndexNonEmptyArray: foldableWithIndexNonEmptyArray,
    foldable1NonEmptyArray: foldable1NonEmptyArray,
    unfoldable1NonEmptyArray: unfoldable1NonEmptyArray,
    traversableNonEmptyArray: traversableNonEmptyArray,
    traversableWithIndexNonEmptyArray: traversableWithIndexNonEmptyArray,
    traversable1NonEmptyArray: traversable1NonEmptyArray,
    applyNonEmptyArray: applyNonEmptyArray,
    applicativeNonEmptyArray: applicativeNonEmptyArray,
    bindNonEmptyArray: bindNonEmptyArray,
    monadNonEmptyArray: monadNonEmptyArray,
    altNonEmptyArray: altNonEmptyArray
};

},{"./foreign.js":"7KQc9","../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Functor/index.js":"5ZkNG","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Ord/index.js":"4OchK","../Data.Semigroup/index.js":"3qtmP","../Data.Semigroup.Foldable/index.js":"38dno","../Data.Semigroup.Traversable/index.js":"5W1D8","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.TraversableWithIndex/index.js":"3Xep8","../Data.Unfoldable1/index.js":"1mZri"}],"7KQc9":[function(require,module,exports) {
"use strict";

exports.fold1Impl = function (f) {
  return function (xs) {
    var acc = xs[0];
    var len = xs.length;
    for (var i = 1; i < len; i++) {
      acc = f(acc)(xs[i]);
    }
    return acc;
  };
};

exports.traverse1Impl = function () {
  function Cont(fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function (head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function finalCell(head) {
    return new ConsCell(head, emptyList);
  }

  function consList(x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray(list) {
    var arr = [];
    var xs = list;
    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }
    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (f) {
        var buildFrom = function (x, ys) {
          return apply(map(consList)(f(x)))(ys);
        };

        var go = function (acc, currentLen, xs) {
          if (currentLen === 0) {
            return acc;
          } else {
            var last = xs[currentLen - 1];
            return new Cont(function () {
              var built = go(buildFrom(last, acc), currentLen - 1, xs);
              return built;
            });
          }
        };

        return function (array) {
          var acc = map(finalCell)(f(array[array.length - 1]));
          var result = go(acc, array.length - 1, array);
          while (result instanceof Cont) {
            result = result.fn();
          }

          return map(listToArray)(result);
        };
      };
    };
  };
}();

},{}],"dPwDO":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var $$Set = function (x) {
    return x;
};
var union = function (dictOrd) {
    return function (v) {
        return function (v1) {
            return Data_Map_Internal.union(dictOrd)(v)(v1);
        };
    };
};
var toList = function (v) {
    return Data_Map_Internal.keys(v);
};
var toUnfoldable = function (dictUnfoldable) {
    var $63 = Data_List.toUnfoldable(dictUnfoldable);
    return function ($64) {
        return $63(toList($64));
    };
};
var size = function (v) {
    return Data_Map_Internal.size(v);
};
var singleton = function (a) {
    return Data_Map_Internal.singleton(a)(Data_Unit.unit);
};
var showSet = function (dictShow) {
    return new Data_Show.Show(function (s) {
        return "(fromFoldable " + (Data_Show.show(Data_List_Types.showList(dictShow))(toList(s)) + ")");
    });
};
var semigroupSet = function (dictOrd) {
    return new Data_Semigroup.Semigroup(union(dictOrd));
};
var member = function (dictOrd) {
    return function (a) {
        return function (v) {
            return Data_Map_Internal.member(dictOrd)(a)(v);
        };
    };
};
var isEmpty = function (v) {
    return Data_Map_Internal.isEmpty(v);
};
var insert = function (dictOrd) {
    return function (a) {
        return function (v) {
            return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
        };
    };
};
var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        var $65 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
        return function ($66) {
            return $65(toList($66));
        };
    };
}, function (f) {
    return function (x) {
        var $67 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
        return function ($68) {
            return $67(toList($68));
        };
    };
}, function (f) {
    return function (x) {
        var $69 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
        return function ($70) {
            return $69(toList($70));
        };
    };
});
var findMin = function (v) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return v1.key;
    })(Data_Map_Internal.findMin(v));
};
var findMax = function (v) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return v1.key;
    })(Data_Map_Internal.findMax(v));
};
var filter = function (dictOrd) {
    return function (f) {
        return function (v) {
            return Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
                return function (v1) {
                    return f(k);
                };
            })(v);
        };
    };
};
var eqSet = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
        };
    });
};
var ordSet = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqSet(dictOrd.Eq0());
    }, function (s1) {
        return function (s2) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
        };
    });
};
var eq1Set = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqSet(dictEq));
});
var ord1Set = new Data_Ord.Ord1(function () {
    return eq1Set;
}, function (dictOrd) {
    return Data_Ord.compare(ordSet(dictOrd));
});
var empty = Data_Map_Internal.empty;
var fromFoldable = function (dictFoldable) {
    return function (dictOrd) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (a) {
                return insert(dictOrd)(a)(m);
            };
        })(empty);
    };
};
var intersection = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            var toArray = (function () {
                var $71 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                return function ($72) {
                    return $71(toList($72));
                };
            })();
            var rs = toArray(s2);
            var rl = Data_Array.length(rs);
            var ls = toArray(s1);
            var ll = Data_Array.length(ls);
            var intersect = function (acc) {
                var go = function (l) {
                    return function (r) {
                        var $58 = l < ll && r < rl;
                        if ($58) {
                            var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);
                            if (v instanceof Data_Ordering.EQ) {
                                return function __do() {
                                    Data_Array_ST.push(ls[l])(acc)();
                                    return new Control_Monad_Rec_Class.Loop({
                                        a: l + 1 | 0,
                                        b: r + 1 | 0
                                    });
                                };
                            };
                            if (v instanceof Data_Ordering.LT) {
                                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                    a: l + 1 | 0,
                                    b: r
                                }));
                            };
                            if (v instanceof Data_Ordering.GT) {
                                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                    a: l,
                                    b: r + 1 | 0
                                }));
                            };
                            throw new Error("Failed pattern match at Data.Set (line 176, column 12 - line 181, column 43): " + [ v.constructor.name ]);
                        };
                        return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
            };
            return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(intersect))(Data_Array_ST.unsafeFreeze)());
        };
    };
};
var map = function (dictOrd) {
    return function (f) {
        return Data_Foldable.foldl(foldableSet)(function (m) {
            return function (a) {
                return insert(dictOrd)(f(a))(m);
            };
        })(empty);
    };
};
var mapMaybe = function (dictOrd) {
    return function (f) {
        return Data_Foldable.foldr(foldableSet)(function (a) {
            return function (acc) {
                return Data_Maybe.maybe(acc)(function (b) {
                    return insert(dictOrd)(b)(acc);
                })(f(a));
            };
        })(empty);
    };
};
var monoidSet = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupSet(dictOrd);
    }, empty);
};
var unions = function (dictFoldable) {
    return function (dictOrd) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var $$delete = function (dictOrd) {
    return function (a) {
        return function (v) {
            return Data_Map_Internal["delete"](dictOrd)(a)(v);
        };
    };
};
var difference = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
        };
    };
};
var subset = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            return isEmpty(difference(dictOrd)(s1)(s2));
        };
    };
};
var properSubset = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd.Eq0()))(s1)(s2);
        };
    };
};
var checkValid = function (v) {
    return Data_Map_Internal.checkValid(v);
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    empty: empty,
    isEmpty: isEmpty,
    singleton: singleton,
    map: map,
    checkValid: checkValid,
    insert: insert,
    member: member,
    "delete": $$delete,
    size: size,
    findMin: findMin,
    findMax: findMax,
    union: union,
    unions: unions,
    difference: difference,
    subset: subset,
    properSubset: properSubset,
    intersection: intersection,
    filter: filter,
    mapMaybe: mapMaybe,
    eqSet: eqSet,
    eq1Set: eq1Set,
    showSet: showSet,
    ordSet: ordSet,
    ord1Set: ord1Set,
    monoidSet: monoidSet,
    semigroupSet: semigroupSet,
    foldableSet: foldableSet
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Monad.Rec.Class/index.js":"1JlzL","../Control.Monad.ST.Internal/index.js":"7aLBJ","../Data.Array/index.js":"6mZxP","../Data.Array.ST/index.js":"5rpgZ","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Unit/index.js":"64zbv"}],"7IKxJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var CodePoint = function (x) {
    return x;
};
var unsurrogate = function (lead) {
    return function (trail) {
        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
};
var showCodePoint = new Data_Show.Show(function (v) {
    return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
});
var isTrail = function (cu) {
    return 56320 <= cu && cu <= 57343;
};
var isLead = function (cu) {
    return 55296 <= cu && cu <= 56319;
};
var uncons = function (s) {
    var v = Data_String_CodeUnits.length(s);
    if (v === 0) {
        return Data_Maybe.Nothing.value;
    };
    if (v === 1) {
        return new Data_Maybe.Just({
            head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
            tail: ""
        });
    };
    var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $21 = isLead(cu0) && isTrail(cu1);
    if ($21) {
        return new Data_Maybe.Just({
            head: unsurrogate(cu0)(cu1),
            tail: Data_String_CodeUnits.drop(2)(s)
        });
    };
    return new Data_Maybe.Just({
        head: cu0,
        tail: Data_String_CodeUnits.drop(1)(s)
    });
};
var unconsButWithTuple = function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return new Data_Tuple.Tuple(v.head, v.tail);
    })(uncons(s));
};
var toCodePointArrayFallback = function (s) {
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
};
var unsafeCodePointAt0Fallback = function (s) {
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
    if ($25) {
        var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
        var $26 = isTrail(cu1);
        if ($26) {
            return unsurrogate(cu0)(cu1);
        };
        return cu0;
    };
    return cu0;
};
var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
var length = function ($52) {
    return Data_Array.length(toCodePointArray($52));
};
var lastIndexOf = function (p) {
    return function (s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.lastIndexOf(p)(s));
    };
};
var indexOf = function (p) {
    return function (s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.indexOf(p)(s));
    };
};
var fromCharCode = (function () {
    var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
    return function ($54) {
        return Data_String_CodeUnits.singleton($53($54));
    };
})();
var singletonFallback = function (v) {
    if (v <= 65535) {
        return fromCharCode(v);
    };
    var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
    var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode(lead) + fromCharCode(trail);
};
var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
var singleton = $foreign["_singleton"](singletonFallback);
var takeFallback = function (n) {
    return function (v) {
        if (n < 1) {
            return "";
        };
        var v1 = uncons(v);
        if (v1 instanceof Data_Maybe.Just) {
            return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
        };
        return v;
    };
};
var take = $foreign["_take"](takeFallback);
var lastIndexOf$prime = function (p) {
    return function (i) {
        return function (s) {
            var i$prime = Data_String_CodeUnits.length(take(i)(s));
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                return length(Data_String_CodeUnits.take(k)(s));
            })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
        };
    };
};
var splitAt = function (i) {
    return function (s) {
        var before = take(i)(s);
        return {
            before: before,
            after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
        };
    };
};
var eqCodePoint = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordCodePoint = new Data_Ord.Ord(function () {
    return eqCodePoint;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var drop = function (n) {
    return function (s) {
        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
    };
};
var indexOf$prime = function (p) {
    return function (i) {
        return function (s) {
            var s$prime = drop(i)(s);
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
            })(Data_String_CodeUnits.indexOf(p)(s$prime));
        };
    };
};
var countTail = function ($copy_p) {
    return function ($copy_s) {
        return function ($copy_accum) {
            var $tco_var_p = $copy_p;
            var $tco_var_s = $copy_s;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(p, s, accum) {
                var v = uncons(s);
                if (v instanceof Data_Maybe.Just) {
                    var $39 = p(v.value0.head);
                    if ($39) {
                        $tco_var_p = p;
                        $tco_var_s = v.value0.tail;
                        $copy_accum = accum + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return accum;
                };
                $tco_done = true;
                return accum;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
            };
            return $tco_result;
        };
    };
};
var countFallback = function (p) {
    return function (s) {
        return countTail(p)(s)(0);
    };
};
var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
var dropWhile = function (p) {
    return function (s) {
        return drop(countPrefix(p)(s))(s);
    };
};
var takeWhile = function (p) {
    return function (s) {
        return take(countPrefix(p)(s))(s);
    };
};
var codePointFromChar = (function () {
    var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
    return function ($56) {
        return CodePoint($55($56));
    };
})();
var codePointAtFallback = function ($copy_n) {
    return function ($copy_s) {
        var $tco_var_n = $copy_n;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(n, s) {
            var v = uncons(s);
            if (v instanceof Data_Maybe.Just) {
                var $44 = n === 0;
                if ($44) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0.head);
                };
                $tco_var_n = n - 1 | 0;
                $copy_s = v.value0.tail;
                return;
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_n, $copy_s);
        };
        return $tco_result;
    };
};
var codePointAt = function (v) {
    return function (v1) {
        if (v < 0) {
            return Data_Maybe.Nothing.value;
        };
        if (v === 0 && v1 === "") {
            return Data_Maybe.Nothing.value;
        };
        if (v === 0) {
            return new Data_Maybe.Just(unsafeCodePointAt0(v1));
        };
        return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
    };
};
var boundedCodePoint = new Data_Bounded.Bounded(function () {
    return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
    return boundedCodePoint;
}, function () {
    return enumCodePoint;
}, 1114111 + 1 | 0, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 1114111) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
});
var enumCodePoint = new Data_Enum.Enum(function () {
    return ordCodePoint;
}, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
module.exports = {
    codePointFromChar: codePointFromChar,
    singleton: singleton,
    fromCodePointArray: fromCodePointArray,
    toCodePointArray: toCodePointArray,
    codePointAt: codePointAt,
    uncons: uncons,
    length: length,
    countPrefix: countPrefix,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    splitAt: splitAt,
    eqCodePoint: eqCodePoint,
    ordCodePoint: ordCodePoint,
    showCodePoint: showCodePoint,
    boundedCodePoint: boundedCodePoint,
    enumCodePoint: enumCodePoint,
    boundedEnumCodePoint: boundedEnumCodePoint
};

},{"./foreign.js":"7vBQP","../Data.Array/index.js":"6mZxP","../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.EuclideanRing/index.js":"4eAMZ","../Data.Functor/index.js":"5ZkNG","../Data.Int/index.js":"3HdcH","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c","../Data.String.CodeUnits/index.js":"2YsDe","../Data.String.Common/index.js":"6Lw5g","../Data.String.Unsafe/index.js":"1a3Q1","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z"}],"7vBQP":[function(require,module,exports) {
"use strict";
/* global Symbol */

var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator =
  typeof Symbol !== "undefined" &&
  Symbol != null &&
  typeof Symbol.iterator !== "undefined" &&
  typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";

exports._unsafeCodePointAt0 = function (fallback) {
  return hasCodePointAt
    ? function (str) { return str.codePointAt(0); }
    : fallback;
};

exports._codePointAt = function (fallback) {
  return function (Just) {
    return function (Nothing) {
      return function (unsafeCodePointAt0) {
        return function (index) {
          return function (str) {
            var length = str.length;
            if (index < 0 || index >= length) return Nothing;
            if (hasStringIterator) {
              var iter = str[Symbol.iterator]();
              for (var i = index;; --i) {
                var o = iter.next();
                if (o.done) return Nothing;
                if (i === 0) return Just(unsafeCodePointAt0(o.value));
              }
            }
            return fallback(index)(str);
          };
        };
      };
    };
  };
};

exports._countPrefix = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasStringIterator) {
      return function (pred) {
        return function (str) {
          var iter = str[Symbol.iterator]();
          for (var cpCount = 0; ; ++cpCount) {
            var o = iter.next();
            if (o.done) return cpCount;
            var cp = unsafeCodePointAt0(o.value);
            if (!pred(cp)) return cpCount;
          }
        };
      };
    }
    return fallback;
  };
};

exports._fromCodePointArray = function (singleton) {
  return hasFromCodePoint
    ? function (cps) {
      // Function.prototype.apply will fail for very large second parameters,
      // so we don't use it for arrays with 10,000 or more entries.
      if (cps.length < 10e3) {
        return String.fromCodePoint.apply(String, cps);
      }
      return cps.map(singleton).join("");
    }
    : function (cps) {
      return cps.map(singleton).join("");
    };
};

exports._singleton = function (fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};

exports._take = function (fallback) {
  return function (n) {
    if (hasStringIterator) {
      return function (str) {
        var accum = "";
        var iter = str[Symbol.iterator]();
        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done) return accum;
          accum += o.value;
        }
        return accum;
      };
    }
    return fallback(n);
  };
};

exports._toCodePointArray = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasArrayFrom) {
      return function (str) {
        return Array.from(str, unsafeCodePointAt0);
      };
    }
    return fallback;
  };
};

},{}],"68VO1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var EqualFields = function (equalFields) {
    this.equalFields = equalFields;
};
var union = function (dictUnion) {
    return function (l) {
        return function (r) {
            return Record_Unsafe_Union.unsafeUnionFn(l, r);
        };
    };
};
var set = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (b) {
                    return function (r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                    };
                };
            };
        };
    };
};
var nub = function (dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};
var merge = function (dictUnion) {
    return function (dictNub) {
        return function (l) {
            return function (r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var insert = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (a) {
                    return function (r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                    };
                };
            };
        };
    };
};
var get = function (dictIsSymbol) {
    return function (dictCons) {
        return function (l) {
            return function (r) {
                return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
            };
        };
    };
};
var modify = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (f) {
                    return function (r) {
                        return set(dictIsSymbol)()()(l)(f(get(dictIsSymbol)()(l)(r)))(r);
                    };
                };
            };
        };
    };
};
var equalFieldsNil = new EqualFields(function (v) {
    return function (v1) {
        return function (v2) {
            return true;
        };
    };
});
var equalFields = function (dict) {
    return dict.equalFields;
};
var equalFieldsCons = function (dictIsSymbol) {
    return function (dictEq) {
        return function (dictCons) {
            return function (dictEqualFields) {
                return new EqualFields(function (v) {
                    return function (a) {
                        return function (b) {
                            var get$prime = get(dictIsSymbol)()(Data_Symbol.SProxy.value);
                            var equalRest = equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value);
                            return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
                        };
                    };
                });
            };
        };
    };
};
var equal = function (dictRowToList) {
    return function (dictEqualFields) {
        return function (a) {
            return function (b) {
                return equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value)(a)(b);
            };
        };
    };
};
var disjointUnion = function (dictUnion) {
    return function (dictNub) {
        return function (l) {
            return function (r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var $$delete = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (r) {
                    return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                };
            };
        };
    };
};
var rename = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return function (dictLacks1) {
                        return function (prev) {
                            return function (next) {
                                return function (record) {
                                    return insert(dictIsSymbol1)()()(next)(get(dictIsSymbol)()(prev)(record))($$delete(dictIsSymbol)()()(prev)(record));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    get: get,
    set: set,
    modify: modify,
    insert: insert,
    "delete": $$delete,
    rename: rename,
    equal: equal,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    EqualFields: EqualFields,
    equalFields: equalFields,
    equalFieldsCons: equalFieldsCons,
    equalFieldsNil: equalFieldsNil
};

},{"../Data.Eq/index.js":"2htS8","../Data.Symbol/index.js":"3AbLb","../Record.Unsafe/index.js":"5qyzS","../Record.Unsafe.Union/index.js":"7bk8Z","../Type.Data.RowList/index.js":"4e8vB","../Unsafe.Coerce/index.js":"3fQke"}],"7bk8Z":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
module.exports = {
    unsafeUnion: unsafeUnion,
    unsafeUnionFn: $foreign.unsafeUnionFn
};

},{"./foreign.js":"BlYoo","../Data.Function.Uncurried/index.js":"7B0pM"}],"BlYoo":[function(require,module,exports) {
"use strict";

exports.unsafeUnionFn = function(r1, r2) {
  var copy = {};
  for (var k1 in r2) {
    if ({}.hasOwnProperty.call(r2, k1)) {
      copy[k1] = r2[k1];
    }
  }
  for (var k2 in r1) {
    if ({}.hasOwnProperty.call(r1, k2)) {
      copy[k2] = r1[k2];
    }
  }
  return copy;
};

},{}],"3Z7dz":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Heterogeneous_Folding = require("../Heterogeneous.Folding/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var ParamNew = function (x) {
    return x;
};
var ArgL = (function () {
    function ArgL(value0) {
        this.value0 = value0;
    };
    ArgL.create = function (value0) {
        return new ArgL(value0);
    };
    return ArgL;
})();
var ArgR = (function () {
    function ArgR(value0) {
        this.value0 = value0;
    };
    ArgR.create = function (value0) {
        return new ArgR(value0);
    };
    return ArgR;
})();
var NotNull = function (x) {
    return x;
};
var IgnoreArg = (function () {
    function IgnoreArg() {

    };
    IgnoreArg.value = new IgnoreArg();
    return IgnoreArg;
})();
var ArgsSatisifyNotNullsProps = function (x) {
    return x;
};
var Args = (function () {
    function Args(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Args.create = function (value0) {
        return function (value1) {
            return new Args(value0, value1);
        };
    };
    return Args;
})();
var ArgPropToGql = function (x) {
    return x;
};
var AndArg = (function () {
    function AndArg(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AndArg.create = function (value0) {
        return function (value1) {
            return new AndArg(value0, value1);
        };
    };
    return AndArg;
})();
var SatisifyNotNullParam = {};
var RecordArg = function (HMapWithIndex0) {
    this.HMapWithIndex0 = HMapWithIndex0;
};
var IsMaybeOrIgnored = {};
var ArgGql = {};
var satisfyNotNullParamRecord = function (dictHFoldlWithIndex) {
    return SatisifyNotNullParam;
};
var satisfyNotNullParamOther = SatisifyNotNullParam;
var satisfyNotNullParamNotNull = function (dictSatisifyNotNullParam) {
    return SatisifyNotNullParam;
};
var recordArg = function (dictHMapWithIndex) {
    return new RecordArg(function () {
        return dictHMapWithIndex;
    });
};
var onlyArgs = function (a) {
    return new Args(a, Data_Unit.unit);
};
var notMaybe = IsMaybeOrIgnored;
var isMaybeOrIgnoredOrArg = function (dictIsMaybeOrIgnored) {
    return function (dictIsMaybeOrIgnored1) {
        return function (dictOr) {
            return IsMaybeOrIgnored;
        };
    };
};
var isMaybe = IsMaybeOrIgnored;
var isIgnored = IsMaybeOrIgnored;
var guardArg = function (b) {
    return function (args) {
        if (b) {
            return new ArgR(args);
        };
        return new ArgL(IgnoreArg.value);
    };
};
var functorOrArg = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof ArgL) {
            return new ArgL(m.value0);
        };
        if (m instanceof ArgR) {
            return new ArgR(f(m.value0));
        };
        throw new Error("Failed pattern match at GraphQL.Client.Args (line 39, column 1 - line 39, column 53): " + [ m.constructor.name ]);
    };
});
var bifunctorOrArg = new Data_Bifunctor.Bifunctor(function (lf) {
    return function (rf) {
        var $51 = Data_Functor.map(functorOrArg)(rf);
        return function ($52) {
            return (function (v) {
                if (v instanceof ArgL) {
                    return ArgL.create(lf(v.value0));
                };
                if (v instanceof ArgR) {
                    return new ArgR(v.value0);
                };
                throw new Error("Failed pattern match at GraphQL.Client.Args (line 42, column 28 - line 44, column 21): " + [ v.constructor.name ]);
            })($51($52));
        };
    };
});
var argsSatisifyOthers_ = new Heterogeneous_Folding.FoldingWithIndex(function (v) {
    return function (v1) {
        return function (sym) {
            return function (param) {
                return Data_Unit.unit;
            };
        };
    };
});
var argsSatisifyNotNulls_ = function (dictIsSymbol) {
    return function (dictSatisifyNotNullParam) {
        return function (dictCons) {
            return new Heterogeneous_Folding.FoldingWithIndex(function (v) {
                return function (v1) {
                    return function (sym) {
                        return function (param) {
                            return Data_Unit.unit;
                        };
                    };
                };
            });
        };
    };
};
var argToGqlTime = ArgGql;
var argToGqlString = ArgGql;
var argToGqlRecord = function (dictRecordArg) {
    return ArgGql;
};
var argToGqlOrArg = function (dictArgGql) {
    return function (dictArgGql1) {
        return ArgGql;
    };
};
var argToGqlNumber = ArgGql;
var argToGqlNotNull = function (dictIsMaybeOrIgnored) {
    return function (dictArgGql) {
        return ArgGql;
    };
};
var argToGqlMaybe = function (dictArgGql) {
    return ArgGql;
};
var argToGqlInt = ArgGql;
var argToGqlIgnore = ArgGql;
var argToGqlDateTime = ArgGql;
var argToGqlDate = ArgGql;
var argToGqlBoolean = ArgGql;
var argToGqlArrayOne = function (dictArgGql) {
    return ArgGql;
};
var argToGqlArrayAnd = function (dictArgGql) {
    return function (dictArgGql1) {
        return ArgGql;
    };
};
var argToGqlArray = function (dictArgGql) {
    return ArgGql;
};
var argPropToGql_ = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictArgGql) {
            return function (dictSatisifyNotNullParam) {
                return new Heterogeneous_Mapping.MappingWithIndex(function (v) {
                    return function (sym) {
                        return function (arg) {
                            return Data_Unit.unit;
                        };
                    };
                });
            };
        };
    };
};
module.exports = {
    NotNull: NotNull,
    ParamNew: ParamNew,
    Args: Args,
    AndArg: AndArg,
    ArgL: ArgL,
    ArgR: ArgR,
    IgnoreArg: IgnoreArg,
    guardArg: guardArg,
    onlyArgs: onlyArgs,
    ArgGql: ArgGql,
    IsMaybeOrIgnored: IsMaybeOrIgnored,
    RecordArg: RecordArg,
    ArgPropToGql: ArgPropToGql,
    SatisifyNotNullParam: SatisifyNotNullParam,
    ArgsSatisifyNotNullsProps: ArgsSatisifyNotNullsProps,
    functorOrArg: functorOrArg,
    bifunctorOrArg: bifunctorOrArg,
    argToGqlNotNull: argToGqlNotNull,
    argToGqlMaybe: argToGqlMaybe,
    argToGqlArray: argToGqlArray,
    argToGqlArrayAnd: argToGqlArrayAnd,
    argToGqlArrayOne: argToGqlArrayOne,
    argToGqlOrArg: argToGqlOrArg,
    argToGqlIgnore: argToGqlIgnore,
    isMaybe: isMaybe,
    isIgnored: isIgnored,
    isMaybeOrIgnoredOrArg: isMaybeOrIgnoredOrArg,
    notMaybe: notMaybe,
    argToGqlInt: argToGqlInt,
    argToGqlNumber: argToGqlNumber,
    argToGqlString: argToGqlString,
    argToGqlBoolean: argToGqlBoolean,
    argToGqlDate: argToGqlDate,
    argToGqlTime: argToGqlTime,
    argToGqlDateTime: argToGqlDateTime,
    argToGqlRecord: argToGqlRecord,
    recordArg: recordArg,
    argPropToGql_: argPropToGql_,
    satisfyNotNullParamRecord: satisfyNotNullParamRecord,
    satisfyNotNullParamNotNull: satisfyNotNullParamNotNull,
    satisfyNotNullParamOther: satisfyNotNullParamOther,
    argsSatisifyNotNulls_: argsSatisifyNotNulls_,
    argsSatisifyOthers_: argsSatisifyOthers_
};

},{"../Data.Bifunctor/index.js":"4Uonh","../Data.Functor/index.js":"5ZkNG","../Data.Unit/index.js":"64zbv","../Heterogeneous.Folding/index.js":"5OD3Q","../Heterogeneous.Mapping/index.js":"7kbdv"}],"5OD3Q":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Record = require("../Record/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var ConstFolding = function (x) {
    return x;
};
var HFoldlWithIndex = function (hfoldlWithIndex) {
    this.hfoldlWithIndex = hfoldlWithIndex;
};
var HFoldl = function (hfoldl) {
    this.hfoldl = hfoldl;
};
var FoldlVariantF = function (foldlVariantFRowList) {
    this.foldlVariantFRowList = foldlVariantFRowList;
};
var FoldlVariant = function (foldlVariantRowList) {
    this.foldlVariantRowList = foldlVariantRowList;
};
var FoldlRecord = function (foldlRecordRowList) {
    this.foldlRecordRowList = foldlRecordRowList;
};
var FoldingWithIndex = function (foldingWithIndex) {
    this.foldingWithIndex = foldingWithIndex;
};
var Folding = function (folding) {
    this.folding = folding;
};
var hfoldlWithIndexRowListNil = new HFoldlWithIndex(function (f) {
    return function (x) {
        return function (v) {
            return x;
        };
    };
});
var hfoldlWithIndex = function (dict) {
    return dict.hfoldlWithIndex;
};
var hfoldlRowList = function (dictHFoldlWithIndex) {
    return new HFoldl(function (f) {
        return hfoldlWithIndex(dictHFoldlWithIndex)(f);
    });
};
var hfoldl = function (dict) {
    return dict.hfoldl;
};
var functionFoldingWithIndex = new FoldingWithIndex(function (f) {
    return f;
});
var functionFolding = new Folding(function (f) {
    return f;
});
var foldlVariantRowList = function (dict) {
    return dict.foldlVariantRowList;
};
var hfoldlVariant = function (dictRowToList) {
    return function (dictFoldlVariant) {
        return new HFoldl((function () {
            var $70 = foldlVariantRowList(dictFoldlVariant)(Type_Data_RowList.RLProxy.value);
            return function ($71) {
                return $70(ConstFolding($71));
            };
        })());
    };
};
var hfoldlVariantWithIndex = function (dictRowToList) {
    return function (dictFoldlVariant) {
        return new HFoldlWithIndex(foldlVariantRowList(dictFoldlVariant)(Type_Data_RowList.RLProxy.value));
    };
};
var foldlVariantNil = new FoldlVariant(function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Variant.case_;
        };
    };
});
var foldlVariantFRowList = function (dict) {
    return dict.foldlVariantFRowList;
};
var hfoldlVariantF = function (dictRowToList) {
    return function (dictFoldlVariantF) {
        return new HFoldl((function () {
            var $72 = foldlVariantFRowList(dictFoldlVariantF)(Type_Data_RowList.RLProxy.value);
            return function ($73) {
                return $72(ConstFolding($73));
            };
        })());
    };
};
var hfoldlVariantFWithIndex = function (dictRowToList) {
    return function (dictFoldlVariantF) {
        return new HFoldlWithIndex(foldlVariantFRowList(dictFoldlVariantF)(Type_Data_RowList.RLProxy.value));
    };
};
var foldlVariantFNil = new FoldlVariantF(function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Functor_Variant.case_;
        };
    };
});
var foldlRecordRowList = function (dict) {
    return dict.foldlRecordRowList;
};
var hfoldlRecord = function (dictRowToList) {
    return function (dictFoldlRecord) {
        return new HFoldl(function (f) {
            return function (x) {
                return foldlRecordRowList(dictFoldlRecord)(f)(x)(Type_Data_RowList.RLProxy.value);
            };
        });
    };
};
var hfoldlRecordWithIndex = function (dictRowToList) {
    return function (dictFoldlRecord) {
        return new HFoldlWithIndex(function (f) {
            return function (x) {
                return foldlRecordRowList(dictFoldlRecord)(f)(x)(Type_Data_RowList.RLProxy.value);
            };
        });
    };
};
var foldlRecordNil = new FoldlRecord(function (f) {
    return function (x) {
        return function (v) {
            return function (r) {
                return x;
            };
        };
    };
});
var foldingWithIndex = function (dict) {
    return dict.foldingWithIndex;
};
var foldlRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFoldingWithIndex) {
            return function (dictFoldlRecord) {
                return new FoldlRecord(function (f) {
                    return function (x) {
                        return function (v) {
                            return function (r) {
                                return foldlRecordRowList(dictFoldlRecord)(f)(foldingWithIndex(dictFoldingWithIndex)(f)(Data_Symbol.SProxy.value)(x)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(r)))(Type_Data_RowList.RLProxy.value)(r);
                            };
                        };
                    };
                });
            };
        };
    };
};
var foldlVariantCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFoldingWithIndex) {
            return function (dictFoldlVariant) {
                return new FoldlVariant(function (v) {
                    return function (f) {
                        return function (x) {
                            return Data_Variant.on()(dictIsSymbol)(Data_Symbol.SProxy.value)(foldingWithIndex(dictFoldingWithIndex)(f)(Data_Symbol.SProxy.value)(x))(foldlVariantRowList(dictFoldlVariant)(Type_Data_RowList.RLProxy.value)(f)(x));
                        };
                    };
                });
            };
        };
    };
};
var foldlVariantFCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFoldingWithIndex) {
            return function (dictFoldlVariantF) {
                return new FoldlVariantF(function (v) {
                    return function (f) {
                        return function (x) {
                            return Data_Functor_Variant.on()(dictIsSymbol)(Data_Symbol.SProxy.value)(foldingWithIndex(dictFoldingWithIndex)(f)(Data_Symbol.SProxy.value)(x))(foldlVariantFRowList(dictFoldlVariantF)(Type_Data_RowList.RLProxy.value)(f)(x));
                        };
                    };
                });
            };
        };
    };
};
var hfoldlWithIndexApp = function (dictFoldableWithIndex) {
    return function (dictFoldingWithIndex) {
        return new HFoldlWithIndex(function (f) {
            return function (x) {
                return function (v) {
                    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(foldingWithIndex(dictFoldingWithIndex)(f))(x)(v);
                };
            };
        });
    };
};
var hfoldlWithIndexRowListCons = function (dictFoldingWithIndex) {
    return function (dictHFoldlWithIndex) {
        return new HFoldlWithIndex(function (f) {
            return function (x) {
                return function (v) {
                    return hfoldlWithIndex(dictHFoldlWithIndex)(f)(foldingWithIndex(dictFoldingWithIndex)(f)(Data_Symbol.SProxy.value)(x)(Type_Proxy["Proxy"].value))(Type_Data_RowList.RLProxy.value);
                };
            };
        });
    };
};
var folding = function (dict) {
    return dict.folding;
};
var hfoldlApp = function (dictFoldable) {
    return function (dictFolding) {
        return new HFoldl(function (f) {
            return function (x) {
                return function (v) {
                    return Data_Foldable.foldl(dictFoldable)(folding(dictFolding)(f))(x)(v);
                };
            };
        });
    };
};
var hfoldlEither = function (dictFolding) {
    return function (dictFolding1) {
        return new HFoldl(function (f) {
            return function (x) {
                return function (v) {
                    if (v instanceof Data_Either.Left) {
                        return folding(dictFolding)(f)(x)(v.value0);
                    };
                    if (v instanceof Data_Either.Right) {
                        return folding(dictFolding1)(f)(x)(v.value0);
                    };
                    throw new Error("Failed pattern match at Heterogeneous.Folding (line 147, column 16 - line 149, column 29): " + [ v.constructor.name ]);
                };
            };
        });
    };
};
var hfoldlTuple = function (dictFolding) {
    return function (dictFolding1) {
        return new HFoldl(function (f) {
            return function (x) {
                return function (v) {
                    return folding(dictFolding1)(f)(folding(dictFolding)(f)(x)(v.value0))(v.value1);
                };
            };
        });
    };
};
var constFolding = function (dictFolding) {
    return new FoldingWithIndex(function (v) {
        return function (v1) {
            return folding(dictFolding)(v);
        };
    });
};
module.exports = {
    folding: folding,
    foldingWithIndex: foldingWithIndex,
    foldlRecordRowList: foldlRecordRowList,
    foldlVariantFRowList: foldlVariantFRowList,
    foldlVariantRowList: foldlVariantRowList,
    hfoldl: hfoldl,
    hfoldlWithIndex: hfoldlWithIndex,
    Folding: Folding,
    FoldingWithIndex: FoldingWithIndex,
    HFoldl: HFoldl,
    HFoldlWithIndex: HFoldlWithIndex,
    ConstFolding: ConstFolding,
    FoldlRecord: FoldlRecord,
    FoldlVariant: FoldlVariant,
    FoldlVariantF: FoldlVariantF,
    functionFolding: functionFolding,
    functionFoldingWithIndex: functionFoldingWithIndex,
    constFolding: constFolding,
    hfoldlApp: hfoldlApp,
    hfoldlWithIndexApp: hfoldlWithIndexApp,
    hfoldlRowList: hfoldlRowList,
    hfoldlWithIndexRowListCons: hfoldlWithIndexRowListCons,
    hfoldlWithIndexRowListNil: hfoldlWithIndexRowListNil,
    hfoldlRecord: hfoldlRecord,
    hfoldlRecordWithIndex: hfoldlRecordWithIndex,
    foldlRecordCons: foldlRecordCons,
    foldlRecordNil: foldlRecordNil,
    hfoldlTuple: hfoldlTuple,
    hfoldlEither: hfoldlEither,
    hfoldlVariant: hfoldlVariant,
    hfoldlVariantWithIndex: hfoldlVariantWithIndex,
    foldlVariantCons: foldlVariantCons,
    foldlVariantNil: foldlVariantNil,
    hfoldlVariantF: hfoldlVariantF,
    hfoldlVariantFWithIndex: hfoldlVariantFWithIndex,
    foldlVariantFCons: foldlVariantFCons,
    foldlVariantFNil: foldlVariantFNil
};

},{"../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.FoldableWithIndex/index.js":"72SUz","../Data.Functor.Variant/index.js":"7zqYv","../Data.Symbol/index.js":"3AbLb","../Data.Variant/index.js":"1dowk","../Record/index.js":"68VO1","../Type.Data.RowList/index.js":"4e8vB","../Type.Proxy/index.js":"2sP8v"}],"7zqYv":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var VariantFRep = function (x) {
    return x;
};
var UnvariantF = function (x) {
    return x;
};
var VariantFShows = function (variantFShows) {
    this.variantFShows = variantFShows;
};
var FoldableVFRL = function (foldMapVFRL, foldlVFRL, foldrVFRL) {
    this.foldMapVFRL = foldMapVFRL;
    this.foldlVFRL = foldlVFRL;
    this.foldrVFRL = foldrVFRL;
};
var TraversableVFRL = function (FoldableVFRL0, traverseVFRL) {
    this.FoldableVFRL0 = FoldableVFRL0;
    this.traverseVFRL = traverseVFRL;
};
var variantFShows = function (dict) {
    return dict.variantFShows;
};
var unvariantF = function (v) {
    return function (f) {
        return (function (dictIsSymbol) {
            return function (dictCons) {
                return function (dictFunctor) {
                    return f(dictIsSymbol)()(dictFunctor);
                };
            };
        })({
            reflectSymbol: Data_Function["const"](v.type)
        })({})({
            map: v.map
        })(Data_Symbol.SProxy.value)(v.value);
    };
};
var traverseVFRL = function (dict) {
    return dict.traverseVFRL;
};
var showVariantFNil = new VariantFShows(function (v) {
    return function (v1) {
        return Data_List_Types.Nil.value;
    };
});
var showVariantFCons = function (dictVariantFShows) {
    return function (dictTypeEquals) {
        return function (dictShow) {
            return function (dictShow1) {
                return new VariantFShows(function (v) {
                    return function (p) {
                        return new Data_List_Types.Cons(Data_Show.show(dictShow), variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(p));
                    };
                });
            };
        };
    };
};
var showVariantF = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantFShows) {
            return function (dictShow) {
                return new Data_Show.Show(function (v1) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                    var shows = variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(Type_Proxy["Proxy"].value);
                    var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                    return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
                });
            };
        };
    };
};
var onMatch = function (dictRowToList) {
    return function (dictVariantFMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return function (k) {
                    return function (v) {
                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                            return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                        };
                        return k(v);
                    };
                };
            };
        };
    };
};
var on = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (f) {
                return function (g) {
                    return function (r) {
                        if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                            return f(r.value);
                        };
                        return g(r);
                    };
                };
            };
        };
    };
};
var prj = function (dictCons) {
    return function (dictAlternative) {
        return function (dictIsSymbol) {
            return function (p) {
                return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
        };
    };
};
var inj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictFunctor) {
            return function (p) {
                return function (value) {
                    return {
                        type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                        value: value,
                        map: Data_Functor.map(dictFunctor)
                    };
                };
            };
        };
    };
};
var revariantF = function (v) {
    return v(function (dictIsSymbol) {
        return function (dictCons) {
            return function (dictFunctor) {
                return inj()(dictIsSymbol)(dictFunctor);
            };
        };
    });
};
var functorVariantF = new Data_Functor.Functor(function (f) {
    return function (a) {
        return {
            type: a.type,
            value: a.map(f)(a.value),
            map: a.map
        };
    };
});
var foldrVFRL = function (dict) {
    return dict.foldrVFRL;
};
var foldlVFRL = function (dict) {
    return dict.foldlVFRL;
};
var foldMapVFRL = function (dict) {
    return dict.foldMapVFRL;
};
var foldableCons = function (dictIsSymbol) {
    return function (dictFoldable) {
        return function (dictFoldableVFRL) {
            return function (dictCons) {
                return new FoldableVFRL(function (dictMonoid) {
                    return function (v) {
                        return function (f) {
                            return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value)(f));
                        };
                    };
                }, function (v) {
                    return function (f) {
                        return function (b) {
                            return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldl(dictFoldable)(f)(b))(foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
                        };
                    };
                }, function (v) {
                    return function (f) {
                        return function (b) {
                            return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldr(dictFoldable)(f)(b))(foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
                        };
                    };
                });
            };
        };
    };
};
var foldableVariantF = function (dictRowToList) {
    return function (dictFoldableVFRL) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value);
        }, foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value), foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value));
    };
};
var traversableVariantF = function (dictRowToList) {
    return function (dictTraversableVFRL) {
        return new Data_Traversable.Traversable(function () {
            return foldableVariantF()(dictTraversableVFRL.FoldableVFRL0());
        }, function () {
            return functorVariantF;
        }, function (dictApplicative) {
            return Data_Traversable.sequenceDefault(traversableVariantF()(dictTraversableVFRL))(dictApplicative);
        }, function (dictApplicative) {
            return traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value);
        });
    };
};
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var traversableCons = function (dictIsSymbol) {
    return function (dictTraversable) {
        return function (dictTraversableVFRL) {
            return function (dictCons) {
                return function (dictUnion) {
                    return new TraversableVFRL(foldableCons(dictIsSymbol)(dictTraversable.Foldable1())(dictTraversableVFRL.FoldableVFRL0()), function (dictApplicative) {
                        return function (v) {
                            return function (f) {
                                return on()(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                    var $86 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(inj()(dictIsSymbol)(dictTraversable.Functor0())(Data_Symbol.SProxy.value));
                                    var $87 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(f);
                                    return function ($88) {
                                        return $86($87($88));
                                    };
                                })())((function () {
                                    var $89 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(expand());
                                    var $90 = traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value)(f);
                                    return function ($91) {
                                        return $89($90($91));
                                    };
                                })());
                            };
                        };
                    });
                };
            };
        };
    };
};
var $$default = function (a) {
    return function (v) {
        return a;
    };
};
var contract = function (dictAlternative) {
    return function (dictContractable) {
        return function (v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
        };
    };
};
var case_ = function (r) {
    return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
};
var foldableNil = new FoldableVFRL(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return case_;
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return case_;
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return case_;
        };
    };
});
var match = function (dictRowToList) {
    return function (dictVariantFMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return onMatch()()()(r)(case_);
            };
        };
    };
};
var traversableNil = new TraversableVFRL(function () {
    return foldableNil;
}, function (dictApplicative) {
    return function (v) {
        return function (f) {
            return case_;
        };
    };
});
module.exports = {
    inj: inj,
    prj: prj,
    on: on,
    onMatch: onMatch,
    case_: case_,
    match: match,
    "default": $$default,
    expand: expand,
    contract: contract,
    UnvariantF: UnvariantF,
    unvariantF: unvariantF,
    revariantF: revariantF,
    VariantFShows: VariantFShows,
    variantFShows: variantFShows,
    TraversableVFRL: TraversableVFRL,
    FoldableVFRL: FoldableVFRL,
    traverseVFRL: traverseVFRL,
    foldrVFRL: foldrVFRL,
    foldlVFRL: foldlVFRL,
    foldMapVFRL: foldMapVFRL,
    functorVariantF: functorVariantF,
    foldableNil: foldableNil,
    foldableCons: foldableCons,
    traversableNil: traversableNil,
    traversableCons: traversableCons,
    foldableVariantF: foldableVariantF,
    traversableVariantF: traversableVariantF,
    showVariantFNil: showVariantFNil,
    showVariantFCons: showVariantFCons,
    showVariantF: showVariantF
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Plus/index.js":"2CmD1","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List.Types/index.js":"6KoCK","../Data.Show/index.js":"6nX0c","../Data.Symbol/index.js":"3AbLb","../Data.Traversable/index.js":"2NLLF","../Data.Variant.Internal/index.js":"1aLu1","../Partial.Unsafe/index.js":"6SrgG","../Record.Unsafe/index.js":"5qyzS","../Type.Data.Row/index.js":"1OuJU","../Type.Data.RowList/index.js":"4e8vB","../Type.Proxy/index.js":"2sP8v","../Unsafe.Coerce/index.js":"3fQke"}],"1aLu1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var VariantRep = function (x) {
    return x;
};
var FProxy = (function () {
    function FProxy() {

    };
    FProxy.value = new FProxy();
    return FProxy;
})();
var VariantTags = function (variantTags) {
    this.variantTags = variantTags;
};
var VariantMatchCases = {};
var VariantFMatchCases = {};
var Contractable = function (contractWith) {
    this.contractWith = contractWith;
};
var variantTagsNil = new VariantTags(function (v) {
    return Data_List_Types.Nil.value;
});
var variantTags = function (dict) {
    return dict.variantTags;
};
var variantTagsCons = function (dictVariantTags) {
    return function (dictIsSymbol) {
        return new VariantTags(function (v) {
            return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value), variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var variantMatchNil = VariantMatchCases;
var variantMatchCons = function (dictVariantMatchCases) {
    return function (dictCons) {
        return function (dictTypeEquals) {
            return VariantMatchCases;
        };
    };
};
var variantFMatchNil = VariantFMatchCases;
var variantFMatchCons = function (dictVariantFMatchCases) {
    return function (dictCons) {
        return function (dictTypeEquals) {
            return VariantFMatchCases;
        };
    };
};
var lookupToEnum = (function () {
    var go = function ($copy_ix) {
        return function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_ix = $copy_ix;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ix, v, v1) {
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        if (v1.value0.cardinality > ix) {
                            var v2 = v1.value0.toEnum(ix);
                            if (v2 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return Data_Maybe.Just.create({
                                    type: v.value0,
                                    value: v2.value0
                                });
                            };
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_ix = ix - v1.value0.cardinality | 0;
                            $tco_var_v = v.value1;
                            $copy_v1 = v1.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ix, $tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
    };
    return go;
})();
var lookupTag = function (tag) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons) {
                if (v.value0 === tag) {
                    $tco_done = true;
                    return true;
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = v.value1;
                    return;
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return false;
            };
            throw new Error("Failed pattern match at Data.Variant.Internal (line 94, column 8 - line 98, column 18): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
};
var lookupCardinality = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = acc + v.value0.cardinality | 0;
                    $copy_v = v.value1;
                    return;
                };
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.Variant.Internal (line 216, column 12 - line 218, column 16): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(0);
})();
var impossible = function (str) {
    return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
};
var lookup = function (name) {
    return function (tag) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        if (v.value0 === tag) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_v = v.value1;
                            $copy_v1 = v1.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible(name);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
        return go;
    };
};
var lookupEq = function (tags) {
    return function (eqs) {
        return function (v) {
            return function (v1) {
                if (v.type === v1.type) {
                    return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
                };
                if (Data_Boolean.otherwise) {
                    return false;
                };
                throw new Error("Failed pattern match at Data.Variant.Internal (line 100, column 1 - line 105, column 12): " + [ tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var lookupOrd = function (tags) {
    return function (ords) {
        return function (v) {
            return function (v1) {
                var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);
                if (v3 instanceof Data_Ordering.EQ) {
                    return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
                };
                return v3;
            };
        };
    };
};
var lookupFirst = function (name) {
    return function (f) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                    return {
                        type: v.value0,
                        value: f(v1.value0)
                    };
                };
                return impossible(name);
            };
        };
        return go;
    };
};
var lookupFromEnum = function (v) {
    var go = function ($copy_acc) {
        return function ($copy_v1) {
            return function ($copy_v2) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v1, v2) {
                    if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
                        if (v1.value0 === v.type) {
                            $tco_done = true;
                            return acc + v2.value0.fromEnum(v.value) | 0;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_acc = acc + v2.value0.cardinality | 0;
                            $tco_var_v1 = v1.value1;
                            $copy_v2 = v2.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible("fromEnum");
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $tco_var_v1, $copy_v2);
                };
                return $tco_result;
            };
        };
    };
    return go(0);
};
var lookupLast = function (name) {
    return function (f) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                    if (v instanceof Data_List_Types.Cons && (v.value1 instanceof Data_List_Types.Nil && (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil))) {
                        $tco_done = true;
                        return {
                            type: v.value0,
                            value: f(v1.value0)
                        };
                    };
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        $tco_var_v = v.value1;
                        $copy_v1 = v1.value1;
                        return;
                    };
                    $tco_done = true;
                    return impossible(name);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
        return go;
    };
};
var lookupPred = function (v) {
    var go2 = function ($copy_t1) {
        return function ($copy_b1) {
            return function ($copy_d1) {
                return function ($copy_v1) {
                    return function ($copy_v2) {
                        return function ($copy_v3) {
                            var $tco_var_t1 = $copy_t1;
                            var $tco_var_b1 = $copy_b1;
                            var $tco_var_d1 = $copy_d1;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_var_v2 = $copy_v2;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(t1, b1, d1, v1, v2, v3) {
                                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                                    if (v1.value0 === v.type) {
                                        var v4 = v3.value0.pred(v.value);
                                        if (v4 instanceof Data_Maybe.Nothing) {
                                            $tco_done = true;
                                            return Data_Maybe.Just.create({
                                                type: t1,
                                                value: b1.top
                                            });
                                        };
                                        if (v4 instanceof Data_Maybe.Just) {
                                            $tco_done = true;
                                            return Data_Maybe.Just.create({
                                                type: v.type,
                                                value: v4.value0
                                            });
                                        };
                                        throw new Error("Failed pattern match at Data.Variant.Internal (line 184, column 11 - line 186, column 69): " + [ v4.constructor.name ]);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        $tco_var_t1 = v1.value0;
                                        $tco_var_b1 = v2.value0;
                                        $tco_var_d1 = v3.value0;
                                        $tco_var_v1 = v1.value1;
                                        $tco_var_v2 = v2.value1;
                                        $copy_v3 = v3.value1;
                                        return;
                                    };
                                };
                                $tco_done = true;
                                return impossible("pred");
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_t1, $tco_var_b1, $tco_var_d1, $tco_var_v1, $tco_var_v2, $copy_v3);
                            };
                            return $tco_result;
                        };
                    };
                };
            };
        };
    };
    var go1 = function (v1) {
        return function (v2) {
            return function (v3) {
                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                    if (v1.value0 === v.type) {
                        var v4 = v3.value0.pred(v.value);
                        if (v4 instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (v4 instanceof Data_Maybe.Just) {
                            return Data_Maybe.Just.create({
                                type: v.type,
                                value: v4.value0
                            });
                        };
                        throw new Error("Failed pattern match at Data.Variant.Internal (line 175, column 11 - line 177, column 69): " + [ v4.constructor.name ]);
                    };
                    if (Data_Boolean.otherwise) {
                        return go2(v1.value0)(v2.value0)(v3.value0)(v1.value1)(v2.value1)(v3.value1);
                    };
                };
                return impossible("pred");
            };
        };
    };
    return go1;
};
var lookupSucc = function (v) {
    var go = function ($copy_v1) {
        return function ($copy_v2) {
            return function ($copy_v3) {
                var $tco_var_v1 = $copy_v1;
                var $tco_var_v2 = $copy_v2;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v1, v2, v3) {
                    if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                        if (v1.value0 === v.type) {
                            var v4 = v3.value0.succ(v.value);
                            if (v4 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return Data_Maybe.Just.create({
                                    type: v1.value0,
                                    value: v4.value0
                                });
                            };
                            if (v4 instanceof Data_Maybe.Nothing) {
                                if (v1.value1 instanceof Data_List_Types.Cons && v2.value1 instanceof Data_List_Types.Cons) {
                                    $tco_done = true;
                                    return Data_Maybe.Just.create({
                                        type: v1.value1.value0,
                                        value: v2.value1.value0.bottom
                                    });
                                };
                                $tco_done = true;
                                return Data_Maybe.Nothing.value;
                            };
                            throw new Error("Failed pattern match at Data.Variant.Internal (line 202, column 11 - line 206, column 29): " + [ v4.constructor.name ]);
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_v1 = v1.value1;
                            $tco_var_v2 = v2.value1;
                            $copy_v3 = v3.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible("succ");
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v1, $tco_var_v2, $copy_v3);
                };
                return $tco_result;
            };
        };
    };
    return go;
};
var contractWithInstance = function (dictRowToList) {
    return function (dictUnion) {
        return function (dictVariantTags) {
            return new Contractable(function (dictAlternative) {
                return function (v) {
                    return function (v1) {
                        return function (tag) {
                            return function (a) {
                                if (lookupTag(tag)(variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value))) {
                                    return Control_Applicative.pure(dictAlternative.Applicative0())(a);
                                };
                                if (Data_Boolean.otherwise) {
                                    return Control_Plus.empty(dictAlternative.Plus1());
                                };
                                throw new Error("Failed pattern match at Data.Variant.Internal (line 254, column 1 - line 263, column 24): " + [ v.constructor.name, v1.constructor.name, tag.constructor.name, a.constructor.name ]);
                            };
                        };
                    };
                };
            });
        };
    };
};
var contractWith = function (dict) {
    return dict.contractWith;
};
module.exports = {
    FProxy: FProxy,
    VariantRep: VariantRep,
    VariantTags: VariantTags,
    variantTags: variantTags,
    Contractable: Contractable,
    contractWith: contractWith,
    VariantMatchCases: VariantMatchCases,
    VariantFMatchCases: VariantFMatchCases,
    lookup: lookup,
    lookupTag: lookupTag,
    lookupEq: lookupEq,
    lookupOrd: lookupOrd,
    lookupLast: lookupLast,
    lookupFirst: lookupFirst,
    lookupPred: lookupPred,
    lookupSucc: lookupSucc,
    lookupCardinality: lookupCardinality,
    lookupFromEnum: lookupFromEnum,
    lookupToEnum: lookupToEnum,
    impossible: impossible,
    variantMatchCons: variantMatchCons,
    variantMatchNil: variantMatchNil,
    variantFMatchCons: variantFMatchCons,
    variantFMatchNil: variantFMatchNil,
    variantTagsNil: variantTagsNil,
    variantTagsCons: variantTagsCons,
    contractWithInstance: contractWithInstance
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Plus/index.js":"2CmD1","../Data.Boolean/index.js":"4zMHm","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Symbol/index.js":"3AbLb","../Partial.Unsafe/index.js":"6SrgG","../Type.Data.RowList/index.js":"4e8vB"}],"2sP8v":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Proxy3 = (function () {
    function Proxy3() {

    };
    Proxy3.value = new Proxy3();
    return Proxy3;
})();
var Proxy2 = (function () {
    function Proxy2() {

    };
    Proxy2.value = new Proxy2();
    return Proxy2;
})();
var $$Proxy = (function () {
    function $$Proxy() {

    };
    $$Proxy.value = new $$Proxy();
    return $$Proxy;
})();
var showProxy3 = new Data_Show.Show(function (v) {
    return "Proxy3";
});
var showProxy2 = new Data_Show.Show(function (v) {
    return "Proxy2";
});
var showProxy = new Data_Show.Show(function (v) {
    return "Proxy";
});
var semiringProxy3 = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, Proxy3.value, Proxy3.value);
var semiringProxy2 = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, Proxy2.value, Proxy2.value);
var semiringProxy = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, $$Proxy.value, $$Proxy.value);
var semigroupProxy3 = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
});
var semigroupProxy2 = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
});
var semigroupProxy = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var ringProxy3 = new Data_Ring.Ring(function () {
    return semiringProxy3;
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
});
var ringProxy2 = new Data_Ring.Ring(function () {
    return semiringProxy2;
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
});
var ringProxy = new Data_Ring.Ring(function () {
    return semiringProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var heytingAlgebraProxy3 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, Proxy3.value, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return Proxy3.value;
}, Proxy3.value);
var heytingAlgebraProxy2 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, Proxy2.value, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return Proxy2.value;
}, Proxy2.value);
var heytingAlgebraProxy = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, $$Proxy.value, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return $$Proxy.value;
}, $$Proxy.value);
var functorProxy = new Data_Functor.Functor(function (f) {
    return function (m) {
        return $$Proxy.value;
    };
});
var eqProxy3 = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy3 = new Data_Ord.Ord(function () {
    return eqProxy3;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var eqProxy2 = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy2 = new Data_Ord.Ord(function () {
    return eqProxy2;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var eqProxy = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy = new Data_Ord.Ord(function () {
    return eqProxy;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var discardProxy3 = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var discardProxy2 = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var discardProxy = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var commutativeRingProxy3 = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy3;
});
var commutativeRingProxy2 = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy2;
});
var commutativeRingProxy = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy;
});
var boundedProxy3 = new Data_Bounded.Bounded(function () {
    return ordProxy3;
}, Proxy3.value, Proxy3.value);
var boundedProxy2 = new Data_Bounded.Bounded(function () {
    return ordProxy2;
}, Proxy2.value, Proxy2.value);
var boundedProxy = new Data_Bounded.Bounded(function () {
    return ordProxy;
}, $$Proxy.value, $$Proxy.value);
var booleanAlgebraProxy3 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy3;
});
var booleanAlgebraProxy2 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy2;
});
var booleanAlgebraProxy = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy;
});
var applyProxy = new Control_Apply.Apply(function () {
    return functorProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var bindProxy = new Control_Bind.Bind(function () {
    return applyProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var applicativeProxy = new Control_Applicative.Applicative(function () {
    return applyProxy;
}, function (v) {
    return $$Proxy.value;
});
var monadProxy = new Control_Monad.Monad(function () {
    return applicativeProxy;
}, function () {
    return bindProxy;
});
module.exports = {
    "Proxy": $$Proxy,
    Proxy2: Proxy2,
    Proxy3: Proxy3,
    eqProxy: eqProxy,
    functorProxy: functorProxy,
    ordProxy: ordProxy,
    applicativeProxy: applicativeProxy,
    applyProxy: applyProxy,
    bindProxy: bindProxy,
    booleanAlgebraProxy: booleanAlgebraProxy,
    boundedProxy: boundedProxy,
    commutativeRingProxy: commutativeRingProxy,
    discardProxy: discardProxy,
    heytingAlgebraProxy: heytingAlgebraProxy,
    monadProxy: monadProxy,
    ringProxy: ringProxy,
    semigroupProxy: semigroupProxy,
    semiringProxy: semiringProxy,
    showProxy: showProxy,
    eqProxy2: eqProxy2,
    ordProxy2: ordProxy2,
    booleanAlgebraProxy2: booleanAlgebraProxy2,
    boundedProxy2: boundedProxy2,
    commutativeRingProxy2: commutativeRingProxy2,
    discardProxy2: discardProxy2,
    heytingAlgebraProxy2: heytingAlgebraProxy2,
    ringProxy2: ringProxy2,
    semigroupProxy2: semigroupProxy2,
    semiringProxy2: semiringProxy2,
    showProxy2: showProxy2,
    eqProxy3: eqProxy3,
    ordProxy3: ordProxy3,
    booleanAlgebraProxy3: booleanAlgebraProxy3,
    boundedProxy3: boundedProxy3,
    commutativeRingProxy3: commutativeRingProxy3,
    discardProxy3: discardProxy3,
    heytingAlgebraProxy3: heytingAlgebraProxy3,
    ringProxy3: ringProxy3,
    semigroupProxy3: semigroupProxy3,
    semiringProxy3: semiringProxy3,
    showProxy3: showProxy3
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad/index.js":"4SDam","../Data.BooleanAlgebra/index.js":"ayR4z","../Data.Bounded/index.js":"4LlpW","../Data.CommutativeRing/index.js":"75WGG","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Ring/index.js":"3ezk6","../Data.Semigroup/index.js":"3qtmP","../Data.Semiring/index.js":"42GiG","../Data.Show/index.js":"6nX0c"}],"1dowk":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Unvariant = function (x) {
    return x;
};
var VariantShows = function (variantShows) {
    this.variantShows = variantShows;
};
var VariantOrds = function (variantOrds) {
    this.variantOrds = variantOrds;
};
var VariantEqs = function (variantEqs) {
    this.variantEqs = variantEqs;
};
var VariantBounded = function (variantBounded) {
    this.variantBounded = variantBounded;
};
var VariantBoundedEnums = function (VariantBounded0, variantBoundedEnums) {
    this.VariantBounded0 = VariantBounded0;
    this.variantBoundedEnums = variantBoundedEnums;
};
var variantShows = function (dict) {
    return dict.variantShows;
};
var variantOrds = function (dict) {
    return dict.variantOrds;
};
var variantEqs = function (dict) {
    return dict.variantEqs;
};
var variantBoundedEnums = function (dict) {
    return dict.variantBoundedEnums;
};
var variantBounded = function (dict) {
    return dict.variantBounded;
};
var unvariant = function (v) {
    return function (f) {
        return (function (dictIsSymbol) {
            return function (dictCons) {
                return f(dictIsSymbol)();
            };
        })({
            reflectSymbol: Data_Function["const"](v.type)
        })({})(Data_Symbol.SProxy.value)(v.value);
    };
};
var showVariantNil = new VariantShows(function (v) {
    return Data_List_Types.Nil.value;
});
var showVariantCons = function (dictVariantShows) {
    return function (dictShow) {
        return new VariantShows(function (v) {
            return new Data_List_Types.Cons(Data_Show.show(dictShow), variantShows(dictVariantShows)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var showVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantShows) {
            return new Data_Show.Show(function (v1) {
                var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                var shows = variantShows(dictVariantShows)(Type_Data_RowList.RLProxy.value);
                var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
            });
        };
    };
};
var ordVariantNil = new VariantOrds(function (v) {
    return Data_List_Types.Nil.value;
});
var ordVariantCons = function (dictVariantOrds) {
    return function (dictOrd) {
        return new VariantOrds(function (v) {
            return new Data_List_Types.Cons(Data_Ord.compare(dictOrd), variantOrds(dictVariantOrds)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var onMatch = function (dictRowToList) {
    return function (dictVariantMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return function (k) {
                    return function (v) {
                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                            return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                        };
                        return k(v);
                    };
                };
            };
        };
    };
};
var on = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (f) {
                return function (g) {
                    return function (r) {
                        if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                            return f(r.value);
                        };
                        return g(r);
                    };
                };
            };
        };
    };
};
var prj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictAlternative) {
            return function (p) {
                return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
        };
    };
};
var inj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (value) {
                return {
                    type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                    value: value
                };
            };
        };
    };
};
var revariant = function (v) {
    return v(function (dictIsSymbol) {
        return function (dictCons) {
            return inj()(dictIsSymbol);
        };
    });
};
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var eqVariantNil = new VariantEqs(function (v) {
    return Data_List_Types.Nil.value;
});
var eqVariantCons = function (dictVariantEqs) {
    return function (dictEq) {
        return new VariantEqs(function (v) {
            return new Data_List_Types.Cons(Data_Eq.eq(dictEq), variantEqs(dictVariantEqs)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var eqVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return new Data_Eq.Eq(function (v1) {
                return function (v2) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                    var eqs = variantEqs(dictVariantEqs)(Type_Data_RowList.RLProxy.value);
                    return Data_Variant_Internal.lookupEq(tags)(eqs)(v1)(v2);
                };
            });
        };
    };
};
var ordVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return new Data_Ord.Ord(function () {
                    return eqVariant()(dictVariantTags)(dictVariantEqs);
                }, function (v1) {
                    return function (v2) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var ords = variantOrds(dictVariantOrds)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupOrd(tags)(ords)(v1)(v2);
                    };
                });
            };
        };
    };
};
var enumVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBoundedEnums) {
                    return new Data_Enum.Enum(function () {
                        return ordVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                    }, function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupPred(a)(tags)(bounds)(dicts);
                    }, function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupSucc(a)(tags)(bounds)(dicts);
                    });
                };
            };
        };
    };
};
var $$default = function (a) {
    return function (v) {
        return a;
    };
};
var contract = function (dictAlternative) {
    return function (dictContractable) {
        return function (v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
        };
    };
};
var case_ = function (r) {
    return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
};
var match = function (dictRowToList) {
    return function (dictVariantMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return onMatch()()()(r)(case_);
            };
        };
    };
};
var boundedVariantNil = new VariantBounded(function (v) {
    return Data_List_Types.Nil.value;
});
var enumVariantNil = new VariantBoundedEnums(function () {
    return boundedVariantNil;
}, function (v) {
    return Data_List_Types.Nil.value;
});
var boundedVariantCons = function (dictVariantBounded) {
    return function (dictBounded) {
        return new VariantBounded(function (v) {
            var dict = {
                top: Data_Bounded.top(dictBounded),
                bottom: Data_Bounded.bottom(dictBounded)
            };
            return new Data_List_Types.Cons(dict, variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var enumVariantCons = function (dictVariantBoundedEnums) {
    return function (dictBoundedEnum) {
        return new VariantBoundedEnums(function () {
            return boundedVariantCons(dictVariantBoundedEnums.VariantBounded0())(dictBoundedEnum.Bounded0());
        }, function (v) {
            var dict = {
                pred: Data_Enum.pred(dictBoundedEnum.Enum1()),
                succ: Data_Enum.succ(dictBoundedEnum.Enum1()),
                fromEnum: Data_Enum.fromEnum(dictBoundedEnum),
                toEnum: Data_Enum.toEnum(dictBoundedEnum),
                cardinality: Data_Enum.cardinality(dictBoundedEnum)
            };
            return new Data_List_Types.Cons(dict, variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var boundedVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBounded) {
                    return new Data_Bounded.Bounded(function () {
                        return ordVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                    }, (function () {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupFirst("bottom")(function (v) {
                            return v.bottom;
                        })(tags)(dicts));
                    })(), (function () {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupLast("top")(function (v) {
                            return v.top;
                        })(tags)(dicts));
                    })());
                };
            };
        };
    };
};
var boundedEnumVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBoundedEnums) {
                    return new Data_Enum.BoundedEnum(function () {
                        return boundedVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums.VariantBounded0());
                    }, function () {
                        return enumVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums);
                    }, Data_Enum.Cardinality(Data_Variant_Internal.lookupCardinality(variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value))), function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupFromEnum(a)(tags)(dicts);
                    }, function (n) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupToEnum(n)(tags)(dicts);
                    });
                };
            };
        };
    };
};
module.exports = {
    inj: inj,
    prj: prj,
    on: on,
    onMatch: onMatch,
    case_: case_,
    match: match,
    "default": $$default,
    expand: expand,
    contract: contract,
    Unvariant: Unvariant,
    unvariant: unvariant,
    revariant: revariant,
    VariantEqs: VariantEqs,
    variantEqs: variantEqs,
    VariantOrds: VariantOrds,
    variantOrds: variantOrds,
    VariantShows: VariantShows,
    variantShows: variantShows,
    VariantBounded: VariantBounded,
    variantBounded: variantBounded,
    VariantBoundedEnums: VariantBoundedEnums,
    variantBoundedEnums: variantBoundedEnums,
    eqVariantNil: eqVariantNil,
    eqVariantCons: eqVariantCons,
    eqVariant: eqVariant,
    boundedVariantNil: boundedVariantNil,
    boundedVariantCons: boundedVariantCons,
    boundedVariant: boundedVariant,
    enumVariantNil: enumVariantNil,
    enumVariantCons: enumVariantCons,
    enumVariant: enumVariant,
    boundedEnumVariant: boundedEnumVariant,
    ordVariantNil: ordVariantNil,
    ordVariantCons: ordVariantCons,
    ordVariant: ordVariant,
    showVariantNil: showVariantNil,
    showVariantCons: showVariantCons,
    showVariant: showVariant
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Plus/index.js":"2CmD1","../Data.Bounded/index.js":"4LlpW","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.List.Types/index.js":"6KoCK","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c","../Data.Symbol/index.js":"3AbLb","../Data.Variant.Internal/index.js":"1aLu1","../Partial.Unsafe/index.js":"6SrgG","../Record.Unsafe/index.js":"5qyzS","../Type.Data.Row/index.js":"1OuJU","../Type.Data.RowList/index.js":"4e8vB","../Unsafe.Coerce/index.js":"3fQke"}],"7kbdv":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ConstMapping = function (x) {
    return x;
};
var MappingWithIndex = function (mappingWithIndex) {
    this.mappingWithIndex = mappingWithIndex;
};
var Mapping = function (mapping) {
    this.mapping = mapping;
};
var MapVariantWithIndex = function (mapVariantWithIndex) {
    this.mapVariantWithIndex = mapVariantWithIndex;
};
var MapVariantFWithIndex = function (mapVariantFWithIndex) {
    this.mapVariantFWithIndex = mapVariantFWithIndex;
};
var MapRecordWithIndex = function (mapRecordWithIndexBuilder) {
    this.mapRecordWithIndexBuilder = mapRecordWithIndexBuilder;
};
var HMapWithIndex = function (hmapWithIndex) {
    this.hmapWithIndex = hmapWithIndex;
};
var HMap = function (hmap) {
    this.hmap = hmap;
};
var mappingWithIndex = function (dict) {
    return dict.mappingWithIndex;
};
var mappingFunction = new Mapping(function (k) {
    return k;
});
var mapping = function (dict) {
    return dict.mapping;
};
var mapVariantWithIndexNil = new MapVariantWithIndex(function (v) {
    return function (v1) {
        return Data_Variant.case_;
    };
});
var mapVariantWithIndex = function (dict) {
    return dict.mapVariantWithIndex;
};
var mapVariantWithIndexCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictMappingWithIndex) {
                return function (dictMapVariantWithIndex) {
                    return new MapVariantWithIndex(function (v) {
                        return function (fn) {
                            return Data_Variant.on()(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                var $65 = Data_Variant.inj()(dictIsSymbol)(Data_Symbol.SProxy.value);
                                var $66 = mappingWithIndex(dictMappingWithIndex)(fn)(Data_Symbol.SProxy.value);
                                return function ($67) {
                                    return $65($66($67));
                                };
                            })())(mapVariantWithIndex(dictMapVariantWithIndex)(Type_Data_RowList.RLProxy.value)(fn));
                        };
                    });
                };
            };
        };
    };
};
var mapVariantFWithIndexNil = new MapVariantFWithIndex(function (v) {
    return function (v1) {
        return Data_Functor_Variant.case_;
    };
});
var mapVariantFWithIndex = function (dict) {
    return dict.mapVariantFWithIndex;
};
var mapVariantFWithIndexCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictMappingWithIndex) {
                return function (dictMapVariantFWithIndex) {
                    return function (dictFunctor) {
                        return new MapVariantFWithIndex(function (v) {
                            return function (fn) {
                                return Data_Functor_Variant.on()(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                    var $68 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(Data_Symbol.SProxy.value);
                                    var $69 = mappingWithIndex(dictMappingWithIndex)(fn)(Data_Symbol.SProxy.value);
                                    return function ($70) {
                                        return $68($69($70));
                                    };
                                })())(mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Data_RowList.RLProxy.value)(fn));
                            };
                        });
                    };
                };
            };
        };
    };
};
var mapRecordWithIndexNil = new MapRecordWithIndex(function (v) {
    return function (v1) {
        return Control_Category.identity(Record_Builder.categoryBuilder);
    };
});
var mapRecordWithIndexBuilder = function (dict) {
    return dict.mapRecordWithIndexBuilder;
};
var mapRecordWithIndexCons = function (dictIsSymbol) {
    return function (dictMappingWithIndex) {
        return function (dictMapRecordWithIndex) {
            return function (dictCons) {
                return function (dictCons1) {
                    return new MapRecordWithIndex(function (v) {
                        return function (f) {
                            return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.modify()()(dictIsSymbol)(Data_Symbol.SProxy.value)(mappingWithIndex(dictMappingWithIndex)(f)(Data_Symbol.SProxy.value)))(mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Data_RowList.RLProxy.value)(f));
                        };
                    });
                };
            };
        };
    };
};
var hmapWithIndexVariantF = function (dictRowToList) {
    return function (dictMapVariantFWithIndex) {
        return new HMapWithIndex(mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Data_RowList.RLProxy.value));
    };
};
var hmapWithIndexVariant = function (dictRowToList) {
    return function (dictMapVariantWithIndex) {
        return new HMapWithIndex(mapVariantWithIndex(dictMapVariantWithIndex)(Type_Data_RowList.RLProxy.value));
    };
};
var hmapWithIndexRecord = function (dictRowToList) {
    return function (dictMapRecordWithIndex) {
        return new HMapWithIndex((function () {
            var $71 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Data_RowList.RLProxy.value);
            return function ($72) {
                return Record_Builder.build($71($72));
            };
        })());
    };
};
var hmapWithIndexApp = function (dictFunctorWithIndex) {
    return function (dictMappingWithIndex) {
        return new HMapWithIndex(function (f) {
            return function (v) {
                return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(mappingWithIndex(dictMappingWithIndex)(f))(v);
            };
        });
    };
};
var hmapWithIndex = function (dict) {
    return dict.hmapWithIndex;
};
var hmapVariantF = function (dictRowToList) {
    return function (dictMapVariantFWithIndex) {
        return new HMap((function () {
            var $73 = mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Data_RowList.RLProxy.value);
            return function ($74) {
                return $73(ConstMapping($74));
            };
        })());
    };
};
var hmapVariant = function (dictRowToList) {
    return function (dictMapVariantWithIndex) {
        return new HMap((function () {
            var $75 = mapVariantWithIndex(dictMapVariantWithIndex)(Type_Data_RowList.RLProxy.value);
            return function ($76) {
                return $75(ConstMapping($76));
            };
        })());
    };
};
var hmapTuple = function (dictMapping) {
    return function (dictMapping1) {
        return new HMap(function (fn) {
            return function (v) {
                return new Data_Tuple.Tuple(mapping(dictMapping)(fn)(v.value0), mapping(dictMapping1)(fn)(v.value1));
            };
        });
    };
};
var hmapRecord = function (dictRowToList) {
    return function (dictMapRecordWithIndex) {
        return new HMap((function () {
            var $77 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Data_RowList.RLProxy.value);
            return function ($78) {
                return Record_Builder.build($77(ConstMapping($78)));
            };
        })());
    };
};
var hmapEither = function (dictMapping) {
    return function (dictMapping1) {
        return new HMap(function (fn) {
            return function (v) {
                if (v instanceof Data_Either.Left) {
                    return new Data_Either.Left(mapping(dictMapping)(fn)(v.value0));
                };
                if (v instanceof Data_Either.Right) {
                    return new Data_Either.Right(mapping(dictMapping1)(fn)(v.value0));
                };
                throw new Error("Failed pattern match at Heterogeneous.Mapping (line 119, column 13 - line 121, column 36): " + [ v.constructor.name ]);
            };
        });
    };
};
var hmapApp = function (dictFunctor) {
    return function (dictMapping) {
        return new HMap(function (f) {
            return function (v) {
                return Data_Functor.map(dictFunctor)(mapping(dictMapping)(f))(v);
            };
        });
    };
};
var hmap = function (dict) {
    return dict.hmap;
};
var constMapping = function (dictMapping) {
    return new MappingWithIndex(function (v) {
        return function (v1) {
            return mapping(dictMapping)(v);
        };
    });
};
module.exports = {
    hmap: hmap,
    hmapWithIndex: hmapWithIndex,
    mapRecordWithIndexBuilder: mapRecordWithIndexBuilder,
    mapVariantFWithIndex: mapVariantFWithIndex,
    mapVariantWithIndex: mapVariantWithIndex,
    mapping: mapping,
    mappingWithIndex: mappingWithIndex,
    Mapping: Mapping,
    MappingWithIndex: MappingWithIndex,
    ConstMapping: ConstMapping,
    HMap: HMap,
    HMapWithIndex: HMapWithIndex,
    MapRecordWithIndex: MapRecordWithIndex,
    MapVariantWithIndex: MapVariantWithIndex,
    MapVariantFWithIndex: MapVariantFWithIndex,
    mappingFunction: mappingFunction,
    constMapping: constMapping,
    hmapApp: hmapApp,
    hmapWithIndexApp: hmapWithIndexApp,
    hmapRecord: hmapRecord,
    hmapWithIndexRecord: hmapWithIndexRecord,
    mapRecordWithIndexCons: mapRecordWithIndexCons,
    mapRecordWithIndexNil: mapRecordWithIndexNil,
    hmapTuple: hmapTuple,
    hmapEither: hmapEither,
    hmapVariant: hmapVariant,
    hmapWithIndexVariant: hmapWithIndexVariant,
    mapVariantWithIndexCons: mapVariantWithIndexCons,
    mapVariantWithIndexNil: mapVariantWithIndexNil,
    hmapVariantF: hmapVariantF,
    hmapWithIndexVariantF: hmapWithIndexVariantF,
    mapVariantFWithIndexCons: mapVariantFWithIndexCons,
    mapVariantFWithIndexNil: mapVariantFWithIndexNil
};

},{"../Control.Category/index.js":"6QTyW","../Control.Semigroupoid/index.js":"5fTaI","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Functor.Variant/index.js":"7zqYv","../Data.FunctorWithIndex/index.js":"7KyY4","../Data.Symbol/index.js":"3AbLb","../Data.Tuple/index.js":"43VFo","../Data.Variant/index.js":"1dowk","../Record.Builder/index.js":"B2QGS","../Type.Data.RowList/index.js":"4e8vB"}],"B2QGS":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Builder = function (x) {
    return x;
};
var union = function (dictUnion) {
    return function (r2) {
        return function (r1) {
            return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
        };
    };
};
var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
var rename = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return function (dictLacks1) {
                        return function (l1) {
                            return function (l2) {
                                return function (r1) {
                                    return $foreign.unsafeRename(Data_Symbol.reflectSymbol(dictIsSymbol)(l1))(Data_Symbol.reflectSymbol(dictIsSymbol1)(l2))(r1);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var nub = function (dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};
var modify = function (dictCons) {
    return function (dictCons1) {
        return function (dictIsSymbol) {
            return function (l) {
                return function (f) {
                    return function (r1) {
                        return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(f)(r1);
                    };
                };
            };
        };
    };
};
var merge = function (dictUnion) {
    return function (dictNub) {
        return function (r2) {
            return function (r1) {
                return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
        };
    };
};
var insert = function (dictCons) {
    return function (dictLacks) {
        return function (dictIsSymbol) {
            return function (l) {
                return function (a) {
                    return function (r1) {
                        return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                    };
                };
            };
        };
    };
};
var disjointUnion = function (dictUnion) {
    return function (dictNub) {
        return function (r1) {
            return function (r2) {
                return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
        };
    };
};
var $$delete = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (r2) {
                    return $foreign.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r2);
                };
            };
        };
    };
};
var categoryBuilder = Control_Category.categoryFn;
var build = function (v) {
    return function (r1) {
        return v($foreign.copyRecord(r1));
    };
};
module.exports = {
    build: build,
    insert: insert,
    modify: modify,
    "delete": $$delete,
    rename: rename,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    semigroupoidBuilder: semigroupoidBuilder,
    categoryBuilder: categoryBuilder
};

},{"./foreign.js":"1yOGl","../Control.Category/index.js":"6QTyW","../Control.Semigroupoid/index.js":"5fTaI","../Data.Symbol/index.js":"3AbLb","../Record.Unsafe.Union/index.js":"7bk8Z","../Unsafe.Coerce/index.js":"3fQke"}],"1yOGl":[function(require,module,exports) {
"use strict";

exports.copyRecord = function(rec) {
  var copy = {};
  for (var key in rec) {
    if ({}.hasOwnProperty.call(rec, key)) {
      copy[key] = rec[key];
    }
  }
  return copy;
};

exports.unsafeInsert = function(l) {
  return function(a) {
    return function(rec) {
      rec[l] = a;
      return rec;
    };
  };
};

exports.unsafeModify = function(l) {
  return function (f) {
    return function(rec) {
      rec[l] = f(rec[l]);
      return rec;
    };
  };
};

exports.unsafeDelete = function(l) {
  return function(rec) {
    delete rec[l];
    return rec;
  };
};

exports.unsafeRename = function(l1) {
  return function (l2) {
    return function (rec) {
      rec[l2] = rec[l1];
      delete rec[l1];
      return rec;
    };
  };
};

},{}],"4J7Fa":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff_Compat = require("../Effect.Aff.Compat/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Generic_Class = require("../Foreign.Generic.Class/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var GraphQL_Client_BaseClients_Apollo_ErrorPolicy = require("../GraphQL.Client.BaseClients.Apollo.ErrorPolicy/index.js");
var GraphQL_Client_BaseClients_Apollo_FetchPolicy = require("../GraphQL.Client.BaseClients.Apollo.FetchPolicy/index.js");
var GraphQL_Client_ToGqlString = require("../GraphQL.Client.ToGqlString/index.js");
var GraphQL_Client_Types = require("../GraphQL.Client.Types/index.js");
var IsApollo = {};
var writeQuery = function (dictIsApollo) {
    return function (dictGqlQuery) {
        return function (encoder) {
            return function (client) {
                return function (query) {
                    return function (newData) {
                        return $foreign.writeQueryImpl(Foreign.unsafeToForeign(client))(GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQuery.GqlQueryString1())(query))(encoder(newData));
                    };
                };
            };
        };
    };
};
var readQuery = function (dictIsApollo) {
    return function (dictGqlQuery) {
        return function (decoder) {
            return function (client) {
                return function (query) {
                    return function __do() {
                        var json = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign.readQueryImpl(Foreign.unsafeToForeign(client))(GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQuery.GqlQueryString1())(query)))();
                        var v = Data_Functor.map(Data_Maybe.functorMaybe)(decoder)(json);
                        if (v instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                            return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(Effect_Exception.error(Data_Argonaut_Decode_Error.printJsonDecodeError(v.value0.value0)))();
                        };
                        if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                            return new Data_Maybe.Just(v.value0.value0);
                        };
                        throw new Error("Failed pattern match at GraphQL.Client.BaseClients.Apollo (line 242, column 3 - line 245, column 40): " + [ v.constructor.name ]);
                    };
                };
            };
        };
    };
};
var updateCache = function (dictIsApollo) {
    return function (dictGqlQuery) {
        return function (encoder) {
            return function (decoder) {
                return function (client) {
                    return function (query) {
                        return function (f) {
                            return function __do() {
                                var may = readQuery()(dictGqlQuery)(decoder)(client)(query)();
                                if (may instanceof Data_Maybe.Nothing) {
                                    return Data_Unit.unit;
                                };
                                if (may instanceof Data_Maybe.Just) {
                                    return writeQuery()(dictGqlQuery)(encoder)(client)(query)(f(may.value0))();
                                };
                                throw new Error("Failed pattern match at GraphQL.Client.BaseClients.Apollo (line 230, column 3 - line 232, column 56): " + [ may.constructor.name ]);
                            };
                        };
                    };
                };
            };
        };
    };
};
var updateCacheJson = function (dictIsApollo) {
    return function (dictGqlQuery) {
        return function (dictEncodeJson) {
            return function (dictDecodeJson) {
                return updateCache()(dictGqlQuery)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson))(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
            };
        };
    };
};
var queryForeign = function (dictQueryClient) {
    return function (isMutation) {
        return function (opts) {
            return function (client) {
                return function (name) {
                    return function (q_) {
                        var opStr = (function () {
                            if (isMutation) {
                                return "mutation";
                            };
                            return "query";
                        })();
                        var q = opStr + (" " + (name + (" " + q_)));
                        var fn = (function () {
                            if (isMutation) {
                                return $foreign.mutationImpl;
                            };
                            return $foreign.queryImpl;
                        })();
                        return Effect_Aff_Compat.fromEffectFnAff(fn(opts)(client)(q));
                    };
                };
            };
        };
    };
};
var isApolloSubClient = IsApollo;
var isApolloClient = IsApollo;
var defQueryOpts = {
    fetchPolicy: Data_Maybe.Nothing.value,
    errorPolicy: GraphQL_Client_BaseClients_Apollo_ErrorPolicy.All.value
};
var subClientSubscription = new GraphQL_Client_Types.SubscriptionClient(function (opts) {
    return $foreign.subscriptionImpl(Foreign_Generic_Class.encode(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
        return "fetchPolicy";
    }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(GraphQL_Client_BaseClients_Apollo_FetchPolicy.encodeFetchPolicy))))(new Data_Symbol.IsSymbol(function () {
        return "errorPolicy";
    }))(Foreign_Generic_Class.encodeWithOptionsOther(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy))))(opts));
}, Data_Function["const"](defQueryOpts));
var subClientWatchQuery = new GraphQL_Client_Types.WatchQueryClient(function (opts) {
    return function (c) {
        return $foreign.watchQueryImpl(Foreign_Generic_Class.encode(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
            return "fetchPolicy";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(GraphQL_Client_BaseClients_Apollo_FetchPolicy.encodeFetchPolicy))))(new Data_Symbol.IsSymbol(function () {
            return "errorPolicy";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy))))(opts))(Foreign.unsafeToForeign(c));
    };
}, Data_Function["const"](defQueryOpts));
var defMutationOpts = {
    errorPolicy: GraphQL_Client_BaseClients_Apollo_ErrorPolicy.All.value,
    refetchQueries: [  ],
    update: Data_Maybe.Nothing.value,
    optimisticResponse: Data_Maybe.Nothing.value
};
var queryClient = new GraphQL_Client_Types.QueryClient(function (opts) {
    return queryForeign(queryClient)(true)(Foreign.unsafeToForeign({
        errorPolicy: Foreign_Generic_Class.encode(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy)(opts.errorPolicy),
        refetchQueries: Foreign_Generic_Class.encode(Foreign_Generic_Class.arrayEncode(Foreign_Generic_Class.stringEncode))(opts.refetchQueries),
        update: Data_Nullable.toNullable(opts.update),
        optimisticResponse: Data_Nullable.toNullable(opts.optimisticResponse)
    }));
}, function (opts) {
    return queryForeign(queryClient)(false)(Foreign_Generic_Class.encode(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
        return "fetchPolicy";
    }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(GraphQL_Client_BaseClients_Apollo_FetchPolicy.encodeFetchPolicy))))(new Data_Symbol.IsSymbol(function () {
        return "errorPolicy";
    }))(Foreign_Generic_Class.encodeWithOptionsOther(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy))))(opts));
}, Data_Function["const"](defMutationOpts), Data_Function["const"](defQueryOpts));
var queryClientSubscription = new GraphQL_Client_Types.QueryClient(function (opts) {
    return queryForeign(queryClientSubscription)(true)(Foreign.unsafeToForeign({
        errorPolicy: Foreign_Generic_Class.encode(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy)(opts.errorPolicy),
        refetchQueries: Foreign_Generic_Class.encode(Foreign_Generic_Class.arrayEncode(Foreign_Generic_Class.stringEncode))(opts.refetchQueries),
        update: Data_Nullable.toNullable(opts.update),
        optimisticResponse: Data_Nullable.toNullable(opts.optimisticResponse)
    }));
}, function (opts) {
    return queryForeign(queryClientSubscription)(false)(Foreign_Generic_Class.encode(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
        return "fetchPolicy";
    }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(GraphQL_Client_BaseClients_Apollo_FetchPolicy.encodeFetchPolicy))))(new Data_Symbol.IsSymbol(function () {
        return "errorPolicy";
    }))(Foreign_Generic_Class.encodeWithOptionsOther(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy))))(opts));
}, Data_Function["const"](defMutationOpts), Data_Function["const"](defQueryOpts));
var clientWatchQuery = new GraphQL_Client_Types.WatchQueryClient(function (opts) {
    return function (c) {
        return $foreign.watchQueryImpl(Foreign_Generic_Class.encode(Foreign_Generic_Class.recordEncode()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
            return "fetchPolicy";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.maybeEncode(GraphQL_Client_BaseClients_Apollo_FetchPolicy.encodeFetchPolicy))))(new Data_Symbol.IsSymbol(function () {
            return "errorPolicy";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(GraphQL_Client_BaseClients_Apollo_ErrorPolicy.encodeErrorPolicy))))(opts))(Foreign.unsafeToForeign(c));
    };
}, Data_Function["const"](defQueryOpts));
var clientOptsToForeign = function (opts) {
    var $22 = {};
    for (var $23 in opts) {
        if ({}.hasOwnProperty.call(opts, $23)) {
            $22[$23] = opts[$23];
        };
    };
    $22.authToken = Data_Nullable.toNullable(opts.authToken);
    $22.headers = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(opts.headers)(function (h) {
        return new Data_Tuple.Tuple(Affjax_RequestHeader.name(h), Affjax_RequestHeader.value(h));
    }));
    return $22;
};
var createClient = (function () {
    var $25 = Data_Functor.map(Effect.functorEffect)(GraphQL_Client_Types.Client);
    return function ($26) {
        return $25($foreign.createClientImpl(clientOptsToForeign($26)));
    };
})();
var createSubscriptionClient = (function () {
    var $27 = Data_Functor.map(Effect.functorEffect)(GraphQL_Client_Types.Client);
    return function ($28) {
        return $27($foreign.createSubscriptionClientImpl(clientOptsToForeign($28)));
    };
})();
module.exports = {
    createClient: createClient,
    createSubscriptionClient: createSubscriptionClient,
    IsApollo: IsApollo,
    updateCacheJson: updateCacheJson,
    updateCache: updateCache,
    readQuery: readQuery,
    writeQuery: writeQuery,
    queryClient: queryClient,
    queryClientSubscription: queryClientSubscription,
    subClientSubscription: subClientSubscription,
    isApolloClient: isApolloClient,
    isApolloSubClient: isApolloSubClient,
    clientWatchQuery: clientWatchQuery,
    subClientWatchQuery: subClientWatchQuery
};

},{"./foreign.js":"6CCaX","../Affjax.RequestHeader/index.js":"6boN9","../Control.Monad.Error.Class/index.js":"6mmaT","../Data.Argonaut.Decode.Class/index.js":"1oRcX","../Data.Argonaut.Decode.Error/index.js":"1Njs1","../Data.Argonaut.Encode.Class/index.js":"3rdRX","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Nullable/index.js":"MeaHd","../Data.Symbol/index.js":"3AbLb","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff.Compat/index.js":"D7JZw","../Effect.Exception/index.js":"neabt","../Foreign/index.js":"3iOAH","../Foreign.Generic.Class/index.js":"2Ippr","../Foreign.Object/index.js":"1QIU3","../GraphQL.Client.BaseClients.Apollo.ErrorPolicy/index.js":"3Q7l8","../GraphQL.Client.BaseClients.Apollo.FetchPolicy/index.js":"3oFp7","../GraphQL.Client.ToGqlString/index.js":"4g2tQ","../GraphQL.Client.Types/index.js":"MVda1"}],"6CCaX":[function(require,module,exports) {
require('isomorphic-unfetch')

const createClientWithoutWebsockets = function (opts) {
  const { ApolloClient, InMemoryCache, createHttpLink } = require('@apollo/client/core')
  const { setContext } = require('@apollo/client/link/context')

  const authLink = setContext(function (_, { headers }) {
    // get the authentication token from local storage if it exists
    // return the headers to the context so httpLink can read them
    return {
      headers: Object.assign(
        {},
        headers,
        opts.headers,
        { authorization: opts.authToken ? `Bearer ${opts.authToken}` : '' }
      )
    }
  })

  const httpLink = createHttpLink({
    uri: opts.url
  })

  return new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache(),
    options: {
      authToken: opts.authToken,
      reconnect: true
    }
  })
}

const createClientWithWebsockets = function (opts) {
  const { WebSocketLink } = require('@apollo/client/link/ws')
  const { split, HttpLink, InMemoryCache, ApolloClient } = require('@apollo/client/core')
  const { getMainDefinition } = require('@apollo/client/utilities')
  const { setContext } = require('@apollo/client/link/context')
  const ws = require('isomorphic-ws')
  const { SubscriptionClient } = require('subscriptions-transport-ws')

  const httpLink = new HttpLink({
    uri: opts.url,
    options: {
      authToken: opts.authToken,
      reconnect: true
    }
  })

  const wsLink = new WebSocketLink(
    new SubscriptionClient(opts.websocketUrl, {
      reconnect: true,
      timeout: 30000,
      connectionParams: {
        headers: {
          Authorization: 'Bearer ' + opts.authToken
        }
      }
    }, ws)
  )

  const link = split(
    ({ query }) => {
      const definition = getMainDefinition(query)
      return (
        definition.kind === 'OperationDefinition' &&
        definition.operation === 'subscription'
      )
    },
    wsLink,
    httpLink
  )
  const authLink = setContext(function (_, { headers }) {
    // return the headers to the context so httpLink can read them
    return {
      headers: Object.assign(
        {},
        headers,
        opts.headers,
        { authorization: opts.authToken ? `Bearer ${opts.authToken}` : '' }
      )
    }
  })

  return new ApolloClient({
    cache: new InMemoryCache(),
    link: authLink.concat(link)
  })
}

exports.createClientImpl = function (opts) {
  return function () {
    return createClientWithoutWebsockets(opts)
  }
}

exports.createSubscriptionClientImpl = function (opts) {
  return function () {
    return createClientWithWebsockets(opts)
  }
}

exports.queryImpl = function (opts) {
  const { gql } = require('@apollo/client/core')

  return function (client) {
    return function (query) {
      return function (onError, onSuccess) {
        try {
          client
            .query({
              query: gql(query),
              errorPolicy: opts.errorPolicy,
              fetchPolicy: opts.fetchPolicy
            })
            .then(onSuccess)
            .catch(onError)
        } catch (err) {
          onError(err)
        }
        return function (cancelError, onCancelerError, onCancelerSuccess) {
          onCancelerSuccess()
        }
      }
    }
  }
}

exports.mutationImpl = function (opts) {
  return function (client) {
    return function (mutation) {
      return function (onError, onSuccess) {
        const { gql } = require('@apollo/client/core')

        try {
          client
            .mutate({
              mutation: gql(mutation),
              errorPolicy: opts.errorPolicy,
              refetchQueries: opts.refetchQueries,
              optimisticResponse: opts.optimisticResponse,
              update: function () {
                if (opts.update){
                  opts.update()
                }
              }
            })
            .then(onSuccess)
            .catch(onError)
        } catch (err) {
          onError(err)
        }
        return function (cancelError, onCancelerError, onCancelerSuccess) {
          onCancelerSuccess()
        }
      }
    }
  }
}

exports.subscriptionImpl = function (opts) {
  return function (client) {
    return function (query) {
      return function (onData) {
        return function () {
          const { gql } = require('@apollo/client/core')

          const subscription = client
            .subscribe({
              query: gql(query),
              errorPolicy: opts.errorPolicy,
              fetchPolicy: opts.fetchPolicy
            })
            .subscribe(
              function (x) { onData(x)() }
            )

          return function () { subscription.unsubscribe() }
        }
      }
    }
  }
}

exports.watchQueryImpl = function (opts) {
  return function (client) {
    return function (query) {
      return function (onData) {
        return function () {
          const { gql } = require('@apollo/client/core')

          const subscription = client
            .watchQuery({
              query: gql(query),
              errorPolicy: opts.errorPolicy,
              fetchPolicy: opts.fetchPolicy
            })
            .subscribe(
              function (x) {
                onData(x)()
              }
            )

          return function () { subscription.unsubscribe() }
        }
      }
    }
  }
}

exports.readQueryImpl = function (client) {
  return function (query) {
    const { gql } = require('@apollo/client/core')
    return function () {
      return client.readQuery({ query: gql(query) })
    }
  }
}

exports.writeQueryImpl = function (client) {
  return function (query) {
    return function (data) {
      const { gql } = require('@apollo/client/core')
      return function () {
        client.writeQuery({
          query: gql(query),
          data: data
        })

        return {}
      }
    }
  }
}

},{"isomorphic-unfetch":"5hM4e","@apollo/client/core":"680Ph","@apollo/client/link/context":"tUArz","@apollo/client/link/ws":"3ZjH3","@apollo/client/utilities":"6w0bE","isomorphic-ws":"Ntu56","subscriptions-transport-ws":"3P7DT"}],"5hM4e":[function(require,module,exports) {
module.exports = self.fetch || (self.fetch = require('unfetch').default || require('unfetch'));

},{"unfetch":"32vSQ"}],"32vSQ":[function(require,module,exports) {
module.exports=function(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return{ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t}),t(a())},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null)})};

},{}],"680Ph":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, '__esModule', {
  value: true
});
function _interopDefault(ex) {
  return ex && typeof ex === 'object' && ('default' in ex) ? ex['default'] : ex;
}
var tslib = require('tslib');
var tsInvariant = require('ts-invariant');
var core = require('../link/core');
var utilities = require('../utilities');
var http = require('../link/http');
var equality = require('@wry/equality');
var errors = require('../errors');
var graphql = require('graphql');
var cache = require('../cache');
var utils = require('../link/utils');
var gql = _interopDefault(require('graphql-tag'));
var version = '3.3.14';
(function (NetworkStatus) {
  NetworkStatus[NetworkStatus["loading"] = 1] = "loading";
  NetworkStatus[NetworkStatus["setVariables"] = 2] = "setVariables";
  NetworkStatus[NetworkStatus["fetchMore"] = 3] = "fetchMore";
  NetworkStatus[NetworkStatus["refetch"] = 4] = "refetch";
  NetworkStatus[NetworkStatus["poll"] = 6] = "poll";
  NetworkStatus[NetworkStatus["ready"] = 7] = "ready";
  NetworkStatus[NetworkStatus["error"] = 8] = "error";
})(exports.NetworkStatus || (exports.NetworkStatus = {}));
function isNetworkRequestInFlight(networkStatus) {
  return networkStatus ? networkStatus < 7 : false;
}
var Reobserver = (function () {
  function Reobserver(observer, options, fetch, shouldFetch) {
    this.observer = observer;
    this.options = options;
    this.fetch = fetch;
    this.shouldFetch = shouldFetch;
  }
  Reobserver.prototype.reobserve = function (newOptions, newNetworkStatus) {
    if (newOptions) {
      this.updateOptions(newOptions);
    } else {
      this.updatePolling();
    }
    var concast = this.fetch(this.options, newNetworkStatus);
    if (this.concast) {
      this.concast.removeObserver(this.observer, true);
    }
    concast.addObserver(this.observer);
    return (this.concast = concast).promise;
  };
  Reobserver.prototype.updateOptions = function (newOptions) {
    Object.assign(this.options, utilities.compact(newOptions));
    this.updatePolling();
    return this;
  };
  Reobserver.prototype.stop = function () {
    if (this.concast) {
      this.concast.removeObserver(this.observer);
      delete this.concast;
    }
    if (this.pollingInfo) {
      clearTimeout(this.pollingInfo.timeout);
      this.options.pollInterval = 0;
      this.updatePolling();
    }
  };
  Reobserver.prototype.updatePolling = function () {
    var _this = this;
    var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;
    if (!pollInterval) {
      if (pollingInfo) {
        clearTimeout(pollingInfo.timeout);
        delete this.pollingInfo;
      }
      return;
    }
    if (pollingInfo && pollingInfo.interval === pollInterval) {
      return;
    }
    "development" === "production" ? tsInvariant.invariant(pollInterval, 20) : tsInvariant.invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');
    if (this.shouldFetch === false) {
      return;
    }
    var info = pollingInfo || (this.pollingInfo = {});
    info.interval = pollInterval;
    var maybeFetch = function () {
      if (_this.pollingInfo) {
        if (_this.shouldFetch && _this.shouldFetch()) {
          _this.reobserve({
            fetchPolicy: "network-only",
            nextFetchPolicy: _this.options.fetchPolicy || "cache-first"
          }, exports.NetworkStatus.poll).then(poll, poll);
        } else {
          poll();
        }
      }
    };
    var poll = function () {
      var info = _this.pollingInfo;
      if (info) {
        clearTimeout(info.timeout);
        info.timeout = setTimeout(maybeFetch, info.interval);
      }
    };
    poll();
  };
  return Reobserver;
})();
var warnedAboutUpdateQuery = false;
var ObservableQuery = (function (_super) {
  tslib.__extends(ObservableQuery, _super);
  function ObservableQuery(_a) {
    var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;
    var _this = _super.call(this, function (observer) {
      return _this.onSubscribe(observer);
    }) || this;
    _this.observers = new Set();
    _this.subscriptions = new Set();
    _this.observer = {
      next: function (result) {
        if (_this.lastError || _this.isDifferentFromLastResult(result)) {
          _this.updateLastResult(result);
          utilities.iterateObserversSafely(_this.observers, 'next', result);
        }
      },
      error: function (error) {
        _this.updateLastResult(tslib.__assign(tslib.__assign({}, _this.lastResult), {
          error: error,
          errors: error.graphQLErrors,
          networkStatus: exports.NetworkStatus.error,
          loading: false
        }));
        utilities.iterateObserversSafely(_this.observers, 'error', _this.lastError = error);
      }
    };
    _this.isTornDown = false;
    _this.options = options;
    _this.queryId = queryManager.generateQueryId();
    var opDef = utilities.getOperationDefinition(options.query);
    _this.queryName = opDef && opDef.name && opDef.name.value;
    _this.queryManager = queryManager;
    _this.queryInfo = queryInfo;
    return _this;
  }
  Object.defineProperty(ObservableQuery.prototype, "variables", {
    get: function () {
      return this.options.variables;
    },
    enumerable: false,
    configurable: true
  });
  ObservableQuery.prototype.result = function () {
    var _this = this;
    return new Promise(function (resolve, reject) {
      var observer = {
        next: function (result) {
          resolve(result);
          _this.observers.delete(observer);
          if (!_this.observers.size) {
            _this.queryManager.removeQuery(_this.queryId);
          }
          setTimeout(function () {
            subscription.unsubscribe();
          }, 0);
        },
        error: reject
      };
      var subscription = _this.subscribe(observer);
    });
  };
  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {
    if (saveAsLastResult === void 0) {
      saveAsLastResult = true;
    }
    var lastResult = this.lastResult;
    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || exports.NetworkStatus.ready;
    var result = tslib.__assign(tslib.__assign({}, lastResult), {
      loading: isNetworkRequestInFlight(networkStatus),
      networkStatus: networkStatus
    });
    if (this.isTornDown) {
      return result;
    }
    var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? 'cache-first' : _a;
    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {
      delete result.partial;
    } else if (!result.data || !this.queryManager.transform(this.options.query).hasForcedResolvers) {
      var diff = this.queryInfo.getDiff();
      result.data = diff.complete || this.options.returnPartialData ? diff.result : void 0;
      if (diff.complete) {
        if (result.networkStatus === exports.NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {
          result.networkStatus = exports.NetworkStatus.ready;
          result.loading = false;
        }
        delete result.partial;
      } else {
        result.partial = true;
      }
    }
    if (saveAsLastResult) {
      this.updateLastResult(result);
    }
    return result;
  };
  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {
    return !equality.equal(this.lastResultSnapshot, newResult);
  };
  ObservableQuery.prototype.getLastResult = function () {
    return this.lastResult;
  };
  ObservableQuery.prototype.getLastError = function () {
    return this.lastError;
  };
  ObservableQuery.prototype.resetLastResults = function () {
    delete this.lastResult;
    delete this.lastResultSnapshot;
    delete this.lastError;
    this.isTornDown = false;
  };
  ObservableQuery.prototype.resetQueryStoreErrors = function () {
    this.queryManager.resetErrors(this.queryId);
  };
  ObservableQuery.prototype.refetch = function (variables) {
    var reobserveOptions = {
      pollInterval: 0
    };
    var fetchPolicy = this.options.fetchPolicy;
    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {
      reobserveOptions.fetchPolicy = 'network-only';
      reobserveOptions.nextFetchPolicy = fetchPolicy || "cache-first";
    }
    if (variables && !equality.equal(this.options.variables, variables)) {
      reobserveOptions.variables = this.options.variables = tslib.__assign(tslib.__assign({}, this.options.variables), variables);
    }
    return this.newReobserver(false).reobserve(reobserveOptions, exports.NetworkStatus.refetch);
  };
  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {
    var _this = this;
    var combinedOptions = tslib.__assign(tslib.__assign({}, fetchMoreOptions.query ? fetchMoreOptions : tslib.__assign(tslib.__assign(tslib.__assign({}, this.options), fetchMoreOptions), {
      variables: tslib.__assign(tslib.__assign({}, this.options.variables), fetchMoreOptions.variables)
    })), {
      fetchPolicy: "no-cache"
    });
    var qid = this.queryManager.generateQueryId();
    if (combinedOptions.notifyOnNetworkStatusChange) {
      this.queryInfo.networkStatus = exports.NetworkStatus.fetchMore;
      this.observe();
    }
    return this.queryManager.fetchQuery(qid, combinedOptions, exports.NetworkStatus.fetchMore).then(function (fetchMoreResult) {
      var data = fetchMoreResult.data;
      var updateQuery = fetchMoreOptions.updateQuery;
      if (updateQuery) {
        if ("development" !== "production" && !warnedAboutUpdateQuery) {
          "development" === "production" || tsInvariant.invariant.warn("The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.");
          warnedAboutUpdateQuery = true;
        }
        _this.updateQuery(function (previous) {
          return updateQuery(previous, {
            fetchMoreResult: data,
            variables: combinedOptions.variables
          });
        });
      } else {
        _this.queryManager.cache.writeQuery({
          query: combinedOptions.query,
          variables: combinedOptions.variables,
          data: data
        });
      }
      return fetchMoreResult;
    }).finally(function () {
      _this.queryManager.stopQuery(qid);
      _this.reobserve();
    });
  };
  ObservableQuery.prototype.subscribeToMore = function (options) {
    var _this = this;
    var subscription = this.queryManager.startGraphQLSubscription({
      query: options.document,
      variables: options.variables,
      context: options.context
    }).subscribe({
      next: function (subscriptionData) {
        var updateQuery = options.updateQuery;
        if (updateQuery) {
          _this.updateQuery(function (previous, _a) {
            var variables = _a.variables;
            return updateQuery(previous, {
              subscriptionData: subscriptionData,
              variables: variables
            });
          });
        }
      },
      error: function (err) {
        if (options.onError) {
          options.onError(err);
          return;
        }
        "development" === "production" || tsInvariant.invariant.error('Unhandled GraphQL subscription error', err);
      }
    });
    this.subscriptions.add(subscription);
    return function () {
      if (_this.subscriptions.delete(subscription)) {
        subscription.unsubscribe();
      }
    };
  };
  ObservableQuery.prototype.setOptions = function (newOptions) {
    return this.reobserve(newOptions);
  };
  ObservableQuery.prototype.setVariables = function (variables) {
    if (equality.equal(this.variables, variables)) {
      return this.observers.size ? this.result() : Promise.resolve();
    }
    this.options.variables = variables;
    if (!this.observers.size) {
      return Promise.resolve();
    }
    var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? 'cache-first' : _a;
    var reobserveOptions = {
      fetchPolicy: fetchPolicy,
      variables: variables
    };
    if (fetchPolicy !== 'cache-first' && fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {
      reobserveOptions.fetchPolicy = 'cache-and-network';
      reobserveOptions.nextFetchPolicy = fetchPolicy;
    }
    return this.reobserve(reobserveOptions, exports.NetworkStatus.setVariables);
  };
  ObservableQuery.prototype.updateQuery = function (mapFn) {
    var _a;
    var queryManager = this.queryManager;
    var result = queryManager.cache.diff({
      query: this.options.query,
      variables: this.variables,
      previousResult: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,
      returnPartialData: true,
      optimistic: false
    }).result;
    var newResult = mapFn(result, {
      variables: this.variables
    });
    if (newResult) {
      queryManager.cache.writeQuery({
        query: this.options.query,
        data: newResult,
        variables: this.variables
      });
      queryManager.broadcastQueries();
    }
  };
  ObservableQuery.prototype.startPolling = function (pollInterval) {
    this.getReobserver().updateOptions({
      pollInterval: pollInterval
    });
  };
  ObservableQuery.prototype.stopPolling = function () {
    if (this.reobserver) {
      this.reobserver.updateOptions({
        pollInterval: 0
      });
    }
  };
  ObservableQuery.prototype.updateLastResult = function (newResult) {
    var previousResult = this.lastResult;
    this.lastResult = newResult;
    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : utilities.cloneDeep(newResult);
    if (!utilities.isNonEmptyArray(newResult.errors)) {
      delete this.lastError;
    }
    return previousResult;
  };
  ObservableQuery.prototype.onSubscribe = function (observer) {
    var _this = this;
    if (observer === this.observer) {
      return function () {};
    }
    try {
      var subObserver = observer._subscription._observer;
      if (subObserver && !subObserver.error) {
        subObserver.error = defaultSubscriptionObserverErrorCallback;
      }
    } catch (_a) {}
    var first = !this.observers.size;
    this.observers.add(observer);
    if (this.lastError) {
      observer.error && observer.error(this.lastError);
    } else if (this.lastResult) {
      observer.next && observer.next(this.lastResult);
    }
    if (first) {
      this.reobserve().catch(function (_) {});
    }
    return function () {
      if (_this.observers.delete(observer) && !_this.observers.size) {
        _this.tearDownQuery();
      }
    };
  };
  ObservableQuery.prototype.getReobserver = function () {
    return this.reobserver || (this.reobserver = this.newReobserver(true));
  };
  ObservableQuery.prototype.newReobserver = function (shareOptions) {
    var _this = this;
    var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;
    queryManager.setObservableQuery(this);
    return new Reobserver(this.observer, shareOptions ? this.options : tslib.__assign({}, this.options), function (currentOptions, newNetworkStatus) {
      queryManager.setObservableQuery(_this);
      return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);
    }, !queryManager.ssrMode && (function () {
      return !isNetworkRequestInFlight(_this.queryInfo.networkStatus);
    }));
  };
  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {
    this.isTornDown = false;
    return this.getReobserver().reobserve(newOptions, newNetworkStatus);
  };
  ObservableQuery.prototype.observe = function () {
    this.observer.next(this.getCurrentResult(false));
  };
  ObservableQuery.prototype.hasObservers = function () {
    return this.observers.size > 0;
  };
  ObservableQuery.prototype.tearDownQuery = function () {
    if (this.isTornDown) return;
    if (this.reobserver) {
      this.reobserver.stop();
      delete this.reobserver;
    }
    this.subscriptions.forEach(function (sub) {
      return sub.unsubscribe();
    });
    this.subscriptions.clear();
    this.queryManager.stopQuery(this.queryId);
    this.observers.clear();
    this.isTornDown = true;
  };
  return ObservableQuery;
})(utilities.Observable);
utilities.fixObservableSubclass(ObservableQuery);
function defaultSubscriptionObserverErrorCallback(error) {
  "development" === "production" || tsInvariant.invariant.error('Unhandled error', error.message, error.stack);
}
var LocalState = (function () {
  function LocalState(_a) {
    var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;
    this.cache = cache;
    if (client) {
      this.client = client;
    }
    if (resolvers) {
      this.addResolvers(resolvers);
    }
    if (fragmentMatcher) {
      this.setFragmentMatcher(fragmentMatcher);
    }
  }
  LocalState.prototype.addResolvers = function (resolvers) {
    var _this = this;
    this.resolvers = this.resolvers || ({});
    if (Array.isArray(resolvers)) {
      resolvers.forEach(function (resolverGroup) {
        _this.resolvers = utilities.mergeDeep(_this.resolvers, resolverGroup);
      });
    } else {
      this.resolvers = utilities.mergeDeep(this.resolvers, resolvers);
    }
  };
  LocalState.prototype.setResolvers = function (resolvers) {
    this.resolvers = {};
    this.addResolvers(resolvers);
  };
  LocalState.prototype.getResolvers = function () {
    return this.resolvers || ({});
  };
  LocalState.prototype.runResolvers = function (_a) {
    var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_c) {
        if (document) {
          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {
            return tslib.__assign(tslib.__assign({}, remoteResult), {
              data: localResult.result
            });
          })];
        }
        return [2, remoteResult];
      });
    });
  };
  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {
    this.fragmentMatcher = fragmentMatcher;
  };
  LocalState.prototype.getFragmentMatcher = function () {
    return this.fragmentMatcher;
  };
  LocalState.prototype.clientQuery = function (document) {
    if (utilities.hasDirectives(['client'], document)) {
      if (this.resolvers) {
        return document;
      }
    }
    return null;
  };
  LocalState.prototype.serverQuery = function (document) {
    return utilities.removeClientSetsFromDocument(document);
  };
  LocalState.prototype.prepareContext = function (context) {
    var cache = this.cache;
    return tslib.__assign(tslib.__assign({}, context), {
      cache: cache,
      getCacheKey: function (obj) {
        return cache.identify(obj);
      }
    });
  };
  LocalState.prototype.addExportedVariables = function (document, variables, context) {
    if (variables === void 0) {
      variables = {};
    }
    if (context === void 0) {
      context = {};
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      return tslib.__generator(this, function (_a) {
        if (document) {
          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || ({}), this.prepareContext(context), variables).then(function (data) {
            return tslib.__assign(tslib.__assign({}, variables), data.exportedVariables);
          })];
        }
        return [2, tslib.__assign({}, variables)];
      });
    });
  };
  LocalState.prototype.shouldForceResolvers = function (document) {
    var forceResolvers = false;
    graphql.visit(document, {
      Directive: {
        enter: function (node) {
          if (node.name.value === 'client' && node.arguments) {
            forceResolvers = node.arguments.some(function (arg) {
              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;
            });
            if (forceResolvers) {
              return graphql.BREAK;
            }
          }
        }
      }
    });
    return forceResolvers;
  };
  LocalState.prototype.buildRootValueFromCache = function (document, variables) {
    return this.cache.diff({
      query: utilities.buildQueryFromSelectionSet(document),
      variables: variables,
      returnPartialData: true,
      optimistic: false
    }).result;
  };
  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
    if (context === void 0) {
      context = {};
    }
    if (variables === void 0) {
      variables = {};
    }
    if (fragmentMatcher === void 0) {
      fragmentMatcher = function () {
        return true;
      };
    }
    if (onlyRunForcedResolvers === void 0) {
      onlyRunForcedResolvers = false;
    }
    return tslib.__awaiter(this, void 0, void 0, function () {
      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;
      return tslib.__generator(this, function (_b) {
        mainDefinition = utilities.getMainDefinition(document);
        fragments = utilities.getFragmentDefinitions(document);
        fragmentMap = utilities.createFragmentMap(fragments);
        definitionOperation = mainDefinition.operation;
        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';
        (_a = this, cache = _a.cache, client = _a.client);
        execContext = {
          fragmentMap: fragmentMap,
          context: tslib.__assign(tslib.__assign({}, context), {
            cache: cache,
            client: client
          }),
          variables: variables,
          fragmentMatcher: fragmentMatcher,
          defaultOperationType: defaultOperationType,
          exportedVariables: {},
          onlyRunForcedResolvers: onlyRunForcedResolvers
        };
        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {
          return {
            result: result,
            exportedVariables: execContext.exportedVariables
          };
        })];
      });
    });
  };
  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var fragmentMap, context, variables, resultsToMerge, execute;
      var _this = this;
      return tslib.__generator(this, function (_a) {
        (fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables);
        resultsToMerge = [rootValue];
        execute = function (selection) {
          return tslib.__awaiter(_this, void 0, void 0, function () {
            var fragment, typeCondition;
            return tslib.__generator(this, function (_a) {
              if (!utilities.shouldInclude(selection, variables)) {
                return [2];
              }
              if (utilities.isField(selection)) {
                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {
                  var _a;
                  if (typeof fieldResult !== 'undefined') {
                    resultsToMerge.push((_a = {}, _a[utilities.resultKeyNameFromField(selection)] = fieldResult, _a));
                  }
                })];
              }
              if (utilities.isInlineFragment(selection)) {
                fragment = selection;
              } else {
                fragment = fragmentMap[selection.name.value];
                "development" === "production" ? tsInvariant.invariant(fragment, 11) : tsInvariant.invariant(fragment, "No fragment named " + selection.name.value);
              }
              if (fragment && fragment.typeCondition) {
                typeCondition = fragment.typeCondition.name.value;
                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {
                    resultsToMerge.push(fragmentResult);
                  })];
                }
              }
              return [2];
            });
          });
        };
        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {
          return utilities.mergeDeepArray(resultsToMerge);
        })];
      });
    });
  };
  LocalState.prototype.resolveField = function (field, rootValue, execContext) {
    return tslib.__awaiter(this, void 0, void 0, function () {
      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
      var _this = this;
      return tslib.__generator(this, function (_a) {
        variables = execContext.variables;
        fieldName = field.name.value;
        aliasedFieldName = utilities.resultKeyNameFromField(field);
        aliasUsed = fieldName !== aliasedFieldName;
        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
        resultPromise = Promise.resolve(defaultResult);
        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
          resolverType = rootValue.__typename || execContext.defaultOperationType;
          resolverMap = this.resolvers && this.resolvers[resolverType];
          if (resolverMap) {
            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
            if (resolve) {
              resultPromise = Promise.resolve(cache.cacheSlot.withValue(this.cache, resolve, [rootValue, utilities.argumentsObjectFromField(field, variables), execContext.context, {
                field: field,
                fragmentMap: execContext.fragmentMap
              }]));
            }
          }
        }
        return [2, resultPromise.then(function (result) {
          if (result === void 0) {
            result = defaultResult;
          }
          if (field.directives) {
            field.directives.forEach(function (directive) {
              if (directive.name.value === 'export' && directive.arguments) {
                directive.arguments.forEach(function (arg) {
                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {
                    execContext.exportedVariables[arg.value.value] = result;
                  }
                });
              }
            });
          }
          if (!field.selectionSet) {
            return result;
          }
          if (result == null) {
            return result;
          }
          if (Array.isArray(result)) {
            return _this.resolveSubSelectedArray(field, result, execContext);
          }
          if (field.selectionSet) {
            return _this.resolveSelectionSet(field.selectionSet, result, execContext);
          }
        })];
      });
    });
  };
  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {
    var _this = this;
    return Promise.all(result.map(function (item) {
      if (item === null) {
        return null;
      }
      if (Array.isArray(item)) {
        return _this.resolveSubSelectedArray(field, item, execContext);
      }
      if (field.selectionSet) {
        return _this.resolveSelectionSet(field.selectionSet, item, execContext);
      }
    }));
  };
  return LocalState;
})();
var destructiveMethodCounts = new (utilities.canUseWeakMap ? WeakMap : Map)();
function wrapDestructiveCacheMethod(cache, methodName) {
  var original = cache[methodName];
  if (typeof original === "function") {
    cache[methodName] = function () {
      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);
      return original.apply(this, arguments);
    };
  }
}
function cancelNotifyTimeout(info) {
  if (info["notifyTimeout"]) {
    clearTimeout(info["notifyTimeout"]);
    info["notifyTimeout"] = void 0;
  }
}
var QueryInfo = (function () {
  function QueryInfo(cache) {
    this.cache = cache;
    this.listeners = new Set();
    this.document = null;
    this.lastRequestId = 1;
    this.subscriptions = new Set();
    this.stopped = false;
    this.dirty = false;
    this.diff = null;
    this.observableQuery = null;
    if (!destructiveMethodCounts.has(cache)) {
      destructiveMethodCounts.set(cache, 0);
      wrapDestructiveCacheMethod(cache, "evict");
      wrapDestructiveCacheMethod(cache, "modify");
      wrapDestructiveCacheMethod(cache, "reset");
    }
  }
  QueryInfo.prototype.init = function (query) {
    var networkStatus = query.networkStatus || exports.NetworkStatus.loading;
    if (this.variables && this.networkStatus !== exports.NetworkStatus.loading && !equality.equal(this.variables, query.variables)) {
      networkStatus = exports.NetworkStatus.setVariables;
    }
    if (!equality.equal(query.variables, this.variables)) {
      this.diff = null;
    }
    Object.assign(this, {
      document: query.document,
      variables: query.variables,
      networkError: null,
      graphQLErrors: this.graphQLErrors || [],
      networkStatus: networkStatus
    });
    if (query.observableQuery) {
      this.setObservableQuery(query.observableQuery);
    }
    if (query.lastRequestId) {
      this.lastRequestId = query.lastRequestId;
    }
    return this;
  };
  QueryInfo.prototype.reset = function () {
    cancelNotifyTimeout(this);
    this.diff = null;
    this.dirty = false;
  };
  QueryInfo.prototype.getDiff = function (variables) {
    if (variables === void 0) {
      variables = this.variables;
    }
    if (this.diff && equality.equal(variables, this.variables)) {
      return this.diff;
    }
    this.updateWatch(this.variables = variables);
    return this.diff = this.cache.diff({
      query: this.document,
      variables: variables,
      returnPartialData: true,
      optimistic: true
    });
  };
  QueryInfo.prototype.setDiff = function (diff) {
    var _this = this;
    var oldDiff = this.diff;
    this.diff = diff;
    if (!this.dirty && (diff && diff.result) !== (oldDiff && oldDiff.result)) {
      this.dirty = true;
      if (!this.notifyTimeout) {
        this.notifyTimeout = setTimeout(function () {
          return _this.notify();
        }, 0);
      }
    }
  };
  QueryInfo.prototype.setObservableQuery = function (oq) {
    var _this = this;
    if (oq === this.observableQuery) return;
    if (this.oqListener) {
      this.listeners.delete(this.oqListener);
    }
    this.observableQuery = oq;
    if (oq) {
      oq["queryInfo"] = this;
      this.listeners.add(this.oqListener = function () {
        if (_this.getDiff().fromOptimisticTransaction) {
          oq["observe"]();
        } else {
          oq.reobserve();
        }
      });
    } else {
      delete this.oqListener;
    }
  };
  QueryInfo.prototype.notify = function () {
    var _this = this;
    cancelNotifyTimeout(this);
    if (this.shouldNotify()) {
      this.listeners.forEach(function (listener) {
        return listener(_this);
      });
    }
    this.dirty = false;
  };
  QueryInfo.prototype.shouldNotify = function () {
    if (!this.dirty || !this.listeners.size) {
      return false;
    }
    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {
      var fetchPolicy = this.observableQuery.options.fetchPolicy;
      if (fetchPolicy !== "cache-only" && fetchPolicy !== "cache-and-network") {
        return false;
      }
    }
    return true;
  };
  QueryInfo.prototype.stop = function () {
    if (!this.stopped) {
      this.stopped = true;
      this.reset();
      this.cancel();
      delete this.cancel;
      this.subscriptions.forEach(function (sub) {
        return sub.unsubscribe();
      });
      var oq = this.observableQuery;
      if (oq) oq.stopPolling();
    }
  };
  QueryInfo.prototype.cancel = function () {};
  QueryInfo.prototype.updateWatch = function (variables) {
    var _this = this;
    if (variables === void 0) {
      variables = this.variables;
    }
    var oq = this.observableQuery;
    if (oq && oq.options.fetchPolicy === "no-cache") {
      return;
    }
    if (!this.lastWatch || this.lastWatch.query !== this.document || !equality.equal(variables, this.lastWatch.variables)) {
      this.cancel();
      this.cancel = this.cache.watch(this.lastWatch = {
        query: this.document,
        variables: variables,
        optimistic: true,
        callback: function (diff) {
          return _this.setDiff(diff);
        }
      });
    }
  };
  QueryInfo.prototype.shouldWrite = function (result, variables) {
    var lastWrite = this.lastWrite;
    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equality.equal(variables, lastWrite.variables) && equality.equal(result.data, lastWrite.result.data));
  };
  QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {
    var _this = this;
    this.graphQLErrors = utilities.isNonEmptyArray(result.errors) ? result.errors : [];
    this.reset();
    if (options.fetchPolicy === 'no-cache') {
      this.diff = {
        result: result.data,
        complete: true
      };
    } else if (!this.stopped && allowCacheWrite) {
      if (shouldWriteResult(result, options.errorPolicy)) {
        this.cache.performTransaction(function (cache) {
          if (_this.shouldWrite(result, options.variables)) {
            cache.writeQuery({
              query: _this.document,
              data: result.data,
              variables: options.variables
            });
            _this.lastWrite = {
              result: result,
              variables: options.variables,
              dmCount: destructiveMethodCounts.get(_this.cache)
            };
          } else {
            if (_this.diff && _this.diff.complete) {
              result.data = _this.diff.result;
              return;
            }
          }
          var diff = cache.diff({
            query: _this.document,
            variables: options.variables,
            returnPartialData: true,
            optimistic: true
          });
          if (!_this.stopped) {
            _this.updateWatch(options.variables);
          }
          _this.diff = diff;
          if (diff.complete) {
            result.data = diff.result;
          }
        });
      } else {
        this.lastWrite = void 0;
      }
    }
  };
  QueryInfo.prototype.markReady = function () {
    this.networkError = null;
    return this.networkStatus = exports.NetworkStatus.ready;
  };
  QueryInfo.prototype.markError = function (error) {
    this.networkStatus = exports.NetworkStatus.error;
    this.lastWrite = void 0;
    this.reset();
    if (error.graphQLErrors) {
      this.graphQLErrors = error.graphQLErrors;
    }
    if (error.networkError) {
      this.networkError = error.networkError;
    }
    return error;
  };
  return QueryInfo;
})();
function shouldWriteResult(result, errorPolicy) {
  if (errorPolicy === void 0) {
    errorPolicy = "none";
  }
  var ignoreErrors = errorPolicy === "ignore" || errorPolicy === "all";
  var writeWithErrors = !utilities.graphQLResultHasError(result);
  if (!writeWithErrors && ignoreErrors && result.data) {
    writeWithErrors = true;
  }
  return writeWithErrors;
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
var QueryManager = (function () {
  function QueryManager(_a) {
    var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;
    this.clientAwareness = {};
    this.queries = new Map();
    this.fetchCancelFns = new Map();
    this.transformCache = new (utilities.canUseWeakMap ? WeakMap : Map)();
    this.queryIdCounter = 1;
    this.requestIdCounter = 1;
    this.mutationIdCounter = 1;
    this.inFlightLinkObservables = new Map();
    this.cache = cache;
    this.link = link;
    this.queryDeduplication = queryDeduplication;
    this.clientAwareness = clientAwareness;
    this.localState = localState || new LocalState({
      cache: cache
    });
    this.ssrMode = ssrMode;
    this.assumeImmutableResults = !!assumeImmutableResults;
    if (this.onBroadcast = onBroadcast) {
      this.mutationStore = Object.create(null);
    }
  }
  QueryManager.prototype.stop = function () {
    var _this = this;
    this.queries.forEach(function (_info, queryId) {
      _this.stopQueryNoBroadcast(queryId);
    });
    this.cancelPendingFetches("development" === "production" ? new tsInvariant.InvariantError(12) : new tsInvariant.InvariantError('QueryManager stopped while query was in flight'));
  };
  QueryManager.prototype.cancelPendingFetches = function (error) {
    this.fetchCancelFns.forEach(function (cancel) {
      return cancel(error);
    });
    this.fetchCancelFns.clear();
  };
  QueryManager.prototype.mutate = function (_a) {
    var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;
    return tslib.__awaiter(this, void 0, void 0, function () {
      var mutationId, mutationStoreValue, self;
      return tslib.__generator(this, function (_f) {
        switch (_f.label) {
          case 0:
            "development" === "production" ? tsInvariant.invariant(mutation, 13) : tsInvariant.invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');
            "development" === "production" ? tsInvariant.invariant(!fetchPolicy || fetchPolicy === 'no-cache', 14) : tsInvariant.invariant(!fetchPolicy || fetchPolicy === 'no-cache', "Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.");
            mutationId = this.generateMutationId();
            mutation = this.transform(mutation).document;
            variables = this.getVariables(mutation, variables);
            if (!this.transform(mutation).hasClientExports) return [3, 2];
            return [4, this.localState.addExportedVariables(mutation, variables, context)];
          case 1:
            variables = _f.sent();
            _f.label = 2;
          case 2:
            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {
              mutation: mutation,
              variables: variables,
              loading: true,
              error: null
            });
            if (optimisticResponse) {
              this.markMutationOptimistic(optimisticResponse, {
                mutationId: mutationId,
                document: mutation,
                variables: variables,
                errorPolicy: errorPolicy,
                updateQueries: updateQueries,
                update: updateWithProxyFn
              });
            }
            this.broadcastQueries();
            self = this;
            return [2, new Promise(function (resolve, reject) {
              var storeResult;
              var error;
              self.getObservableFromLink(mutation, tslib.__assign(tslib.__assign({}, context), {
                optimisticResponse: optimisticResponse
              }), variables, false).subscribe({
                next: function (result) {
                  if (utilities.graphQLResultHasError(result) && errorPolicy === 'none') {
                    error = new errors.ApolloError({
                      graphQLErrors: result.errors
                    });
                    return;
                  }
                  if (mutationStoreValue) {
                    mutationStoreValue.loading = false;
                    mutationStoreValue.error = null;
                  }
                  if (fetchPolicy !== 'no-cache') {
                    try {
                      self.markMutationResult({
                        mutationId: mutationId,
                        result: result,
                        document: mutation,
                        variables: variables,
                        errorPolicy: errorPolicy,
                        updateQueries: updateQueries,
                        update: updateWithProxyFn
                      });
                    } catch (e) {
                      error = new errors.ApolloError({
                        networkError: e
                      });
                      return;
                    }
                  }
                  storeResult = result;
                },
                error: function (err) {
                  if (mutationStoreValue) {
                    mutationStoreValue.loading = false;
                    mutationStoreValue.error = err;
                  }
                  if (optimisticResponse) {
                    self.cache.removeOptimistic(mutationId);
                  }
                  self.broadcastQueries();
                  reject(new errors.ApolloError({
                    networkError: err
                  }));
                },
                complete: function () {
                  if (error && mutationStoreValue) {
                    mutationStoreValue.loading = false;
                    mutationStoreValue.error = error;
                  }
                  if (optimisticResponse) {
                    self.cache.removeOptimistic(mutationId);
                  }
                  self.broadcastQueries();
                  if (error) {
                    reject(error);
                    return;
                  }
                  if (typeof refetchQueries === 'function') {
                    refetchQueries = refetchQueries(storeResult);
                  }
                  var refetchQueryPromises = [];
                  if (utilities.isNonEmptyArray(refetchQueries)) {
                    refetchQueries.forEach(function (refetchQuery) {
                      if (typeof refetchQuery === 'string') {
                        self.queries.forEach(function (_a) {
                          var observableQuery = _a.observableQuery;
                          if (observableQuery && observableQuery.hasObservers() && observableQuery.queryName === refetchQuery) {
                            refetchQueryPromises.push(observableQuery.refetch());
                          }
                        });
                      } else {
                        var queryOptions = {
                          query: refetchQuery.query,
                          variables: refetchQuery.variables,
                          fetchPolicy: 'network-only'
                        };
                        if (refetchQuery.context) {
                          queryOptions.context = refetchQuery.context;
                        }
                        refetchQueryPromises.push(self.query(queryOptions));
                      }
                    });
                  }
                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {
                    if (errorPolicy === 'ignore' && storeResult && utilities.graphQLResultHasError(storeResult)) {
                      delete storeResult.errors;
                    }
                    resolve(storeResult);
                  }, reject);
                }
              });
            })];
        }
      });
    });
  };
  QueryManager.prototype.markMutationResult = function (mutation, cache) {
    var _this = this;
    if (cache === void 0) {
      cache = this.cache;
    }
    if (shouldWriteResult(mutation.result, mutation.errorPolicy)) {
      var cacheWrites_1 = [{
        result: mutation.result.data,
        dataId: 'ROOT_MUTATION',
        query: mutation.document,
        variables: mutation.variables
      }];
      var updateQueries_1 = mutation.updateQueries;
      if (updateQueries_1) {
        this.queries.forEach(function (_a, queryId) {
          var observableQuery = _a.observableQuery;
          var queryName = observableQuery && observableQuery.queryName;
          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {
            return;
          }
          var updater = updateQueries_1[queryName];
          var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;
          var _c = cache.diff({
            query: document,
            variables: variables,
            returnPartialData: true,
            optimistic: false
          }), currentQueryResult = _c.result, complete = _c.complete;
          if (complete && currentQueryResult) {
            var nextQueryResult = updater(currentQueryResult, {
              mutationResult: mutation.result,
              queryName: document && utilities.getOperationName(document) || void 0,
              queryVariables: variables
            });
            if (nextQueryResult) {
              cacheWrites_1.push({
                result: nextQueryResult,
                dataId: 'ROOT_QUERY',
                query: document,
                variables: variables
              });
            }
          }
        });
      }
      cache.performTransaction(function (c) {
        cacheWrites_1.forEach(function (write) {
          return c.write(write);
        });
        var update = mutation.update;
        if (update) {
          update(c, mutation.result);
        }
      }, null);
    }
  };
  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {
    var _this = this;
    var data = typeof optimisticResponse === "function" ? optimisticResponse(mutation.variables) : optimisticResponse;
    return this.cache.recordOptimisticTransaction(function (cache) {
      try {
        _this.markMutationResult(tslib.__assign(tslib.__assign({}, mutation), {
          result: {
            data: data
          }
        }), cache);
      } catch (error) {
        "development" === "production" || tsInvariant.invariant.error(error);
      }
    }, mutation.mutationId);
  };
  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {
    return this.fetchQueryObservable(queryId, options, networkStatus).promise;
  };
  QueryManager.prototype.getQueryStore = function () {
    var store = Object.create(null);
    this.queries.forEach(function (info, queryId) {
      store[queryId] = {
        variables: info.variables,
        networkStatus: info.networkStatus,
        networkError: info.networkError,
        graphQLErrors: info.graphQLErrors
      };
    });
    return store;
  };
  QueryManager.prototype.resetErrors = function (queryId) {
    var queryInfo = this.queries.get(queryId);
    if (queryInfo) {
      queryInfo.networkError = undefined;
      queryInfo.graphQLErrors = [];
    }
  };
  QueryManager.prototype.transform = function (document) {
    var transformCache = this.transformCache;
    if (!transformCache.has(document)) {
      var transformed = this.cache.transformDocument(document);
      var forLink = utilities.removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));
      var clientQuery = this.localState.clientQuery(transformed);
      var serverQuery = forLink && this.localState.serverQuery(forLink);
      var cacheEntry_1 = {
        document: transformed,
        hasClientExports: utilities.hasClientExports(transformed),
        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
        clientQuery: clientQuery,
        serverQuery: serverQuery,
        defaultVars: utilities.getDefaultValues(utilities.getOperationDefinition(transformed))
      };
      var add = function (doc) {
        if (doc && !transformCache.has(doc)) {
          transformCache.set(doc, cacheEntry_1);
        }
      };
      add(document);
      add(transformed);
      add(clientQuery);
      add(serverQuery);
    }
    return transformCache.get(document);
  };
  QueryManager.prototype.getVariables = function (document, variables) {
    return tslib.__assign(tslib.__assign({}, this.transform(document).defaultVars), variables);
  };
  QueryManager.prototype.watchQuery = function (options) {
    options = tslib.__assign(tslib.__assign({}, options), {
      variables: this.getVariables(options.query, options.variables)
    });
    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {
      options.notifyOnNetworkStatusChange = false;
    }
    var queryInfo = new QueryInfo(this.cache);
    var observable = new ObservableQuery({
      queryManager: this,
      queryInfo: queryInfo,
      options: options
    });
    this.queries.set(observable.queryId, queryInfo);
    queryInfo.init({
      document: options.query,
      observableQuery: observable,
      variables: options.variables
    });
    return observable;
  };
  QueryManager.prototype.query = function (options) {
    var _this = this;
    "development" === "production" ? tsInvariant.invariant(options.query, 15) : tsInvariant.invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');
    "development" === "production" ? tsInvariant.invariant(options.query.kind === 'Document', 16) : tsInvariant.invariant(options.query.kind === 'Document', 'You must wrap the query string in a "gql" tag.');
    "development" === "production" ? tsInvariant.invariant(!options.returnPartialData, 17) : tsInvariant.invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');
    "development" === "production" ? tsInvariant.invariant(!options.pollInterval, 18) : tsInvariant.invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');
    var queryId = this.generateQueryId();
    return this.fetchQuery(queryId, options).finally(function () {
      return _this.stopQuery(queryId);
    });
  };
  QueryManager.prototype.generateQueryId = function () {
    return String(this.queryIdCounter++);
  };
  QueryManager.prototype.generateRequestId = function () {
    return this.requestIdCounter++;
  };
  QueryManager.prototype.generateMutationId = function () {
    return String(this.mutationIdCounter++);
  };
  QueryManager.prototype.stopQueryInStore = function (queryId) {
    this.stopQueryInStoreNoBroadcast(queryId);
    this.broadcastQueries();
  };
  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {
    var queryInfo = this.queries.get(queryId);
    if (queryInfo) queryInfo.stop();
  };
  QueryManager.prototype.clearStore = function () {
    this.cancelPendingFetches("development" === "production" ? new tsInvariant.InvariantError(19) : new tsInvariant.InvariantError('Store reset while query was in flight (not completed in link chain)'));
    this.queries.forEach(function (queryInfo) {
      if (queryInfo.observableQuery) {
        queryInfo.networkStatus = exports.NetworkStatus.loading;
      } else {
        queryInfo.stop();
      }
    });
    if (this.mutationStore) {
      this.mutationStore = Object.create(null);
    }
    return this.cache.reset();
  };
  QueryManager.prototype.resetStore = function () {
    var _this = this;
    return this.clearStore().then(function () {
      return _this.reFetchObservableQueries();
    });
  };
  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {
    var _this = this;
    if (includeStandby === void 0) {
      includeStandby = false;
    }
    var observableQueryPromises = [];
    this.queries.forEach(function (_a, queryId) {
      var observableQuery = _a.observableQuery;
      if (observableQuery && observableQuery.hasObservers()) {
        var fetchPolicy = observableQuery.options.fetchPolicy;
        observableQuery.resetLastResults();
        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {
          observableQueryPromises.push(observableQuery.refetch());
        }
        _this.getQuery(queryId).setDiff(null);
      }
    });
    this.broadcastQueries();
    return Promise.all(observableQueryPromises);
  };
  QueryManager.prototype.setObservableQuery = function (observableQuery) {
    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
  };
  QueryManager.prototype.startGraphQLSubscription = function (_a) {
    var _this = this;
    var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;
    query = this.transform(query).document;
    variables = this.getVariables(query, variables);
    var makeObservable = function (variables) {
      return _this.getObservableFromLink(query, context, variables, false).map(function (result) {
        if (fetchPolicy !== 'no-cache') {
          if (shouldWriteResult(result, errorPolicy)) {
            _this.cache.write({
              query: query,
              result: result.data,
              dataId: 'ROOT_SUBSCRIPTION',
              variables: variables
            });
          }
          _this.broadcastQueries();
        }
        if (utilities.graphQLResultHasError(result)) {
          throw new errors.ApolloError({
            graphQLErrors: result.errors
          });
        }
        return result;
      });
    };
    if (this.transform(query).hasClientExports) {
      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);
      return new utilities.Observable(function (observer) {
        var sub = null;
        observablePromise_1.then(function (observable) {
          return sub = observable.subscribe(observer);
        }, observer.error);
        return function () {
          return sub && sub.unsubscribe();
        };
      });
    }
    return makeObservable(variables);
  };
  QueryManager.prototype.stopQuery = function (queryId) {
    this.stopQueryNoBroadcast(queryId);
    this.broadcastQueries();
  };
  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {
    this.stopQueryInStoreNoBroadcast(queryId);
    this.removeQuery(queryId);
  };
  QueryManager.prototype.removeQuery = function (queryId) {
    this.fetchCancelFns.delete(queryId);
    this.getQuery(queryId).stop();
    this.queries.delete(queryId);
  };
  QueryManager.prototype.broadcastQueries = function () {
    if (this.onBroadcast) this.onBroadcast();
    this.queries.forEach(function (info) {
      return info.notify();
    });
  };
  QueryManager.prototype.getLocalState = function () {
    return this.localState;
  };
  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {
    var _this = this;
    var _a;
    if (deduplication === void 0) {
      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;
    }
    var observable;
    var serverQuery = this.transform(query).serverQuery;
    if (serverQuery) {
      var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;
      var operation = {
        query: serverQuery,
        variables: variables,
        operationName: utilities.getOperationName(serverQuery) || void 0,
        context: this.prepareContext(tslib.__assign(tslib.__assign({}, context), {
          forceFetch: !deduplication
        }))
      };
      context = operation.context;
      if (deduplication) {
        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
        inFlightLinkObservables_1.set(serverQuery, byVariables_1);
        var varJson_1 = JSON.stringify(variables);
        observable = byVariables_1.get(varJson_1);
        if (!observable) {
          var concast = new utilities.Concast([core.execute(link, operation)]);
          byVariables_1.set(varJson_1, observable = concast);
          concast.cleanup(function () {
            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {
              inFlightLinkObservables_1.delete(serverQuery);
            }
          });
        }
      } else {
        observable = new utilities.Concast([core.execute(link, operation)]);
      }
    } else {
      observable = new utilities.Concast([utilities.Observable.of({
        data: {}
      })]);
      context = this.prepareContext(context);
    }
    var clientQuery = this.transform(query).clientQuery;
    if (clientQuery) {
      observable = utilities.asyncMap(observable, function (result) {
        return _this.localState.runResolvers({
          document: clientQuery,
          remoteResult: result,
          context: context,
          variables: variables
        });
      });
    }
    return observable;
  };
  QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {
    var lastRequestId = queryInfo.lastRequestId;
    return utilities.asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {
      var hasErrors = utilities.isNonEmptyArray(result.errors);
      if (lastRequestId >= queryInfo.lastRequestId) {
        if (hasErrors && options.errorPolicy === "none") {
          throw queryInfo.markError(new errors.ApolloError({
            graphQLErrors: result.errors
          }));
        }
        queryInfo.markResult(result, options, allowCacheWrite);
        queryInfo.markReady();
      }
      var aqr = {
        data: result.data,
        loading: false,
        networkStatus: queryInfo.networkStatus || exports.NetworkStatus.ready
      };
      if (hasErrors && options.errorPolicy !== "ignore") {
        aqr.errors = result.errors;
      }
      return aqr;
    }, function (networkError) {
      var error = errors.isApolloError(networkError) ? networkError : new errors.ApolloError({
        networkError: networkError
      });
      if (lastRequestId >= queryInfo.lastRequestId) {
        queryInfo.markError(error);
      }
      throw error;
    });
  };
  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {
    var _this = this;
    if (networkStatus === void 0) {
      networkStatus = exports.NetworkStatus.loading;
    }
    var query = this.transform(options.query).document;
    var variables = this.getVariables(query, options.variables);
    var queryInfo = this.getQuery(queryId);
    var oldNetworkStatus = queryInfo.networkStatus;
    var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;
    var mightUseNetwork = fetchPolicy === "cache-first" || fetchPolicy === "cache-and-network" || fetchPolicy === "network-only" || fetchPolicy === "no-cache";
    if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === "number" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus)) {
      if (fetchPolicy !== "cache-first") {
        fetchPolicy = "cache-and-network";
      }
      returnPartialData = true;
    }
    var normalized = Object.assign({}, options, {
      query: query,
      variables: variables,
      fetchPolicy: fetchPolicy,
      errorPolicy: errorPolicy,
      returnPartialData: returnPartialData,
      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
      context: context
    });
    var fromVariables = function (variables) {
      normalized.variables = variables;
      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);
    };
    this.fetchCancelFns.set(queryId, function (reason) {
      Promise.resolve().then(function () {
        return concast.cancel(reason);
      });
    });
    var concast = new utilities.Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));
    concast.cleanup(function () {
      _this.fetchCancelFns.delete(queryId);
      var nextFetchPolicy = options.nextFetchPolicy;
      if (nextFetchPolicy) {
        options.nextFetchPolicy = void 0;
        options.fetchPolicy = typeof nextFetchPolicy === "function" ? nextFetchPolicy.call(options, options.fetchPolicy || "cache-first") : nextFetchPolicy;
      }
    });
    return concast;
  };
  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {
    var _this = this;
    var query = options.query, variables = options.variables, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, returnPartialData = options.returnPartialData, context = options.context;
    queryInfo.init({
      document: query,
      variables: variables,
      lastRequestId: this.generateRequestId(),
      networkStatus: networkStatus
    });
    var readCache = function () {
      return queryInfo.getDiff(variables);
    };
    var resultsFromCache = function (diff, networkStatus) {
      if (networkStatus === void 0) {
        networkStatus = queryInfo.networkStatus || exports.NetworkStatus.loading;
      }
      var data = diff.result;
      if ("development" !== 'production' && utilities.isNonEmptyArray(diff.missing) && !equality.equal(data, {}) && !returnPartialData) {
        "development" === "production" || tsInvariant.invariant.warn("Missing cache result fields: " + diff.missing.map(function (m) {
          return m.path.join('.');
        }).join(', '), diff.missing);
      }
      var fromData = function (data) {
        return utilities.Observable.of(tslib.__assign({
          data: data,
          loading: isNetworkRequestInFlight(networkStatus),
          networkStatus: networkStatus
        }, diff.complete ? null : {
          partial: true
        }));
      };
      if (_this.transform(query).hasForcedResolvers) {
        return _this.localState.runResolvers({
          document: query,
          remoteResult: {
            data: data
          },
          context: context,
          variables: variables,
          onlyRunForcedResolvers: true
        }).then(function (resolved) {
          return fromData(resolved.data);
        });
      }
      return fromData(data);
    };
    var resultsFromLink = function (allowCacheWrite) {
      return _this.getResultsFromLink(queryInfo, allowCacheWrite, {
        variables: variables,
        context: context,
        fetchPolicy: fetchPolicy,
        errorPolicy: errorPolicy
      });
    };
    switch (fetchPolicy) {
      default:
      case "cache-first":
        {
          var diff = readCache();
          if (diff.complete) {
            return [resultsFromCache(diff, queryInfo.markReady())];
          }
          if (returnPartialData) {
            return [resultsFromCache(diff), resultsFromLink(true)];
          }
          return [resultsFromLink(true)];
        }
      case "cache-and-network":
        {
          var diff = readCache();
          if (diff.complete || returnPartialData) {
            return [resultsFromCache(diff), resultsFromLink(true)];
          }
          return [resultsFromLink(true)];
        }
      case "cache-only":
        return [resultsFromCache(readCache(), queryInfo.markReady())];
      case "network-only":
        return [resultsFromLink(true)];
      case "no-cache":
        return [resultsFromLink(false)];
      case "standby":
        return [];
    }
  };
  QueryManager.prototype.getQuery = function (queryId) {
    if (queryId && !this.queries.has(queryId)) {
      this.queries.set(queryId, new QueryInfo(this.cache));
    }
    return this.queries.get(queryId);
  };
  QueryManager.prototype.prepareContext = function (context) {
    if (context === void 0) {
      context = {};
    }
    var newContext = this.localState.prepareContext(context);
    return tslib.__assign(tslib.__assign({}, newContext), {
      clientAwareness: this.clientAwareness
    });
  };
  return QueryManager;
})();
var hasSuggestedDevtools = false;
function mergeOptions(defaults, options) {
  return utilities.compact(defaults, options, options.variables && ({
    variables: tslib.__assign(tslib.__assign({}, defaults.variables), options.variables)
  }));
}
var ApolloClient = (function () {
  function ApolloClient(options) {
    var _this = this;
    this.defaultOptions = {};
    this.resetStoreCallbacks = [];
    this.clearStoreCallbacks = [];
    var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, _c = options.connectToDevTools, connectToDevTools = _c === void 0 ? typeof window === 'object' && !window.__APOLLO_CLIENT__ && "development" !== 'production' : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? false : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
    var link = options.link;
    if (!link) {
      link = uri ? new http.HttpLink({
        uri: uri,
        credentials: credentials,
        headers: headers
      }) : core.ApolloLink.empty();
    }
    if (!cache) {
      throw "development" === "production" ? new tsInvariant.InvariantError(9) : new tsInvariant.InvariantError("To initialize Apollo Client, you must specify a 'cache' property " + "in the options object. \n" + "For more information, please visit: https://go.apollo.dev/c/docs");
    }
    this.link = link;
    this.cache = cache;
    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
    this.queryDeduplication = queryDeduplication;
    this.defaultOptions = defaultOptions || ({});
    this.typeDefs = typeDefs;
    if (ssrForceFetchDelay) {
      setTimeout(function () {
        return _this.disableNetworkFetches = false;
      }, ssrForceFetchDelay);
    }
    this.watchQuery = this.watchQuery.bind(this);
    this.query = this.query.bind(this);
    this.mutate = this.mutate.bind(this);
    this.resetStore = this.resetStore.bind(this);
    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
    if (connectToDevTools && typeof window === 'object') {
      window.__APOLLO_CLIENT__ = this;
    }
    if (!hasSuggestedDevtools && "development" !== 'production') {
      hasSuggestedDevtools = true;
      if (typeof window !== 'undefined' && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
        var nav = window.navigator;
        var ua = nav && nav.userAgent;
        var url = void 0;
        if (typeof ua === "string") {
          if (ua.indexOf("Chrome/") > -1) {
            url = "https://chrome.google.com/webstore/detail/" + "apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";
          } else if (ua.indexOf("Firefox/") > -1) {
            url = "https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/";
          }
        }
        if (url) {
          tsInvariant.invariant.log("Download the Apollo DevTools for a better development " + "experience: " + url);
        }
      }
    }
    this.version = version;
    this.localState = new LocalState({
      cache: cache,
      client: this,
      resolvers: resolvers,
      fragmentMatcher: fragmentMatcher
    });
    this.queryManager = new QueryManager({
      cache: this.cache,
      link: this.link,
      queryDeduplication: queryDeduplication,
      ssrMode: ssrMode,
      clientAwareness: {
        name: clientAwarenessName,
        version: clientAwarenessVersion
      },
      localState: this.localState,
      assumeImmutableResults: assumeImmutableResults,
      onBroadcast: connectToDevTools ? function () {
        if (_this.devToolsHookCb) {
          _this.devToolsHookCb({
            action: {},
            state: {
              queries: _this.queryManager.getQueryStore(),
              mutations: _this.queryManager.mutationStore || ({})
            },
            dataWithOptimisticResults: _this.cache.extract(true)
          });
        }
      } : void 0
    });
  }
  ApolloClient.prototype.stop = function () {
    this.queryManager.stop();
  };
  ApolloClient.prototype.watchQuery = function (options) {
    if (this.defaultOptions.watchQuery) {
      options = mergeOptions(this.defaultOptions.watchQuery, options);
    }
    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {
      options = tslib.__assign(tslib.__assign({}, options), {
        fetchPolicy: 'cache-first'
      });
    }
    return this.queryManager.watchQuery(options);
  };
  ApolloClient.prototype.query = function (options) {
    if (this.defaultOptions.query) {
      options = mergeOptions(this.defaultOptions.query, options);
    }
    "development" === "production" ? tsInvariant.invariant(options.fetchPolicy !== 'cache-and-network', 10) : tsInvariant.invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');
    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
      options = tslib.__assign(tslib.__assign({}, options), {
        fetchPolicy: 'cache-first'
      });
    }
    return this.queryManager.query(options);
  };
  ApolloClient.prototype.mutate = function (options) {
    if (this.defaultOptions.mutate) {
      options = mergeOptions(this.defaultOptions.mutate, options);
    }
    return this.queryManager.mutate(options);
  };
  ApolloClient.prototype.subscribe = function (options) {
    return this.queryManager.startGraphQLSubscription(options);
  };
  ApolloClient.prototype.readQuery = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.cache.readQuery(options, optimistic);
  };
  ApolloClient.prototype.readFragment = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.cache.readFragment(options, optimistic);
  };
  ApolloClient.prototype.writeQuery = function (options) {
    this.cache.writeQuery(options);
    this.queryManager.broadcastQueries();
  };
  ApolloClient.prototype.writeFragment = function (options) {
    this.cache.writeFragment(options);
    this.queryManager.broadcastQueries();
  };
  ApolloClient.prototype.__actionHookForDevTools = function (cb) {
    this.devToolsHookCb = cb;
  };
  ApolloClient.prototype.__requestRaw = function (payload) {
    return core.execute(this.link, payload);
  };
  ApolloClient.prototype.resetStore = function () {
    var _this = this;
    return Promise.resolve().then(function () {
      return _this.queryManager.clearStore();
    }).then(function () {
      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {
        return fn();
      }));
    }).then(function () {
      return _this.reFetchObservableQueries();
    });
  };
  ApolloClient.prototype.clearStore = function () {
    var _this = this;
    return Promise.resolve().then(function () {
      return _this.queryManager.clearStore();
    }).then(function () {
      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {
        return fn();
      }));
    });
  };
  ApolloClient.prototype.onResetStore = function (cb) {
    var _this = this;
    this.resetStoreCallbacks.push(cb);
    return function () {
      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {
        return c !== cb;
      });
    };
  };
  ApolloClient.prototype.onClearStore = function (cb) {
    var _this = this;
    this.clearStoreCallbacks.push(cb);
    return function () {
      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {
        return c !== cb;
      });
    };
  };
  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
    return this.queryManager.reFetchObservableQueries(includeStandby);
  };
  ApolloClient.prototype.extract = function (optimistic) {
    return this.cache.extract(optimistic);
  };
  ApolloClient.prototype.restore = function (serializedState) {
    return this.cache.restore(serializedState);
  };
  ApolloClient.prototype.addResolvers = function (resolvers) {
    this.localState.addResolvers(resolvers);
  };
  ApolloClient.prototype.setResolvers = function (resolvers) {
    this.localState.setResolvers(resolvers);
  };
  ApolloClient.prototype.getResolvers = function () {
    return this.localState.getResolvers();
  };
  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {
    this.localState.setFragmentMatcher(fragmentMatcher);
  };
  ApolloClient.prototype.setLink = function (newLink) {
    this.link = this.queryManager.link = newLink;
  };
  return ApolloClient;
})();
tsInvariant.setVerbosity("log");
var resetCaches = gql.resetCaches, disableFragmentWarnings = gql.disableFragmentWarnings, enableExperimentalFragmentVariables = gql.enableExperimentalFragmentVariables, disableExperimentalFragmentVariables = gql.disableExperimentalFragmentVariables;
Object.keys(core).forEach(function (k) {
  if (k !== 'default') exports[k] = core[k];
});
Object.keys(http).forEach(function (k) {
  if (k !== 'default') exports[k] = http[k];
});
exports.setLogVerbosity = tsInvariant.setVerbosity;
exports.Observable = utilities.Observable;
exports.isReference = utilities.isReference;
exports.makeReference = utilities.makeReference;
exports.ApolloError = errors.ApolloError;
exports.isApolloError = errors.isApolloError;
exports.ApolloCache = cache.ApolloCache;
exports.Cache = cache.Cache;
exports.InMemoryCache = cache.InMemoryCache;
exports.MissingFieldError = cache.MissingFieldError;
exports.defaultDataIdFromObject = cache.defaultDataIdFromObject;
exports.makeVar = cache.makeVar;
exports.fromError = utils.fromError;
exports.fromPromise = utils.fromPromise;
exports.throwServerError = utils.throwServerError;
exports.toPromise = utils.toPromise;
exports.gql = gql;
exports.ApolloClient = ApolloClient;
exports.ObservableQuery = ObservableQuery;
exports.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;
exports.disableFragmentWarnings = disableFragmentWarnings;
exports.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
exports.mergeOptions = mergeOptions;
exports.resetCaches = resetCaches;

},{"tslib":"4rd38","ts-invariant":"3uYVD","../link/core":"5MGqW","../utilities":"6w0bE","../link/http":"1Z7oR","@wry/equality":"5NdOJ","../errors":"6ik73","graphql":"5gqTn","../cache":"7trpi","../link/utils":"3T4ud","graphql-tag":"612cF"}],"4rd38":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __createBinding = function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __exportStar = function (m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"3uYVD":[function(require,module,exports) {
"use strict";
var process = require("process");
Object.defineProperty(exports, '__esModule', {
  value: true
});
var tslib = require('tslib');
var genericMessage = "Invariant Violation";
var _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {
  obj.__proto__ = proto;
  return obj;
} : _a;
var InvariantError = /** @class*/
(function (_super) {
  tslib.__extends(InvariantError, _super);
  function InvariantError(message) {
    if (message === void 0) {
      message = genericMessage;
    }
    var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
    _this.framesToPop = 1;
    _this.name = genericMessage;
    setPrototypeOf(_this, InvariantError.prototype);
    return _this;
  }
  return InvariantError;
})(Error);
function invariant(condition, message) {
  if (!condition) {
    throw new InvariantError(message);
  }
}
var verbosityLevels = ["log", "warn", "error", "silent"];
var verbosityLevel = verbosityLevels.indexOf("log");
function wrapConsoleMethod(method) {
  return function () {
    if (verbosityLevels.indexOf(method) >= verbosityLevel) {
      return console[method].apply(console, arguments);
    }
  };
}
(function (invariant) {
  invariant.log = wrapConsoleMethod("log");
  invariant.warn = wrapConsoleMethod("warn");
  invariant.error = wrapConsoleMethod("error");
})(invariant || (invariant = {}));
function setVerbosity(level) {
  var old = verbosityLevels[verbosityLevel];
  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));
  return old;
}
// Code that uses ts-invariant with rollup-plugin-invariant may want to
// import this process stub to avoid errors evaluating process.env.NODE_ENV.
// However, because most ESM-to-CJS compilers will rewrite the process import
// as tsInvariant.process, which prevents proper replacement by minifiers, we
// also export processStub, so you can import { invariant, processStub } from
// "ts-invariant" and assign processStub to a local variable named process.
var processStub = typeof process === "object" && typeof process.env === "object" ? process : {
  env: {}
};
var invariant$1 = invariant;
exports.InvariantError = InvariantError;
exports.default = invariant$1;
exports.invariant = invariant;
exports.process = processStub;
exports.processStub = processStub;
exports.setVerbosity = setVerbosity;

},{"process":"7AgFc","tslib":"2dwc5"}],"7AgFc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    // normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    // normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = '';
// empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};

},{}],"2dwc5":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"5MGqW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, '__esModule', {
  value: true
});
var tslib = require('tslib');
var tsInvariant = require('ts-invariant');
var utilities = require('../../utilities');
var utils = require('../utils');
function passthrough(op, forward) {
  return forward ? forward(op) : utilities.Observable.of();
}
function toLink(handler) {
  return typeof handler === 'function' ? new ApolloLink(handler) : handler;
}
function isTerminating(link) {
  return link.request.length <= 1;
}
var LinkError = (function (_super) {
  tslib.__extends(LinkError, _super);
  function LinkError(message, link) {
    var _this = _super.call(this, message) || this;
    _this.link = link;
    return _this;
  }
  return LinkError;
})(Error);
var ApolloLink = (function () {
  function ApolloLink(request) {
    if (request) this.request = request;
  }
  ApolloLink.empty = function () {
    return new ApolloLink(function () {
      return utilities.Observable.of();
    });
  };
  ApolloLink.from = function (links) {
    if (links.length === 0) return ApolloLink.empty();
    return links.map(toLink).reduce(function (x, y) {
      return x.concat(y);
    });
  };
  ApolloLink.split = function (test, left, right) {
    var leftLink = toLink(left);
    var rightLink = toLink(right || new ApolloLink(passthrough));
    if (isTerminating(leftLink) && isTerminating(rightLink)) {
      return new ApolloLink(function (operation) {
        return test(operation) ? leftLink.request(operation) || utilities.Observable.of() : rightLink.request(operation) || utilities.Observable.of();
      });
    } else {
      return new ApolloLink(function (operation, forward) {
        return test(operation) ? leftLink.request(operation, forward) || utilities.Observable.of() : rightLink.request(operation, forward) || utilities.Observable.of();
      });
    }
  };
  ApolloLink.execute = function (link, operation) {
    return link.request(utils.createOperation(operation.context, utils.transformOperation(utils.validateOperation(operation)))) || utilities.Observable.of();
  };
  ApolloLink.concat = function (first, second) {
    var firstLink = toLink(first);
    if (isTerminating(firstLink)) {
      "development" === "production" || tsInvariant.invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
      return firstLink;
    }
    var nextLink = toLink(second);
    if (isTerminating(nextLink)) {
      return new ApolloLink(function (operation) {
        return firstLink.request(operation, function (op) {
          return nextLink.request(op) || utilities.Observable.of();
        }) || utilities.Observable.of();
      });
    } else {
      return new ApolloLink(function (operation, forward) {
        return firstLink.request(operation, function (op) {
          return nextLink.request(op, forward) || utilities.Observable.of();
        }) || utilities.Observable.of();
      });
    }
  };
  ApolloLink.prototype.split = function (test, left, right) {
    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));
  };
  ApolloLink.prototype.concat = function (next) {
    return ApolloLink.concat(this, next);
  };
  ApolloLink.prototype.request = function (operation, forward) {
    throw "development" === "production" ? new tsInvariant.InvariantError(21) : new tsInvariant.InvariantError('request is not implemented');
  };
  ApolloLink.prototype.onError = function (error, observer) {
    if (observer && observer.error) {
      observer.error(error);
      return false;
    }
    throw error;
  };
  ApolloLink.prototype.setOnError = function (fn) {
    this.onError = fn;
    return this;
  };
  return ApolloLink;
})();
var empty = ApolloLink.empty;
var from = ApolloLink.from;
var split = ApolloLink.split;
var concat = ApolloLink.concat;
var execute = ApolloLink.execute;
exports.ApolloLink = ApolloLink;
exports.concat = concat;
exports.empty = empty;
exports.execute = execute;
exports.from = from;
exports.split = split;

},{"tslib":"4rd38","ts-invariant":"3uYVD","../../utilities":"6w0bE","../utils":"3T4ud"}],"6w0bE":[function(require,module,exports) {
"use strict";
var process = require("process");
Object.defineProperty(exports, '__esModule', {
  value: true
});
function _interopDefault(ex) {
  return ex && typeof ex === 'object' && ('default' in ex) ? ex['default'] : ex;
}
var graphql = require('graphql');
var tsInvariant = require('ts-invariant');
var tslib = require('tslib');
var stringify = _interopDefault(require('fast-json-stable-stringify'));
var Observable = _interopDefault(require('zen-observable'));
require('symbol-observable');
function shouldInclude(_a, variables) {
  var directives = _a.directives;
  if (!directives || !directives.length) {
    return true;
  }
  return getInclusionDirectives(directives).every(function (_a) {
    var directive = _a.directive, ifArgument = _a.ifArgument;
    var evaledValue = false;
    if (ifArgument.value.kind === 'Variable') {
      evaledValue = variables && variables[ifArgument.value.name.value];
      "development" === "production" ? tsInvariant.invariant(evaledValue !== void 0, 38) : tsInvariant.invariant(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.");
    } else {
      evaledValue = ifArgument.value.value;
    }
    return directive.name.value === 'skip' ? !evaledValue : evaledValue;
  });
}
function getDirectiveNames(root) {
  var names = [];
  graphql.visit(root, {
    Directive: function (node) {
      names.push(node.name.value);
    }
  });
  return names;
}
function hasDirectives(names, root) {
  return getDirectiveNames(root).some(function (name) {
    return names.indexOf(name) > -1;
  });
}
function hasClientExports(document) {
  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);
}
function isInclusionDirective(_a) {
  var value = _a.name.value;
  return value === 'skip' || value === 'include';
}
function getInclusionDirectives(directives) {
  var result = [];
  if (directives && directives.length) {
    directives.forEach(function (directive) {
      if (!isInclusionDirective(directive)) return;
      var directiveArguments = directive.arguments;
      var directiveName = directive.name.value;
      "development" === "production" ? tsInvariant.invariant(directiveArguments && directiveArguments.length === 1, 39) : tsInvariant.invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.");
      var ifArgument = directiveArguments[0];
      "development" === "production" ? tsInvariant.invariant(ifArgument.name && ifArgument.name.value === 'if', 40) : tsInvariant.invariant(ifArgument.name && ifArgument.name.value === 'if', "Invalid argument for the @" + directiveName + " directive.");
      var ifValue = ifArgument.value;
      "development" === "production" ? tsInvariant.invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 41) : tsInvariant.invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
      result.push({
        directive: directive,
        ifArgument: ifArgument
      });
    });
  }
  return result;
}
function getFragmentQueryDocument(document, fragmentName) {
  var actualFragmentName = fragmentName;
  var fragments = [];
  document.definitions.forEach(function (definition) {
    if (definition.kind === 'OperationDefinition') {
      throw "development" === "production" ? new tsInvariant.InvariantError(42) : new tsInvariant.InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : '') + ". " + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');
    }
    if (definition.kind === 'FragmentDefinition') {
      fragments.push(definition);
    }
  });
  if (typeof actualFragmentName === 'undefined') {
    "development" === "production" ? tsInvariant.invariant(fragments.length === 1, 43) : tsInvariant.invariant(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
    actualFragmentName = fragments[0].name.value;
  }
  var query = tslib.__assign(tslib.__assign({}, document), {
    definitions: tslib.__spreadArrays([{
      kind: 'OperationDefinition',
      operation: 'query',
      selectionSet: {
        kind: 'SelectionSet',
        selections: [{
          kind: 'FragmentSpread',
          name: {
            kind: 'Name',
            value: actualFragmentName
          }
        }]
      }
    }], document.definitions)
  });
  return query;
}
function createFragmentMap(fragments) {
  if (fragments === void 0) {
    fragments = [];
  }
  var symTable = {};
  fragments.forEach(function (fragment) {
    symTable[fragment.name.value] = fragment;
  });
  return symTable;
}
function getFragmentFromSelection(selection, fragmentMap) {
  switch (selection.kind) {
    case 'InlineFragment':
      return selection;
    case 'FragmentSpread':
      {
        var fragment = fragmentMap && fragmentMap[selection.name.value];
        "development" === "production" ? tsInvariant.invariant(fragment, 44) : tsInvariant.invariant(fragment, "No fragment named " + selection.name.value + ".");
        return fragment;
      }
    default:
      return null;
  }
}
function makeReference(id) {
  return {
    __ref: String(id)
  };
}
function isReference(obj) {
  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');
}
function isStringValue(value) {
  return value.kind === 'StringValue';
}
function isBooleanValue(value) {
  return value.kind === 'BooleanValue';
}
function isIntValue(value) {
  return value.kind === 'IntValue';
}
function isFloatValue(value) {
  return value.kind === 'FloatValue';
}
function isVariable(value) {
  return value.kind === 'Variable';
}
function isObjectValue(value) {
  return value.kind === 'ObjectValue';
}
function isListValue(value) {
  return value.kind === 'ListValue';
}
function isEnumValue(value) {
  return value.kind === 'EnumValue';
}
function isNullValue(value) {
  return value.kind === 'NullValue';
}
function valueToObjectRepresentation(argObj, name, value, variables) {
  if (isIntValue(value) || isFloatValue(value)) {
    argObj[name.value] = Number(value.value);
  } else if (isBooleanValue(value) || isStringValue(value)) {
    argObj[name.value] = value.value;
  } else if (isObjectValue(value)) {
    var nestedArgObj_1 = {};
    value.fields.map(function (obj) {
      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
    });
    argObj[name.value] = nestedArgObj_1;
  } else if (isVariable(value)) {
    var variableValue = (variables || ({}))[value.name.value];
    argObj[name.value] = variableValue;
  } else if (isListValue(value)) {
    argObj[name.value] = value.values.map(function (listValue) {
      var nestedArgArrayObj = {};
      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
      return nestedArgArrayObj[name.value];
    });
  } else if (isEnumValue(value)) {
    argObj[name.value] = value.value;
  } else if (isNullValue(value)) {
    argObj[name.value] = null;
  } else {
    throw "development" === "production" ? new tsInvariant.InvariantError(53) : new tsInvariant.InvariantError("The inline argument \"" + name.value + "\" of kind \"" + value.kind + "\"" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.');
  }
}
function storeKeyNameFromField(field, variables) {
  var directivesObj = null;
  if (field.directives) {
    directivesObj = {};
    field.directives.forEach(function (directive) {
      directivesObj[directive.name.value] = {};
      if (directive.arguments) {
        directive.arguments.forEach(function (_a) {
          var name = _a.name, value = _a.value;
          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
        });
      }
    });
  }
  var argObj = null;
  if (field.arguments && field.arguments.length) {
    argObj = {};
    field.arguments.forEach(function (_a) {
      var name = _a.name, value = _a.value;
      return valueToObjectRepresentation(argObj, name, value, variables);
    });
  }
  return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];
function getStoreKeyName(fieldName, args, directives) {
  if (args && directives && directives['connection'] && directives['connection']['key']) {
    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {
      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];
      filterKeys.sort();
      var filteredArgs_1 = {};
      filterKeys.forEach(function (key) {
        filteredArgs_1[key] = args[key];
      });
      return directives['connection']['key'] + "(" + JSON.stringify(filteredArgs_1) + ")";
    } else {
      return directives['connection']['key'];
    }
  }
  var completeFieldName = fieldName;
  if (args) {
    var stringifiedArgs = stringify(args);
    completeFieldName += "(" + stringifiedArgs + ")";
  }
  if (directives) {
    Object.keys(directives).forEach(function (key) {
      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;
      if (directives[key] && Object.keys(directives[key]).length) {
        completeFieldName += "@" + key + "(" + JSON.stringify(directives[key]) + ")";
      } else {
        completeFieldName += "@" + key;
      }
    });
  }
  return completeFieldName;
}
function argumentsObjectFromField(field, variables) {
  if (field.arguments && field.arguments.length) {
    var argObj_1 = {};
    field.arguments.forEach(function (_a) {
      var name = _a.name, value = _a.value;
      return valueToObjectRepresentation(argObj_1, name, value, variables);
    });
    return argObj_1;
  }
  return null;
}
function resultKeyNameFromField(field) {
  return field.alias ? field.alias.value : field.name.value;
}
function getTypenameFromResult(result, selectionSet, fragmentMap) {
  if (typeof result.__typename === 'string') {
    return result.__typename;
  }
  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {
    var selection = _a[_i];
    if (isField(selection)) {
      if (selection.name.value === '__typename') {
        return result[resultKeyNameFromField(selection)];
      }
    } else {
      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);
      if (typeof typename === 'string') {
        return typename;
      }
    }
  }
}
function isField(selection) {
  return selection.kind === 'Field';
}
function isInlineFragment(selection) {
  return selection.kind === 'InlineFragment';
}
function checkDocument(doc) {
  "development" === "production" ? tsInvariant.invariant(doc && doc.kind === 'Document', 45) : tsInvariant.invariant(doc && doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql");
  var operations = doc.definitions.filter(function (d) {
    return d.kind !== 'FragmentDefinition';
  }).map(function (definition) {
    if (definition.kind !== 'OperationDefinition') {
      throw "development" === "production" ? new tsInvariant.InvariantError(46) : new tsInvariant.InvariantError("Schema type definitions not allowed in queries. Found: \"" + definition.kind + "\"");
    }
    return definition;
  });
  "development" === "production" ? tsInvariant.invariant(operations.length <= 1, 47) : tsInvariant.invariant(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations");
  return doc;
}
function getOperationDefinition(doc) {
  checkDocument(doc);
  return doc.definitions.filter(function (definition) {
    return definition.kind === 'OperationDefinition';
  })[0];
}
function getOperationName(doc) {
  return doc.definitions.filter(function (definition) {
    return definition.kind === 'OperationDefinition' && definition.name;
  }).map(function (x) {
    return x.name.value;
  })[0] || null;
}
function getFragmentDefinitions(doc) {
  return doc.definitions.filter(function (definition) {
    return definition.kind === 'FragmentDefinition';
  });
}
function getQueryDefinition(doc) {
  var queryDef = getOperationDefinition(doc);
  "development" === "production" ? tsInvariant.invariant(queryDef && queryDef.operation === 'query', 48) : tsInvariant.invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');
  return queryDef;
}
function getFragmentDefinition(doc) {
  "development" === "production" ? tsInvariant.invariant(doc.kind === 'Document', 49) : tsInvariant.invariant(doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql");
  "development" === "production" ? tsInvariant.invariant(doc.definitions.length <= 1, 50) : tsInvariant.invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');
  var fragmentDef = doc.definitions[0];
  "development" === "production" ? tsInvariant.invariant(fragmentDef.kind === 'FragmentDefinition', 51) : tsInvariant.invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');
  return fragmentDef;
}
function getMainDefinition(queryDoc) {
  checkDocument(queryDoc);
  var fragmentDefinition;
  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
    var definition = _a[_i];
    if (definition.kind === 'OperationDefinition') {
      var operation = definition.operation;
      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {
        return definition;
      }
    }
    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {
      fragmentDefinition = definition;
    }
  }
  if (fragmentDefinition) {
    return fragmentDefinition;
  }
  throw "development" === "production" ? new tsInvariant.InvariantError(52) : new tsInvariant.InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');
}
function getDefaultValues(definition) {
  var defaultValues = Object.create(null);
  var defs = definition && definition.variableDefinitions;
  if (defs && defs.length) {
    defs.forEach(function (def) {
      if (def.defaultValue) {
        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);
      }
    });
  }
  return defaultValues;
}
function filterInPlace(array, test, context) {
  var target = 0;
  array.forEach(function (elem, i) {
    if (test.call(this, elem, i, array)) {
      array[target++] = elem;
    }
  }, context);
  array.length = target;
  return array;
}
var TYPENAME_FIELD = {
  kind: 'Field',
  name: {
    kind: 'Name',
    value: '__typename'
  }
};
function isEmpty(op, fragments) {
  return op.selectionSet.selections.every(function (selection) {
    return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);
  });
}
function nullIfDocIsEmpty(doc) {
  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;
}
function getDirectiveMatcher(directives) {
  return function directiveMatcher(directive) {
    return directives.some(function (dir) {
      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
    });
  };
}
function removeDirectivesFromDocument(directives, doc) {
  var variablesInUse = Object.create(null);
  var variablesToRemove = [];
  var fragmentSpreadsInUse = Object.create(null);
  var fragmentSpreadsToRemove = [];
  var modifiedDoc = nullIfDocIsEmpty(graphql.visit(doc, {
    Variable: {
      enter: function (node, _key, parent) {
        if (parent.kind !== 'VariableDefinition') {
          variablesInUse[node.name.value] = true;
        }
      }
    },
    Field: {
      enter: function (node) {
        if (directives && node.directives) {
          var shouldRemoveField = directives.some(function (directive) {
            return directive.remove;
          });
          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {
            if (node.arguments) {
              node.arguments.forEach(function (arg) {
                if (arg.value.kind === 'Variable') {
                  variablesToRemove.push({
                    name: arg.value.name.value
                  });
                }
              });
            }
            if (node.selectionSet) {
              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {
                fragmentSpreadsToRemove.push({
                  name: frag.name.value
                });
              });
            }
            return null;
          }
        }
      }
    },
    FragmentSpread: {
      enter: function (node) {
        fragmentSpreadsInUse[node.name.value] = true;
      }
    },
    Directive: {
      enter: function (node) {
        if (getDirectiveMatcher(directives)(node)) {
          return null;
        }
      }
    }
  }));
  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {
    return !!v.name && !variablesInUse[v.name];
  }).length) {
    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
  }
  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {
    return !!fs.name && !fragmentSpreadsInUse[fs.name];
  }).length) {
    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
  }
  return modifiedDoc;
}
function addTypenameToDocument(doc) {
  return graphql.visit(checkDocument(doc), {
    SelectionSet: {
      enter: function (node, _key, parent) {
        if (parent && parent.kind === 'OperationDefinition') {
          return;
        }
        var selections = node.selections;
        if (!selections) {
          return;
        }
        var skip = selections.some(function (selection) {
          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);
        });
        if (skip) {
          return;
        }
        var field = parent;
        if (isField(field) && field.directives && field.directives.some(function (d) {
          return d.name.value === 'export';
        })) {
          return;
        }
        return tslib.__assign(tslib.__assign({}, node), {
          selections: tslib.__spreadArrays(selections, [TYPENAME_FIELD])
        });
      }
    }
  });
}
addTypenameToDocument.added = function (field) {
  return field === TYPENAME_FIELD;
};
var connectionRemoveConfig = {
  test: function (directive) {
    var willRemove = directive.name.value === 'connection';
    if (willRemove) {
      if (!directive.arguments || !directive.arguments.some(function (arg) {
        return arg.name.value === 'key';
      })) {
        "development" === "production" || tsInvariant.invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');
      }
    }
    return willRemove;
  }
};
function removeConnectionDirectiveFromDocument(doc) {
  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
}
function getArgumentMatcher(config) {
  return function argumentMatcher(argument) {
    return config.some(function (aConfig) {
      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
    });
  };
}
function removeArgumentsFromDocument(config, doc) {
  var argMatcher = getArgumentMatcher(config);
  return nullIfDocIsEmpty(graphql.visit(doc, {
    OperationDefinition: {
      enter: function (node) {
        return tslib.__assign(tslib.__assign({}, node), {
          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {
            return !config.some(function (arg) {
              return arg.name === varDef.variable.name.value;
            });
          }) : []
        });
      }
    },
    Field: {
      enter: function (node) {
        var shouldRemoveField = config.some(function (argConfig) {
          return argConfig.remove;
        });
        if (shouldRemoveField) {
          var argMatchCount_1 = 0;
          if (node.arguments) {
            node.arguments.forEach(function (arg) {
              if (argMatcher(arg)) {
                argMatchCount_1 += 1;
              }
            });
          }
          if (argMatchCount_1 === 1) {
            return null;
          }
        }
      }
    },
    Argument: {
      enter: function (node) {
        if (argMatcher(node)) {
          return null;
        }
      }
    }
  }));
}
function removeFragmentSpreadFromDocument(config, doc) {
  function enter(node) {
    if (config.some(function (def) {
      return def.name === node.name.value;
    })) {
      return null;
    }
  }
  return nullIfDocIsEmpty(graphql.visit(doc, {
    FragmentSpread: {
      enter: enter
    },
    FragmentDefinition: {
      enter: enter
    }
  }));
}
function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
  var allFragments = [];
  selectionSet.selections.forEach(function (selection) {
    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {
      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {
        return allFragments.push(frag);
      });
    } else if (selection.kind === 'FragmentSpread') {
      allFragments.push(selection);
    }
  });
  return allFragments;
}
function buildQueryFromSelectionSet(document) {
  var definition = getMainDefinition(document);
  var definitionOperation = definition.operation;
  if (definitionOperation === 'query') {
    return document;
  }
  var modifiedDoc = graphql.visit(document, {
    OperationDefinition: {
      enter: function (node) {
        return tslib.__assign(tslib.__assign({}, node), {
          operation: 'query'
        });
      }
    }
  });
  return modifiedDoc;
}
function removeClientSetsFromDocument(document) {
  checkDocument(document);
  var modifiedDoc = removeDirectivesFromDocument([{
    test: function (directive) {
      return directive.name.value === 'client';
    },
    remove: true
  }], document);
  if (modifiedDoc) {
    modifiedDoc = graphql.visit(modifiedDoc, {
      FragmentDefinition: {
        enter: function (node) {
          if (node.selectionSet) {
            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {
              return isField(selection) && selection.name.value === '__typename';
            });
            if (isTypenameOnly) {
              return null;
            }
          }
        }
      }
    });
  }
  return modifiedDoc;
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function mergeDeep() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  return mergeDeepArray(sources);
}
function mergeDeepArray(sources) {
  var target = sources[0] || ({});
  var count = sources.length;
  if (count > 1) {
    var merger = new DeepMerger();
    for (var i = 1; i < count; ++i) {
      target = merger.merge(target, sources[i]);
    }
  }
  return target;
}
function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
var defaultReconciler = function (target, source, property) {
  return this.merge(target[property], source[property]);
};
var DeepMerger = (function () {
  function DeepMerger(reconciler) {
    if (reconciler === void 0) {
      reconciler = defaultReconciler;
    }
    this.reconciler = reconciler;
    this.isObject = isObject;
    this.pastCopies = new Set();
  }
  DeepMerger.prototype.merge = function (target, source) {
    var _this = this;
    var context = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      context[_i - 2] = arguments[_i];
    }
    if (isObject(source) && isObject(target)) {
      Object.keys(source).forEach(function (sourceKey) {
        if (hasOwnProperty.call(target, sourceKey)) {
          var targetValue = target[sourceKey];
          if (source[sourceKey] !== targetValue) {
            var result = _this.reconciler.apply(_this, tslib.__spreadArrays([target, source, sourceKey], context));
            if (result !== targetValue) {
              target = _this.shallowCopyForMerge(target);
              target[sourceKey] = result;
            }
          }
        } else {
          target = _this.shallowCopyForMerge(target);
          target[sourceKey] = source[sourceKey];
        }
      });
      return target;
    }
    return source;
  };
  DeepMerger.prototype.shallowCopyForMerge = function (value) {
    if (isObject(value) && !this.pastCopies.has(value)) {
      if (Array.isArray(value)) {
        value = value.slice(0);
      } else {
        value = tslib.__assign({
          __proto__: Object.getPrototypeOf(value)
        }, value);
      }
      this.pastCopies.add(value);
    }
    return value;
  };
  return DeepMerger;
})();
function concatPagination(keyArgs) {
  if (keyArgs === void 0) {
    keyArgs = false;
  }
  return {
    keyArgs: keyArgs,
    merge: function (existing, incoming) {
      return existing ? tslib.__spreadArrays(existing, incoming) : incoming;
    }
  };
}
function offsetLimitPagination(keyArgs) {
  if (keyArgs === void 0) {
    keyArgs = false;
  }
  return {
    keyArgs: keyArgs,
    merge: function (existing, incoming, _a) {
      var args = _a.args;
      var merged = existing ? existing.slice(0) : [];
      if (args) {
        var _b = args.offset, offset = _b === void 0 ? 0 : _b;
        for (var i = 0; i < incoming.length; ++i) {
          merged[offset + i] = incoming[i];
        }
      } else {
        merged.push.apply(merged, incoming);
      }
      return merged;
    }
  };
}
function relayStylePagination(keyArgs) {
  if (keyArgs === void 0) {
    keyArgs = false;
  }
  return {
    keyArgs: keyArgs,
    read: function (existing, _a) {
      var canRead = _a.canRead, readField = _a.readField;
      if (!existing) return;
      var edges = [];
      var startCursor = "";
      var endCursor = "";
      existing.edges.forEach(function (edge) {
        if (canRead(readField("node", edge))) {
          edges.push(edge);
          if (edge.cursor) {
            startCursor = startCursor || edge.cursor;
            endCursor = edge.cursor;
          }
        }
      });
      return tslib.__assign(tslib.__assign({}, getExtras(existing)), {
        edges: edges,
        pageInfo: tslib.__assign(tslib.__assign({}, existing.pageInfo), {
          startCursor: startCursor,
          endCursor: endCursor
        })
      });
    },
    merge: function (existing, incoming, _a) {
      if (existing === void 0) {
        existing = makeEmptyData();
      }
      var args = _a.args, isReference = _a.isReference, readField = _a.readField;
      var incomingEdges = incoming.edges ? incoming.edges.map(function (edge) {
        if (isReference(edge = tslib.__assign({}, edge))) {
          edge.cursor = readField("cursor", edge);
        }
        return edge;
      }) : [];
      if (incoming.pageInfo) {
        var pageInfo_1 = incoming.pageInfo;
        var startCursor = pageInfo_1.startCursor, endCursor = pageInfo_1.endCursor;
        var firstEdge = incomingEdges[0];
        var lastEdge = incomingEdges[incomingEdges.length - 1];
        if (firstEdge && startCursor) {
          firstEdge.cursor = startCursor;
        }
        if (lastEdge && endCursor) {
          lastEdge.cursor = endCursor;
        }
        var firstCursor = firstEdge && firstEdge.cursor;
        if (firstCursor && !startCursor) {
          incoming = mergeDeep(incoming, {
            pageInfo: {
              startCursor: firstCursor
            }
          });
        }
        var lastCursor = lastEdge && lastEdge.cursor;
        if (lastCursor && !endCursor) {
          incoming = mergeDeep(incoming, {
            pageInfo: {
              endCursor: lastCursor
            }
          });
        }
      }
      var prefix = existing.edges;
      var suffix = [];
      if (args && args.after) {
        var index = prefix.findIndex(function (edge) {
          return edge.cursor === args.after;
        });
        if (index >= 0) {
          prefix = prefix.slice(0, index + 1);
        }
      } else if (args && args.before) {
        var index = prefix.findIndex(function (edge) {
          return edge.cursor === args.before;
        });
        suffix = index < 0 ? prefix : prefix.slice(index);
        prefix = [];
      } else if (incoming.edges) {
        prefix = [];
      }
      var edges = tslib.__spreadArrays(prefix, incomingEdges, suffix);
      var pageInfo = tslib.__assign(tslib.__assign({}, incoming.pageInfo), existing.pageInfo);
      if (incoming.pageInfo) {
        var _b = incoming.pageInfo, hasPreviousPage = _b.hasPreviousPage, hasNextPage = _b.hasNextPage, startCursor = _b.startCursor, endCursor = _b.endCursor, extras = tslib.__rest(_b, ["hasPreviousPage", "hasNextPage", "startCursor", "endCursor"]);
        Object.assign(pageInfo, extras);
        if (!prefix.length) {
          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;
          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;
        }
        if (!suffix.length) {
          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;
          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;
        }
      }
      return tslib.__assign(tslib.__assign(tslib.__assign({}, getExtras(existing)), getExtras(incoming)), {
        edges: edges,
        pageInfo: pageInfo
      });
    }
  };
}
var getExtras = function (obj) {
  return tslib.__rest(obj, notExtras);
};
var notExtras = ["edges", "pageInfo"];
function makeEmptyData() {
  return {
    edges: [],
    pageInfo: {
      hasPreviousPage: false,
      hasNextPage: true,
      startCursor: "",
      endCursor: ""
    }
  };
}
var toString = Object.prototype.toString;
function cloneDeep(value) {
  return cloneDeepHelper(value);
}
function cloneDeepHelper(val, seen) {
  switch (toString.call(val)) {
    case "[object Array]":
      {
        seen = seen || new Map();
        if (seen.has(val)) return seen.get(val);
        var copy_1 = val.slice(0);
        seen.set(val, copy_1);
        copy_1.forEach(function (child, i) {
          copy_1[i] = cloneDeepHelper(child, seen);
        });
        return copy_1;
      }
    case "[object Object]":
      {
        seen = seen || new Map();
        if (seen.has(val)) return seen.get(val);
        var copy_2 = Object.create(Object.getPrototypeOf(val));
        seen.set(val, copy_2);
        Object.keys(val).forEach(function (key) {
          copy_2[key] = cloneDeepHelper(val[key], seen);
        });
        return copy_2;
      }
    default:
      return val;
  }
}
function getEnv() {
  if (typeof process !== 'undefined' && "development") {
    return "development";
  }
  return 'development';
}
function isEnv(env) {
  return getEnv() === env;
}
function isDevelopment() {
  return isEnv('development') === true;
}
function isTest() {
  return isEnv('test') === true;
}
function isObject$1(value) {
  return value !== null && typeof value === "object";
}
function deepFreeze(value) {
  var workSet = new Set([value]);
  workSet.forEach(function (obj) {
    if (isObject$1(obj)) {
      if (!Object.isFrozen(obj)) Object.freeze(obj);
      Object.getOwnPropertyNames(obj).forEach(function (name) {
        if (isObject$1(obj[name])) workSet.add(obj[name]);
      });
    }
  });
  return value;
}
function maybeDeepFreeze(obj) {
  if ("development" !== "production" && (isDevelopment() || isTest())) {
    deepFreeze(obj);
  }
  return obj;
}
function iterateObserversSafely(observers, method, argument) {
  var observersWithMethod = [];
  observers.forEach(function (obs) {
    return obs[method] && observersWithMethod.push(obs);
  });
  observersWithMethod.forEach(function (obs) {
    return obs[method](argument);
  });
}
function asyncMap(observable, mapFn, catchFn) {
  return new Observable(function (observer) {
    var next = observer.next, error = observer.error, complete = observer.complete;
    var activeCallbackCount = 0;
    var completed = false;
    var promiseQueue = {
      then: function (callback) {
        return new Promise(function (resolve) {
          return resolve(callback());
        });
      }
    };
    function makeCallback(examiner, delegate) {
      if (examiner) {
        return function (arg) {
          ++activeCallbackCount;
          var both = function () {
            return examiner(arg);
          };
          promiseQueue = promiseQueue.then(both, both).then(function (result) {
            --activeCallbackCount;
            next && next.call(observer, result);
            if (completed) {
              handler.complete();
            }
          }, function (error) {
            --activeCallbackCount;
            throw error;
          }).catch(function (caught) {
            error && error.call(observer, caught);
          });
        };
      } else {
        return function (arg) {
          return delegate && delegate.call(observer, arg);
        };
      }
    }
    var handler = {
      next: makeCallback(mapFn, next),
      error: makeCallback(catchFn, error),
      complete: function () {
        completed = true;
        if (!activeCallbackCount) {
          complete && complete.call(observer);
        }
      }
    };
    var sub = observable.subscribe(handler);
    return function () {
      return sub.unsubscribe();
    };
  });
}
function fixObservableSubclass(subclass) {
  function set(key) {
    Object.defineProperty(subclass, key, {
      value: Observable
    });
  }
  if (typeof Symbol === "function" && Symbol.species) {
    set(Symbol.species);
  }
  set("@@species");
  return subclass;
}
function isPromiseLike(value) {
  return value && typeof value.then === "function";
}
var Concast = (function (_super) {
  tslib.__extends(Concast, _super);
  function Concast(sources) {
    var _this = _super.call(this, function (observer) {
      _this.addObserver(observer);
      return function () {
        return _this.removeObserver(observer);
      };
    }) || this;
    _this.observers = new Set();
    _this.addCount = 0;
    _this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
    _this.handlers = {
      next: function (result) {
        if (_this.sub !== null) {
          _this.latest = ["next", result];
          iterateObserversSafely(_this.observers, "next", result);
        }
      },
      error: function (error) {
        var sub = _this.sub;
        if (sub !== null) {
          if (sub) Promise.resolve().then(function () {
            return sub.unsubscribe();
          });
          _this.sub = null;
          _this.latest = ["error", error];
          _this.reject(error);
          iterateObserversSafely(_this.observers, "error", error);
        }
      },
      complete: function () {
        if (_this.sub !== null) {
          var value = _this.sources.shift();
          if (!value) {
            _this.sub = null;
            if (_this.latest && _this.latest[0] === "next") {
              _this.resolve(_this.latest[1]);
            } else {
              _this.resolve();
            }
            iterateObserversSafely(_this.observers, "complete");
          } else if (isPromiseLike(value)) {
            value.then(function (obs) {
              return _this.sub = obs.subscribe(_this.handlers);
            });
          } else {
            _this.sub = value.subscribe(_this.handlers);
          }
        }
      }
    };
    _this.cancel = function (reason) {
      _this.reject(reason);
      _this.sources = [];
      _this.handlers.complete();
    };
    _this.promise.catch(function (_) {});
    if (typeof sources === "function") {
      sources = [new Observable(sources)];
    }
    if (isPromiseLike(sources)) {
      sources.then(function (iterable) {
        return _this.start(iterable);
      }, _this.handlers.error);
    } else {
      _this.start(sources);
    }
    return _this;
  }
  Concast.prototype.start = function (sources) {
    if (this.sub !== void 0) return;
    this.sources = Array.from(sources);
    this.handlers.complete();
  };
  Concast.prototype.deliverLastMessage = function (observer) {
    if (this.latest) {
      var nextOrError = this.latest[0];
      var method = observer[nextOrError];
      if (method) {
        method.call(observer, this.latest[1]);
      }
      if (this.sub === null && nextOrError === "next" && observer.complete) {
        observer.complete();
      }
    }
  };
  Concast.prototype.addObserver = function (observer) {
    if (!this.observers.has(observer)) {
      this.deliverLastMessage(observer);
      this.observers.add(observer);
      ++this.addCount;
    }
  };
  Concast.prototype.removeObserver = function (observer, quietly) {
    if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {
      this.handlers.error(new Error("Observable cancelled prematurely"));
    }
  };
  Concast.prototype.cleanup = function (callback) {
    var _this = this;
    var called = false;
    var once = function () {
      if (!called) {
        called = true;
        _this.observers.delete(observer);
        callback();
      }
    };
    var observer = {
      next: once,
      error: once,
      complete: once
    };
    var count = this.addCount;
    this.addObserver(observer);
    this.addCount = count;
  };
  return Concast;
})(Observable);
fixObservableSubclass(Concast);
function isNonEmptyArray(value) {
  return Array.isArray(value) && value.length > 0;
}
function graphQLResultHasError(result) {
  return result.errors && result.errors.length > 0 || false;
}
var canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' && navigator.product === 'ReactNative');
function compact() {
  var objects = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    objects[_i] = arguments[_i];
  }
  var result = Object.create(null);
  objects.forEach(function (obj) {
    if (!obj) return;
    Object.keys(obj).forEach(function (key) {
      var value = obj[key];
      if (value !== void 0) {
        result[key] = value;
      }
    });
  });
  return result;
}
exports.Observable = Observable;
exports.Concast = Concast;
exports.DeepMerger = DeepMerger;
exports.addTypenameToDocument = addTypenameToDocument;
exports.argumentsObjectFromField = argumentsObjectFromField;
exports.asyncMap = asyncMap;
exports.buildQueryFromSelectionSet = buildQueryFromSelectionSet;
exports.canUseWeakMap = canUseWeakMap;
exports.checkDocument = checkDocument;
exports.cloneDeep = cloneDeep;
exports.compact = compact;
exports.concatPagination = concatPagination;
exports.createFragmentMap = createFragmentMap;
exports.fixObservableSubclass = fixObservableSubclass;
exports.getDefaultValues = getDefaultValues;
exports.getDirectiveNames = getDirectiveNames;
exports.getFragmentDefinition = getFragmentDefinition;
exports.getFragmentDefinitions = getFragmentDefinitions;
exports.getFragmentFromSelection = getFragmentFromSelection;
exports.getFragmentQueryDocument = getFragmentQueryDocument;
exports.getInclusionDirectives = getInclusionDirectives;
exports.getMainDefinition = getMainDefinition;
exports.getOperationDefinition = getOperationDefinition;
exports.getOperationName = getOperationName;
exports.getQueryDefinition = getQueryDefinition;
exports.getStoreKeyName = getStoreKeyName;
exports.getTypenameFromResult = getTypenameFromResult;
exports.graphQLResultHasError = graphQLResultHasError;
exports.hasClientExports = hasClientExports;
exports.hasDirectives = hasDirectives;
exports.isField = isField;
exports.isInlineFragment = isInlineFragment;
exports.isNonEmptyArray = isNonEmptyArray;
exports.isReference = isReference;
exports.iterateObserversSafely = iterateObserversSafely;
exports.makeReference = makeReference;
exports.maybeDeepFreeze = maybeDeepFreeze;
exports.mergeDeep = mergeDeep;
exports.mergeDeepArray = mergeDeepArray;
exports.offsetLimitPagination = offsetLimitPagination;
exports.relayStylePagination = relayStylePagination;
exports.removeArgumentsFromDocument = removeArgumentsFromDocument;
exports.removeClientSetsFromDocument = removeClientSetsFromDocument;
exports.removeConnectionDirectiveFromDocument = removeConnectionDirectiveFromDocument;
exports.removeDirectivesFromDocument = removeDirectivesFromDocument;
exports.removeFragmentSpreadFromDocument = removeFragmentSpreadFromDocument;
exports.resultKeyNameFromField = resultKeyNameFromField;
exports.shouldInclude = shouldInclude;
exports.storeKeyNameFromField = storeKeyNameFromField;
exports.valueToObjectRepresentation = valueToObjectRepresentation;

},{"process":"7AgFc","graphql":"5gqTn","ts-invariant":"3uYVD","tslib":"4rd38","fast-json-stable-stringify":"6mqMf","zen-observable":"47kMI","symbol-observable":"4nTep"}],"5gqTn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function get() {
    return _version.version;
  }
});
Object.defineProperty(exports, "versionInfo", {
  enumerable: true,
  get: function get() {
    return _version.versionInfo;
  }
});
Object.defineProperty(exports, "graphql", {
  enumerable: true,
  get: function get() {
    return _graphql.graphql;
  }
});
Object.defineProperty(exports, "graphqlSync", {
  enumerable: true,
  get: function get() {
    return _graphql.graphqlSync;
  }
});
Object.defineProperty(exports, "GraphQLSchema", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLSchema;
  }
});
Object.defineProperty(exports, "GraphQLDirective", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLDirective;
  }
});
Object.defineProperty(exports, "GraphQLScalarType", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLScalarType;
  }
});
Object.defineProperty(exports, "GraphQLObjectType", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLObjectType;
  }
});
Object.defineProperty(exports, "GraphQLInterfaceType", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLInterfaceType;
  }
});
Object.defineProperty(exports, "GraphQLUnionType", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLUnionType;
  }
});
Object.defineProperty(exports, "GraphQLEnumType", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLEnumType;
  }
});
Object.defineProperty(exports, "GraphQLInputObjectType", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLInputObjectType;
  }
});
Object.defineProperty(exports, "GraphQLList", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLList;
  }
});
Object.defineProperty(exports, "GraphQLNonNull", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLNonNull;
  }
});
Object.defineProperty(exports, "specifiedScalarTypes", {
  enumerable: true,
  get: function get() {
    return _index.specifiedScalarTypes;
  }
});
Object.defineProperty(exports, "GraphQLInt", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLInt;
  }
});
Object.defineProperty(exports, "GraphQLFloat", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLFloat;
  }
});
Object.defineProperty(exports, "GraphQLString", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLString;
  }
});
Object.defineProperty(exports, "GraphQLBoolean", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLBoolean;
  }
});
Object.defineProperty(exports, "GraphQLID", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLID;
  }
});
Object.defineProperty(exports, "specifiedDirectives", {
  enumerable: true,
  get: function get() {
    return _index.specifiedDirectives;
  }
});
Object.defineProperty(exports, "GraphQLIncludeDirective", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLIncludeDirective;
  }
});
Object.defineProperty(exports, "GraphQLSkipDirective", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLSkipDirective;
  }
});
Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLDeprecatedDirective;
  }
});
Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
  enumerable: true,
  get: function get() {
    return _index.GraphQLSpecifiedByDirective;
  }
});
Object.defineProperty(exports, "TypeKind", {
  enumerable: true,
  get: function get() {
    return _index.TypeKind;
  }
});
Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
  enumerable: true,
  get: function get() {
    return _index.DEFAULT_DEPRECATION_REASON;
  }
});
Object.defineProperty(exports, "introspectionTypes", {
  enumerable: true,
  get: function get() {
    return _index.introspectionTypes;
  }
});
Object.defineProperty(exports, "__Schema", {
  enumerable: true,
  get: function get() {
    return _index.__Schema;
  }
});
Object.defineProperty(exports, "__Directive", {
  enumerable: true,
  get: function get() {
    return _index.__Directive;
  }
});
Object.defineProperty(exports, "__DirectiveLocation", {
  enumerable: true,
  get: function get() {
    return _index.__DirectiveLocation;
  }
});
Object.defineProperty(exports, "__Type", {
  enumerable: true,
  get: function get() {
    return _index.__Type;
  }
});
Object.defineProperty(exports, "__Field", {
  enumerable: true,
  get: function get() {
    return _index.__Field;
  }
});
Object.defineProperty(exports, "__InputValue", {
  enumerable: true,
  get: function get() {
    return _index.__InputValue;
  }
});
Object.defineProperty(exports, "__EnumValue", {
  enumerable: true,
  get: function get() {
    return _index.__EnumValue;
  }
});
Object.defineProperty(exports, "__TypeKind", {
  enumerable: true,
  get: function get() {
    return _index.__TypeKind;
  }
});
Object.defineProperty(exports, "SchemaMetaFieldDef", {
  enumerable: true,
  get: function get() {
    return _index.SchemaMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeMetaFieldDef", {
  enumerable: true,
  get: function get() {
    return _index.TypeMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeNameMetaFieldDef", {
  enumerable: true,
  get: function get() {
    return _index.TypeNameMetaFieldDef;
  }
});
Object.defineProperty(exports, "isSchema", {
  enumerable: true,
  get: function get() {
    return _index.isSchema;
  }
});
Object.defineProperty(exports, "isDirective", {
  enumerable: true,
  get: function get() {
    return _index.isDirective;
  }
});
Object.defineProperty(exports, "isType", {
  enumerable: true,
  get: function get() {
    return _index.isType;
  }
});
Object.defineProperty(exports, "isScalarType", {
  enumerable: true,
  get: function get() {
    return _index.isScalarType;
  }
});
Object.defineProperty(exports, "isObjectType", {
  enumerable: true,
  get: function get() {
    return _index.isObjectType;
  }
});
Object.defineProperty(exports, "isInterfaceType", {
  enumerable: true,
  get: function get() {
    return _index.isInterfaceType;
  }
});
Object.defineProperty(exports, "isUnionType", {
  enumerable: true,
  get: function get() {
    return _index.isUnionType;
  }
});
Object.defineProperty(exports, "isEnumType", {
  enumerable: true,
  get: function get() {
    return _index.isEnumType;
  }
});
Object.defineProperty(exports, "isInputObjectType", {
  enumerable: true,
  get: function get() {
    return _index.isInputObjectType;
  }
});
Object.defineProperty(exports, "isListType", {
  enumerable: true,
  get: function get() {
    return _index.isListType;
  }
});
Object.defineProperty(exports, "isNonNullType", {
  enumerable: true,
  get: function get() {
    return _index.isNonNullType;
  }
});
Object.defineProperty(exports, "isInputType", {
  enumerable: true,
  get: function get() {
    return _index.isInputType;
  }
});
Object.defineProperty(exports, "isOutputType", {
  enumerable: true,
  get: function get() {
    return _index.isOutputType;
  }
});
Object.defineProperty(exports, "isLeafType", {
  enumerable: true,
  get: function get() {
    return _index.isLeafType;
  }
});
Object.defineProperty(exports, "isCompositeType", {
  enumerable: true,
  get: function get() {
    return _index.isCompositeType;
  }
});
Object.defineProperty(exports, "isAbstractType", {
  enumerable: true,
  get: function get() {
    return _index.isAbstractType;
  }
});
Object.defineProperty(exports, "isWrappingType", {
  enumerable: true,
  get: function get() {
    return _index.isWrappingType;
  }
});
Object.defineProperty(exports, "isNullableType", {
  enumerable: true,
  get: function get() {
    return _index.isNullableType;
  }
});
Object.defineProperty(exports, "isNamedType", {
  enumerable: true,
  get: function get() {
    return _index.isNamedType;
  }
});
Object.defineProperty(exports, "isRequiredArgument", {
  enumerable: true,
  get: function get() {
    return _index.isRequiredArgument;
  }
});
Object.defineProperty(exports, "isRequiredInputField", {
  enumerable: true,
  get: function get() {
    return _index.isRequiredInputField;
  }
});
Object.defineProperty(exports, "isSpecifiedScalarType", {
  enumerable: true,
  get: function get() {
    return _index.isSpecifiedScalarType;
  }
});
Object.defineProperty(exports, "isIntrospectionType", {
  enumerable: true,
  get: function get() {
    return _index.isIntrospectionType;
  }
});
Object.defineProperty(exports, "isSpecifiedDirective", {
  enumerable: true,
  get: function get() {
    return _index.isSpecifiedDirective;
  }
});
Object.defineProperty(exports, "assertSchema", {
  enumerable: true,
  get: function get() {
    return _index.assertSchema;
  }
});
Object.defineProperty(exports, "assertDirective", {
  enumerable: true,
  get: function get() {
    return _index.assertDirective;
  }
});
Object.defineProperty(exports, "assertType", {
  enumerable: true,
  get: function get() {
    return _index.assertType;
  }
});
Object.defineProperty(exports, "assertScalarType", {
  enumerable: true,
  get: function get() {
    return _index.assertScalarType;
  }
});
Object.defineProperty(exports, "assertObjectType", {
  enumerable: true,
  get: function get() {
    return _index.assertObjectType;
  }
});
Object.defineProperty(exports, "assertInterfaceType", {
  enumerable: true,
  get: function get() {
    return _index.assertInterfaceType;
  }
});
Object.defineProperty(exports, "assertUnionType", {
  enumerable: true,
  get: function get() {
    return _index.assertUnionType;
  }
});
Object.defineProperty(exports, "assertEnumType", {
  enumerable: true,
  get: function get() {
    return _index.assertEnumType;
  }
});
Object.defineProperty(exports, "assertInputObjectType", {
  enumerable: true,
  get: function get() {
    return _index.assertInputObjectType;
  }
});
Object.defineProperty(exports, "assertListType", {
  enumerable: true,
  get: function get() {
    return _index.assertListType;
  }
});
Object.defineProperty(exports, "assertNonNullType", {
  enumerable: true,
  get: function get() {
    return _index.assertNonNullType;
  }
});
Object.defineProperty(exports, "assertInputType", {
  enumerable: true,
  get: function get() {
    return _index.assertInputType;
  }
});
Object.defineProperty(exports, "assertOutputType", {
  enumerable: true,
  get: function get() {
    return _index.assertOutputType;
  }
});
Object.defineProperty(exports, "assertLeafType", {
  enumerable: true,
  get: function get() {
    return _index.assertLeafType;
  }
});
Object.defineProperty(exports, "assertCompositeType", {
  enumerable: true,
  get: function get() {
    return _index.assertCompositeType;
  }
});
Object.defineProperty(exports, "assertAbstractType", {
  enumerable: true,
  get: function get() {
    return _index.assertAbstractType;
  }
});
Object.defineProperty(exports, "assertWrappingType", {
  enumerable: true,
  get: function get() {
    return _index.assertWrappingType;
  }
});
Object.defineProperty(exports, "assertNullableType", {
  enumerable: true,
  get: function get() {
    return _index.assertNullableType;
  }
});
Object.defineProperty(exports, "assertNamedType", {
  enumerable: true,
  get: function get() {
    return _index.assertNamedType;
  }
});
Object.defineProperty(exports, "getNullableType", {
  enumerable: true,
  get: function get() {
    return _index.getNullableType;
  }
});
Object.defineProperty(exports, "getNamedType", {
  enumerable: true,
  get: function get() {
    return _index.getNamedType;
  }
});
Object.defineProperty(exports, "validateSchema", {
  enumerable: true,
  get: function get() {
    return _index.validateSchema;
  }
});
Object.defineProperty(exports, "assertValidSchema", {
  enumerable: true,
  get: function get() {
    return _index.assertValidSchema;
  }
});
Object.defineProperty(exports, "Token", {
  enumerable: true,
  get: function get() {
    return _index2.Token;
  }
});
Object.defineProperty(exports, "Source", {
  enumerable: true,
  get: function get() {
    return _index2.Source;
  }
});
Object.defineProperty(exports, "Location", {
  enumerable: true,
  get: function get() {
    return _index2.Location;
  }
});
Object.defineProperty(exports, "getLocation", {
  enumerable: true,
  get: function get() {
    return _index2.getLocation;
  }
});
Object.defineProperty(exports, "printLocation", {
  enumerable: true,
  get: function get() {
    return _index2.printLocation;
  }
});
Object.defineProperty(exports, "printSourceLocation", {
  enumerable: true,
  get: function get() {
    return _index2.printSourceLocation;
  }
});
Object.defineProperty(exports, "Lexer", {
  enumerable: true,
  get: function get() {
    return _index2.Lexer;
  }
});
Object.defineProperty(exports, "TokenKind", {
  enumerable: true,
  get: function get() {
    return _index2.TokenKind;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function get() {
    return _index2.parse;
  }
});
Object.defineProperty(exports, "parseValue", {
  enumerable: true,
  get: function get() {
    return _index2.parseValue;
  }
});
Object.defineProperty(exports, "parseType", {
  enumerable: true,
  get: function get() {
    return _index2.parseType;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function get() {
    return _index2.print;
  }
});
Object.defineProperty(exports, "visit", {
  enumerable: true,
  get: function get() {
    return _index2.visit;
  }
});
Object.defineProperty(exports, "visitInParallel", {
  enumerable: true,
  get: function get() {
    return _index2.visitInParallel;
  }
});
Object.defineProperty(exports, "getVisitFn", {
  enumerable: true,
  get: function get() {
    return _index2.getVisitFn;
  }
});
Object.defineProperty(exports, "BREAK", {
  enumerable: true,
  get: function get() {
    return _index2.BREAK;
  }
});
Object.defineProperty(exports, "Kind", {
  enumerable: true,
  get: function get() {
    return _index2.Kind;
  }
});
Object.defineProperty(exports, "DirectiveLocation", {
  enumerable: true,
  get: function get() {
    return _index2.DirectiveLocation;
  }
});
Object.defineProperty(exports, "isDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isDefinitionNode;
  }
});
Object.defineProperty(exports, "isExecutableDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isExecutableDefinitionNode;
  }
});
Object.defineProperty(exports, "isSelectionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isSelectionNode;
  }
});
Object.defineProperty(exports, "isValueNode", {
  enumerable: true,
  get: function get() {
    return _index2.isValueNode;
  }
});
Object.defineProperty(exports, "isTypeNode", {
  enumerable: true,
  get: function get() {
    return _index2.isTypeNode;
  }
});
Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isTypeSystemDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isTypeDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeSystemExtensionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isTypeSystemExtensionNode;
  }
});
Object.defineProperty(exports, "isTypeExtensionNode", {
  enumerable: true,
  get: function get() {
    return _index2.isTypeExtensionNode;
  }
});
Object.defineProperty(exports, "execute", {
  enumerable: true,
  get: function get() {
    return _index3.execute;
  }
});
Object.defineProperty(exports, "executeSync", {
  enumerable: true,
  get: function get() {
    return _index3.executeSync;
  }
});
Object.defineProperty(exports, "defaultFieldResolver", {
  enumerable: true,
  get: function get() {
    return _index3.defaultFieldResolver;
  }
});
Object.defineProperty(exports, "defaultTypeResolver", {
  enumerable: true,
  get: function get() {
    return _index3.defaultTypeResolver;
  }
});
Object.defineProperty(exports, "responsePathAsArray", {
  enumerable: true,
  get: function get() {
    return _index3.responsePathAsArray;
  }
});
Object.defineProperty(exports, "getDirectiveValues", {
  enumerable: true,
  get: function get() {
    return _index3.getDirectiveValues;
  }
});
Object.defineProperty(exports, "subscribe", {
  enumerable: true,
  get: function get() {
    return _index4.subscribe;
  }
});
Object.defineProperty(exports, "createSourceEventStream", {
  enumerable: true,
  get: function get() {
    return _index4.createSourceEventStream;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function get() {
    return _index5.validate;
  }
});
Object.defineProperty(exports, "ValidationContext", {
  enumerable: true,
  get: function get() {
    return _index5.ValidationContext;
  }
});
Object.defineProperty(exports, "specifiedRules", {
  enumerable: true,
  get: function get() {
    return _index5.specifiedRules;
  }
});
Object.defineProperty(exports, "ExecutableDefinitionsRule", {
  enumerable: true,
  get: function get() {
    return _index5.ExecutableDefinitionsRule;
  }
});
Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
  enumerable: true,
  get: function get() {
    return _index5.FieldsOnCorrectTypeRule;
  }
});
Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
  enumerable: true,
  get: function get() {
    return _index5.FragmentsOnCompositeTypesRule;
  }
});
Object.defineProperty(exports, "KnownArgumentNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.KnownArgumentNamesRule;
  }
});
Object.defineProperty(exports, "KnownDirectivesRule", {
  enumerable: true,
  get: function get() {
    return _index5.KnownDirectivesRule;
  }
});
Object.defineProperty(exports, "KnownFragmentNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.KnownFragmentNamesRule;
  }
});
Object.defineProperty(exports, "KnownTypeNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.KnownTypeNamesRule;
  }
});
Object.defineProperty(exports, "LoneAnonymousOperationRule", {
  enumerable: true,
  get: function get() {
    return _index5.LoneAnonymousOperationRule;
  }
});
Object.defineProperty(exports, "NoFragmentCyclesRule", {
  enumerable: true,
  get: function get() {
    return _index5.NoFragmentCyclesRule;
  }
});
Object.defineProperty(exports, "NoUndefinedVariablesRule", {
  enumerable: true,
  get: function get() {
    return _index5.NoUndefinedVariablesRule;
  }
});
Object.defineProperty(exports, "NoUnusedFragmentsRule", {
  enumerable: true,
  get: function get() {
    return _index5.NoUnusedFragmentsRule;
  }
});
Object.defineProperty(exports, "NoUnusedVariablesRule", {
  enumerable: true,
  get: function get() {
    return _index5.NoUnusedVariablesRule;
  }
});
Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
  enumerable: true,
  get: function get() {
    return _index5.OverlappingFieldsCanBeMergedRule;
  }
});
Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
  enumerable: true,
  get: function get() {
    return _index5.PossibleFragmentSpreadsRule;
  }
});
Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
  enumerable: true,
  get: function get() {
    return _index5.ProvidedRequiredArgumentsRule;
  }
});
Object.defineProperty(exports, "ScalarLeafsRule", {
  enumerable: true,
  get: function get() {
    return _index5.ScalarLeafsRule;
  }
});
Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
  enumerable: true,
  get: function get() {
    return _index5.SingleFieldSubscriptionsRule;
  }
});
Object.defineProperty(exports, "UniqueArgumentNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueArgumentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueDirectivesPerLocationRule;
  }
});
Object.defineProperty(exports, "UniqueFragmentNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueFragmentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueInputFieldNamesRule;
  }
});
Object.defineProperty(exports, "UniqueOperationNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueOperationNamesRule;
  }
});
Object.defineProperty(exports, "UniqueVariableNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueVariableNamesRule;
  }
});
Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
  enumerable: true,
  get: function get() {
    return _index5.ValuesOfCorrectTypeRule;
  }
});
Object.defineProperty(exports, "VariablesAreInputTypesRule", {
  enumerable: true,
  get: function get() {
    return _index5.VariablesAreInputTypesRule;
  }
});
Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
  enumerable: true,
  get: function get() {
    return _index5.VariablesInAllowedPositionRule;
  }
});
Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
  enumerable: true,
  get: function get() {
    return _index5.LoneSchemaDefinitionRule;
  }
});
Object.defineProperty(exports, "UniqueOperationTypesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueOperationTypesRule;
  }
});
Object.defineProperty(exports, "UniqueTypeNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueTypeNamesRule;
  }
});
Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueEnumValueNamesRule;
  }
});
Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueFieldDefinitionNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
  enumerable: true,
  get: function get() {
    return _index5.UniqueDirectiveNamesRule;
  }
});
Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
  enumerable: true,
  get: function get() {
    return _index5.PossibleTypeExtensionsRule;
  }
});
Object.defineProperty(exports, "NoDeprecatedCustomRule", {
  enumerable: true,
  get: function get() {
    return _index5.NoDeprecatedCustomRule;
  }
});
Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
  enumerable: true,
  get: function get() {
    return _index5.NoSchemaIntrospectionCustomRule;
  }
});
Object.defineProperty(exports, "GraphQLError", {
  enumerable: true,
  get: function get() {
    return _index6.GraphQLError;
  }
});
Object.defineProperty(exports, "syntaxError", {
  enumerable: true,
  get: function get() {
    return _index6.syntaxError;
  }
});
Object.defineProperty(exports, "locatedError", {
  enumerable: true,
  get: function get() {
    return _index6.locatedError;
  }
});
Object.defineProperty(exports, "printError", {
  enumerable: true,
  get: function get() {
    return _index6.printError;
  }
});
Object.defineProperty(exports, "formatError", {
  enumerable: true,
  get: function get() {
    return _index6.formatError;
  }
});
Object.defineProperty(exports, "getIntrospectionQuery", {
  enumerable: true,
  get: function get() {
    return _index7.getIntrospectionQuery;
  }
});
Object.defineProperty(exports, "getOperationAST", {
  enumerable: true,
  get: function get() {
    return _index7.getOperationAST;
  }
});
Object.defineProperty(exports, "getOperationRootType", {
  enumerable: true,
  get: function get() {
    return _index7.getOperationRootType;
  }
});
Object.defineProperty(exports, "introspectionFromSchema", {
  enumerable: true,
  get: function get() {
    return _index7.introspectionFromSchema;
  }
});
Object.defineProperty(exports, "buildClientSchema", {
  enumerable: true,
  get: function get() {
    return _index7.buildClientSchema;
  }
});
Object.defineProperty(exports, "buildASTSchema", {
  enumerable: true,
  get: function get() {
    return _index7.buildASTSchema;
  }
});
Object.defineProperty(exports, "buildSchema", {
  enumerable: true,
  get: function get() {
    return _index7.buildSchema;
  }
});
Object.defineProperty(exports, "getDescription", {
  enumerable: true,
  get: function get() {
    return _index7.getDescription;
  }
});
Object.defineProperty(exports, "extendSchema", {
  enumerable: true,
  get: function get() {
    return _index7.extendSchema;
  }
});
Object.defineProperty(exports, "lexicographicSortSchema", {
  enumerable: true,
  get: function get() {
    return _index7.lexicographicSortSchema;
  }
});
Object.defineProperty(exports, "printSchema", {
  enumerable: true,
  get: function get() {
    return _index7.printSchema;
  }
});
Object.defineProperty(exports, "printType", {
  enumerable: true,
  get: function get() {
    return _index7.printType;
  }
});
Object.defineProperty(exports, "printIntrospectionSchema", {
  enumerable: true,
  get: function get() {
    return _index7.printIntrospectionSchema;
  }
});
Object.defineProperty(exports, "typeFromAST", {
  enumerable: true,
  get: function get() {
    return _index7.typeFromAST;
  }
});
Object.defineProperty(exports, "valueFromAST", {
  enumerable: true,
  get: function get() {
    return _index7.valueFromAST;
  }
});
Object.defineProperty(exports, "valueFromASTUntyped", {
  enumerable: true,
  get: function get() {
    return _index7.valueFromASTUntyped;
  }
});
Object.defineProperty(exports, "astFromValue", {
  enumerable: true,
  get: function get() {
    return _index7.astFromValue;
  }
});
Object.defineProperty(exports, "TypeInfo", {
  enumerable: true,
  get: function get() {
    return _index7.TypeInfo;
  }
});
Object.defineProperty(exports, "visitWithTypeInfo", {
  enumerable: true,
  get: function get() {
    return _index7.visitWithTypeInfo;
  }
});
Object.defineProperty(exports, "coerceInputValue", {
  enumerable: true,
  get: function get() {
    return _index7.coerceInputValue;
  }
});
Object.defineProperty(exports, "concatAST", {
  enumerable: true,
  get: function get() {
    return _index7.concatAST;
  }
});
Object.defineProperty(exports, "separateOperations", {
  enumerable: true,
  get: function get() {
    return _index7.separateOperations;
  }
});
Object.defineProperty(exports, "stripIgnoredCharacters", {
  enumerable: true,
  get: function get() {
    return _index7.stripIgnoredCharacters;
  }
});
Object.defineProperty(exports, "isEqualType", {
  enumerable: true,
  get: function get() {
    return _index7.isEqualType;
  }
});
Object.defineProperty(exports, "isTypeSubTypeOf", {
  enumerable: true,
  get: function get() {
    return _index7.isTypeSubTypeOf;
  }
});
Object.defineProperty(exports, "doTypesOverlap", {
  enumerable: true,
  get: function get() {
    return _index7.doTypesOverlap;
  }
});
Object.defineProperty(exports, "assertValidName", {
  enumerable: true,
  get: function get() {
    return _index7.assertValidName;
  }
});
Object.defineProperty(exports, "isValidNameError", {
  enumerable: true,
  get: function get() {
    return _index7.isValidNameError;
  }
});
Object.defineProperty(exports, "BreakingChangeType", {
  enumerable: true,
  get: function get() {
    return _index7.BreakingChangeType;
  }
});
Object.defineProperty(exports, "DangerousChangeType", {
  enumerable: true,
  get: function get() {
    return _index7.DangerousChangeType;
  }
});
Object.defineProperty(exports, "findBreakingChanges", {
  enumerable: true,
  get: function get() {
    return _index7.findBreakingChanges;
  }
});
Object.defineProperty(exports, "findDangerousChanges", {
  enumerable: true,
  get: function get() {
    return _index7.findDangerousChanges;
  }
});
Object.defineProperty(exports, "findDeprecatedUsages", {
  enumerable: true,
  get: function get() {
    return _index7.findDeprecatedUsages;
  }
});

var _version = require("./version.js");

var _graphql = require("./graphql.js");

var _index = require("./type/index.js");

var _index2 = require("./language/index.js");

var _index3 = require("./execution/index.js");

var _index4 = require("./subscription/index.js");

var _index5 = require("./validation/index.js");

var _index6 = require("./error/index.js");

var _index7 = require("./utilities/index.js");

},{"./version.js":"Tng3H","./graphql.js":"4pQeE","./type/index.js":"2E3LF","./language/index.js":"2yf4q","./execution/index.js":"XOqrr","./subscription/index.js":"5T6mJ","./validation/index.js":"4kkb7","./error/index.js":"1abKY","./utilities/index.js":"6Mx8s"}],"Tng3H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.versionInfo = exports.version = void 0;

/**
 * Note: This file is autogenerated using "resources/gen-version.js" script and
 * automatically updated by "npm version" command.
 */

/**
 * A string containing the version of the GraphQL.js library
 */
var version = '15.5.0';
/**
 * An object containing the components of the GraphQL.js version string
 */

exports.version = version;
var versionInfo = Object.freeze({
  major: 15,
  minor: 5,
  patch: 0,
  preReleaseTag: null
});
exports.versionInfo = versionInfo;

},{}],"4pQeE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.graphql = graphql;
exports.graphqlSync = graphqlSync;

var _isPromise = _interopRequireDefault(require("./jsutils/isPromise.js"));

var _parser = require("./language/parser.js");

var _validate = require("./validation/validate.js");

var _validate2 = require("./type/validate.js");

var _execute = require("./execution/execute.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
  var _arguments = arguments;

  /* eslint-enable no-redeclare */
  // Always return a Promise for a consistent API.
  return new Promise(function (resolve) {
    return resolve( // Extract arguments from object args if provided.
    _arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
      schema: argsOrSchema,
      source: source,
      rootValue: rootValue,
      contextValue: contextValue,
      variableValues: variableValues,
      operationName: operationName,
      fieldResolver: fieldResolver,
      typeResolver: typeResolver
    }));
  });
}
/**
 * The graphqlSync function also fulfills GraphQL operations by parsing,
 * validating, and executing a GraphQL document along side a GraphQL schema.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */


function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
  /* eslint-enable no-redeclare */
  // Extract arguments from object args if provided.
  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
    schema: argsOrSchema,
    source: source,
    rootValue: rootValue,
    contextValue: contextValue,
    variableValues: variableValues,
    operationName: operationName,
    fieldResolver: fieldResolver,
    typeResolver: typeResolver
  }); // Assert that the execution was synchronous.

  if ((0, _isPromise.default)(result)) {
    throw new Error('GraphQL execution failed to complete synchronously.');
  }

  return result;
}

function graphqlImpl(args) {
  var schema = args.schema,
      source = args.source,
      rootValue = args.rootValue,
      contextValue = args.contextValue,
      variableValues = args.variableValues,
      operationName = args.operationName,
      fieldResolver = args.fieldResolver,
      typeResolver = args.typeResolver; // Validate Schema

  var schemaValidationErrors = (0, _validate2.validateSchema)(schema);

  if (schemaValidationErrors.length > 0) {
    return {
      errors: schemaValidationErrors
    };
  } // Parse


  var document;

  try {
    document = (0, _parser.parse)(source);
  } catch (syntaxError) {
    return {
      errors: [syntaxError]
    };
  } // Validate


  var validationErrors = (0, _validate.validate)(schema, document);

  if (validationErrors.length > 0) {
    return {
      errors: validationErrors
    };
  } // Execute


  return (0, _execute.execute)({
    schema: schema,
    document: document,
    rootValue: rootValue,
    contextValue: contextValue,
    variableValues: variableValues,
    operationName: operationName,
    fieldResolver: fieldResolver,
    typeResolver: typeResolver
  });
}

},{"./jsutils/isPromise.js":"7eMka","./language/parser.js":"3IZvo","./validation/validate.js":"4pm1K","./type/validate.js":"4v4RB","./execution/execute.js":"4vZSk"}],"7eMka":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPromise;

/**
 * Returns true if the value acts like a Promise, i.e. has a "then" function,
 * otherwise returns false.
 */
// eslint-disable-next-line no-redeclare
function isPromise(value) {
  return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
}

},{}],"3IZvo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.parseValue = parseValue;
exports.parseType = parseType;
exports.Parser = void 0;

var _syntaxError = require("../error/syntaxError.js");

var _kinds = require("./kinds.js");

var _ast = require("./ast.js");

var _tokenKind = require("./tokenKind.js");

var _source = require("./source.js");

var _directiveLocation = require("./directiveLocation.js");

var _lexer = require("./lexer.js");

/**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */
function parse(source, options) {
  var parser = new Parser(source, options);
  return parser.parseDocument();
}
/**
 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
 * that value.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Values directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: valueFromAST().
 */


function parseValue(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(_tokenKind.TokenKind.SOF);
  var value = parser.parseValueLiteral(false);
  parser.expectToken(_tokenKind.TokenKind.EOF);
  return value;
}
/**
 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
 * that type.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Types directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: typeFromAST().
 */


function parseType(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(_tokenKind.TokenKind.SOF);
  var type = parser.parseTypeReference();
  parser.expectToken(_tokenKind.TokenKind.EOF);
  return type;
}
/**
 * This class is exported only to assist people in implementing their own parsers
 * without duplicating too much code and should be used only as last resort for cases
 * such as experimental syntax or if certain features could not be contributed upstream.
 *
 * It is still part of the internal API and is versioned, so any changes to it are never
 * considered breaking changes. If you still need to support multiple versions of the
 * library, please use the `versionInfo` variable for version detection.
 *
 * @internal
 */


var Parser = /*#__PURE__*/function () {
  function Parser(source, options) {
    var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
    this._lexer = new _lexer.Lexer(sourceObj);
    this._options = options;
  }
  /**
   * Converts a name lex token into a name parse node.
   */


  var _proto = Parser.prototype;

  _proto.parseName = function parseName() {
    var token = this.expectToken(_tokenKind.TokenKind.NAME);
    return {
      kind: _kinds.Kind.NAME,
      value: token.value,
      loc: this.loc(token)
    };
  } // Implements the parsing rules in the Document section.

  /**
   * Document : Definition+
   */
  ;

  _proto.parseDocument = function parseDocument() {
    var start = this._lexer.token;
    return {
      kind: _kinds.Kind.DOCUMENT,
      definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF),
      loc: this.loc(start)
    };
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   */
  ;

  _proto.parseDefinition = function parseDefinition() {
    if (this.peek(_tokenKind.TokenKind.NAME)) {
      switch (this._lexer.token.value) {
        case 'query':
        case 'mutation':
        case 'subscription':
          return this.parseOperationDefinition();

        case 'fragment':
          return this.parseFragmentDefinition();

        case 'schema':
        case 'scalar':
        case 'type':
        case 'interface':
        case 'union':
        case 'enum':
        case 'input':
        case 'directive':
          return this.parseTypeSystemDefinition();

        case 'extend':
          return this.parseTypeSystemExtension();
      }
    } else if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    } else if (this.peekDescription()) {
      return this.parseTypeSystemDefinition();
    }

    throw this.unexpected();
  } // Implements the parsing rules in the Operations section.

  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  ;

  _proto.parseOperationDefinition = function parseOperationDefinition() {
    var start = this._lexer.token;

    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
      return {
        kind: _kinds.Kind.OPERATION_DEFINITION,
        operation: 'query',
        name: undefined,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }

    var operation = this.parseOperationType();
    var name;

    if (this.peek(_tokenKind.TokenKind.NAME)) {
      name = this.parseName();
    }

    return {
      kind: _kinds.Kind.OPERATION_DEFINITION,
      operation: operation,
      name: name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }
  /**
   * OperationType : one of query mutation subscription
   */
  ;

  _proto.parseOperationType = function parseOperationType() {
    var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);

    switch (operationToken.value) {
      case 'query':
        return 'query';

      case 'mutation':
        return 'mutation';

      case 'subscription':
        return 'subscription';
    }

    throw this.unexpected(operationToken);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  ;

  _proto.parseVariableDefinitions = function parseVariableDefinitions() {
    return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  ;

  _proto.parseVariableDefinition = function parseVariableDefinition() {
    var start = this._lexer.token;
    return {
      kind: _kinds.Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,
      directives: this.parseDirectives(true),
      loc: this.loc(start)
    };
  }
  /**
   * Variable : $ Name
   */
  ;

  _proto.parseVariable = function parseVariable() {
    var start = this._lexer.token;
    this.expectToken(_tokenKind.TokenKind.DOLLAR);
    return {
      kind: _kinds.Kind.VARIABLE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  }
  /**
   * SelectionSet : { Selection+ }
   */
  ;

  _proto.parseSelectionSet = function parseSelectionSet() {
    var start = this._lexer.token;
    return {
      kind: _kinds.Kind.SELECTION_SET,
      selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  ;

  _proto.parseSelection = function parseSelection() {
    return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  ;

  _proto.parseField = function parseField() {
    var start = this._lexer.token;
    var nameOrAlias = this.parseName();
    var alias;
    var name;

    if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }

    return {
      kind: _kinds.Kind.FIELD,
      alias: alias,
      name: name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,
      loc: this.loc(start)
    };
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  ;

  _proto.parseArguments = function parseArguments(isConst) {
    var item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  ;

  _proto.parseArgument = function parseArgument() {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(_tokenKind.TokenKind.COLON);
    return {
      kind: _kinds.Kind.ARGUMENT,
      name: name,
      value: this.parseValueLiteral(false),
      loc: this.loc(start)
    };
  };

  _proto.parseConstArgument = function parseConstArgument() {
    var start = this._lexer.token;
    return {
      kind: _kinds.Kind.ARGUMENT,
      name: this.parseName(),
      value: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseValueLiteral(true)),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Fragments section.

  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  ;

  _proto.parseFragment = function parseFragment() {
    var start = this._lexer.token;
    this.expectToken(_tokenKind.TokenKind.SPREAD);
    var hasTypeCondition = this.expectOptionalKeyword('on');

    if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
      return {
        kind: _kinds.Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false),
        loc: this.loc(start)
      };
    }

    return {
      kind: _kinds.Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  ;

  _proto.parseFragmentDefinition = function parseFragmentDefinition() {
    var _this$_options;

    var start = this._lexer.token;
    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes
    // the grammar of FragmentDefinition:
    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
      return {
        kind: _kinds.Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }

    return {
      kind: _kinds.Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }
  /**
   * FragmentName : Name but not `on`
   */
  ;

  _proto.parseFragmentName = function parseFragmentName() {
    if (this._lexer.token.value === 'on') {
      throw this.unexpected();
    }

    return this.parseName();
  } // Implements the parsing rules in the Values section.

  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  ;

  _proto.parseValueLiteral = function parseValueLiteral(isConst) {
    var token = this._lexer.token;

    switch (token.kind) {
      case _tokenKind.TokenKind.BRACKET_L:
        return this.parseList(isConst);

      case _tokenKind.TokenKind.BRACE_L:
        return this.parseObject(isConst);

      case _tokenKind.TokenKind.INT:
        this._lexer.advance();

        return {
          kind: _kinds.Kind.INT,
          value: token.value,
          loc: this.loc(token)
        };

      case _tokenKind.TokenKind.FLOAT:
        this._lexer.advance();

        return {
          kind: _kinds.Kind.FLOAT,
          value: token.value,
          loc: this.loc(token)
        };

      case _tokenKind.TokenKind.STRING:
      case _tokenKind.TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();

      case _tokenKind.TokenKind.NAME:
        this._lexer.advance();

        switch (token.value) {
          case 'true':
            return {
              kind: _kinds.Kind.BOOLEAN,
              value: true,
              loc: this.loc(token)
            };

          case 'false':
            return {
              kind: _kinds.Kind.BOOLEAN,
              value: false,
              loc: this.loc(token)
            };

          case 'null':
            return {
              kind: _kinds.Kind.NULL,
              loc: this.loc(token)
            };

          default:
            return {
              kind: _kinds.Kind.ENUM,
              value: token.value,
              loc: this.loc(token)
            };
        }

      case _tokenKind.TokenKind.DOLLAR:
        if (!isConst) {
          return this.parseVariable();
        }

        break;
    }

    throw this.unexpected();
  };

  _proto.parseStringLiteral = function parseStringLiteral() {
    var token = this._lexer.token;

    this._lexer.advance();

    return {
      kind: _kinds.Kind.STRING,
      value: token.value,
      block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,
      loc: this.loc(token)
    };
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  ;

  _proto.parseList = function parseList(isConst) {
    var _this = this;

    var start = this._lexer.token;

    var item = function item() {
      return _this.parseValueLiteral(isConst);
    };

    return {
      kind: _kinds.Kind.LIST,
      values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R),
      loc: this.loc(start)
    };
  }
  /**
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   */
  ;

  _proto.parseObject = function parseObject(isConst) {
    var _this2 = this;

    var start = this._lexer.token;

    var item = function item() {
      return _this2.parseObjectField(isConst);
    };

    return {
      kind: _kinds.Kind.OBJECT,
      fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  ;

  _proto.parseObjectField = function parseObjectField(isConst) {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(_tokenKind.TokenKind.COLON);
    return {
      kind: _kinds.Kind.OBJECT_FIELD,
      name: name,
      value: this.parseValueLiteral(isConst),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Directives section.

  /**
   * Directives[Const] : Directive[?Const]+
   */
  ;

  _proto.parseDirectives = function parseDirectives(isConst) {
    var directives = [];

    while (this.peek(_tokenKind.TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }

    return directives;
  }
  /**
   * Directive[Const] : @ Name Arguments[?Const]?
   */
  ;

  _proto.parseDirective = function parseDirective(isConst) {
    var start = this._lexer.token;
    this.expectToken(_tokenKind.TokenKind.AT);
    return {
      kind: _kinds.Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Types section.

  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  ;

  _proto.parseTypeReference = function parseTypeReference() {
    var start = this._lexer.token;
    var type;

    if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
      type = this.parseTypeReference();
      this.expectToken(_tokenKind.TokenKind.BRACKET_R);
      type = {
        kind: _kinds.Kind.LIST_TYPE,
        type: type,
        loc: this.loc(start)
      };
    } else {
      type = this.parseNamedType();
    }

    if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
      return {
        kind: _kinds.Kind.NON_NULL_TYPE,
        type: type,
        loc: this.loc(start)
      };
    }

    return type;
  }
  /**
   * NamedType : Name
   */
  ;

  _proto.parseNamedType = function parseNamedType() {
    var start = this._lexer.token;
    return {
      kind: _kinds.Kind.NAMED_TYPE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Type Definition section.

  /**
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  ;

  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
    // Many definitions begin with a description and require a lookahead.
    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;

    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
      switch (keywordToken.value) {
        case 'schema':
          return this.parseSchemaDefinition();

        case 'scalar':
          return this.parseScalarTypeDefinition();

        case 'type':
          return this.parseObjectTypeDefinition();

        case 'interface':
          return this.parseInterfaceTypeDefinition();

        case 'union':
          return this.parseUnionTypeDefinition();

        case 'enum':
          return this.parseEnumTypeDefinition();

        case 'input':
          return this.parseInputObjectTypeDefinition();

        case 'directive':
          return this.parseDirectiveDefinition();
      }
    }

    throw this.unexpected(keywordToken);
  };

  _proto.peekDescription = function peekDescription() {
    return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  ;

  _proto.parseDescription = function parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  }
  /**
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   */
  ;

  _proto.parseSchemaDefinition = function parseSchemaDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('schema');
    var directives = this.parseDirectives(true);
    var operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
    return {
      kind: _kinds.Kind.SCHEMA_DEFINITION,
      description: description,
      directives: directives,
      operationTypes: operationTypes,
      loc: this.loc(start)
    };
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  ;

  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
    var start = this._lexer.token;
    var operation = this.parseOperationType();
    this.expectToken(_tokenKind.TokenKind.COLON);
    var type = this.parseNamedType();
    return {
      kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
      operation: operation,
      type: type,
      loc: this.loc(start)
    };
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  ;

  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('scalar');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  ;

  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('type');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    return {
      kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
      description: description,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  ;

  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
    var _this$_options2;

    if (!this.expectOptionalKeyword('implements')) {
      return [];
    }

    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
      var types = []; // Optional leading ampersand

      this.expectOptionalToken(_tokenKind.TokenKind.AMP);

      do {
        types.push(this.parseNamedType());
      } while (this.expectOptionalToken(_tokenKind.TokenKind.AMP) || this.peek(_tokenKind.TokenKind.NAME));

      return types;
    }

    return this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType);
  }
  /**
   * FieldsDefinition : { FieldDefinition+ }
   */
  ;

  _proto.parseFieldsDefinition = function parseFieldsDefinition() {
    var _this$_options3;

    // Legacy support for the SDL?
    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKind.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKind.TokenKind.BRACE_R) {
      this._lexer.advance();

      this._lexer.advance();

      return [];
    }

    return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  ;

  _proto.parseFieldDefinition = function parseFieldDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    this.expectToken(_tokenKind.TokenKind.COLON);
    var type = this.parseTypeReference();
    var directives = this.parseDirectives(true);
    return {
      kind: _kinds.Kind.FIELD_DEFINITION,
      description: description,
      name: name,
      arguments: args,
      type: type,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  ;

  _proto.parseArgumentDefs = function parseArgumentDefs() {
    return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  ;

  _proto.parseInputValueDef = function parseInputValueDef() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    this.expectToken(_tokenKind.TokenKind.COLON);
    var type = this.parseTypeReference();
    var defaultValue;

    if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
      defaultValue = this.parseValueLiteral(true);
    }

    var directives = this.parseDirectives(true);
    return {
      kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
      description: description,
      name: name,
      type: type,
      defaultValue: defaultValue,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  ;

  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('interface');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    return {
      kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
      description: description,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  ;

  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('union');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();
    return {
      kind: _kinds.Kind.UNION_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      types: types,
      loc: this.loc(start)
    };
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  ;

  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
    return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  ;

  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('enum');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();
    return {
      kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      values: values,
      loc: this.loc(start)
    };
  }
  /**
   * EnumValuesDefinition : { EnumValueDefinition+ }
   */
  ;

  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
    return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   *
   * EnumValue : Name
   */
  ;

  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  ;

  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('input');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields = this.parseInputFieldsDefinition();
    return {
      kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * InputFieldsDefinition : { InputValueDefinition+ }
   */
  ;

  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
    return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  ;

  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
    var keywordToken = this._lexer.lookahead();

    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
      switch (keywordToken.value) {
        case 'schema':
          return this.parseSchemaExtension();

        case 'scalar':
          return this.parseScalarTypeExtension();

        case 'type':
          return this.parseObjectTypeExtension();

        case 'interface':
          return this.parseInterfaceTypeExtension();

        case 'union':
          return this.parseUnionTypeExtension();

        case 'enum':
          return this.parseEnumTypeExtension();

        case 'input':
          return this.parseInputObjectTypeExtension();
      }
    }

    throw this.unexpected(keywordToken);
  }
  /**
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   */
  ;

  _proto.parseSchemaExtension = function parseSchemaExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('schema');
    var directives = this.parseDirectives(true);
    var operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);

    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.SCHEMA_EXTENSION,
      directives: directives,
      operationTypes: operationTypes,
      loc: this.loc(start)
    };
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  ;

  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('scalar');
    var name = this.parseName();
    var directives = this.parseDirectives(true);

    if (directives.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
      name: name,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  ;

  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('type');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();

    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  ;

  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('interface');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();

    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  ;

  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('union');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();

    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.UNION_TYPE_EXTENSION,
      name: name,
      directives: directives,
      types: types,
      loc: this.loc(start)
    };
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  ;

  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('enum');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();

    if (directives.length === 0 && values.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
      name: name,
      directives: directives,
      values: values,
      loc: this.loc(start)
    };
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  ;

  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('input');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields = this.parseInputFieldsDefinition();

    if (directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name: name,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   */
  ;

  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('directive');
    this.expectToken(_tokenKind.TokenKind.AT);
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    var repeatable = this.expectOptionalKeyword('repeatable');
    this.expectKeyword('on');
    var locations = this.parseDirectiveLocations();
    return {
      kind: _kinds.Kind.DIRECTIVE_DEFINITION,
      description: description,
      name: name,
      arguments: args,
      repeatable: repeatable,
      locations: locations,
      loc: this.loc(start)
    };
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  ;

  _proto.parseDirectiveLocations = function parseDirectiveLocations() {
    return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  ;

  _proto.parseDirectiveLocation = function parseDirectiveLocation() {
    var start = this._lexer.token;
    var name = this.parseName();

    if (_directiveLocation.DirectiveLocation[name.value] !== undefined) {
      return name;
    }

    throw this.unexpected(start);
  } // Core parsing utility functions

  /**
   * Returns a location object, used to identify the place in the source that created a given parsed object.
   */
  ;

  _proto.loc = function loc(startToken) {
    var _this$_options4;

    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
      return new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
    }
  }
  /**
   * Determines if the next token is of a given kind
   */
  ;

  _proto.peek = function peek(kind) {
    return this._lexer.token.kind === kind;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  ;

  _proto.expectToken = function expectToken(kind) {
    var token = this._lexer.token;

    if (token.kind === kind) {
      this._lexer.advance();

      return token;
    }

    throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and return undefined.
   */
  ;

  _proto.expectOptionalToken = function expectOptionalToken(kind) {
    var token = this._lexer.token;

    if (token.kind === kind) {
      this._lexer.advance();

      return token;
    }

    return undefined;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  ;

  _proto.expectKeyword = function expectKeyword(value) {
    var token = this._lexer.token;

    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
      this._lexer.advance();
    } else {
      throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
    }
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  ;

  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
    var token = this._lexer.token;

    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
      this._lexer.advance();

      return true;
    }

    return false;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  ;

  _proto.unexpected = function unexpected(atToken) {
    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  ;

  _proto.any = function any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];

    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }

    return nodes;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  ;

  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      var nodes = [];

      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));

      return nodes;
    }

    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  ;

  _proto.many = function many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];

    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));

    return nodes;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  ;

  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    var nodes = [];

    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));

    return nodes;
  };

  return Parser;
}();
/**
 * A helper function to describe a token as a string for debugging.
 */


exports.Parser = Parser;

function getTokenDesc(token) {
  var value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
}
/**
 * A helper function to describe a token kind as a string for debugging.
 */


function getTokenKindDesc(kind) {
  return (0, _lexer.isPunctuatorTokenKind)(kind) ? "\"".concat(kind, "\"") : kind;
}

},{"../error/syntaxError.js":"1YalC","./kinds.js":"6m0P6","./ast.js":"swB0t","./tokenKind.js":"3Ou8x","./source.js":"4CqkM","./directiveLocation.js":"3sgz1","./lexer.js":"6U1AF"}],"1YalC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syntaxError = syntaxError;

var _GraphQLError = require("./GraphQLError.js");

/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */
function syntaxError(source, position, description) {
  return new _GraphQLError.GraphQLError("Syntax Error: ".concat(description), undefined, source, [position]);
}

},{"./GraphQLError.js":"cXily"}],"cXily":[function(require,module,exports) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printError = printError;
exports.GraphQLError = void 0;

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _symbols = require("../polyfills/symbols.js");

var _location = require("../language/location.js");

var _printLocation = require("../language/printLocation.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * A GraphQLError describes an Error found during the parse, validate, or
 * execute phases of performing a GraphQL operation. In addition to a message
 * and stack trace, it also includes information about the locations in a
 * GraphQL document and/or execution result that correspond to the Error.
 */
var GraphQLError = /*#__PURE__*/function (_Error) {
  _inherits(GraphQLError, _Error);

  var _super = _createSuper(GraphQLError);

  /**
   * A message describing the Error for debugging purposes.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   *
   * Note: should be treated as readonly, despite invariant usage.
   */

  /**
   * An array of { line, column } locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */

  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */

  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */

  /**
   * The original error thrown from a field resolver during execution.
   */

  /**
   * Extension fields to add to the formatted error.
   */
  function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {
    var _locations2, _source2, _positions2, _extensions2;

    var _this;

    _classCallCheck(this, GraphQLError);

    _this = _super.call(this, message); // Compute list of blame nodes.

    var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.


    var _source = source;

    if (!_source && _nodes) {
      var _nodes$0$loc;

      _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
    }

    var _positions = positions;

    if (!_positions && _nodes) {
      _positions = _nodes.reduce(function (list, node) {
        if (node.loc) {
          list.push(node.loc.start);
        }

        return list;
      }, []);
    }

    if (_positions && _positions.length === 0) {
      _positions = undefined;
    }

    var _locations;

    if (positions && source) {
      _locations = positions.map(function (pos) {
        return (0, _location.getLocation)(source, pos);
      });
    } else if (_nodes) {
      _locations = _nodes.reduce(function (list, node) {
        if (node.loc) {
          list.push((0, _location.getLocation)(node.loc.source, node.loc.start));
        }

        return list;
      }, []);
    }

    var _extensions = extensions;

    if (_extensions == null && originalError != null) {
      var originalExtensions = originalError.extensions;

      if ((0, _isObjectLike.default)(originalExtensions)) {
        _extensions = originalExtensions;
      }
    }

    Object.defineProperties(_assertThisInitialized(_this), {
      name: {
        value: 'GraphQLError'
      },
      message: {
        value: message,
        // By being enumerable, JSON.stringify will include `message` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: true,
        writable: true
      },
      locations: {
        // Coercing falsy values to undefined ensures they will not be included
        // in JSON.stringify() when not provided.
        value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,
        // By being enumerable, JSON.stringify will include `locations` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: _locations != null
      },
      path: {
        // Coercing falsy values to undefined ensures they will not be included
        // in JSON.stringify() when not provided.
        value: path !== null && path !== void 0 ? path : undefined,
        // By being enumerable, JSON.stringify will include `path` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: path != null
      },
      nodes: {
        value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
      },
      source: {
        value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined
      },
      positions: {
        value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined
      },
      originalError: {
        value: originalError
      },
      extensions: {
        // Coercing falsy values to undefined ensures they will not be included
        // in JSON.stringify() when not provided.
        value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,
        // By being enumerable, JSON.stringify will include `path` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: _extensions != null
      }
    }); // Include (non-enumerable) stack trace.

    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(_assertThisInitialized(_this), 'stack', {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
      return _possibleConstructorReturn(_this);
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')


    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);
    } else {
      Object.defineProperty(_assertThisInitialized(_this), 'stack', {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }

    return _this;
  }

  _createClass(GraphQLError, [{
    key: "toString",
    value: function toString() {
      return printError(this);
    } // FIXME: workaround to not break chai comparisons, should be remove in v16
    // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

  }, {
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'Object';
    }
  }]);

  return GraphQLError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 */


exports.GraphQLError = GraphQLError;

function printError(error) {
  var output = error.message;

  if (error.nodes) {
    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {
      var node = _error$nodes2[_i2];

      if (node.loc) {
        output += '\n\n' + (0, _printLocation.printLocation)(node.loc);
      }
    }
  } else if (error.source && error.locations) {
    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {
      var location = _error$locations2[_i4];
      output += '\n\n' + (0, _printLocation.printSourceLocation)(error.source, location);
    }
  }

  return output;
}

},{"../jsutils/isObjectLike.js":"526rJ","../polyfills/symbols.js":"4phrQ","../language/location.js":"1lRjH","../language/printLocation.js":"2RXs9"}],"526rJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isObjectLike;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Return true if `value` is object-like. A value is object-like if it's not
 * `null` and has a `typeof` result of "object".
 */
function isObjectLike(value) {
  return _typeof(value) == 'object' && value !== null;
}

},{}],"4phrQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SYMBOL_TO_STRING_TAG = exports.SYMBOL_ASYNC_ITERATOR = exports.SYMBOL_ITERATOR = void 0;
// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator
// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')

exports.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';
exports.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;

},{}],"1lRjH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocation = getLocation;

/**
 * Represents a location in a Source.
 */

/**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */
function getLocation(source, position) {
  var lineRegexp = /\r\n|[\n\r]/g;
  var line = 1;
  var column = position + 1;
  var match;

  while ((match = lineRegexp.exec(source.body)) && match.index < position) {
    line += 1;
    column = position + 1 - (match.index + match[0].length);
  }

  return {
    line: line,
    column: column
  };
}

},{}],"2RXs9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printLocation = printLocation;
exports.printSourceLocation = printSourceLocation;

var _location = require("./location.js");

/**
 * Render a helpful description of the location in the GraphQL Source document.
 */
function printLocation(location) {
  return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
}
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */


function printSourceLocation(source, sourceLocation) {
  var firstLineColumnOffset = source.locationOffset.column - 1;
  var body = whitespace(firstLineColumnOffset) + source.body;
  var lineIndex = sourceLocation.line - 1;
  var lineOffset = source.locationOffset.line - 1;
  var lineNum = sourceLocation.line + lineOffset;
  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  var columnNum = sourceLocation.column + columnOffset;
  var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
  var lines = body.split(/\r\n|[\n\r]/g);
  var locationLine = lines[lineIndex]; // Special case for minified documents

  if (locationLine.length > 120) {
    var subLineIndex = Math.floor(columnNum / 80);
    var subLineColumnNum = columnNum % 80;
    var subLines = [];

    for (var i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }

    return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {
      return ['', subLine];
    }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));
  }

  return locationStr + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
  ["".concat(lineNum - 1), lines[lineIndex - 1]], ["".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1), lines[lineIndex + 1]]]);
}

function printPrefixedLines(lines) {
  var existingLines = lines.filter(function (_ref) {
    var _ = _ref[0],
        line = _ref[1];
    return line !== undefined;
  });
  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {
    var prefix = _ref2[0];
    return prefix.length;
  }));
  return existingLines.map(function (_ref3) {
    var prefix = _ref3[0],
        line = _ref3[1];
    return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');
  }).join('\n');
}

function whitespace(len) {
  return Array(len + 1).join(' ');
}

function leftPad(len, str) {
  return whitespace(len - str.length) + str;
}

},{"./location.js":"1lRjH"}],"6m0P6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Kind = void 0;

/**
 * The set of allowed kind values for AST nodes.
 */
var Kind = Object.freeze({
  // Name
  NAME: 'Name',
  // Document
  DOCUMENT: 'Document',
  OPERATION_DEFINITION: 'OperationDefinition',
  VARIABLE_DEFINITION: 'VariableDefinition',
  SELECTION_SET: 'SelectionSet',
  FIELD: 'Field',
  ARGUMENT: 'Argument',
  // Fragments
  FRAGMENT_SPREAD: 'FragmentSpread',
  INLINE_FRAGMENT: 'InlineFragment',
  FRAGMENT_DEFINITION: 'FragmentDefinition',
  // Values
  VARIABLE: 'Variable',
  INT: 'IntValue',
  FLOAT: 'FloatValue',
  STRING: 'StringValue',
  BOOLEAN: 'BooleanValue',
  NULL: 'NullValue',
  ENUM: 'EnumValue',
  LIST: 'ListValue',
  OBJECT: 'ObjectValue',
  OBJECT_FIELD: 'ObjectField',
  // Directives
  DIRECTIVE: 'Directive',
  // Types
  NAMED_TYPE: 'NamedType',
  LIST_TYPE: 'ListType',
  NON_NULL_TYPE: 'NonNullType',
  // Type System Definitions
  SCHEMA_DEFINITION: 'SchemaDefinition',
  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
  // Type Definitions
  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
  FIELD_DEFINITION: 'FieldDefinition',
  INPUT_VALUE_DEFINITION: 'InputValueDefinition',
  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
  // Directive Definitions
  DIRECTIVE_DEFINITION: 'DirectiveDefinition',
  // Type System Extensions
  SCHEMA_EXTENSION: 'SchemaExtension',
  // Type Extensions
  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
  UNION_TYPE_EXTENSION: 'UnionTypeExtension',
  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
});
/**
 * The enum type representing the possible kind values of AST nodes.
 */

exports.Kind = Kind;

},{}],"swB0t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNode = isNode;
exports.Token = exports.Location = void 0;

var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */
var Location = /*#__PURE__*/function () {
  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The Token at which this Node begins.
   */

  /**
   * The Token at which this Node ends.
   */

  /**
   * The Source document the AST represents.
   */
  function Location(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }

  var _proto = Location.prototype;

  _proto.toJSON = function toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  };

  return Location;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.Location = Location;
(0, _defineInspect.default)(Location);
/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */

var Token = /*#__PURE__*/function () {
  /**
   * The kind of Token.
   */

  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The 1-indexed line number on which this Token appears.
   */

  /**
   * The 1-indexed column number at which this Token begins.
   */

  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   */

  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  function Token(kind, start, end, line, column, prev, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column;
    this.value = value;
    this.prev = prev;
    this.next = null;
  }

  var _proto2 = Token.prototype;

  _proto2.toJSON = function toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  };

  return Token;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.Token = Token;
(0, _defineInspect.default)(Token);
/**
 * @internal
 */

function isNode(maybeNode) {
  return maybeNode != null && typeof maybeNode.kind === 'string';
}
/**
 * The list of all possible AST node types.
 */

},{"../jsutils/defineInspect.js":"6NGTJ"}],"6NGTJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defineInspect;

var _invariant = _interopRequireDefault(require("./invariant.js"));

var _nodejsCustomInspectSymbol = _interopRequireDefault(require("./nodejsCustomInspectSymbol.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
 */
function defineInspect(classObject) {
  var fn = classObject.prototype.toJSON;
  typeof fn === 'function' || (0, _invariant.default)(0);
  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

  if (_nodejsCustomInspectSymbol.default) {
    classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;
  }
}

},{"./invariant.js":"6ywmM","./nodejsCustomInspectSymbol.js":"3JDPi"}],"6ywmM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = invariant;

function invariant(condition, message) {
  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

  if (!booleanCondition) {
    throw new Error(message != null ? message : 'Unexpected invariant triggered.');
  }
}

},{}],"3JDPi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
var _default = nodejsCustomInspectSymbol;
exports.default = _default;

},{}],"3Ou8x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenKind = void 0;

/**
 * An exported enum describing the different kinds of tokens that the
 * lexer emits.
 */
var TokenKind = Object.freeze({
  SOF: '<SOF>',
  EOF: '<EOF>',
  BANG: '!',
  DOLLAR: '$',
  AMP: '&',
  PAREN_L: '(',
  PAREN_R: ')',
  SPREAD: '...',
  COLON: ':',
  EQUALS: '=',
  AT: '@',
  BRACKET_L: '[',
  BRACKET_R: ']',
  BRACE_L: '{',
  PIPE: '|',
  BRACE_R: '}',
  NAME: 'Name',
  INT: 'Int',
  FLOAT: 'Float',
  STRING: 'String',
  BLOCK_STRING: 'BlockString',
  COMMENT: 'Comment'
});
/**
 * The enum type representing the token kinds values.
 */

exports.TokenKind = TokenKind;

},{}],"4CqkM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSource = isSource;
exports.Source = void 0;

var _symbols = require("../polyfills/symbols.js");

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
 * optional, but they are useful for clients who store GraphQL documents in source files.
 * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
 * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
 * The `line` and `column` properties in `locationOffset` are 1-indexed.
 */
var Source = /*#__PURE__*/function () {
  function Source(body) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      line: 1,
      column: 1
    };
    typeof body === 'string' || (0, _devAssert.default)(0, "Body must be a string. Received: ".concat((0, _inspect.default)(body), "."));
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 || (0, _devAssert.default)(0, 'line in locationOffset is 1-indexed and must be positive.');
    this.locationOffset.column > 0 || (0, _devAssert.default)(0, 'column in locationOffset is 1-indexed and must be positive.');
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet


  _createClass(Source, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'Source';
    }
  }]);

  return Source;
}();
/**
 * Test if the given value is a Source object.
 *
 * @internal
 */


exports.Source = Source;

// eslint-disable-next-line no-redeclare
function isSource(source) {
  return (0, _instanceOf.default)(source, Source);
}

},{"../polyfills/symbols.js":"4phrQ","../jsutils/inspect.js":"2onMM","../jsutils/devAssert.js":"1F99Z","../jsutils/instanceOf.js":"1OohF"}],"2onMM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = inspect;

var _nodejsCustomInspectSymbol = _interopRequireDefault(require("./nodejsCustomInspectSymbol.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
/**
 * Used to print values in error messages.
 */

function inspect(value) {
  return formatValue(value, []);
}

function formatValue(value, seenValues) {
  switch (_typeof(value)) {
    case 'string':
      return JSON.stringify(value);

    case 'function':
      return value.name ? "[function ".concat(value.name, "]") : '[function]';

    case 'object':
      if (value === null) {
        return 'null';
      }

      return formatObjectValue(value, seenValues);

    default:
      return String(value);
  }
}

function formatObjectValue(value, previouslySeenValues) {
  if (previouslySeenValues.indexOf(value) !== -1) {
    return '[Circular]';
  }

  var seenValues = [].concat(previouslySeenValues, [value]);
  var customInspectFn = getCustomFn(value);

  if (customInspectFn !== undefined) {
    var customValue = customInspectFn.call(value); // check for infinite recursion

    if (customValue !== value) {
      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }

  return formatObject(value, seenValues);
}

function formatObject(object, seenValues) {
  var keys = Object.keys(object);

  if (keys.length === 0) {
    return '{}';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[' + getObjectTag(object) + ']';
  }

  var properties = keys.map(function (key) {
    var value = formatValue(object[key], seenValues);
    return key + ': ' + value;
  });
  return '{ ' + properties.join(', ') + ' }';
}

function formatArray(array, seenValues) {
  if (array.length === 0) {
    return '[]';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[Array]';
  }

  var len = Math.min(MAX_ARRAY_LENGTH, array.length);
  var remaining = array.length - len;
  var items = [];

  for (var i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }

  if (remaining === 1) {
    items.push('... 1 more item');
  } else if (remaining > 1) {
    items.push("... ".concat(remaining, " more items"));
  }

  return '[' + items.join(', ') + ']';
}

function getCustomFn(object) {
  var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];

  if (typeof customInspectFn === 'function') {
    return customInspectFn;
  }

  if (typeof object.inspect === 'function') {
    return object.inspect;
  }
}

function getObjectTag(object) {
  var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

  if (tag === 'Object' && typeof object.constructor === 'function') {
    var name = object.constructor.name;

    if (typeof name === 'string' && name !== '') {
      return name;
    }
  }

  return tag;
}

},{"./nodejsCustomInspectSymbol.js":"3JDPi"}],"1F99Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = devAssert;

function devAssert(condition, message) {
  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

  if (!booleanCondition) {
    throw new Error(message);
  }
}

},{}],"1OohF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
* A replacement for instanceof which includes an error warning when multi-realm
* constructors are detected.
*/
// See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
// See: https://webpack.js.org/guides/production/
var _default = "development" === 'production' ? // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
// eslint-disable-next-line no-shadow
function instanceOf(value, constructor) {
  return value instanceof constructor;
} : // eslint-disable-next-line no-shadow
function instanceOf(value, constructor) {
  if (value instanceof constructor) {
    return true;
  }
  if (value) {
    var valueClass = value.constructor;
    var className = constructor.name;
    if (className && valueClass && valueClass.name === className) {
      throw new Error(("Cannot use ").concat(className, " \"").concat(value, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
    }
  }
  return false;
};
exports.default = _default;

},{}],"3sgz1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DirectiveLocation = void 0;

/**
 * The set of allowed directive location values.
 */
var DirectiveLocation = Object.freeze({
  // Request Definitions
  QUERY: 'QUERY',
  MUTATION: 'MUTATION',
  SUBSCRIPTION: 'SUBSCRIPTION',
  FIELD: 'FIELD',
  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
  INLINE_FRAGMENT: 'INLINE_FRAGMENT',
  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
  // Type System Definitions
  SCHEMA: 'SCHEMA',
  SCALAR: 'SCALAR',
  OBJECT: 'OBJECT',
  FIELD_DEFINITION: 'FIELD_DEFINITION',
  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
  INTERFACE: 'INTERFACE',
  UNION: 'UNION',
  ENUM: 'ENUM',
  ENUM_VALUE: 'ENUM_VALUE',
  INPUT_OBJECT: 'INPUT_OBJECT',
  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
});
/**
 * The enum type representing the directive location values.
 */

exports.DirectiveLocation = DirectiveLocation;

},{}],"6U1AF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
exports.Lexer = void 0;

var _syntaxError = require("../error/syntaxError.js");

var _ast = require("./ast.js");

var _tokenKind = require("./tokenKind.js");

var _blockString = require("./blockString.js");

/**
 * Given a Source object, creates a Lexer for that source.
 * A Lexer is a stateful stream generator in that every time
 * it is advanced, it returns the next token in the Source. Assuming the
 * source lexes, the final Token emitted by the lexer will be of kind
 * EOF, after which the lexer will repeatedly return the same EOF token
 * whenever called.
 */
var Lexer = /*#__PURE__*/function () {
  /**
   * The previously focused non-ignored token.
   */

  /**
   * The currently focused non-ignored token.
   */

  /**
   * The (1-indexed) line containing the current token.
   */

  /**
   * The character offset at which the current line begins.
   */
  function Lexer(source) {
    var startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0, null);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }
  /**
   * Advances the token stream to the next non-ignored token.
   */


  var _proto = Lexer.prototype;

  _proto.advance = function advance() {
    this.lastToken = this.token;
    var token = this.token = this.lookahead();
    return token;
  }
  /**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */
  ;

  _proto.lookahead = function lookahead() {
    var token = this.token;

    if (token.kind !== _tokenKind.TokenKind.EOF) {
      do {
        var _token$next;

        // Note: next is only mutable during parsing, so we cast to allow this.
        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
      } while (token.kind === _tokenKind.TokenKind.COMMENT);
    }

    return token;
  };

  return Lexer;
}();
/**
 * @internal
 */


exports.Lexer = Lexer;

function isPunctuatorTokenKind(kind) {
  return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
}

function printCharCode(code) {
  return (// NaN/undefined represents access beyond the end of the file.
    isNaN(code) ? _tokenKind.TokenKind.EOF : // Trust JSON for ASCII.
    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
    "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"")
  );
}
/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace until it finds the next lexable token, then lexes
 * punctuators immediately or calls the appropriate helper function for more
 * complicated tokens.
 */


function readToken(lexer, prev) {
  var source = lexer.source;
  var body = source.body;
  var bodyLength = body.length;
  var pos = prev.end;

  while (pos < bodyLength) {
    var code = body.charCodeAt(pos);
    var _line = lexer.line;

    var _col = 1 + pos - lexer.lineStart; // SourceCharacter


    switch (code) {
      case 0xfeff: // <BOM>

      case 9: //   \t

      case 32: //  <space>

      case 44:
        //  ,
        ++pos;
        continue;

      case 10:
        //  \n
        ++pos;
        ++lexer.line;
        lexer.lineStart = pos;
        continue;

      case 13:
        //  \r
        if (body.charCodeAt(pos + 1) === 10) {
          pos += 2;
        } else {
          ++pos;
        }

        ++lexer.line;
        lexer.lineStart = pos;
        continue;

      case 33:
        //  !
        return new _ast.Token(_tokenKind.TokenKind.BANG, pos, pos + 1, _line, _col, prev);

      case 35:
        //  #
        return readComment(source, pos, _line, _col, prev);

      case 36:
        //  $
        return new _ast.Token(_tokenKind.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);

      case 38:
        //  &
        return new _ast.Token(_tokenKind.TokenKind.AMP, pos, pos + 1, _line, _col, prev);

      case 40:
        //  (
        return new _ast.Token(_tokenKind.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);

      case 41:
        //  )
        return new _ast.Token(_tokenKind.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);

      case 46:
        //  .
        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
          return new _ast.Token(_tokenKind.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
        }

        break;

      case 58:
        //  :
        return new _ast.Token(_tokenKind.TokenKind.COLON, pos, pos + 1, _line, _col, prev);

      case 61:
        //  =
        return new _ast.Token(_tokenKind.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);

      case 64:
        //  @
        return new _ast.Token(_tokenKind.TokenKind.AT, pos, pos + 1, _line, _col, prev);

      case 91:
        //  [
        return new _ast.Token(_tokenKind.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);

      case 93:
        //  ]
        return new _ast.Token(_tokenKind.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);

      case 123:
        // {
        return new _ast.Token(_tokenKind.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);

      case 124:
        // |
        return new _ast.Token(_tokenKind.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);

      case 125:
        // }
        return new _ast.Token(_tokenKind.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);

      case 34:
        //  "
        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
          return readBlockString(source, pos, _line, _col, prev, lexer);
        }

        return readString(source, pos, _line, _col, prev);

      case 45: //  -

      case 48: //  0

      case 49: //  1

      case 50: //  2

      case 51: //  3

      case 52: //  4

      case 53: //  5

      case 54: //  6

      case 55: //  7

      case 56: //  8

      case 57:
        //  9
        return readNumber(source, pos, code, _line, _col, prev);

      case 65: //  A

      case 66: //  B

      case 67: //  C

      case 68: //  D

      case 69: //  E

      case 70: //  F

      case 71: //  G

      case 72: //  H

      case 73: //  I

      case 74: //  J

      case 75: //  K

      case 76: //  L

      case 77: //  M

      case 78: //  N

      case 79: //  O

      case 80: //  P

      case 81: //  Q

      case 82: //  R

      case 83: //  S

      case 84: //  T

      case 85: //  U

      case 86: //  V

      case 87: //  W

      case 88: //  X

      case 89: //  Y

      case 90: //  Z

      case 95: //  _

      case 97: //  a

      case 98: //  b

      case 99: //  c

      case 100: // d

      case 101: // e

      case 102: // f

      case 103: // g

      case 104: // h

      case 105: // i

      case 106: // j

      case 107: // k

      case 108: // l

      case 109: // m

      case 110: // n

      case 111: // o

      case 112: // p

      case 113: // q

      case 114: // r

      case 115: // s

      case 116: // t

      case 117: // u

      case 118: // v

      case 119: // w

      case 120: // x

      case 121: // y

      case 122:
        // z
        return readName(source, pos, _line, _col, prev);
    }

    throw (0, _syntaxError.syntaxError)(source, pos, unexpectedCharacterMessage(code));
  }

  var line = lexer.line;
  var col = 1 + pos - lexer.lineStart;
  return new _ast.Token(_tokenKind.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
}
/**
 * Report a message that an unexpected character was encountered.
 */


function unexpectedCharacterMessage(code) {
  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
    return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
  }

  if (code === 39) {
    // '
    return 'Unexpected single quote character (\'), did you mean to use a double quote (")?';
  }

  return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
}
/**
 * Reads a comment token from the source file.
 *
 * #[\u0009\u0020-\uFFFF]*
 */


function readComment(source, start, line, col, prev) {
  var body = source.body;
  var code;
  var position = start;

  do {
    code = body.charCodeAt(++position);
  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator
  code > 0x001f || code === 0x0009));

  return new _ast.Token(_tokenKind.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
}
/**
 * Reads a number token from the source file, either a float
 * or an int depending on whether a decimal point appears.
 *
 * Int:   -?(0|[1-9][0-9]*)
 * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
 */


function readNumber(source, start, firstCode, line, col, prev) {
  var body = source.body;
  var code = firstCode;
  var position = start;
  var isFloat = false;

  if (code === 45) {
    // -
    code = body.charCodeAt(++position);
  }

  if (code === 48) {
    // 0
    code = body.charCodeAt(++position);

    if (code >= 48 && code <= 57) {
      throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
    }
  } else {
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }

  if (code === 46) {
    // .
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }

  if (code === 69 || code === 101) {
    // E e
    isFloat = true;
    code = body.charCodeAt(++position);

    if (code === 43 || code === 45) {
      // + -
      code = body.charCodeAt(++position);
    }

    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  } // Numbers cannot be followed by . or NameStart


  if (code === 46 || isNameStart(code)) {
    throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
  }

  return new _ast.Token(isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
}
/**
 * Returns the new position in the source after reading digits.
 */


function readDigits(source, start, firstCode) {
  var body = source.body;
  var position = start;
  var code = firstCode;

  if (code >= 48 && code <= 57) {
    // 0 - 9
    do {
      code = body.charCodeAt(++position);
    } while (code >= 48 && code <= 57); // 0 - 9


    return position;
  }

  throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
}
/**
 * Reads a string token from the source file.
 *
 * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
 */


function readString(source, start, line, col, prev) {
  var body = source.body;
  var position = start + 1;
  var chunkStart = position;
  var code = 0;
  var value = '';

  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
  code !== 0x000a && code !== 0x000d) {
    // Closing Quote (")
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return new _ast.Token(_tokenKind.TokenKind.STRING, start, position + 1, line, col, prev, value);
    } // SourceCharacter


    if (code < 0x0020 && code !== 0x0009) {
      throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }

    ++position;

    if (code === 92) {
      // \
      value += body.slice(chunkStart, position - 1);
      code = body.charCodeAt(position);

      switch (code) {
        case 34:
          value += '"';
          break;

        case 47:
          value += '/';
          break;

        case 92:
          value += '\\';
          break;

        case 98:
          value += '\b';
          break;

        case 102:
          value += '\f';
          break;

        case 110:
          value += '\n';
          break;

        case 114:
          value += '\r';
          break;

        case 116:
          value += '\t';
          break;

        case 117:
          {
            // uXXXX
            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));

            if (charCode < 0) {
              var invalidSequence = body.slice(position + 1, position + 5);
              throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
            }

            value += String.fromCharCode(charCode);
            position += 4;
            break;
          }

        default:
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
      }

      ++position;
      chunkStart = position;
    }
  }

  throw (0, _syntaxError.syntaxError)(source, position, 'Unterminated string.');
}
/**
 * Reads a block string token from the source file.
 *
 * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
 */


function readBlockString(source, start, line, col, prev, lexer) {
  var body = source.body;
  var position = start + 3;
  var chunkStart = position;
  var code = 0;
  var rawValue = '';

  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
    // Closing Triple-Quote (""")
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      rawValue += body.slice(chunkStart, position);
      return new _ast.Token(_tokenKind.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockString.dedentBlockStringValue)(rawValue));
    } // SourceCharacter


    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
      throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }

    if (code === 10) {
      // new line
      ++position;
      ++lexer.line;
      lexer.lineStart = position;
    } else if (code === 13) {
      // carriage return
      if (body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }

      ++lexer.line;
      lexer.lineStart = position;
    } else if ( // Escape Triple-Quote (\""")
    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      rawValue += body.slice(chunkStart, position) + '"""';
      position += 4;
      chunkStart = position;
    } else {
      ++position;
    }
  }

  throw (0, _syntaxError.syntaxError)(source, position, 'Unterminated string.');
}
/**
 * Converts four hexadecimal chars to the integer that the
 * string represents. For example, uniCharCode('0','0','0','f')
 * will return 15, and uniCharCode('0','0','f','f') returns 255.
 *
 * Returns a negative number on error, if a char was invalid.
 *
 * This is implemented by noting that char2hex() returns -1 on error,
 * which means the result of ORing the char2hex() will also be negative.
 */


function uniCharCode(a, b, c, d) {
  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
}
/**
 * Converts a hex character to its integer value.
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 on error.
 */


function char2hex(a) {
  return a >= 48 && a <= 57 ? a - 48 // 0-9
  : a >= 65 && a <= 70 ? a - 55 // A-F
  : a >= 97 && a <= 102 ? a - 87 // a-f
  : -1;
}
/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * [_A-Za-z][_0-9A-Za-z]*
 */


function readName(source, start, line, col, prev) {
  var body = source.body;
  var bodyLength = body.length;
  var position = start + 1;
  var code = 0;

  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
  code >= 48 && code <= 57 || // 0-9
  code >= 65 && code <= 90 || // A-Z
  code >= 97 && code <= 122) // a-z
  ) {
    ++position;
  }

  return new _ast.Token(_tokenKind.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
} // _ A-Z a-z


function isNameStart(code) {
  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
}

},{"../error/syntaxError.js":"1YalC","./ast.js":"swB0t","./tokenKind.js":"3Ou8x","./blockString.js":"2xxl5"}],"2xxl5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dedentBlockStringValue = dedentBlockStringValue;
exports.getBlockStringIndentation = getBlockStringIndentation;
exports.printBlockString = printBlockString;

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */
function dedentBlockStringValue(rawString) {
  // Expand a block string's raw value into independent lines.
  var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

  var commonIndent = getBlockStringIndentation(rawString);

  if (commonIndent !== 0) {
    for (var i = 1; i < lines.length; i++) {
      lines[i] = lines[i].slice(commonIndent);
    }
  } // Remove leading and trailing blank lines.


  var startLine = 0;

  while (startLine < lines.length && isBlank(lines[startLine])) {
    ++startLine;
  }

  var endLine = lines.length;

  while (endLine > startLine && isBlank(lines[endLine - 1])) {
    --endLine;
  } // Return a string of the lines joined with U+000A.


  return lines.slice(startLine, endLine).join('\n');
}

function isBlank(str) {
  for (var i = 0; i < str.length; ++i) {
    if (str[i] !== ' ' && str[i] !== '\t') {
      return false;
    }
  }

  return true;
}
/**
 * @internal
 */


function getBlockStringIndentation(value) {
  var _commonIndent;

  var isFirstLine = true;
  var isEmptyLine = true;
  var indent = 0;
  var commonIndent = null;

  for (var i = 0; i < value.length; ++i) {
    switch (value.charCodeAt(i)) {
      case 13:
        //  \r
        if (value.charCodeAt(i + 1) === 10) {
          ++i; // skip \r\n as one symbol
        }

      // falls through

      case 10:
        //  \n
        isFirstLine = false;
        isEmptyLine = true;
        indent = 0;
        break;

      case 9: //   \t

      case 32:
        //  <space>
        ++indent;
        break;

      default:
        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
          commonIndent = indent;
        }

        isEmptyLine = false;
    }
  }

  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
}
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */


function printBlockString(value) {
  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isSingleLine = value.indexOf('\n') === -1;
  var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
  var hasTrailingQuote = value[value.length - 1] === '"';
  var hasTrailingSlash = value[value.length - 1] === '\\';
  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
  var result = ''; // Format a multi-line block quote to account for leading space.

  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
    result += '\n' + indentation;
  }

  result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

  if (printAsMultipleLines) {
    result += '\n';
  }

  return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}

},{}],"4pm1K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;
exports.validateSDL = validateSDL;
exports.assertValidSDL = assertValidSDL;
exports.assertValidSDLExtension = assertValidSDLExtension;

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _GraphQLError = require("../error/GraphQLError.js");

var _visitor = require("../language/visitor.js");

var _validate = require("../type/validate.js");

var _TypeInfo = require("../utilities/TypeInfo.js");

var _specifiedRules = require("./specifiedRules.js");

var _ValidationContext = require("./ValidationContext.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implements the "Validation" section of the spec.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the document is valid.
 *
 * A list of specific validation rules may be provided. If not provided, the
 * default list of rules defined by the GraphQL specification will be used.
 *
 * Each validation rules is a function which returns a visitor
 * (see the language/visitor API). Visitor methods are expected to return
 * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
 *
 * Optionally a custom TypeInfo instance may be provided. If not provided, one
 * will be created from the provided schema.
 */
function validate(schema, documentAST) {
  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedRules;
  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _TypeInfo.TypeInfo(schema);
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
    maxErrors: undefined
  };
  documentAST || (0, _devAssert.default)(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.

  (0, _validate.assertValidSchema)(schema);
  var abortObj = Object.freeze({});
  var errors = [];
  var context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, function (error) {
    if (options.maxErrors != null && errors.length >= options.maxErrors) {
      errors.push(new _GraphQLError.GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));
      throw abortObj;
    }

    errors.push(error);
  }); // This uses a specialized visitor which runs multiple visitors in parallel,
  // while maintaining the visitor skip and break API.

  var visitor = (0, _visitor.visitInParallel)(rules.map(function (rule) {
    return rule(context);
  })); // Visit the whole document with each instance of all provided rules.

  try {
    (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));
  } catch (e) {
    if (e !== abortObj) {
      throw e;
    }
  }

  return errors;
}
/**
 * @internal
 */


function validateSDL(documentAST, schemaToExtend) {
  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedSDLRules;
  var errors = [];
  var context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, function (error) {
    errors.push(error);
  });
  var visitors = rules.map(function (rule) {
    return rule(context);
  });
  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));
  return errors;
}
/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */


function assertValidSDL(documentAST) {
  var errors = validateSDL(documentAST);

  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}
/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */


function assertValidSDLExtension(documentAST, schema) {
  var errors = validateSDL(documentAST, schema);

  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}

},{"../jsutils/devAssert.js":"1F99Z","../error/GraphQLError.js":"cXily","../language/visitor.js":"wwZgf","../type/validate.js":"4v4RB","../utilities/TypeInfo.js":"2mpQy","./specifiedRules.js":"3AYYC","./ValidationContext.js":"6nBGN"}],"wwZgf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visit = visit;
exports.visitInParallel = visitInParallel;
exports.getVisitFn = getVisitFn;
exports.BREAK = exports.QueryDocumentKeys = void 0;

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _ast = require("./ast.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var QueryDocumentKeys = {
  Name: [],
  Document: ['definitions'],
  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],
  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
  // or removed in the future.
  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],
  Directive: ['name', 'arguments'],
  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],
  SchemaDefinition: ['description', 'directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],
  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
  SchemaExtension: ['directives', 'operationTypes'],
  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields']
};
exports.QueryDocumentKeys = QueryDocumentKeys;
var BREAK = Object.freeze({});
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 *     const editedAST = visit(ast, {
 *       enter(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: skip visiting this node
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       },
 *       leave(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: no action
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       }
 *     });
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to four permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 *     visit(ast, {
 *       Kind(node) {
 *         // enter the "Kind" node
 *       }
 *     })
 *
 * 2) Named visitors that trigger upon entering and leaving a node of
 *    a specific kind.
 *
 *     visit(ast, {
 *       Kind: {
 *         enter(node) {
 *           // enter the "Kind" node
 *         }
 *         leave(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 *     visit(ast, {
 *       enter(node) {
 *         // enter any node
 *       },
 *       leave(node) {
 *         // leave any node
 *       }
 *     })
 *
 * 4) Parallel visitors for entering and leaving nodes of a specific kind.
 *
 *     visit(ast, {
 *       enter: {
 *         Kind(node) {
 *           // enter the "Kind" node
 *         }
 *       },
 *       leave: {
 *         Kind(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 */

exports.BREAK = BREAK;

function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

  /* eslint-disable no-undef-init */
  var stack = undefined;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = undefined;
  var key = undefined;
  var parent = undefined;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  /* eslint-enable no-undef-init */

  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;

    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();

      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};

          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k = _Object$keys2[_i2];
            clone[k] = node[k];
          }

          node = clone;
        }

        var editOffset = 0;

        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];

          if (inArray) {
            editKey -= editOffset;
          }

          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }

      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : undefined;
      node = parent ? parent[key] : newRoot;

      if (node === null || node === undefined) {
        continue;
      }

      if (parent) {
        path.push(key);
      }
    }

    var result = void 0;

    if (!Array.isArray(node)) {
      if (!(0, _ast.isNode)(node)) {
        throw new Error("Invalid AST Node: ".concat((0, _inspect.default)(node), "."));
      }

      var visitFn = getVisitFn(visitor, node.kind, isLeaving);

      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);

        if (result === BREAK) {
          break;
        }

        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== undefined) {
          edits.push([key, result]);

          if (!isLeaving) {
            if ((0, _ast.isNode)(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }

    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }

    if (isLeaving) {
      path.pop();
    } else {
      var _visitorKeys$node$kin;

      stack = {
        inArray: inArray,
        index: index,
        keys: keys,
        edits: edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
      index = -1;
      edits = [];

      if (parent) {
        ancestors.push(parent);
      }

      parent = node;
    }
  } while (stack !== undefined);

  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }

  return newRoot;
}
/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */


function visitInParallel(visitors) {
  var skipping = new Array(visitors.length);
  return {
    enter: function enter(node) {
      for (var i = 0; i < visitors.length; i++) {
        if (skipping[i] == null) {
          var fn = getVisitFn(visitors[i], node.kind,
          /* isLeaving */
          false);

          if (fn) {
            var result = fn.apply(visitors[i], arguments);

            if (result === false) {
              skipping[i] = node;
            } else if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined) {
              return result;
            }
          }
        }
      }
    },
    leave: function leave(node) {
      for (var i = 0; i < visitors.length; i++) {
        if (skipping[i] == null) {
          var fn = getVisitFn(visitors[i], node.kind,
          /* isLeaving */
          true);

          if (fn) {
            var result = fn.apply(visitors[i], arguments);

            if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined && result !== false) {
              return result;
            }
          }
        } else if (skipping[i] === node) {
          skipping[i] = null;
        }
      }
    }
  };
}
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 */


function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];

  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === 'function') {
      // { Kind() {} }
      return kindVisitor;
    }

    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

    if (typeof kindSpecificVisitor === 'function') {
      // { Kind: { enter() {}, leave() {} } }
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

    if (specificVisitor) {
      if (typeof specificVisitor === 'function') {
        // { enter() {}, leave() {} }
        return specificVisitor;
      }

      var specificKindVisitor = specificVisitor[kind];

      if (typeof specificKindVisitor === 'function') {
        // { enter: { Kind() {} }, leave: { Kind() {} } }
        return specificKindVisitor;
      }
    }
  }
}

},{"../jsutils/inspect.js":"2onMM","./ast.js":"swB0t"}],"4v4RB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateSchema = validateSchema;
exports.assertValidSchema = assertValidSchema;

var _find = _interopRequireDefault(require("../polyfills/find.js"));

var _objectValues5 = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _GraphQLError = require("../error/GraphQLError.js");

var _locatedError = require("../error/locatedError.js");

var _assertValidName = require("../utilities/assertValidName.js");

var _typeComparators = require("../utilities/typeComparators.js");

var _schema = require("./schema.js");

var _introspection = require("./introspection.js");

var _directives = require("./directives.js");

var _definition = require("./definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implements the "Type Validation" sub-sections of the specification's
 * "Type System" section.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the Schema is valid.
 */
function validateSchema(schema) {
  // First check to ensure the provided value is in fact a GraphQLSchema.
  (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.

  if (schema.__validationErrors) {
    return schema.__validationErrors;
  } // Validate the schema, producing a list of errors.


  var context = new SchemaValidationContext(schema);
  validateRootTypes(context);
  validateDirectives(context);
  validateTypes(context); // Persist the results of validation before returning to ensure validation
  // does not run multiple times for this schema.

  var errors = context.getErrors();
  schema.__validationErrors = errors;
  return errors;
}
/**
 * Utility function which asserts a schema is valid by throwing an error if
 * it is invalid.
 */


function assertValidSchema(schema) {
  var errors = validateSchema(schema);

  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}

var SchemaValidationContext = /*#__PURE__*/function () {
  function SchemaValidationContext(schema) {
    this._errors = [];
    this.schema = schema;
  }

  var _proto = SchemaValidationContext.prototype;

  _proto.reportError = function reportError(message, nodes) {
    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;

    this.addError(new _GraphQLError.GraphQLError(message, _nodes));
  };

  _proto.addError = function addError(error) {
    this._errors.push(error);
  };

  _proto.getErrors = function getErrors() {
    return this._errors;
  };

  return SchemaValidationContext;
}();

function validateRootTypes(context) {
  var schema = context.schema;
  var queryType = schema.getQueryType();

  if (!queryType) {
    context.reportError('Query root type must be provided.', schema.astNode);
  } else if (!(0, _definition.isObjectType)(queryType)) {
    var _getOperationTypeNode;

    context.reportError("Query root type must be Object type, it cannot be ".concat((0, _inspect.default)(queryType), "."), (_getOperationTypeNode = getOperationTypeNode(schema, 'query')) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
  }

  var mutationType = schema.getMutationType();

  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
    var _getOperationTypeNode2;

    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect.default)(mutationType), "."), (_getOperationTypeNode2 = getOperationTypeNode(schema, 'mutation')) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
  }

  var subscriptionType = schema.getSubscriptionType();

  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
    var _getOperationTypeNode3;

    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect.default)(subscriptionType), "."), (_getOperationTypeNode3 = getOperationTypeNode(schema, 'subscription')) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
  }
}

function getOperationTypeNode(schema, operation) {
  var operationNodes = getAllSubNodes(schema, function (node) {
    return node.operationTypes;
  });

  for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {
    var node = operationNodes[_i2];

    if (node.operation === operation) {
      return node.type;
    }
  }

  return undefined;
}

function validateDirectives(context) {
  for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {
    var directive = _context$schema$getDi2[_i4];

    // Ensure all directives are in fact GraphQL directives.
    if (!(0, _directives.isDirective)(directive)) {
      context.reportError("Expected directive but got: ".concat((0, _inspect.default)(directive), "."), directive === null || directive === void 0 ? void 0 : directive.astNode);
      continue;
    } // Ensure they are named correctly.


    validateName(context, directive); // TODO: Ensure proper locations.
    // Ensure the arguments are valid.

    for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
      var arg = _directive$args2[_i6];
      // Ensure they are named correctly.
      validateName(context, arg); // Ensure the type is an input type.

      if (!(0, _definition.isInputType)(arg.type)) {
        context.reportError("The type of @".concat(directive.name, "(").concat(arg.name, ":) must be Input Type ") + "but got: ".concat((0, _inspect.default)(arg.type), "."), arg.astNode);
      }

      if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
        var _arg$astNode;

        context.reportError("Required argument @".concat(directive.name, "(").concat(arg.name, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
        (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type]);
      }
    }
  }
}

function validateName(context, node) {
  // Ensure names are valid, however introspection types opt out.
  var error = (0, _assertValidName.isValidNameError)(node.name);

  if (error) {
    context.addError((0, _locatedError.locatedError)(error, node.astNode));
  }
}

function validateTypes(context) {
  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
  var typeMap = context.schema.getTypeMap();

  for (var _i8 = 0, _objectValues2 = (0, _objectValues5.default)(typeMap); _i8 < _objectValues2.length; _i8++) {
    var type = _objectValues2[_i8];

    // Ensure all provided types are in fact GraphQL type.
    if (!(0, _definition.isNamedType)(type)) {
      context.reportError("Expected GraphQL named type but got: ".concat((0, _inspect.default)(type), "."), type.astNode);
      continue;
    } // Ensure it is named correctly (excluding introspection types).


    if (!(0, _introspection.isIntrospectionType)(type)) {
      validateName(context, type);
    }

    if ((0, _definition.isObjectType)(type)) {
      // Ensure fields are valid
      validateFields(context, type); // Ensure objects implement the interfaces they claim to.

      validateInterfaces(context, type);
    } else if ((0, _definition.isInterfaceType)(type)) {
      // Ensure fields are valid.
      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

      validateInterfaces(context, type);
    } else if ((0, _definition.isUnionType)(type)) {
      // Ensure Unions include valid member types.
      validateUnionMembers(context, type);
    } else if ((0, _definition.isEnumType)(type)) {
      // Ensure Enums have valid values.
      validateEnumValues(context, type);
    } else if ((0, _definition.isInputObjectType)(type)) {
      // Ensure Input Object fields are valid.
      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

      validateInputObjectCircularRefs(type);
    }
  }
}

function validateFields(context, type) {
  var fields = (0, _objectValues5.default)(type.getFields()); // Objects and Interfaces both must define one or more fields.

  if (fields.length === 0) {
    context.reportError("Type ".concat(type.name, " must define one or more fields."), getAllNodes(type));
  }

  for (var _i10 = 0; _i10 < fields.length; _i10++) {
    var field = fields[_i10];
    // Ensure they are named correctly.
    validateName(context, field); // Ensure the type is an output type

    if (!(0, _definition.isOutputType)(field.type)) {
      var _field$astNode;

      context.reportError("The type of ".concat(type.name, ".").concat(field.name, " must be Output Type ") + "but got: ".concat((0, _inspect.default)(field.type), "."), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
    } // Ensure the arguments are valid


    for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {
      var arg = _field$args2[_i12];
      var argName = arg.name; // Ensure they are named correctly.

      validateName(context, arg); // Ensure the type is an input type

      if (!(0, _definition.isInputType)(arg.type)) {
        var _arg$astNode2;

        context.reportError("The type of ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) must be Input ") + "Type but got: ".concat((0, _inspect.default)(arg.type), "."), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
      }

      if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
        var _arg$astNode3;

        context.reportError("Required argument ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)
        (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type]);
      }
    }
  }
}

function validateInterfaces(context, type) {
  var ifaceTypeNames = Object.create(null);

  for (var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++) {
    var iface = _type$getInterfaces2[_i14];

    if (!(0, _definition.isInterfaceType)(iface)) {
      context.reportError("Type ".concat((0, _inspect.default)(type), " must only implement Interface types, ") + "it cannot implement ".concat((0, _inspect.default)(iface), "."), getAllImplementsInterfaceNodes(type, iface));
      continue;
    }

    if (type === iface) {
      context.reportError("Type ".concat(type.name, " cannot implement itself because it would create a circular reference."), getAllImplementsInterfaceNodes(type, iface));
      continue;
    }

    if (ifaceTypeNames[iface.name]) {
      context.reportError("Type ".concat(type.name, " can only implement ").concat(iface.name, " once."), getAllImplementsInterfaceNodes(type, iface));
      continue;
    }

    ifaceTypeNames[iface.name] = true;
    validateTypeImplementsAncestors(context, type, iface);
    validateTypeImplementsInterface(context, type, iface);
  }
}

function validateTypeImplementsInterface(context, type, iface) {
  var typeFieldMap = type.getFields(); // Assert each interface field is implemented.

  for (var _i16 = 0, _objectValues4 = (0, _objectValues5.default)(iface.getFields()); _i16 < _objectValues4.length; _i16++) {
    var ifaceField = _objectValues4[_i16];
    var fieldName = ifaceField.name;
    var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

    if (!typeField) {
      context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expected but ").concat(type.name, " does not provide it."), [ifaceField.astNode].concat(getAllNodes(type)));
      continue;
    } // Assert interface field type is satisfied by type field type, by being
    // a valid subtype. (covariant)


    if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, typeField.type, ifaceField.type)) {
      var _ifaceField$astNode, _typeField$astNode;

      context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expects type ") + "".concat((0, _inspect.default)(ifaceField.type), " but ").concat(type.name, ".").concat(fieldName, " ") + "is type ".concat((0, _inspect.default)(typeField.type), "."), [// istanbul ignore next (TODO need to write coverage tests)
      (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
      (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type]);
    } // Assert each interface field arg is implemented.


    var _loop = function _loop(_i18, _ifaceField$args2) {
      var ifaceArg = _ifaceField$args2[_i18];
      var argName = ifaceArg.name;
      var typeArg = (0, _find.default)(typeField.args, function (arg) {
        return arg.name === argName;
      }); // Assert interface field arg exists on object field.

      if (!typeArg) {
        context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) expected but ").concat(type.name, ".").concat(fieldName, " does not provide it."), [ifaceArg.astNode, typeField.astNode]);
        return "continue";
      } // Assert interface field arg type matches object field arg type.
      // (invariant)
      // TODO: change to contravariant?


      if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
        var _ifaceArg$astNode, _typeArg$astNode;

        context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) ") + "expects type ".concat((0, _inspect.default)(ifaceArg.type), " but ") + "".concat(type.name, ".").concat(fieldName, "(").concat(argName, ":) is type ") + "".concat((0, _inspect.default)(typeArg.type), "."), [// istanbul ignore next (TODO need to write coverage tests)
        (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type, // istanbul ignore next (TODO need to write coverage tests)
        (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type]);
      } // TODO: validate default values?

    };

    for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {
      var _ret = _loop(_i18, _ifaceField$args2);

      if (_ret === "continue") continue;
    } // Assert additional arguments must not be required.


    var _loop2 = function _loop2(_i20, _typeField$args2) {
      var typeArg = _typeField$args2[_i20];
      var argName = typeArg.name;
      var ifaceArg = (0, _find.default)(ifaceField.args, function (arg) {
        return arg.name === argName;
      });

      if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
        context.reportError("Object field ".concat(type.name, ".").concat(fieldName, " includes required argument ").concat(argName, " that is missing from the Interface field ").concat(iface.name, ".").concat(fieldName, "."), [typeArg.astNode, ifaceField.astNode]);
      }
    };

    for (var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++) {
      _loop2(_i20, _typeField$args2);
    }
  }
}

function validateTypeImplementsAncestors(context, type, iface) {
  var ifaceInterfaces = type.getInterfaces();

  for (var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++) {
    var transitive = _iface$getInterfaces2[_i22];

    if (ifaceInterfaces.indexOf(transitive) === -1) {
      context.reportError(transitive === type ? "Type ".concat(type.name, " cannot implement ").concat(iface.name, " because it would create a circular reference.") : "Type ".concat(type.name, " must implement ").concat(transitive.name, " because it is implemented by ").concat(iface.name, "."), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));
    }
  }
}

function validateUnionMembers(context, union) {
  var memberTypes = union.getTypes();

  if (memberTypes.length === 0) {
    context.reportError("Union type ".concat(union.name, " must define one or more member types."), getAllNodes(union));
  }

  var includedTypeNames = Object.create(null);

  for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {
    var memberType = memberTypes[_i24];

    if (includedTypeNames[memberType.name]) {
      context.reportError("Union type ".concat(union.name, " can only include type ").concat(memberType.name, " once."), getUnionMemberTypeNodes(union, memberType.name));
      continue;
    }

    includedTypeNames[memberType.name] = true;

    if (!(0, _definition.isObjectType)(memberType)) {
      context.reportError("Union type ".concat(union.name, " can only include Object types, ") + "it cannot include ".concat((0, _inspect.default)(memberType), "."), getUnionMemberTypeNodes(union, String(memberType)));
    }
  }
}

function validateEnumValues(context, enumType) {
  var enumValues = enumType.getValues();

  if (enumValues.length === 0) {
    context.reportError("Enum type ".concat(enumType.name, " must define one or more values."), getAllNodes(enumType));
  }

  for (var _i26 = 0; _i26 < enumValues.length; _i26++) {
    var enumValue = enumValues[_i26];
    var valueName = enumValue.name; // Ensure valid name.

    validateName(context, enumValue);

    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {
      context.reportError("Enum type ".concat(enumType.name, " cannot include value: ").concat(valueName, "."), enumValue.astNode);
    }
  }
}

function validateInputFields(context, inputObj) {
  var fields = (0, _objectValues5.default)(inputObj.getFields());

  if (fields.length === 0) {
    context.reportError("Input Object type ".concat(inputObj.name, " must define one or more fields."), getAllNodes(inputObj));
  } // Ensure the arguments are valid


  for (var _i28 = 0; _i28 < fields.length; _i28++) {
    var field = fields[_i28];
    // Ensure they are named correctly.
    validateName(context, field); // Ensure the type is an input type

    if (!(0, _definition.isInputType)(field.type)) {
      var _field$astNode2;

      context.reportError("The type of ".concat(inputObj.name, ".").concat(field.name, " must be Input Type ") + "but got: ".concat((0, _inspect.default)(field.type), "."), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
    }

    if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
      var _field$astNode3;

      context.reportError("Required input field ".concat(inputObj.name, ".").concat(field.name, " cannot be deprecated."), [getDeprecatedDirectiveNode(field.astNode), // istanbul ignore next (TODO need to write coverage tests)
      (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type]);
    }
  }
}

function createInputObjectCircularRefsValidator(context) {
  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
  // Tracks already visited types to maintain O(N) and to ensure that cycles
  // are not redundantly reported.
  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

  var fieldPath = []; // Position in the type path

  var fieldPathIndexByTypeName = Object.create(null);
  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
  // It does not terminate when a cycle was found but continues to explore
  // the graph to find all possible cycles.

  function detectCycleRecursive(inputObj) {
    if (visitedTypes[inputObj.name]) {
      return;
    }

    visitedTypes[inputObj.name] = true;
    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
    var fields = (0, _objectValues5.default)(inputObj.getFields());

    for (var _i30 = 0; _i30 < fields.length; _i30++) {
      var field = fields[_i30];

      if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
        var fieldType = field.type.ofType;
        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
        fieldPath.push(field);

        if (cycleIndex === undefined) {
          detectCycleRecursive(fieldType);
        } else {
          var cyclePath = fieldPath.slice(cycleIndex);
          var pathStr = cyclePath.map(function (fieldObj) {
            return fieldObj.name;
          }).join('.');
          context.reportError("Cannot reference Input Object \"".concat(fieldType.name, "\" within itself through a series of non-null fields: \"").concat(pathStr, "\"."), cyclePath.map(function (fieldObj) {
            return fieldObj.astNode;
          }));
        }

        fieldPath.pop();
      }
    }

    fieldPathIndexByTypeName[inputObj.name] = undefined;
  }
}

function getAllNodes(object) {
  var astNode = object.astNode,
      extensionASTNodes = object.extensionASTNodes;
  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];
}

function getAllSubNodes(object, getter) {
  var subNodes = [];

  for (var _i32 = 0, _getAllNodes2 = getAllNodes(object); _i32 < _getAllNodes2.length; _i32++) {
    var _getter;

    var node = _getAllNodes2[_i32];
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    subNodes = subNodes.concat((_getter = getter(node)) !== null && _getter !== void 0 ? _getter : []);
  }

  return subNodes;
}

function getAllImplementsInterfaceNodes(type, iface) {
  return getAllSubNodes(type, function (typeNode) {
    return typeNode.interfaces;
  }).filter(function (ifaceNode) {
    return ifaceNode.name.value === iface.name;
  });
}

function getUnionMemberTypeNodes(union, typeName) {
  return getAllSubNodes(union, function (unionNode) {
    return unionNode.types;
  }).filter(function (typeNode) {
    return typeNode.name.value === typeName;
  });
}

function getDeprecatedDirectiveNode(definitionNode) {
  var _definitionNode$direc;

  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
  return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function (node) {
    return node.name.value === _directives.GraphQLDeprecatedDirective.name;
  });
}

},{"../polyfills/find.js":"5w3fy","../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../error/GraphQLError.js":"cXily","../error/locatedError.js":"6njJq","../utilities/assertValidName.js":"7qpM9","../utilities/typeComparators.js":"1ooid","./schema.js":"5cHio","./introspection.js":"5yLF0","./directives.js":"2w91d","./definition.js":"n9nw4"}],"5w3fy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound]
var find = Array.prototype.find ? function (list, predicate) {
  return Array.prototype.find.call(list, predicate);
} : function (list, predicate) {
  for (var _i2 = 0; _i2 < list.length; _i2++) {
    var value = list[_i2];

    if (predicate(value)) {
      return value;
    }
  }
};
var _default = find;
exports.default = _default;

},{}],"2BpS0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var objectValues = Object.values || function (obj) {
  return Object.keys(obj).map(function (key) {
    return obj[key];
  });
};

var _default = objectValues;
exports.default = _default;

},{}],"6njJq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locatedError = locatedError;

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _GraphQLError = require("./GraphQLError.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given an arbitrary value, presumably thrown while attempting to execute a
 * GraphQL operation, produce a new GraphQLError aware of the location in the
 * document responsible for the original Error.
 */
function locatedError(rawOriginalError, nodes, path) {
  var _nodes;

  // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
  var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + (0, _inspect.default)(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

  if (Array.isArray(originalError.path)) {
    return originalError;
  }

  return new _GraphQLError.GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);
}

},{"../jsutils/inspect.js":"2onMM","./GraphQLError.js":"cXily"}],"7qpM9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertValidName = assertValidName;
exports.isValidNameError = isValidNameError;

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _GraphQLError = require("../error/GraphQLError.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * Upholds the spec rules about naming.
 */

function assertValidName(name) {
  var error = isValidNameError(name);

  if (error) {
    throw error;
  }

  return name;
}
/**
 * Returns an Error if a name is invalid.
 */


function isValidNameError(name) {
  typeof name === 'string' || (0, _devAssert.default)(0, 'Expected name to be a string.');

  if (name.length > 1 && name[0] === '_' && name[1] === '_') {
    return new _GraphQLError.GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
  }

  if (!NAME_RX.test(name)) {
    return new _GraphQLError.GraphQLError("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
  }
}

},{"../jsutils/devAssert.js":"1F99Z","../error/GraphQLError.js":"cXily"}],"1ooid":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEqualType = isEqualType;
exports.isTypeSubTypeOf = isTypeSubTypeOf;
exports.doTypesOverlap = doTypesOverlap;

var _definition = require("../type/definition.js");

/**
 * Provided two types, return true if the types are equal (invariant).
 */
function isEqualType(typeA, typeB) {
  // Equivalent types are equal.
  if (typeA === typeB) {
    return true;
  } // If either type is non-null, the other must also be non-null.


  if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  } // If either type is a list, the other must also be a list.


  if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  } // Otherwise the types are not equal.


  return false;
}
/**
 * Provided a type and a super type, return true if the first type is either
 * equal or a subset of the second super type (covariant).
 */


function isTypeSubTypeOf(schema, maybeSubType, superType) {
  // Equivalent type is a valid subtype
  if (maybeSubType === superType) {
    return true;
  } // If superType is non-null, maybeSubType must also be non-null.


  if ((0, _definition.isNonNullType)(superType)) {
    if ((0, _definition.isNonNullType)(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }

    return false;
  }

  if ((0, _definition.isNonNullType)(maybeSubType)) {
    // If superType is nullable, maybeSubType may be non-null or nullable.
    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
  } // If superType type is a list, maybeSubType type must also be a list.


  if ((0, _definition.isListType)(superType)) {
    if ((0, _definition.isListType)(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }

    return false;
  }

  if ((0, _definition.isListType)(maybeSubType)) {
    // If superType is not a list, maybeSubType must also be not a list.
    return false;
  } // If superType type is an abstract type, check if it is super type of maybeSubType.
  // Otherwise, the child type is not a valid subtype of the parent type.


  return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
}
/**
 * Provided two composite types, determine if they "overlap". Two composite
 * types overlap when the Sets of possible concrete types for each intersect.
 *
 * This is often used to determine if a fragment of a given type could possibly
 * be visited in a context of another type.
 *
 * This function is commutative.
 */


function doTypesOverlap(schema, typeA, typeB) {
  // Equivalent types overlap
  if (typeA === typeB) {
    return true;
  }

  if ((0, _definition.isAbstractType)(typeA)) {
    if ((0, _definition.isAbstractType)(typeB)) {
      // If both types are abstract, then determine if there is any intersection
      // between possible concrete types of each.
      return schema.getPossibleTypes(typeA).some(function (type) {
        return schema.isSubType(typeB, type);
      });
    } // Determine if the latter type is a possible concrete type of the former.


    return schema.isSubType(typeA, typeB);
  }

  if ((0, _definition.isAbstractType)(typeB)) {
    // Determine if the former type is a possible concrete type of the latter.
    return schema.isSubType(typeB, typeA);
  } // Otherwise the types do not overlap.


  return false;
}

},{"../type/definition.js":"n9nw4"}],"n9nw4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isType = isType;
exports.assertType = assertType;
exports.isScalarType = isScalarType;
exports.assertScalarType = assertScalarType;
exports.isObjectType = isObjectType;
exports.assertObjectType = assertObjectType;
exports.isInterfaceType = isInterfaceType;
exports.assertInterfaceType = assertInterfaceType;
exports.isUnionType = isUnionType;
exports.assertUnionType = assertUnionType;
exports.isEnumType = isEnumType;
exports.assertEnumType = assertEnumType;
exports.isInputObjectType = isInputObjectType;
exports.assertInputObjectType = assertInputObjectType;
exports.isListType = isListType;
exports.assertListType = assertListType;
exports.isNonNullType = isNonNullType;
exports.assertNonNullType = assertNonNullType;
exports.isInputType = isInputType;
exports.assertInputType = assertInputType;
exports.isOutputType = isOutputType;
exports.assertOutputType = assertOutputType;
exports.isLeafType = isLeafType;
exports.assertLeafType = assertLeafType;
exports.isCompositeType = isCompositeType;
exports.assertCompositeType = assertCompositeType;
exports.isAbstractType = isAbstractType;
exports.assertAbstractType = assertAbstractType;
exports.GraphQLList = GraphQLList;
exports.GraphQLNonNull = GraphQLNonNull;
exports.isWrappingType = isWrappingType;
exports.assertWrappingType = assertWrappingType;
exports.isNullableType = isNullableType;
exports.assertNullableType = assertNullableType;
exports.getNullableType = getNullableType;
exports.isNamedType = isNamedType;
exports.assertNamedType = assertNamedType;
exports.getNamedType = getNamedType;
exports.argsToArgsConfig = argsToArgsConfig;
exports.isRequiredArgument = isRequiredArgument;
exports.isRequiredInputField = isRequiredInputField;
exports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = void 0;

var _objectEntries = _interopRequireDefault(require("../polyfills/objectEntries.js"));

var _symbols = require("../polyfills/symbols.js");

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.js"));

var _mapValue = _interopRequireDefault(require("../jsutils/mapValue.js"));

var _toObjMap = _interopRequireDefault(require("../jsutils/toObjMap.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.js"));

var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.js"));

var _didYouMean = _interopRequireDefault(require("../jsutils/didYouMean.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _identityFunc = _interopRequireDefault(require("../jsutils/identityFunc.js"));

var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.js"));

var _suggestionList = _interopRequireDefault(require("../jsutils/suggestionList.js"));

var _GraphQLError = require("../error/GraphQLError.js");

var _kinds = require("../language/kinds.js");

var _printer = require("../language/printer.js");

var _valueFromASTUntyped = require("../utilities/valueFromASTUntyped.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function isType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
}

function assertType(type) {
  if (!isType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL type."));
  }

  return type;
}
/**
 * There are predicates for each kind of GraphQL type.
 */


// eslint-disable-next-line no-redeclare
function isScalarType(type) {
  return (0, _instanceOf.default)(type, GraphQLScalarType);
}

function assertScalarType(type) {
  if (!isScalarType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Scalar type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isObjectType(type) {
  return (0, _instanceOf.default)(type, GraphQLObjectType);
}

function assertObjectType(type) {
  if (!isObjectType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Object type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isInterfaceType(type) {
  return (0, _instanceOf.default)(type, GraphQLInterfaceType);
}

function assertInterfaceType(type) {
  if (!isInterfaceType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Interface type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isUnionType(type) {
  return (0, _instanceOf.default)(type, GraphQLUnionType);
}

function assertUnionType(type) {
  if (!isUnionType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Union type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isEnumType(type) {
  return (0, _instanceOf.default)(type, GraphQLEnumType);
}

function assertEnumType(type) {
  if (!isEnumType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Enum type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isInputObjectType(type) {
  return (0, _instanceOf.default)(type, GraphQLInputObjectType);
}

function assertInputObjectType(type) {
  if (!isInputObjectType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Input Object type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isListType(type) {
  return (0, _instanceOf.default)(type, GraphQLList);
}

function assertListType(type) {
  if (!isListType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL List type."));
  }

  return type;
}

// eslint-disable-next-line no-redeclare
function isNonNullType(type) {
  return (0, _instanceOf.default)(type, GraphQLNonNull);
}

function assertNonNullType(type) {
  if (!isNonNullType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL Non-Null type."));
  }

  return type;
}
/**
 * These types may be used as input types for arguments and directives.
 */


function isInputType(type) {
  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
}

function assertInputType(type) {
  if (!isInputType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL input type."));
  }

  return type;
}
/**
 * These types may be used as output types as the result of fields.
 */


function isOutputType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
}

function assertOutputType(type) {
  if (!isOutputType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL output type."));
  }

  return type;
}
/**
 * These types may describe types which may be leaf values.
 */


function isLeafType(type) {
  return isScalarType(type) || isEnumType(type);
}

function assertLeafType(type) {
  if (!isLeafType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL leaf type."));
  }

  return type;
}
/**
 * These types may describe the parent context of a selection set.
 */


function isCompositeType(type) {
  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
}

function assertCompositeType(type) {
  if (!isCompositeType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL composite type."));
  }

  return type;
}
/**
 * These types may describe the parent context of a selection set.
 */


function isAbstractType(type) {
  return isInterfaceType(type) || isUnionType(type);
}

function assertAbstractType(type) {
  if (!isAbstractType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL abstract type."));
  }

  return type;
}
/**
 * List Type Wrapper
 *
 * A list is a wrapping type which points to another type.
 * Lists are often created within the context of defining the fields of
 * an object type.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         parents: { type: new GraphQLList(PersonType) },
 *         children: { type: new GraphQLList(PersonType) },
 *       })
 *     })
 *
 */
// FIXME: workaround to fix issue with Babel parser

/* ::
declare class GraphQLList<+T: GraphQLType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLList<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/


function GraphQLList(ofType) {
  // istanbul ignore else (to be removed in v16.0.0)
  if (this instanceof GraphQLList) {
    this.ofType = assertType(ofType);
  } else {
    return new GraphQLList(ofType);
  }
} // Need to cast through any to alter the prototype.


GraphQLList.prototype.toString = function toString() {
  return '[' + String(this.ofType) + ']';
};

GraphQLList.prototype.toJSON = function toJSON() {
  return this.toString();
};

Object.defineProperty(GraphQLList.prototype, _symbols.SYMBOL_TO_STRING_TAG, {
  get: function get() {
    return 'GraphQLList';
  }
}); // Print a simplified form when appearing in `inspect` and `util.inspect`.

(0, _defineInspect.default)(GraphQLList);
/**
 * Non-Null Type Wrapper
 *
 * A non-null is a wrapping type which points to another type.
 * Non-null types enforce that their values are never null and can ensure
 * an error is raised if this ever occurs during a request. It is useful for
 * fields which you can make a strong guarantee on non-nullability, for example
 * usually the id field of a database row will never be null.
 *
 * Example:
 *
 *     const RowType = new GraphQLObjectType({
 *       name: 'Row',
 *       fields: () => ({
 *         id: { type: new GraphQLNonNull(GraphQLString) },
 *       })
 *     })
 *
 * Note: the enforcement of non-nullability occurs within the executor.
 */
// FIXME: workaround to fix issue with Babel parser

/* ::
declare class GraphQLNonNull<+T: GraphQLNullableType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLNonNull<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/

function GraphQLNonNull(ofType) {
  // istanbul ignore else (to be removed in v16.0.0)
  if (this instanceof GraphQLNonNull) {
    this.ofType = assertNullableType(ofType);
  } else {
    return new GraphQLNonNull(ofType);
  }
} // Need to cast through any to alter the prototype.


GraphQLNonNull.prototype.toString = function toString() {
  return String(this.ofType) + '!';
};

GraphQLNonNull.prototype.toJSON = function toJSON() {
  return this.toString();
};

Object.defineProperty(GraphQLNonNull.prototype, _symbols.SYMBOL_TO_STRING_TAG, {
  get: function get() {
    return 'GraphQLNonNull';
  }
}); // Print a simplified form when appearing in `inspect` and `util.inspect`.

(0, _defineInspect.default)(GraphQLNonNull);
/**
 * These types wrap and modify other types
 */

function isWrappingType(type) {
  return isListType(type) || isNonNullType(type);
}

function assertWrappingType(type) {
  if (!isWrappingType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL wrapping type."));
  }

  return type;
}
/**
 * These types can all accept null as a value.
 */


function isNullableType(type) {
  return isType(type) && !isNonNullType(type);
}

function assertNullableType(type) {
  if (!isNullableType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL nullable type."));
  }

  return type;
}
/* eslint-disable no-redeclare */


function getNullableType(type) {
  /* eslint-enable no-redeclare */
  if (type) {
    return isNonNullType(type) ? type.ofType : type;
  }
}
/**
 * These named types do not include modifiers like List or NonNull.
 */


function isNamedType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
}

function assertNamedType(type) {
  if (!isNamedType(type)) {
    throw new Error("Expected ".concat((0, _inspect.default)(type), " to be a GraphQL named type."));
  }

  return type;
}
/* eslint-disable no-redeclare */


function getNamedType(type) {
  /* eslint-enable no-redeclare */
  if (type) {
    var unwrappedType = type;

    while (isWrappingType(unwrappedType)) {
      unwrappedType = unwrappedType.ofType;
    }

    return unwrappedType;
  }
}
/**
 * Used while defining GraphQL types to allow for circular references in
 * otherwise immutable type definitions.
 */


function resolveThunk(thunk) {
  // $FlowFixMe[incompatible-use]
  return typeof thunk === 'function' ? thunk() : thunk;
}

function undefineIfEmpty(arr) {
  return arr && arr.length > 0 ? arr : undefined;
}
/**
 * Scalar Type Definition
 *
 * The leaf values of any request and input values to arguments are
 * Scalars (or Enums) and are defined with a name and a series of functions
 * used to parse input from ast or variables and to ensure validity.
 *
 * If a type's serialize function does not return a value (i.e. it returns
 * `undefined`) then an error will be raised and a `null` value will be returned
 * in the response. If the serialize function returns `null`, then no error will
 * be included in the response.
 *
 * Example:
 *
 *     const OddType = new GraphQLScalarType({
 *       name: 'Odd',
 *       serialize(value) {
 *         if (value % 2 === 1) {
 *           return value;
 *         }
 *       }
 *     });
 *
 */


var GraphQLScalarType = /*#__PURE__*/function () {
  function GraphQLScalarType(config) {
    var _config$parseValue, _config$serialize, _config$parseLiteral;

    var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.default;
    this.name = config.name;
    this.description = config.description;
    this.specifiedByUrl = config.specifiedByUrl;
    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.default;
    this.parseValue = parseValue;
    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node, variables) {
      return parseValue((0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables));
    };
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
    config.specifiedByUrl == null || typeof config.specifiedByUrl === 'string' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"specifiedByUrl\" as a string, ") + "but got: ".concat((0, _inspect.default)(config.specifiedByUrl), "."));
    config.serialize == null || typeof config.serialize === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided."));

    if (config.parseLiteral) {
      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide both \"parseValue\" and \"parseLiteral\" functions."));
    }
  }

  var _proto = GraphQLScalarType.prototype;

  _proto.toConfig = function toConfig() {
    var _this$extensionASTNod;

    return {
      name: this.name,
      description: this.description,
      specifiedByUrl: this.specifiedByUrl,
      serialize: this.serialize,
      parseValue: this.parseValue,
      parseLiteral: this.parseLiteral,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
    };
  };

  _proto.toString = function toString() {
    return this.name;
  };

  _proto.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLScalarType, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLScalarType';
    }
  }]);

  return GraphQLScalarType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLScalarType = GraphQLScalarType;
(0, _defineInspect.default)(GraphQLScalarType);

/**
 * Object Type Definition
 *
 * Almost all of the GraphQL types you define will be object types. Object types
 * have a name, but most importantly describe their fields.
 *
 * Example:
 *
 *     const AddressType = new GraphQLObjectType({
 *       name: 'Address',
 *       fields: {
 *         street: { type: GraphQLString },
 *         number: { type: GraphQLInt },
 *         formatted: {
 *           type: GraphQLString,
 *           resolve(obj) {
 *             return obj.number + ' ' + obj.street
 *           }
 *         }
 *       }
 *     });
 *
 * When two types need to refer to each other, or a type needs to refer to
 * itself in a field, you can use a function expression (aka a closure or a
 * thunk) to supply the fields lazily.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         name: { type: GraphQLString },
 *         bestFriend: { type: PersonType },
 *       })
 *     });
 *
 */
var GraphQLObjectType = /*#__PURE__*/function () {
  function GraphQLObjectType(config) {
    this.name = config.name;
    this.description = config.description;
    this.isTypeOf = config.isTypeOf;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineFieldMap.bind(undefined, config);
    this._interfaces = defineInterfaces.bind(undefined, config);
    typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
    config.isTypeOf == null || typeof config.isTypeOf === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"isTypeOf\" as a function, ") + "but got: ".concat((0, _inspect.default)(config.isTypeOf), "."));
  }

  var _proto2 = GraphQLObjectType.prototype;

  _proto2.getFields = function getFields() {
    if (typeof this._fields === 'function') {
      this._fields = this._fields();
    }

    return this._fields;
  };

  _proto2.getInterfaces = function getInterfaces() {
    if (typeof this._interfaces === 'function') {
      this._interfaces = this._interfaces();
    }

    return this._interfaces;
  };

  _proto2.toConfig = function toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      isTypeOf: this.isTypeOf,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes || []
    };
  };

  _proto2.toString = function toString() {
    return this.name;
  };

  _proto2.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLObjectType, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLObjectType';
    }
  }]);

  return GraphQLObjectType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLObjectType = GraphQLObjectType;
(0, _defineInspect.default)(GraphQLObjectType);

function defineInterfaces(config) {
  var _resolveThunk;

  var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
  Array.isArray(interfaces) || (0, _devAssert.default)(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
  return interfaces;
}

function defineFieldMap(config) {
  var fieldMap = resolveThunk(config.fields);
  isPlainObj(fieldMap) || (0, _devAssert.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return (0, _mapValue.default)(fieldMap, function (fieldConfig, fieldName) {
    var _fieldConfig$args;

    isPlainObj(fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
    !('isDeprecated' in fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat((0, _inspect.default)(fieldConfig.resolve), "."));
    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
    isPlainObj(argsConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
    var args = (0, _objectEntries.default)(argsConfig).map(function (_ref) {
      var argName = _ref[0],
          argConfig = _ref[1];
      return {
        name: argName,
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: argConfig.extensions && (0, _toObjMap.default)(argConfig.extensions),
        astNode: argConfig.astNode
      };
    });
    return {
      name: fieldName,
      description: fieldConfig.description,
      type: fieldConfig.type,
      args: args,
      resolve: fieldConfig.resolve,
      subscribe: fieldConfig.subscribe,
      isDeprecated: fieldConfig.deprecationReason != null,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: fieldConfig.extensions && (0, _toObjMap.default)(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}

function isPlainObj(obj) {
  return (0, _isObjectLike.default)(obj) && !Array.isArray(obj);
}

function fieldsToFieldsConfig(fields) {
  return (0, _mapValue.default)(fields, function (field) {
    return {
      description: field.description,
      type: field.type,
      args: argsToArgsConfig(field.args),
      resolve: field.resolve,
      subscribe: field.subscribe,
      deprecationReason: field.deprecationReason,
      extensions: field.extensions,
      astNode: field.astNode
    };
  });
}
/**
 * @internal
 */


function argsToArgsConfig(args) {
  return (0, _keyValMap.default)(args, function (arg) {
    return arg.name;
  }, function (arg) {
    return {
      description: arg.description,
      type: arg.type,
      defaultValue: arg.defaultValue,
      deprecationReason: arg.deprecationReason,
      extensions: arg.extensions,
      astNode: arg.astNode
    };
  });
}

function isRequiredArgument(arg) {
  return isNonNullType(arg.type) && arg.defaultValue === undefined;
}

/**
 * Interface Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Interface type
 * is used to describe what types are possible, what fields are in common across
 * all types, as well as a function to determine which type is actually used
 * when the field is resolved.
 *
 * Example:
 *
 *     const EntityType = new GraphQLInterfaceType({
 *       name: 'Entity',
 *       fields: {
 *         name: { type: GraphQLString }
 *       }
 *     });
 *
 */
var GraphQLInterfaceType = /*#__PURE__*/function () {
  function GraphQLInterfaceType(config) {
    this.name = config.name;
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineFieldMap.bind(undefined, config);
    this._interfaces = defineInterfaces.bind(undefined, config);
    typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
    config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect.default)(config.resolveType), "."));
  }

  var _proto3 = GraphQLInterfaceType.prototype;

  _proto3.getFields = function getFields() {
    if (typeof this._fields === 'function') {
      this._fields = this._fields();
    }

    return this._fields;
  };

  _proto3.getInterfaces = function getInterfaces() {
    if (typeof this._interfaces === 'function') {
      this._interfaces = this._interfaces();
    }

    return this._interfaces;
  };

  _proto3.toConfig = function toConfig() {
    var _this$extensionASTNod2;

    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
    };
  };

  _proto3.toString = function toString() {
    return this.name;
  };

  _proto3.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLInterfaceType, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLInterfaceType';
    }
  }]);

  return GraphQLInterfaceType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLInterfaceType = GraphQLInterfaceType;
(0, _defineInspect.default)(GraphQLInterfaceType);

/**
 * Union Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Union type
 * is used to describe what types are possible as well as providing a function
 * to determine which type is actually used when the field is resolved.
 *
 * Example:
 *
 *     const PetType = new GraphQLUnionType({
 *       name: 'Pet',
 *       types: [ DogType, CatType ],
 *       resolveType(value) {
 *         if (value instanceof Dog) {
 *           return DogType;
 *         }
 *         if (value instanceof Cat) {
 *           return CatType;
 *         }
 *       }
 *     });
 *
 */
var GraphQLUnionType = /*#__PURE__*/function () {
  function GraphQLUnionType(config) {
    this.name = config.name;
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._types = defineTypes.bind(undefined, config);
    typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
    config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.default)(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect.default)(config.resolveType), "."));
  }

  var _proto4 = GraphQLUnionType.prototype;

  _proto4.getTypes = function getTypes() {
    if (typeof this._types === 'function') {
      this._types = this._types();
    }

    return this._types;
  };

  _proto4.toConfig = function toConfig() {
    var _this$extensionASTNod3;

    return {
      name: this.name,
      description: this.description,
      types: this.getTypes(),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
    };
  };

  _proto4.toString = function toString() {
    return this.name;
  };

  _proto4.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLUnionType, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLUnionType';
    }
  }]);

  return GraphQLUnionType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLUnionType = GraphQLUnionType;
(0, _defineInspect.default)(GraphQLUnionType);

function defineTypes(config) {
  var types = resolveThunk(config.types);
  Array.isArray(types) || (0, _devAssert.default)(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
  return types;
}

/**
 * Enum Type Definition
 *
 * Some leaf values of requests and input values are Enums. GraphQL serializes
 * Enum values as strings, however internally Enums can be represented by any
 * kind of type, often integers.
 *
 * Example:
 *
 *     const RGBType = new GraphQLEnumType({
 *       name: 'RGB',
 *       values: {
 *         RED: { value: 0 },
 *         GREEN: { value: 1 },
 *         BLUE: { value: 2 }
 *       }
 *     });
 *
 * Note: If a value is not provided in a definition, the name of the enum value
 * will be used as its internal value.
 */
var GraphQLEnumType
/* <T> */
= /*#__PURE__*/function () {
  function GraphQLEnumType(config) {
    this.name = config.name;
    this.description = config.description;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._values = defineEnumValues(this.name, config.values);
    this._valueLookup = new Map(this._values.map(function (enumValue) {
      return [enumValue.value, enumValue];
    }));
    this._nameLookup = (0, _keyMap.default)(this._values, function (value) {
      return value.name;
    });
    typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
  }

  var _proto5 = GraphQLEnumType.prototype;

  _proto5.getValues = function getValues() {
    return this._values;
  };

  _proto5.getValue = function getValue(name) {
    return this._nameLookup[name];
  };

  _proto5.serialize = function serialize(outputValue) {
    var enumValue = this._valueLookup.get(outputValue);

    if (enumValue === undefined) {
      throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent value: ").concat((0, _inspect.default)(outputValue)));
    }

    return enumValue.name;
  };

  _proto5.parseValue = function parseValue(inputValue)
  /* T */
  {
    if (typeof inputValue !== 'string') {
      var valueStr = (0, _inspect.default)(inputValue);
      throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-string value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
    }

    var enumValue = this.getValue(inputValue);

    if (enumValue == null) {
      throw new _GraphQLError.GraphQLError("Value \"".concat(inputValue, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, inputValue));
    }

    return enumValue.value;
  };

  _proto5.parseLiteral = function parseLiteral(valueNode, _variables)
  /* T */
  {
    // Note: variables will be resolved to a value before calling this function.
    if (valueNode.kind !== _kinds.Kind.ENUM) {
      var valueStr = (0, _printer.print)(valueNode);
      throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-enum value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
    }

    var enumValue = this.getValue(valueNode.value);

    if (enumValue == null) {
      var _valueStr = (0, _printer.print)(valueNode);

      throw new _GraphQLError.GraphQLError("Value \"".concat(_valueStr, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, _valueStr), valueNode);
    }

    return enumValue.value;
  };

  _proto5.toConfig = function toConfig() {
    var _this$extensionASTNod4;

    var values = (0, _keyValMap.default)(this.getValues(), function (value) {
      return value.name;
    }, function (value) {
      return {
        description: value.description,
        value: value.value,
        deprecationReason: value.deprecationReason,
        extensions: value.extensions,
        astNode: value.astNode
      };
    });
    return {
      name: this.name,
      description: this.description,
      values: values,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
    };
  };

  _proto5.toString = function toString() {
    return this.name;
  };

  _proto5.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLEnumType, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLEnumType';
    }
  }]);

  return GraphQLEnumType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLEnumType = GraphQLEnumType;
(0, _defineInspect.default)(GraphQLEnumType);

function didYouMeanEnumValue(enumType, unknownValueStr) {
  var allNames = enumType.getValues().map(function (value) {
    return value.name;
  });
  var suggestedValues = (0, _suggestionList.default)(unknownValueStr, allNames);
  return (0, _didYouMean.default)('the enum value', suggestedValues);
}

function defineEnumValues(typeName, valueMap) {
  isPlainObj(valueMap) || (0, _devAssert.default)(0, "".concat(typeName, " values must be an object with value names as keys."));
  return (0, _objectEntries.default)(valueMap).map(function (_ref2) {
    var valueName = _ref2[0],
        valueConfig = _ref2[1];
    isPlainObj(valueConfig) || (0, _devAssert.default)(0, "".concat(typeName, ".").concat(valueName, " must refer to an object with a \"value\" key ") + "representing an internal value but got: ".concat((0, _inspect.default)(valueConfig), "."));
    !('isDeprecated' in valueConfig) || (0, _devAssert.default)(0, "".concat(typeName, ".").concat(valueName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
    return {
      name: valueName,
      description: valueConfig.description,
      value: valueConfig.value !== undefined ? valueConfig.value : valueName,
      isDeprecated: valueConfig.deprecationReason != null,
      deprecationReason: valueConfig.deprecationReason,
      extensions: valueConfig.extensions && (0, _toObjMap.default)(valueConfig.extensions),
      astNode: valueConfig.astNode
    };
  });
}

/**
 * Input Object Type Definition
 *
 * An input object defines a structured collection of fields which may be
 * supplied to a field argument.
 *
 * Using `NonNull` will ensure that a value must be provided by the query
 *
 * Example:
 *
 *     const GeoPoint = new GraphQLInputObjectType({
 *       name: 'GeoPoint',
 *       fields: {
 *         lat: { type: new GraphQLNonNull(GraphQLFloat) },
 *         lon: { type: new GraphQLNonNull(GraphQLFloat) },
 *         alt: { type: GraphQLFloat, defaultValue: 0 },
 *       }
 *     });
 *
 */
var GraphQLInputObjectType = /*#__PURE__*/function () {
  function GraphQLInputObjectType(config) {
    this.name = config.name;
    this.description = config.description;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineInputFieldMap.bind(undefined, config);
    typeof config.name === 'string' || (0, _devAssert.default)(0, 'Must provide name.');
  }

  var _proto6 = GraphQLInputObjectType.prototype;

  _proto6.getFields = function getFields() {
    if (typeof this._fields === 'function') {
      this._fields = this._fields();
    }

    return this._fields;
  };

  _proto6.toConfig = function toConfig() {
    var _this$extensionASTNod5;

    var fields = (0, _mapValue.default)(this.getFields(), function (field) {
      return {
        description: field.description,
        type: field.type,
        defaultValue: field.defaultValue,
        extensions: field.extensions,
        astNode: field.astNode
      };
    });
    return {
      name: this.name,
      description: this.description,
      fields: fields,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
    };
  };

  _proto6.toString = function toString() {
    return this.name;
  };

  _proto6.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLInputObjectType, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLInputObjectType';
    }
  }]);

  return GraphQLInputObjectType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLInputObjectType = GraphQLInputObjectType;
(0, _defineInspect.default)(GraphQLInputObjectType);

function defineInputFieldMap(config) {
  var fieldMap = resolveThunk(config.fields);
  isPlainObj(fieldMap) || (0, _devAssert.default)(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return (0, _mapValue.default)(fieldMap, function (fieldConfig, fieldName) {
    !('resolve' in fieldConfig) || (0, _devAssert.default)(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
    return {
      name: fieldName,
      description: fieldConfig.description,
      type: fieldConfig.type,
      defaultValue: fieldConfig.defaultValue,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: fieldConfig.extensions && (0, _toObjMap.default)(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}

function isRequiredInputField(field) {
  return isNonNullType(field.type) && field.defaultValue === undefined;
}

},{"../polyfills/objectEntries.js":"5fjGQ","../polyfills/symbols.js":"4phrQ","../jsutils/inspect.js":"2onMM","../jsutils/keyMap.js":"1oNDS","../jsutils/mapValue.js":"5uH4m","../jsutils/toObjMap.js":"2tkia","../jsutils/devAssert.js":"1F99Z","../jsutils/keyValMap.js":"76vLr","../jsutils/instanceOf.js":"1OohF","../jsutils/didYouMean.js":"c5AA7","../jsutils/isObjectLike.js":"526rJ","../jsutils/identityFunc.js":"4iymt","../jsutils/defineInspect.js":"6NGTJ","../jsutils/suggestionList.js":"52DFF","../error/GraphQLError.js":"cXily","../language/kinds.js":"6m0P6","../language/printer.js":"1UYdT","../utilities/valueFromASTUntyped.js":"3ZEuT"}],"5fjGQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var objectEntries = Object.entries || function (obj) {
  return Object.keys(obj).map(function (key) {
    return [key, obj[key]];
  });
};

var _default = objectEntries;
exports.default = _default;

},{}],"1oNDS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyMap;

/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * for each value in the array.
 *
 * This provides a convenient lookup for the array items if the key function
 * produces unique results.
 *
 *     const phoneBook = [
 *       { name: 'Jon', num: '555-1234' },
 *       { name: 'Jenny', num: '867-5309' }
 *     ]
 *
 *     // { Jon: { name: 'Jon', num: '555-1234' },
 *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
 *     const entriesByName = keyMap(
 *       phoneBook,
 *       entry => entry.name
 *     )
 *
 *     // { name: 'Jenny', num: '857-6309' }
 *     const jennyEntry = entriesByName['Jenny']
 *
 */
function keyMap(list, keyFn) {
  return list.reduce(function (map, item) {
    map[keyFn(item)] = item;
    return map;
  }, Object.create(null));
}

},{}],"5uH4m":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mapValue;

var _objectEntries3 = _interopRequireDefault(require("../polyfills/objectEntries.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates an object map with the same keys as `map` and values generated by
 * running each value of `map` thru `fn`.
 */
function mapValue(map, fn) {
  var result = Object.create(null);

  for (var _i2 = 0, _objectEntries2 = (0, _objectEntries3.default)(map); _i2 < _objectEntries2.length; _i2++) {
    var _ref2 = _objectEntries2[_i2];
    var _key = _ref2[0];
    var _value = _ref2[1];
    result[_key] = fn(_value, _key);
  }

  return result;
}

},{"../polyfills/objectEntries.js":"5fjGQ"}],"2tkia":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toObjMap;

var _objectEntries3 = _interopRequireDefault(require("../polyfills/objectEntries.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toObjMap(obj) {
  /* eslint-enable no-redeclare */
  if (Object.getPrototypeOf(obj) === null) {
    return obj;
  }

  var map = Object.create(null);

  for (var _i2 = 0, _objectEntries2 = (0, _objectEntries3.default)(obj); _i2 < _objectEntries2.length; _i2++) {
    var _ref2 = _objectEntries2[_i2];
    var key = _ref2[0];
    var value = _ref2[1];
    map[key] = value;
  }

  return map;
}

},{"../polyfills/objectEntries.js":"5fjGQ"}],"76vLr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyValMap;

/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * and a function to produce the values from each item in the array.
 *
 *     const phoneBook = [
 *       { name: 'Jon', num: '555-1234' },
 *       { name: 'Jenny', num: '867-5309' }
 *     ]
 *
 *     // { Jon: '555-1234', Jenny: '867-5309' }
 *     const phonesByName = keyValMap(
 *       phoneBook,
 *       entry => entry.name,
 *       entry => entry.num
 *     )
 *
 */
function keyValMap(list, keyFn, valFn) {
  return list.reduce(function (map, item) {
    map[keyFn(item)] = valFn(item);
    return map;
  }, Object.create(null));
}

},{}],"c5AA7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = didYouMean;
var MAX_SUGGESTIONS = 5;
/**
 * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
 */

// eslint-disable-next-line no-redeclare
function didYouMean(firstArg, secondArg) {
  var _ref = typeof firstArg === 'string' ? [firstArg, secondArg] : [undefined, firstArg],
      subMessage = _ref[0],
      suggestionsArg = _ref[1];

  var message = ' Did you mean ';

  if (subMessage) {
    message += subMessage + ' ';
  }

  var suggestions = suggestionsArg.map(function (x) {
    return "\"".concat(x, "\"");
  });

  switch (suggestions.length) {
    case 0:
      return '';

    case 1:
      return message + suggestions[0] + '?';

    case 2:
      return message + suggestions[0] + ' or ' + suggestions[1] + '?';
  }

  var selected = suggestions.slice(0, MAX_SUGGESTIONS);
  var lastItem = selected.pop();
  return message + selected.join(', ') + ', or ' + lastItem + '?';
}

},{}],"4iymt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identityFunc;

/**
 * Returns the first argument it receives.
 */
function identityFunc(x) {
  return x;
}

},{}],"52DFF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = suggestionList;

var _naturalCompare = _interopRequireDefault(require("./naturalCompare.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given an invalid input string and a list of valid options, returns a filtered
 * list of valid options sorted based on their similarity with the input.
 */
function suggestionList(input, options) {
  var optionsByDistance = Object.create(null);
  var lexicalDistance = new LexicalDistance(input);
  var threshold = Math.floor(input.length * 0.4) + 1;

  for (var _i2 = 0; _i2 < options.length; _i2++) {
    var option = options[_i2];
    var distance = lexicalDistance.measure(option, threshold);

    if (distance !== undefined) {
      optionsByDistance[option] = distance;
    }
  }

  return Object.keys(optionsByDistance).sort(function (a, b) {
    var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
    return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare.default)(a, b);
  });
}
/**
 * Computes the lexical distance between strings A and B.
 *
 * The "distance" between two strings is given by counting the minimum number
 * of edits needed to transform string A into string B. An edit can be an
 * insertion, deletion, or substitution of a single character, or a swap of two
 * adjacent characters.
 *
 * Includes a custom alteration from Damerau-Levenshtein to treat case changes
 * as a single edit which helps identify mis-cased values with an edit distance
 * of 1.
 *
 * This distance can be useful for detecting typos in input or sorting
 */


var LexicalDistance = /*#__PURE__*/function () {
  function LexicalDistance(input) {
    this._input = input;
    this._inputLowerCase = input.toLowerCase();
    this._inputArray = stringToArray(this._inputLowerCase);
    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
  }

  var _proto = LexicalDistance.prototype;

  _proto.measure = function measure(option, threshold) {
    if (this._input === option) {
      return 0;
    }

    var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

    if (this._inputLowerCase === optionLowerCase) {
      return 1;
    }

    var a = stringToArray(optionLowerCase);
    var b = this._inputArray;

    if (a.length < b.length) {
      var tmp = a;
      a = b;
      b = tmp;
    }

    var aLength = a.length;
    var bLength = b.length;

    if (aLength - bLength > threshold) {
      return undefined;
    }

    var rows = this._rows;

    for (var j = 0; j <= bLength; j++) {
      rows[0][j] = j;
    }

    for (var i = 1; i <= aLength; i++) {
      var upRow = rows[(i - 1) % 3];
      var currentRow = rows[i % 3];
      var smallestCell = currentRow[0] = i;

      for (var _j = 1; _j <= bLength; _j++) {
        var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
        var currentCell = Math.min(upRow[_j] + 1, // delete
        currentRow[_j - 1] + 1, // insert
        upRow[_j - 1] + cost // substitute
        );

        if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {
          // transposition
          var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
        }

        if (currentCell < smallestCell) {
          smallestCell = currentCell;
        }

        currentRow[_j] = currentCell;
      } // Early exit, since distance can't go smaller than smallest element of the previous row.


      if (smallestCell > threshold) {
        return undefined;
      }
    }

    var distance = rows[aLength % 3][bLength];
    return distance <= threshold ? distance : undefined;
  };

  return LexicalDistance;
}();

function stringToArray(str) {
  var strLength = str.length;
  var array = new Array(strLength);

  for (var i = 0; i < strLength; ++i) {
    array[i] = str.charCodeAt(i);
  }

  return array;
}

},{"./naturalCompare.js":"7Fmta"}],"7Fmta":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = naturalCompare;

/**
 * Returns a number indicating whether a reference string comes before, or after,
 * or is the same as the given string in natural sort order.
 *
 * See: https://en.wikipedia.org/wiki/Natural_sort_order
 *
 */
function naturalCompare(aStr, bStr) {
  var aIdx = 0;
  var bIdx = 0;

  while (aIdx < aStr.length && bIdx < bStr.length) {
    var aChar = aStr.charCodeAt(aIdx);
    var bChar = bStr.charCodeAt(bIdx);

    if (isDigit(aChar) && isDigit(bChar)) {
      var aNum = 0;

      do {
        ++aIdx;
        aNum = aNum * 10 + aChar - DIGIT_0;
        aChar = aStr.charCodeAt(aIdx);
      } while (isDigit(aChar) && aNum > 0);

      var bNum = 0;

      do {
        ++bIdx;
        bNum = bNum * 10 + bChar - DIGIT_0;
        bChar = bStr.charCodeAt(bIdx);
      } while (isDigit(bChar) && bNum > 0);

      if (aNum < bNum) {
        return -1;
      }

      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }

      if (aChar > bChar) {
        return 1;
      }

      ++aIdx;
      ++bIdx;
    }
  }

  return aStr.length - bStr.length;
}

var DIGIT_0 = 48;
var DIGIT_9 = 57;

function isDigit(code) {
  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}

},{}],"1UYdT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = print;

var _visitor = require("./visitor.js");

var _blockString = require("./blockString.js");

/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */
function print(ast) {
  return (0, _visitor.visit)(ast, {
    leave: printDocASTReducer
  });
}

var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

var printDocASTReducer = {
  Name: function Name(node) {
    return node.value;
  },
  Variable: function Variable(node) {
    return '$' + node.name;
  },
  // Document
  Document: function Document(node) {
    return join(node.definitions, '\n\n') + '\n';
  },
  OperationDefinition: function OperationDefinition(node) {
    var op = node.operation;
    var name = node.name;
    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
    var directives = join(node.directives, ' ');
    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
    // the query short form.

    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
  },
  VariableDefinition: function VariableDefinition(_ref) {
    var variable = _ref.variable,
        type = _ref.type,
        defaultValue = _ref.defaultValue,
        directives = _ref.directives;
    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
  },
  SelectionSet: function SelectionSet(_ref2) {
    var selections = _ref2.selections;
    return block(selections);
  },
  Field: function Field(_ref3) {
    var alias = _ref3.alias,
        name = _ref3.name,
        args = _ref3.arguments,
        directives = _ref3.directives,
        selectionSet = _ref3.selectionSet;
    var prefix = wrap('', alias, ': ') + name;
    var argsLine = prefix + wrap('(', join(args, ', '), ')');

    if (argsLine.length > MAX_LINE_LENGTH) {
      argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
    }

    return join([argsLine, join(directives, ' '), selectionSet], ' ');
  },
  Argument: function Argument(_ref4) {
    var name = _ref4.name,
        value = _ref4.value;
    return name + ': ' + value;
  },
  // Fragments
  FragmentSpread: function FragmentSpread(_ref5) {
    var name = _ref5.name,
        directives = _ref5.directives;
    return '...' + name + wrap(' ', join(directives, ' '));
  },
  InlineFragment: function InlineFragment(_ref6) {
    var typeCondition = _ref6.typeCondition,
        directives = _ref6.directives,
        selectionSet = _ref6.selectionSet;
    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
  },
  FragmentDefinition: function FragmentDefinition(_ref7) {
    var name = _ref7.name,
        typeCondition = _ref7.typeCondition,
        variableDefinitions = _ref7.variableDefinitions,
        directives = _ref7.directives,
        selectionSet = _ref7.selectionSet;
    return (// Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
    );
  },
  // Value
  IntValue: function IntValue(_ref8) {
    var value = _ref8.value;
    return value;
  },
  FloatValue: function FloatValue(_ref9) {
    var value = _ref9.value;
    return value;
  },
  StringValue: function StringValue(_ref10, key) {
    var value = _ref10.value,
        isBlockString = _ref10.block;
    return isBlockString ? (0, _blockString.printBlockString)(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
  },
  BooleanValue: function BooleanValue(_ref11) {
    var value = _ref11.value;
    return value ? 'true' : 'false';
  },
  NullValue: function NullValue() {
    return 'null';
  },
  EnumValue: function EnumValue(_ref12) {
    var value = _ref12.value;
    return value;
  },
  ListValue: function ListValue(_ref13) {
    var values = _ref13.values;
    return '[' + join(values, ', ') + ']';
  },
  ObjectValue: function ObjectValue(_ref14) {
    var fields = _ref14.fields;
    return '{' + join(fields, ', ') + '}';
  },
  ObjectField: function ObjectField(_ref15) {
    var name = _ref15.name,
        value = _ref15.value;
    return name + ': ' + value;
  },
  // Directive
  Directive: function Directive(_ref16) {
    var name = _ref16.name,
        args = _ref16.arguments;
    return '@' + name + wrap('(', join(args, ', '), ')');
  },
  // Type
  NamedType: function NamedType(_ref17) {
    var name = _ref17.name;
    return name;
  },
  ListType: function ListType(_ref18) {
    var type = _ref18.type;
    return '[' + type + ']';
  },
  NonNullType: function NonNullType(_ref19) {
    var type = _ref19.type;
    return type + '!';
  },
  // Type System Definitions
  SchemaDefinition: addDescription(function (_ref20) {
    var directives = _ref20.directives,
        operationTypes = _ref20.operationTypes;
    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
  }),
  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
    var operation = _ref21.operation,
        type = _ref21.type;
    return operation + ': ' + type;
  },
  ScalarTypeDefinition: addDescription(function (_ref22) {
    var name = _ref22.name,
        directives = _ref22.directives;
    return join(['scalar', name, join(directives, ' ')], ' ');
  }),
  ObjectTypeDefinition: addDescription(function (_ref23) {
    var name = _ref23.name,
        interfaces = _ref23.interfaces,
        directives = _ref23.directives,
        fields = _ref23.fields;
    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),
  FieldDefinition: addDescription(function (_ref24) {
    var name = _ref24.name,
        args = _ref24.arguments,
        type = _ref24.type,
        directives = _ref24.directives;
    return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
  }),
  InputValueDefinition: addDescription(function (_ref25) {
    var name = _ref25.name,
        type = _ref25.type,
        defaultValue = _ref25.defaultValue,
        directives = _ref25.directives;
    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
  }),
  InterfaceTypeDefinition: addDescription(function (_ref26) {
    var name = _ref26.name,
        interfaces = _ref26.interfaces,
        directives = _ref26.directives,
        fields = _ref26.fields;
    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),
  UnionTypeDefinition: addDescription(function (_ref27) {
    var name = _ref27.name,
        directives = _ref27.directives,
        types = _ref27.types;
    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  }),
  EnumTypeDefinition: addDescription(function (_ref28) {
    var name = _ref28.name,
        directives = _ref28.directives,
        values = _ref28.values;
    return join(['enum', name, join(directives, ' '), block(values)], ' ');
  }),
  EnumValueDefinition: addDescription(function (_ref29) {
    var name = _ref29.name,
        directives = _ref29.directives;
    return join([name, join(directives, ' ')], ' ');
  }),
  InputObjectTypeDefinition: addDescription(function (_ref30) {
    var name = _ref30.name,
        directives = _ref30.directives,
        fields = _ref30.fields;
    return join(['input', name, join(directives, ' '), block(fields)], ' ');
  }),
  DirectiveDefinition: addDescription(function (_ref31) {
    var name = _ref31.name,
        args = _ref31.arguments,
        repeatable = _ref31.repeatable,
        locations = _ref31.locations;
    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
  }),
  SchemaExtension: function SchemaExtension(_ref32) {
    var directives = _ref32.directives,
        operationTypes = _ref32.operationTypes;
    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
  },
  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
    var name = _ref33.name,
        directives = _ref33.directives;
    return join(['extend scalar', name, join(directives, ' ')], ' ');
  },
  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
    var name = _ref34.name,
        interfaces = _ref34.interfaces,
        directives = _ref34.directives,
        fields = _ref34.fields;
    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },
  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
    var name = _ref35.name,
        interfaces = _ref35.interfaces,
        directives = _ref35.directives,
        fields = _ref35.fields;
    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },
  UnionTypeExtension: function UnionTypeExtension(_ref36) {
    var name = _ref36.name,
        directives = _ref36.directives,
        types = _ref36.types;
    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  },
  EnumTypeExtension: function EnumTypeExtension(_ref37) {
    var name = _ref37.name,
        directives = _ref37.directives,
        values = _ref37.values;
    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
  },
  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
    var name = _ref38.name,
        directives = _ref38.directives,
        fields = _ref38.fields;
    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
  }
};

function addDescription(cb) {
  return function (node) {
    return join([node.description, cb(node)], '\n');
  };
}
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */


function join(maybeArray) {
  var _maybeArray$filter$jo;

  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
    return x;
  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
}
/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */


function block(array) {
  return wrap('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */


function wrap(start, maybeString) {
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
}

function indent(str) {
  return wrap('  ', str.replace(/\n/g, '\n  '));
}

function isMultiline(str) {
  return str.indexOf('\n') !== -1;
}

function hasMultilineItems(maybeArray) {
  return maybeArray != null && maybeArray.some(isMultiline);
}

},{"./visitor.js":"wwZgf","./blockString.js":"2xxl5"}],"3ZEuT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueFromASTUntyped = valueFromASTUntyped;

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.js"));

var _kinds = require("../language/kinds.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
 * will reflect the provided GraphQL value AST.
 *
 * | GraphQL Value        | JavaScript Value |
 * | -------------------- | ---------------- |
 * | Input Object         | Object           |
 * | List                 | Array            |
 * | Boolean              | Boolean          |
 * | String / Enum        | String           |
 * | Int / Float          | Number           |
 * | Null                 | null             |
 *
 */
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case _kinds.Kind.NULL:
      return null;

    case _kinds.Kind.INT:
      return parseInt(valueNode.value, 10);

    case _kinds.Kind.FLOAT:
      return parseFloat(valueNode.value);

    case _kinds.Kind.STRING:
    case _kinds.Kind.ENUM:
    case _kinds.Kind.BOOLEAN:
      return valueNode.value;

    case _kinds.Kind.LIST:
      return valueNode.values.map(function (node) {
        return valueFromASTUntyped(node, variables);
      });

    case _kinds.Kind.OBJECT:
      return (0, _keyValMap.default)(valueNode.fields, function (field) {
        return field.name.value;
      }, function (field) {
        return valueFromASTUntyped(field.value, variables);
      });

    case _kinds.Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  } // istanbul ignore next (Not reachable. All possible value nodes have been considered)


  false || (0, _invariant.default)(0, 'Unexpected value node: ' + (0, _inspect.default)(valueNode));
}

},{"../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../jsutils/keyValMap.js":"76vLr","../language/kinds.js":"6m0P6"}],"5cHio":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSchema = isSchema;
exports.assertSchema = assertSchema;
exports.GraphQLSchema = void 0;

var _find = _interopRequireDefault(require("../polyfills/find.js"));

var _arrayFrom3 = _interopRequireDefault(require("../polyfills/arrayFrom.js"));

var _objectValues5 = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _symbols = require("../polyfills/symbols.js");

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _toObjMap = _interopRequireDefault(require("../jsutils/toObjMap.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _introspection = require("./introspection.js");

var _directives = require("./directives.js");

var _definition = require("./definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// eslint-disable-next-line no-redeclare
function isSchema(schema) {
  return (0, _instanceOf.default)(schema, GraphQLSchema);
}

function assertSchema(schema) {
  if (!isSchema(schema)) {
    throw new Error("Expected ".concat((0, _inspect.default)(schema), " to be a GraphQL schema."));
  }

  return schema;
}
/**
 * Schema Definition
 *
 * A Schema is created by supplying the root types of each type of operation,
 * query and mutation (optional). A schema definition is then supplied to the
 * validator and executor.
 *
 * Example:
 *
 *     const MyAppSchema = new GraphQLSchema({
 *       query: MyAppQueryRootType,
 *       mutation: MyAppMutationRootType,
 *     })
 *
 * Note: When the schema is constructed, by default only the types that are
 * reachable by traversing the root types are included, other types must be
 * explicitly referenced.
 *
 * Example:
 *
 *     const characterInterface = new GraphQLInterfaceType({
 *       name: 'Character',
 *       ...
 *     });
 *
 *     const humanType = new GraphQLObjectType({
 *       name: 'Human',
 *       interfaces: [characterInterface],
 *       ...
 *     });
 *
 *     const droidType = new GraphQLObjectType({
 *       name: 'Droid',
 *       interfaces: [characterInterface],
 *       ...
 *     });
 *
 *     const schema = new GraphQLSchema({
 *       query: new GraphQLObjectType({
 *         name: 'Query',
 *         fields: {
 *           hero: { type: characterInterface, ... },
 *         }
 *       }),
 *       ...
 *       // Since this schema references only the `Character` interface it's
 *       // necessary to explicitly list the types that implement it if
 *       // you want them to be included in the final schema.
 *       types: [humanType, droidType],
 *     })
 *
 * Note: If an array of `directives` are provided to GraphQLSchema, that will be
 * the exact list of directives represented and allowed. If `directives` is not
 * provided then a default set of the specified directives (e.g. @include and
 * @skip) will be used. If you wish to provide *additional* directives to these
 * specified directives, you must explicitly declare them. Example:
 *
 *     const MyAppSchema = new GraphQLSchema({
 *       ...
 *       directives: specifiedDirectives.concat([ myCustomDirective ]),
 *     })
 *
 */


var GraphQLSchema = /*#__PURE__*/function () {
  // Used as a cache for validateSchema().
  function GraphQLSchema(config) {
    var _config$directives;

    // If this schema was built from a source known to be valid, then it may be
    // marked with assumeValid to avoid an additional type system validation.
    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

    (0, _isObjectLike.default)(config) || (0, _devAssert.default)(0, 'Must provide configuration object.');
    !config.types || Array.isArray(config.types) || (0, _devAssert.default)(0, "\"types\" must be Array if provided but got: ".concat((0, _inspect.default)(config.types), "."));
    !config.directives || Array.isArray(config.directives) || (0, _devAssert.default)(0, '"directives" must be Array if provided but got: ' + "".concat((0, _inspect.default)(config.directives), "."));
    this.description = config.description;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = config.extensionASTNodes;
    this._queryType = config.query;
    this._mutationType = config.mutation;
    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
    // the set of "collected" types, so `collectReferencedTypes` ignore them.

    var allReferencedTypes = new Set(config.types);

    if (config.types != null) {
      for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
        var type = _config$types2[_i2];
        // When we ready to process this type, we remove it from "collected" types
        // and then add it together with all dependent types in the correct position.
        allReferencedTypes.delete(type);
        collectReferencedTypes(type, allReferencedTypes);
      }
    }

    if (this._queryType != null) {
      collectReferencedTypes(this._queryType, allReferencedTypes);
    }

    if (this._mutationType != null) {
      collectReferencedTypes(this._mutationType, allReferencedTypes);
    }

    if (this._subscriptionType != null) {
      collectReferencedTypes(this._subscriptionType, allReferencedTypes);
    }

    for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {
      var directive = _this$_directives2[_i4];

      // Directives are not validated until validateSchema() is called.
      if ((0, _directives.isDirective)(directive)) {
        for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
          var arg = _directive$args2[_i6];
          collectReferencedTypes(arg.type, allReferencedTypes);
        }
      }
    }

    collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

    this._typeMap = Object.create(null);
    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

    this._implementationsMap = Object.create(null);

    for (var _i8 = 0, _arrayFrom2 = (0, _arrayFrom3.default)(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {
      var namedType = _arrayFrom2[_i8];

      if (namedType == null) {
        continue;
      }

      var typeName = namedType.name;
      typeName || (0, _devAssert.default)(0, 'One of the provided types for building the Schema is missing a name.');

      if (this._typeMap[typeName] !== undefined) {
        throw new Error("Schema must contain uniquely named types but contains multiple types named \"".concat(typeName, "\"."));
      }

      this._typeMap[typeName] = namedType;

      if ((0, _definition.isInterfaceType)(namedType)) {
        // Store implementations by interface.
        for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {
          var iface = _namedType$getInterfa2[_i10];

          if ((0, _definition.isInterfaceType)(iface)) {
            var implementations = this._implementationsMap[iface.name];

            if (implementations === undefined) {
              implementations = this._implementationsMap[iface.name] = {
                objects: [],
                interfaces: []
              };
            }

            implementations.interfaces.push(namedType);
          }
        }
      } else if ((0, _definition.isObjectType)(namedType)) {
        // Store implementations by objects.
        for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {
          var _iface = _namedType$getInterfa4[_i12];

          if ((0, _definition.isInterfaceType)(_iface)) {
            var _implementations = this._implementationsMap[_iface.name];

            if (_implementations === undefined) {
              _implementations = this._implementationsMap[_iface.name] = {
                objects: [],
                interfaces: []
              };
            }

            _implementations.objects.push(namedType);
          }
        }
      }
    }
  }

  var _proto = GraphQLSchema.prototype;

  _proto.getQueryType = function getQueryType() {
    return this._queryType;
  };

  _proto.getMutationType = function getMutationType() {
    return this._mutationType;
  };

  _proto.getSubscriptionType = function getSubscriptionType() {
    return this._subscriptionType;
  };

  _proto.getTypeMap = function getTypeMap() {
    return this._typeMap;
  };

  _proto.getType = function getType(name) {
    return this.getTypeMap()[name];
  };

  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
    return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
  };

  _proto.getImplementations = function getImplementations(interfaceType) {
    var implementations = this._implementationsMap[interfaceType.name];
    return implementations !== null && implementations !== void 0 ? implementations : {
      objects: [],
      interfaces: []
    };
  } // @deprecated: use isSubType instead - will be removed in v16.
  ;

  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {
    return this.isSubType(abstractType, possibleType);
  };

  _proto.isSubType = function isSubType(abstractType, maybeSubType) {
    var map = this._subTypeMap[abstractType.name];

    if (map === undefined) {
      map = Object.create(null);

      if ((0, _definition.isUnionType)(abstractType)) {
        for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {
          var type = _abstractType$getType2[_i14];
          map[type.name] = true;
        }
      } else {
        var implementations = this.getImplementations(abstractType);

        for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {
          var _type = _implementations$obje2[_i16];
          map[_type.name] = true;
        }

        for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {
          var _type2 = _implementations$inte2[_i18];
          map[_type2.name] = true;
        }
      }

      this._subTypeMap[abstractType.name] = map;
    }

    return map[maybeSubType.name] !== undefined;
  };

  _proto.getDirectives = function getDirectives() {
    return this._directives;
  };

  _proto.getDirective = function getDirective(name) {
    return (0, _find.default)(this.getDirectives(), function (directive) {
      return directive.name === name;
    });
  };

  _proto.toConfig = function toConfig() {
    var _this$extensionASTNod;

    return {
      description: this.description,
      query: this.getQueryType(),
      mutation: this.getMutationType(),
      subscription: this.getSubscriptionType(),
      types: (0, _objectValues5.default)(this.getTypeMap()),
      directives: this.getDirectives().slice(),
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],
      assumeValid: this.__validationErrors !== undefined
    };
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLSchema, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLSchema';
    }
  }]);

  return GraphQLSchema;
}();

exports.GraphQLSchema = GraphQLSchema;

function collectReferencedTypes(type, typeSet) {
  var namedType = (0, _definition.getNamedType)(type);

  if (!typeSet.has(namedType)) {
    typeSet.add(namedType);

    if ((0, _definition.isUnionType)(namedType)) {
      for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {
        var memberType = _namedType$getTypes2[_i20];
        collectReferencedTypes(memberType, typeSet);
      }
    } else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
      for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {
        var interfaceType = _namedType$getInterfa6[_i22];
        collectReferencedTypes(interfaceType, typeSet);
      }

      for (var _i24 = 0, _objectValues2 = (0, _objectValues5.default)(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {
        var field = _objectValues2[_i24];
        collectReferencedTypes(field.type, typeSet);

        for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {
          var arg = _field$args2[_i26];
          collectReferencedTypes(arg.type, typeSet);
        }
      }
    } else if ((0, _definition.isInputObjectType)(namedType)) {
      for (var _i28 = 0, _objectValues4 = (0, _objectValues5.default)(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {
        var _field = _objectValues4[_i28];
        collectReferencedTypes(_field.type, typeSet);
      }
    }
  }

  return typeSet;
}

},{"../polyfills/find.js":"5w3fy","../polyfills/arrayFrom.js":"1z5f4","../polyfills/objectValues.js":"2BpS0","../polyfills/symbols.js":"4phrQ","../jsutils/inspect.js":"2onMM","../jsutils/toObjMap.js":"2tkia","../jsutils/devAssert.js":"1F99Z","../jsutils/instanceOf.js":"1OohF","../jsutils/isObjectLike.js":"526rJ","./introspection.js":"5yLF0","./directives.js":"2w91d","./definition.js":"n9nw4"}],"1z5f4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _symbols = require("./symbols.js");

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound]
var arrayFrom = Array.from || function (obj, mapFn, thisArg) {
  if (obj == null) {
    throw new TypeError('Array.from requires an array-like object - not null or undefined');
  } // Is Iterable?


  var iteratorMethod = obj[_symbols.SYMBOL_ITERATOR];

  if (typeof iteratorMethod === 'function') {
    var iterator = iteratorMethod.call(obj);
    var result = [];
    var step;

    for (var i = 0; !(step = iterator.next()).done; ++i) {
      result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.
      // After a very large number of iterations, produce an error.
      // istanbul ignore if (Too big to actually test)

      if (i > 9999999) {
        throw new TypeError('Near-infinite iteration.');
      }
    }

    return result;
  } // Is Array like?


  var length = obj.length;

  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
    var _result = [];

    for (var _i = 0; _i < length; ++_i) {
      if (Object.prototype.hasOwnProperty.call(obj, _i)) {
        _result.push(mapFn.call(thisArg, obj[_i], _i));
      }
    }

    return _result;
  }

  return [];
};

var _default = arrayFrom;
exports.default = _default;

},{"./symbols.js":"4phrQ"}],"5yLF0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIntrospectionType = isIntrospectionType;
exports.introspectionTypes = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = void 0;

var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _printer = require("../language/printer.js");

var _directiveLocation = require("../language/directiveLocation.js");

var _astFromValue = require("../utilities/astFromValue.js");

var _scalars = require("./scalars.js");

var _definition = require("./definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __Schema = new _definition.GraphQLObjectType({
  name: '__Schema',
  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
  fields: function fields() {
    return {
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(schema) {
          return schema.description;
        }
      },
      types: {
        description: 'A list of all types supported by this server.',
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),
        resolve: function resolve(schema) {
          return (0, _objectValues.default)(schema.getTypeMap());
        }
      },
      queryType: {
        description: 'The type that query operations will be rooted at.',
        type: new _definition.GraphQLNonNull(__Type),
        resolve: function resolve(schema) {
          return schema.getQueryType();
        }
      },
      mutationType: {
        description: 'If this server supports mutation, the type that mutation operations will be rooted at.',
        type: __Type,
        resolve: function resolve(schema) {
          return schema.getMutationType();
        }
      },
      subscriptionType: {
        description: 'If this server support subscription, the type that subscription operations will be rooted at.',
        type: __Type,
        resolve: function resolve(schema) {
          return schema.getSubscriptionType();
        }
      },
      directives: {
        description: 'A list of all directives supported by this server.',
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),
        resolve: function resolve(schema) {
          return schema.getDirectives();
        }
      }
    };
  }
});

exports.__Schema = __Schema;

var __Directive = new _definition.GraphQLObjectType({
  name: '__Directive',
  description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(directive) {
          return directive.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(directive) {
          return directive.description;
        }
      },
      isRepeatable: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(directive) {
          return directive.isRepeatable;
        }
      },
      locations: {
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation))),
        resolve: function resolve(directive) {
          return directive.locations;
        }
      },
      args: {
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
        resolve: function resolve(directive) {
          return directive.args;
        }
      }
    };
  }
});

exports.__Directive = __Directive;

var __DirectiveLocation = new _definition.GraphQLEnumType({
  name: '__DirectiveLocation',
  description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
  values: {
    QUERY: {
      value: _directiveLocation.DirectiveLocation.QUERY,
      description: 'Location adjacent to a query operation.'
    },
    MUTATION: {
      value: _directiveLocation.DirectiveLocation.MUTATION,
      description: 'Location adjacent to a mutation operation.'
    },
    SUBSCRIPTION: {
      value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
      description: 'Location adjacent to a subscription operation.'
    },
    FIELD: {
      value: _directiveLocation.DirectiveLocation.FIELD,
      description: 'Location adjacent to a field.'
    },
    FRAGMENT_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
      description: 'Location adjacent to a fragment definition.'
    },
    FRAGMENT_SPREAD: {
      value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
      description: 'Location adjacent to a fragment spread.'
    },
    INLINE_FRAGMENT: {
      value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
      description: 'Location adjacent to an inline fragment.'
    },
    VARIABLE_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
      description: 'Location adjacent to a variable definition.'
    },
    SCHEMA: {
      value: _directiveLocation.DirectiveLocation.SCHEMA,
      description: 'Location adjacent to a schema definition.'
    },
    SCALAR: {
      value: _directiveLocation.DirectiveLocation.SCALAR,
      description: 'Location adjacent to a scalar definition.'
    },
    OBJECT: {
      value: _directiveLocation.DirectiveLocation.OBJECT,
      description: 'Location adjacent to an object type definition.'
    },
    FIELD_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
      description: 'Location adjacent to a field definition.'
    },
    ARGUMENT_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
      description: 'Location adjacent to an argument definition.'
    },
    INTERFACE: {
      value: _directiveLocation.DirectiveLocation.INTERFACE,
      description: 'Location adjacent to an interface definition.'
    },
    UNION: {
      value: _directiveLocation.DirectiveLocation.UNION,
      description: 'Location adjacent to a union definition.'
    },
    ENUM: {
      value: _directiveLocation.DirectiveLocation.ENUM,
      description: 'Location adjacent to an enum definition.'
    },
    ENUM_VALUE: {
      value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
      description: 'Location adjacent to an enum value definition.'
    },
    INPUT_OBJECT: {
      value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
      description: 'Location adjacent to an input object type definition.'
    },
    INPUT_FIELD_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
      description: 'Location adjacent to an input object field definition.'
    }
  }
});

exports.__DirectiveLocation = __DirectiveLocation;

var __Type = new _definition.GraphQLObjectType({
  name: '__Type',
  description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
  fields: function fields() {
    return {
      kind: {
        type: new _definition.GraphQLNonNull(__TypeKind),
        resolve: function resolve(type) {
          if ((0, _definition.isScalarType)(type)) {
            return TypeKind.SCALAR;
          }

          if ((0, _definition.isObjectType)(type)) {
            return TypeKind.OBJECT;
          }

          if ((0, _definition.isInterfaceType)(type)) {
            return TypeKind.INTERFACE;
          }

          if ((0, _definition.isUnionType)(type)) {
            return TypeKind.UNION;
          }

          if ((0, _definition.isEnumType)(type)) {
            return TypeKind.ENUM;
          }

          if ((0, _definition.isInputObjectType)(type)) {
            return TypeKind.INPUT_OBJECT;
          }

          if ((0, _definition.isListType)(type)) {
            return TypeKind.LIST;
          } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


          if ((0, _definition.isNonNullType)(type)) {
            return TypeKind.NON_NULL;
          } // istanbul ignore next (Not reachable. All possible types have been considered)


          false || (0, _invariant.default)(0, "Unexpected type: \"".concat((0, _inspect.default)(type), "\"."));
        }
      },
      name: {
        type: _scalars.GraphQLString,
        resolve: function resolve(type) {
          return type.name !== undefined ? type.name : undefined;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(type) {
          return type.description !== undefined ? type.description : undefined;
        }
      },
      specifiedByUrl: {
        type: _scalars.GraphQLString,
        resolve: function resolve(obj) {
          return obj.specifiedByUrl !== undefined ? obj.specifiedByUrl : undefined;
        }
      },
      fields: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(type, _ref) {
          var includeDeprecated = _ref.includeDeprecated;

          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
            var fields = (0, _objectValues.default)(type.getFields());
            return includeDeprecated ? fields : fields.filter(function (field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      interfaces: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
        resolve: function resolve(type) {
          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
            return type.getInterfaces();
          }
        }
      },
      possibleTypes: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
        resolve: function resolve(type, _args, _context, _ref2) {
          var schema = _ref2.schema;

          if ((0, _definition.isAbstractType)(type)) {
            return schema.getPossibleTypes(type);
          }
        }
      },
      enumValues: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(type, _ref3) {
          var includeDeprecated = _ref3.includeDeprecated;

          if ((0, _definition.isEnumType)(type)) {
            var values = type.getValues();
            return includeDeprecated ? values : values.filter(function (field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      inputFields: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(type, _ref4) {
          var includeDeprecated = _ref4.includeDeprecated;

          if ((0, _definition.isInputObjectType)(type)) {
            var values = (0, _objectValues.default)(type.getFields());
            return includeDeprecated ? values : values.filter(function (field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      ofType: {
        type: __Type,
        resolve: function resolve(type) {
          return type.ofType !== undefined ? type.ofType : undefined;
        }
      }
    };
  }
});

exports.__Type = __Type;

var __Field = new _definition.GraphQLObjectType({
  name: '__Field',
  description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(field) {
          return field.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(field) {
          return field.description;
        }
      },
      args: {
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(field, _ref5) {
          var includeDeprecated = _ref5.includeDeprecated;
          return includeDeprecated ? field.args : field.args.filter(function (arg) {
            return arg.deprecationReason == null;
          });
        }
      },
      type: {
        type: new _definition.GraphQLNonNull(__Type),
        resolve: function resolve(field) {
          return field.type;
        }
      },
      isDeprecated: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(field) {
          return field.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: _scalars.GraphQLString,
        resolve: function resolve(field) {
          return field.deprecationReason;
        }
      }
    };
  }
});

exports.__Field = __Field;

var __InputValue = new _definition.GraphQLObjectType({
  name: '__InputValue',
  description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(inputValue) {
          return inputValue.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(inputValue) {
          return inputValue.description;
        }
      },
      type: {
        type: new _definition.GraphQLNonNull(__Type),
        resolve: function resolve(inputValue) {
          return inputValue.type;
        }
      },
      defaultValue: {
        type: _scalars.GraphQLString,
        description: 'A GraphQL-formatted string representing the default value for this input value.',
        resolve: function resolve(inputValue) {
          var type = inputValue.type,
              defaultValue = inputValue.defaultValue;
          var valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
          return valueAST ? (0, _printer.print)(valueAST) : null;
        }
      },
      isDeprecated: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(field) {
          return field.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: _scalars.GraphQLString,
        resolve: function resolve(obj) {
          return obj.deprecationReason;
        }
      }
    };
  }
});

exports.__InputValue = __InputValue;

var __EnumValue = new _definition.GraphQLObjectType({
  name: '__EnumValue',
  description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(enumValue) {
          return enumValue.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(enumValue) {
          return enumValue.description;
        }
      },
      isDeprecated: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(enumValue) {
          return enumValue.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: _scalars.GraphQLString,
        resolve: function resolve(enumValue) {
          return enumValue.deprecationReason;
        }
      }
    };
  }
});

exports.__EnumValue = __EnumValue;
var TypeKind = Object.freeze({
  SCALAR: 'SCALAR',
  OBJECT: 'OBJECT',
  INTERFACE: 'INTERFACE',
  UNION: 'UNION',
  ENUM: 'ENUM',
  INPUT_OBJECT: 'INPUT_OBJECT',
  LIST: 'LIST',
  NON_NULL: 'NON_NULL'
});
exports.TypeKind = TypeKind;

var __TypeKind = new _definition.GraphQLEnumType({
  name: '__TypeKind',
  description: 'An enum describing what kind of type a given `__Type` is.',
  values: {
    SCALAR: {
      value: TypeKind.SCALAR,
      description: 'Indicates this type is a scalar.'
    },
    OBJECT: {
      value: TypeKind.OBJECT,
      description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'
    },
    INTERFACE: {
      value: TypeKind.INTERFACE,
      description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'
    },
    UNION: {
      value: TypeKind.UNION,
      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'
    },
    ENUM: {
      value: TypeKind.ENUM,
      description: 'Indicates this type is an enum. `enumValues` is a valid field.'
    },
    INPUT_OBJECT: {
      value: TypeKind.INPUT_OBJECT,
      description: 'Indicates this type is an input object. `inputFields` is a valid field.'
    },
    LIST: {
      value: TypeKind.LIST,
      description: 'Indicates this type is a list. `ofType` is a valid field.'
    },
    NON_NULL: {
      value: TypeKind.NON_NULL,
      description: 'Indicates this type is a non-null. `ofType` is a valid field.'
    }
  }
});
/**
 * Note that these are GraphQLField and not GraphQLFieldConfig,
 * so the format for args is different.
 */


exports.__TypeKind = __TypeKind;
var SchemaMetaFieldDef = {
  name: '__schema',
  type: new _definition.GraphQLNonNull(__Schema),
  description: 'Access the current type schema of this server.',
  args: [],
  resolve: function resolve(_source, _args, _context, _ref6) {
    var schema = _ref6.schema;
    return schema;
  },
  isDeprecated: false,
  deprecationReason: undefined,
  extensions: undefined,
  astNode: undefined
};
exports.SchemaMetaFieldDef = SchemaMetaFieldDef;
var TypeMetaFieldDef = {
  name: '__type',
  type: __Type,
  description: 'Request the type information of a single type.',
  args: [{
    name: 'name',
    description: undefined,
    type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
    defaultValue: undefined,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
  }],
  resolve: function resolve(_source, _ref7, _context, _ref8) {
    var name = _ref7.name;
    var schema = _ref8.schema;
    return schema.getType(name);
  },
  isDeprecated: false,
  deprecationReason: undefined,
  extensions: undefined,
  astNode: undefined
};
exports.TypeMetaFieldDef = TypeMetaFieldDef;
var TypeNameMetaFieldDef = {
  name: '__typename',
  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
  description: 'The name of the current Object type at runtime.',
  args: [],
  resolve: function resolve(_source, _args, _context, _ref9) {
    var parentType = _ref9.parentType;
    return parentType.name;
  },
  isDeprecated: false,
  deprecationReason: undefined,
  extensions: undefined,
  astNode: undefined
};
exports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
var introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);
exports.introspectionTypes = introspectionTypes;

function isIntrospectionType(type) {
  return introspectionTypes.some(function (_ref10) {
    var name = _ref10.name;
    return type.name === name;
  });
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../language/printer.js":"1UYdT","../language/directiveLocation.js":"3sgz1","../utilities/astFromValue.js":"5zDuh","./scalars.js":"7mSzF","./definition.js":"n9nw4"}],"5zDuh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.astFromValue = astFromValue;

var _isFinite = _interopRequireDefault(require("../polyfills/isFinite.js"));

var _objectValues3 = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _safeArrayFrom = _interopRequireDefault(require("../jsutils/safeArrayFrom.js"));

var _kinds = require("../language/kinds.js");

var _scalars = require("../type/scalars.js");

var _definition = require("../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a GraphQL Value AST given a JavaScript object.
 * Function will match JavaScript/JSON values to GraphQL AST schema format
 * by using suggested GraphQLInputType. For example:
 *
 *     astFromValue("value", GraphQLString)
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * JavaScript values.
 *
 * | JSON Value    | GraphQL Value        |
 * | ------------- | -------------------- |
 * | Object        | Input Object         |
 * | Array         | List                 |
 * | Boolean       | Boolean              |
 * | String        | String / Enum Value  |
 * | Number        | Int / Float          |
 * | Mixed         | Enum Value           |
 * | null          | NullValue            |
 *
 */
function astFromValue(value, type) {
  if ((0, _definition.isNonNullType)(type)) {
    var astValue = astFromValue(value, type.ofType);

    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
      return null;
    }

    return astValue;
  } // only explicit null, not undefined, NaN


  if (value === null) {
    return {
      kind: _kinds.Kind.NULL
    };
  } // undefined


  if (value === undefined) {
    return null;
  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
  // the value is not an array, convert the value using the list's item type.


  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    var items = (0, _safeArrayFrom.default)(value);

    if (items != null) {
      var valuesNodes = [];

      for (var _i2 = 0; _i2 < items.length; _i2++) {
        var item = items[_i2];
        var itemNode = astFromValue(item, itemType);

        if (itemNode != null) {
          valuesNodes.push(itemNode);
        }
      }

      return {
        kind: _kinds.Kind.LIST,
        values: valuesNodes
      };
    }

    return astFromValue(value, itemType);
  } // Populate the fields of the input object by creating ASTs from each value
  // in the JavaScript object according to the fields in the input type.


  if ((0, _definition.isInputObjectType)(type)) {
    if (!(0, _isObjectLike.default)(value)) {
      return null;
    }

    var fieldNodes = [];

    for (var _i4 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
      var field = _objectValues2[_i4];
      var fieldValue = astFromValue(value[field.name], field.type);

      if (fieldValue) {
        fieldNodes.push({
          kind: _kinds.Kind.OBJECT_FIELD,
          name: {
            kind: _kinds.Kind.NAME,
            value: field.name
          },
          value: fieldValue
        });
      }
    }

    return {
      kind: _kinds.Kind.OBJECT,
      fields: fieldNodes
    };
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isLeafType)(type)) {
    // Since value is an internally represented value, it must be serialized
    // to an externally represented value before converting into an AST.
    var serialized = type.serialize(value);

    if (serialized == null) {
      return null;
    } // Others serialize based on their corresponding JavaScript scalar types.


    if (typeof serialized === 'boolean') {
      return {
        kind: _kinds.Kind.BOOLEAN,
        value: serialized
      };
    } // JavaScript numbers can be Int or Float values.


    if (typeof serialized === 'number' && (0, _isFinite.default)(serialized)) {
      var stringNum = String(serialized);
      return integerStringRegExp.test(stringNum) ? {
        kind: _kinds.Kind.INT,
        value: stringNum
      } : {
        kind: _kinds.Kind.FLOAT,
        value: stringNum
      };
    }

    if (typeof serialized === 'string') {
      // Enum types use Enum literals.
      if ((0, _definition.isEnumType)(type)) {
        return {
          kind: _kinds.Kind.ENUM,
          value: serialized
        };
      } // ID types can use Int literals.


      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
        return {
          kind: _kinds.Kind.INT,
          value: serialized
        };
      }

      return {
        kind: _kinds.Kind.STRING,
        value: serialized
      };
    }

    throw new TypeError("Cannot convert value to AST: ".concat((0, _inspect.default)(serialized), "."));
  } // istanbul ignore next (Not reachable. All possible input types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
}
/**
 * IntValue:
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit ( Digit+ )?
 */


var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

},{"../polyfills/isFinite.js":"3bUYE","../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../jsutils/isObjectLike.js":"526rJ","../jsutils/safeArrayFrom.js":"Ef8RM","../language/kinds.js":"6m0P6","../type/scalars.js":"7mSzF","../type/definition.js":"n9nw4"}],"3bUYE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var isFinitePolyfill = Number.isFinite || function (value) {
  return typeof value === 'number' && isFinite(value);
};

var _default = isFinitePolyfill;
exports.default = _default;

},{}],"Ef8RM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = safeArrayFrom;

var _symbols = require("../polyfills/symbols.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Safer version of `Array.from` that return `null` if value isn't convertible to array.
 * Also protects against Array-like objects without items.
 *
 * @example
 *
 * safeArrayFrom([ 1, 2, 3 ]) // [1, 2, 3]
 * safeArrayFrom('ABC') // null
 * safeArrayFrom({ length: 1 }) // null
 * safeArrayFrom({ length: 1, 0: 'Alpha' }) // ['Alpha']
 * safeArrayFrom({ key: 'value' }) // null
 * safeArrayFrom(new Map()) // []
 *
 */
function safeArrayFrom(collection) {
  var mapFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (item) {
    return item;
  };

  if (collection == null || _typeof(collection) !== 'object') {
    return null;
  }

  if (Array.isArray(collection)) {
    return collection.map(mapFn);
  } // Is Iterable?


  var iteratorMethod = collection[_symbols.SYMBOL_ITERATOR];

  if (typeof iteratorMethod === 'function') {
    // $FlowFixMe[incompatible-use]
    var iterator = iteratorMethod.call(collection);
    var result = [];
    var step;

    for (var i = 0; !(step = iterator.next()).done; ++i) {
      result.push(mapFn(step.value, i));
    }

    return result;
  } // Is Array like?


  var length = collection.length;

  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
    var _result = [];

    for (var _i = 0; _i < length; ++_i) {
      if (!Object.prototype.hasOwnProperty.call(collection, _i)) {
        return null;
      }

      _result.push(mapFn(collection[String(_i)], _i));
    }

    return _result;
  }

  return null;
}

},{"../polyfills/symbols.js":"4phrQ"}],"7mSzF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSpecifiedScalarType = isSpecifiedScalarType;
exports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = void 0;

var _isFinite = _interopRequireDefault(require("../polyfills/isFinite.js"));

var _isInteger = _interopRequireDefault(require("../polyfills/isInteger.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _kinds = require("../language/kinds.js");

var _printer = require("../language/printer.js");

var _GraphQLError = require("../error/GraphQLError.js");

var _definition = require("./definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// As per the GraphQL Spec, Integers are only treated as valid when a valid
// 32-bit signed integer, providing the broadest support across platforms.
//
// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
// they are internally represented as IEEE 754 doubles.
var MAX_INT = 2147483647;
var MIN_INT = -2147483648;

function serializeInt(outputValue) {
  var coercedValue = serializeObject(outputValue);

  if (typeof coercedValue === 'boolean') {
    return coercedValue ? 1 : 0;
  }

  var num = coercedValue;

  if (typeof coercedValue === 'string' && coercedValue !== '') {
    num = Number(coercedValue);
  }

  if (!(0, _isInteger.default)(num)) {
    throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.default)(coercedValue)));
  }

  if (num > MAX_INT || num < MIN_INT) {
    throw new _GraphQLError.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect.default)(coercedValue));
  }

  return num;
}

function coerceInt(inputValue) {
  if (!(0, _isInteger.default)(inputValue)) {
    throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.default)(inputValue)));
  }

  if (inputValue > MAX_INT || inputValue < MIN_INT) {
    throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
  }

  return inputValue;
}

var GraphQLInt = new _definition.GraphQLScalarType({
  name: 'Int',
  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',
  serialize: serializeInt,
  parseValue: coerceInt,
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.INT) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _printer.print)(valueNode)), valueNode);
    }

    var num = parseInt(valueNode.value, 10);

    if (num > MAX_INT || num < MIN_INT) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), valueNode);
    }

    return num;
  }
});
exports.GraphQLInt = GraphQLInt;

function serializeFloat(outputValue) {
  var coercedValue = serializeObject(outputValue);

  if (typeof coercedValue === 'boolean') {
    return coercedValue ? 1 : 0;
  }

  var num = coercedValue;

  if (typeof coercedValue === 'string' && coercedValue !== '') {
    num = Number(coercedValue);
  }

  if (!(0, _isFinite.default)(num)) {
    throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.default)(coercedValue)));
  }

  return num;
}

function coerceFloat(inputValue) {
  if (!(0, _isFinite.default)(inputValue)) {
    throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.default)(inputValue)));
  }

  return inputValue;
}

var GraphQLFloat = new _definition.GraphQLScalarType({
  name: 'Float',
  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',
  serialize: serializeFloat,
  parseValue: coerceFloat,
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {
      throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _printer.print)(valueNode)), valueNode);
    }

    return parseFloat(valueNode.value);
  }
}); // Support serializing objects with custom valueOf() or toJSON() functions -
// a common way to represent a complex value which can be represented as
// a string (ex: MongoDB id objects).

exports.GraphQLFloat = GraphQLFloat;

function serializeObject(outputValue) {
  if ((0, _isObjectLike.default)(outputValue)) {
    if (typeof outputValue.valueOf === 'function') {
      var valueOfResult = outputValue.valueOf();

      if (!(0, _isObjectLike.default)(valueOfResult)) {
        return valueOfResult;
      }
    }

    if (typeof outputValue.toJSON === 'function') {
      // $FlowFixMe[incompatible-use]
      return outputValue.toJSON();
    }
  }

  return outputValue;
}

function serializeString(outputValue) {
  var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
  // attempt to coerce object, function, symbol, or other types as strings.

  if (typeof coercedValue === 'string') {
    return coercedValue;
  }

  if (typeof coercedValue === 'boolean') {
    return coercedValue ? 'true' : 'false';
  }

  if ((0, _isFinite.default)(coercedValue)) {
    return coercedValue.toString();
  }

  throw new _GraphQLError.GraphQLError("String cannot represent value: ".concat((0, _inspect.default)(outputValue)));
}

function coerceString(inputValue) {
  if (typeof inputValue !== 'string') {
    throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _inspect.default)(inputValue)));
  }

  return inputValue;
}

var GraphQLString = new _definition.GraphQLScalarType({
  name: 'String',
  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',
  serialize: serializeString,
  parseValue: coerceString,
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.STRING) {
      throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _printer.print)(valueNode)), valueNode);
    }

    return valueNode.value;
  }
});
exports.GraphQLString = GraphQLString;

function serializeBoolean(outputValue) {
  var coercedValue = serializeObject(outputValue);

  if (typeof coercedValue === 'boolean') {
    return coercedValue;
  }

  if ((0, _isFinite.default)(coercedValue)) {
    return coercedValue !== 0;
  }

  throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.default)(coercedValue)));
}

function coerceBoolean(inputValue) {
  if (typeof inputValue !== 'boolean') {
    throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.default)(inputValue)));
  }

  return inputValue;
}

var GraphQLBoolean = new _definition.GraphQLScalarType({
  name: 'Boolean',
  description: 'The `Boolean` scalar type represents `true` or `false`.',
  serialize: serializeBoolean,
  parseValue: coerceBoolean,
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
      throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _printer.print)(valueNode)), valueNode);
    }

    return valueNode.value;
  }
});
exports.GraphQLBoolean = GraphQLBoolean;

function serializeID(outputValue) {
  var coercedValue = serializeObject(outputValue);

  if (typeof coercedValue === 'string') {
    return coercedValue;
  }

  if ((0, _isInteger.default)(coercedValue)) {
    return String(coercedValue);
  }

  throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.default)(outputValue)));
}

function coerceID(inputValue) {
  if (typeof inputValue === 'string') {
    return inputValue;
  }

  if ((0, _isInteger.default)(inputValue)) {
    return inputValue.toString();
  }

  throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.default)(inputValue)));
}

var GraphQLID = new _definition.GraphQLScalarType({
  name: 'ID',
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize: serializeID,
  parseValue: coerceID,
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {
      throw new _GraphQLError.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer.print)(valueNode), valueNode);
    }

    return valueNode.value;
  }
});
exports.GraphQLID = GraphQLID;
var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);
exports.specifiedScalarTypes = specifiedScalarTypes;

function isSpecifiedScalarType(type) {
  return specifiedScalarTypes.some(function (_ref) {
    var name = _ref.name;
    return type.name === name;
  });
}

},{"../polyfills/isFinite.js":"3bUYE","../polyfills/isInteger.js":"6vkjR","../jsutils/inspect.js":"2onMM","../jsutils/isObjectLike.js":"526rJ","../language/kinds.js":"6m0P6","../language/printer.js":"1UYdT","../error/GraphQLError.js":"cXily","./definition.js":"n9nw4"}],"6vkjR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var isInteger = Number.isInteger || function (value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};

var _default = isInteger;
exports.default = _default;

},{}],"2w91d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDirective = isDirective;
exports.assertDirective = assertDirective;
exports.isSpecifiedDirective = isSpecifiedDirective;
exports.specifiedDirectives = exports.GraphQLSpecifiedByDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = void 0;

var _objectEntries = _interopRequireDefault(require("../polyfills/objectEntries.js"));

var _symbols = require("../polyfills/symbols.js");

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _toObjMap = _interopRequireDefault(require("../jsutils/toObjMap.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _instanceOf = _interopRequireDefault(require("../jsutils/instanceOf.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _defineInspect = _interopRequireDefault(require("../jsutils/defineInspect.js"));

var _directiveLocation = require("../language/directiveLocation.js");

var _scalars = require("./scalars.js");

var _definition = require("./definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// eslint-disable-next-line no-redeclare
function isDirective(directive) {
  return (0, _instanceOf.default)(directive, GraphQLDirective);
}

function assertDirective(directive) {
  if (!isDirective(directive)) {
    throw new Error("Expected ".concat((0, _inspect.default)(directive), " to be a GraphQL directive."));
  }

  return directive;
}
/**
 * Directives are used by the GraphQL runtime as a way of modifying execution
 * behavior. Type system creators will usually not create these directly.
 */


var GraphQLDirective = /*#__PURE__*/function () {
  function GraphQLDirective(config) {
    var _config$isRepeatable, _config$args;

    this.name = config.name;
    this.description = config.description;
    this.locations = config.locations;
    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
    this.extensions = config.extensions && (0, _toObjMap.default)(config.extensions);
    this.astNode = config.astNode;
    config.name || (0, _devAssert.default)(0, 'Directive must be named.');
    Array.isArray(config.locations) || (0, _devAssert.default)(0, "@".concat(config.name, " locations must be an Array."));
    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
    (0, _isObjectLike.default)(args) && !Array.isArray(args) || (0, _devAssert.default)(0, "@".concat(config.name, " args must be an object with argument names as keys."));
    this.args = (0, _objectEntries.default)(args).map(function (_ref) {
      var argName = _ref[0],
          argConfig = _ref[1];
      return {
        name: argName,
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: argConfig.extensions && (0, _toObjMap.default)(argConfig.extensions),
        astNode: argConfig.astNode
      };
    });
  }

  var _proto = GraphQLDirective.prototype;

  _proto.toConfig = function toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: (0, _definition.argsToArgsConfig)(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  };

  _proto.toString = function toString() {
    return '@' + this.name;
  };

  _proto.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass(GraphQLDirective, [{
    key: _symbols.SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLDirective';
    }
  }]);

  return GraphQLDirective;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.


exports.GraphQLDirective = GraphQLDirective;
(0, _defineInspect.default)(GraphQLDirective);

/**
 * Used to conditionally include fields or fragments.
 */
var GraphQLIncludeDirective = new GraphQLDirective({
  name: 'include',
  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',
  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
      description: 'Included when true.'
    }
  }
});
/**
 * Used to conditionally skip (exclude) fields or fragments.
 */

exports.GraphQLIncludeDirective = GraphQLIncludeDirective;
var GraphQLSkipDirective = new GraphQLDirective({
  name: 'skip',
  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',
  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
      description: 'Skipped when true.'
    }
  }
});
/**
 * Constant string used for default reason for a deprecation.
 */

exports.GraphQLSkipDirective = GraphQLSkipDirective;
var DEFAULT_DEPRECATION_REASON = 'No longer supported';
/**
 * Used to declare element of a GraphQL schema as deprecated.
 */

exports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
var GraphQLDeprecatedDirective = new GraphQLDirective({
  name: 'deprecated',
  description: 'Marks an element of a GraphQL schema as no longer supported.',
  locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION, _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
  args: {
    reason: {
      type: _scalars.GraphQLString,
      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
      defaultValue: DEFAULT_DEPRECATION_REASON
    }
  }
});
/**
 * Used to provide a URL for specifying the behaviour of custom scalar definitions.
 */

exports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;
var GraphQLSpecifiedByDirective = new GraphQLDirective({
  name: 'specifiedBy',
  description: 'Exposes a URL that specifies the behaviour of this scalar.',
  locations: [_directiveLocation.DirectiveLocation.SCALAR],
  args: {
    url: {
      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
      description: 'The URL that specifies the behaviour of this scalar.'
    }
  }
});
/**
 * The full list of specified directives.
 */

exports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);
exports.specifiedDirectives = specifiedDirectives;

function isSpecifiedDirective(directive) {
  return specifiedDirectives.some(function (_ref2) {
    var name = _ref2.name;
    return name === directive.name;
  });
}

},{"../polyfills/objectEntries.js":"5fjGQ","../polyfills/symbols.js":"4phrQ","../jsutils/inspect.js":"2onMM","../jsutils/toObjMap.js":"2tkia","../jsutils/devAssert.js":"1F99Z","../jsutils/instanceOf.js":"1OohF","../jsutils/isObjectLike.js":"526rJ","../jsutils/defineInspect.js":"6NGTJ","../language/directiveLocation.js":"3sgz1","./scalars.js":"7mSzF","./definition.js":"n9nw4"}],"2mpQy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visitWithTypeInfo = visitWithTypeInfo;
exports.TypeInfo = void 0;

var _find = _interopRequireDefault(require("../polyfills/find.js"));

var _kinds = require("../language/kinds.js");

var _ast = require("../language/ast.js");

var _visitor = require("../language/visitor.js");

var _definition = require("../type/definition.js");

var _introspection = require("../type/introspection.js");

var _typeFromAST = require("./typeFromAST.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * TypeInfo is a utility class which, given a GraphQL schema, can keep track
 * of the current field and type definitions at any point in a GraphQL document
 * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
 */
var TypeInfo = /*#__PURE__*/function () {
  function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order
  // to support non-spec-compliant code bases. You should never need to use it.
  // It may disappear in the future.
  getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals
  // beginning somewhere other than documents.
  initialType) {
    this._schema = schema;
    this._typeStack = [];
    this._parentTypeStack = [];
    this._inputTypeStack = [];
    this._fieldDefStack = [];
    this._defaultValueStack = [];
    this._directive = null;
    this._argument = null;
    this._enumValue = null;
    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;

    if (initialType) {
      if ((0, _definition.isInputType)(initialType)) {
        this._inputTypeStack.push(initialType);
      }

      if ((0, _definition.isCompositeType)(initialType)) {
        this._parentTypeStack.push(initialType);
      }

      if ((0, _definition.isOutputType)(initialType)) {
        this._typeStack.push(initialType);
      }
    }
  }

  var _proto = TypeInfo.prototype;

  _proto.getType = function getType() {
    if (this._typeStack.length > 0) {
      return this._typeStack[this._typeStack.length - 1];
    }
  };

  _proto.getParentType = function getParentType() {
    if (this._parentTypeStack.length > 0) {
      return this._parentTypeStack[this._parentTypeStack.length - 1];
    }
  };

  _proto.getInputType = function getInputType() {
    if (this._inputTypeStack.length > 0) {
      return this._inputTypeStack[this._inputTypeStack.length - 1];
    }
  };

  _proto.getParentInputType = function getParentInputType() {
    if (this._inputTypeStack.length > 1) {
      return this._inputTypeStack[this._inputTypeStack.length - 2];
    }
  };

  _proto.getFieldDef = function getFieldDef() {
    if (this._fieldDefStack.length > 0) {
      return this._fieldDefStack[this._fieldDefStack.length - 1];
    }
  };

  _proto.getDefaultValue = function getDefaultValue() {
    if (this._defaultValueStack.length > 0) {
      return this._defaultValueStack[this._defaultValueStack.length - 1];
    }
  };

  _proto.getDirective = function getDirective() {
    return this._directive;
  };

  _proto.getArgument = function getArgument() {
    return this._argument;
  };

  _proto.getEnumValue = function getEnumValue() {
    return this._enumValue;
  };

  _proto.enter = function enter(node) {
    var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
    // any assumptions of a valid schema to ensure runtime types are properly
    // checked before continuing since TypeInfo is used as part of validation
    // which occurs before guarantees of schema and document validity.

    switch (node.kind) {
      case _kinds.Kind.SELECTION_SET:
        {
          var namedType = (0, _definition.getNamedType)(this.getType());

          this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);

          break;
        }

      case _kinds.Kind.FIELD:
        {
          var parentType = this.getParentType();
          var fieldDef;
          var fieldType;

          if (parentType) {
            fieldDef = this._getFieldDef(schema, parentType, node);

            if (fieldDef) {
              fieldType = fieldDef.type;
            }
          }

          this._fieldDefStack.push(fieldDef);

          this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);

          break;
        }

      case _kinds.Kind.DIRECTIVE:
        this._directive = schema.getDirective(node.name.value);
        break;

      case _kinds.Kind.OPERATION_DEFINITION:
        {
          var type;

          switch (node.operation) {
            case 'query':
              type = schema.getQueryType();
              break;

            case 'mutation':
              type = schema.getMutationType();
              break;

            case 'subscription':
              type = schema.getSubscriptionType();
              break;
          }

          this._typeStack.push((0, _definition.isObjectType)(type) ? type : undefined);

          break;
        }

      case _kinds.Kind.INLINE_FRAGMENT:
      case _kinds.Kind.FRAGMENT_DEFINITION:
        {
          var typeConditionAST = node.typeCondition;
          var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());

          this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);

          break;
        }

      case _kinds.Kind.VARIABLE_DEFINITION:
        {
          var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);

          this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);

          break;
        }

      case _kinds.Kind.ARGUMENT:
        {
          var _this$getDirective;

          var argDef;
          var argType;
          var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();

          if (fieldOrDirective) {
            argDef = (0, _find.default)(fieldOrDirective.args, function (arg) {
              return arg.name === node.name.value;
            });

            if (argDef) {
              argType = argDef.type;
            }
          }

          this._argument = argDef;

          this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);

          this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);

          break;
        }

      case _kinds.Kind.LIST:
        {
          var listType = (0, _definition.getNullableType)(this.getInputType());
          var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType; // List positions never have a default value.

          this._defaultValueStack.push(undefined);

          this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);

          break;
        }

      case _kinds.Kind.OBJECT_FIELD:
        {
          var objectType = (0, _definition.getNamedType)(this.getInputType());
          var inputFieldType;
          var inputField;

          if ((0, _definition.isInputObjectType)(objectType)) {
            inputField = objectType.getFields()[node.name.value];

            if (inputField) {
              inputFieldType = inputField.type;
            }
          }

          this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);

          this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);

          break;
        }

      case _kinds.Kind.ENUM:
        {
          var enumType = (0, _definition.getNamedType)(this.getInputType());
          var enumValue;

          if ((0, _definition.isEnumType)(enumType)) {
            enumValue = enumType.getValue(node.value);
          }

          this._enumValue = enumValue;
          break;
        }
    }
  };

  _proto.leave = function leave(node) {
    switch (node.kind) {
      case _kinds.Kind.SELECTION_SET:
        this._parentTypeStack.pop();

        break;

      case _kinds.Kind.FIELD:
        this._fieldDefStack.pop();

        this._typeStack.pop();

        break;

      case _kinds.Kind.DIRECTIVE:
        this._directive = null;
        break;

      case _kinds.Kind.OPERATION_DEFINITION:
      case _kinds.Kind.INLINE_FRAGMENT:
      case _kinds.Kind.FRAGMENT_DEFINITION:
        this._typeStack.pop();

        break;

      case _kinds.Kind.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();

        break;

      case _kinds.Kind.ARGUMENT:
        this._argument = null;

        this._defaultValueStack.pop();

        this._inputTypeStack.pop();

        break;

      case _kinds.Kind.LIST:
      case _kinds.Kind.OBJECT_FIELD:
        this._defaultValueStack.pop();

        this._inputTypeStack.pop();

        break;

      case _kinds.Kind.ENUM:
        this._enumValue = null;
        break;
    }
  };

  return TypeInfo;
}();
/**
 * Not exactly the same as the executor's definition of getFieldDef, in this
 * statically evaluated environment we do not always have an Object type,
 * and need to handle Interface and Union types.
 */


exports.TypeInfo = TypeInfo;

function getFieldDef(schema, parentType, fieldNode) {
  var name = fieldNode.name.value;

  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.SchemaMetaFieldDef;
  }

  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.TypeMetaFieldDef;
  }

  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
    return _introspection.TypeNameMetaFieldDef;
  }

  if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
    return parentType.getFields()[name];
  }
}
/**
 * Creates a new visitor instance which maintains a provided TypeInfo instance
 * along with visiting visitor.
 */


function visitWithTypeInfo(typeInfo, visitor) {
  return {
    enter: function enter(node) {
      typeInfo.enter(node);
      var fn = (0, _visitor.getVisitFn)(visitor, node.kind,
      /* isLeaving */
      false);

      if (fn) {
        var result = fn.apply(visitor, arguments);

        if (result !== undefined) {
          typeInfo.leave(node);

          if ((0, _ast.isNode)(result)) {
            typeInfo.enter(result);
          }
        }

        return result;
      }
    },
    leave: function leave(node) {
      var fn = (0, _visitor.getVisitFn)(visitor, node.kind,
      /* isLeaving */
      true);
      var result;

      if (fn) {
        result = fn.apply(visitor, arguments);
      }

      typeInfo.leave(node);
      return result;
    }
  };
}

},{"../polyfills/find.js":"5w3fy","../language/kinds.js":"6m0P6","../language/ast.js":"swB0t","../language/visitor.js":"wwZgf","../type/definition.js":"n9nw4","../type/introspection.js":"5yLF0","./typeFromAST.js":"468O3"}],"468O3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeFromAST = typeFromAST;

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _kinds = require("../language/kinds.js");

var _definition = require("../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function typeFromAST(schema, typeNode) {
  /* eslint-enable no-redeclare */
  var innerType;

  if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
    innerType = typeFromAST(schema, typeNode.type);
    return innerType && new _definition.GraphQLList(innerType);
  }

  if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
    innerType = typeFromAST(schema, typeNode.type);
    return innerType && new _definition.GraphQLNonNull(innerType);
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
    return schema.getType(typeNode.name.value);
  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)


  false || (0, _invariant.default)(0, 'Unexpected type node: ' + (0, _inspect.default)(typeNode));
}

},{"../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../language/kinds.js":"6m0P6","../type/definition.js":"n9nw4"}],"3AYYC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.specifiedSDLRules = exports.specifiedRules = void 0;

var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.js");

var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.js");

var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.js");

var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.js");

var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.js");

var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.js");

var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.js");

var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.js");

var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.js");

var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.js");

var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.js");

var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.js");

var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.js");

var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.js");

var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.js");

var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.js");

var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.js");

var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.js");

var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.js");

var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.js");

var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.js");

var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.js");

var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.js");

var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.js");

var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.js");

var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.js");

var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.js");

var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.js");

var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.js");

var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.js");

var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.js");

var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.js");

var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.js");

// Spec Section: "Executable Definitions"
// Spec Section: "Operation Name Uniqueness"
// Spec Section: "Lone Anonymous Operation"
// Spec Section: "Subscriptions with Single Root Field"
// Spec Section: "Fragment Spread Type Existence"
// Spec Section: "Fragments on Composite Types"
// Spec Section: "Variables are Input Types"
// Spec Section: "Leaf Field Selections"
// Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
// Spec Section: "Fragment Name Uniqueness"
// Spec Section: "Fragment spread target defined"
// Spec Section: "Fragments must be used"
// Spec Section: "Fragment spread is possible"
// Spec Section: "Fragments must not form cycles"
// Spec Section: "Variable Uniqueness"
// Spec Section: "All Variable Used Defined"
// Spec Section: "All Variables Used"
// Spec Section: "Directives Are Defined"
// Spec Section: "Directives Are Unique Per Location"
// Spec Section: "Argument Names"
// Spec Section: "Argument Uniqueness"
// Spec Section: "Value Type Correctness"
// Spec Section: "Argument Optionality"
// Spec Section: "All Variable Usages Are Allowed"
// Spec Section: "Field Selection Merging"
// Spec Section: "Input Object Field Uniqueness"
// SDL-specific validation rules

/**
 * This set includes all validation rules defined by the GraphQL spec.
 *
 * The order of the rules in this list has been adjusted to lead to the
 * most clear output when encountering multiple validation errors.
 */
var specifiedRules = Object.freeze([_ExecutableDefinitionsRule.ExecutableDefinitionsRule, _UniqueOperationNamesRule.UniqueOperationNamesRule, _LoneAnonymousOperationRule.LoneAnonymousOperationRule, _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule, _KnownTypeNamesRule.KnownTypeNamesRule, _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule, _VariablesAreInputTypesRule.VariablesAreInputTypesRule, _ScalarLeafsRule.ScalarLeafsRule, _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule, _UniqueFragmentNamesRule.UniqueFragmentNamesRule, _KnownFragmentNamesRule.KnownFragmentNamesRule, _NoUnusedFragmentsRule.NoUnusedFragmentsRule, _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule, _NoFragmentCyclesRule.NoFragmentCyclesRule, _UniqueVariableNamesRule.UniqueVariableNamesRule, _NoUndefinedVariablesRule.NoUndefinedVariablesRule, _NoUnusedVariablesRule.NoUnusedVariablesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _KnownArgumentNamesRule.KnownArgumentNamesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule, _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule, _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule]);
/**
 * @internal
 */

exports.specifiedRules = specifiedRules;
var specifiedSDLRules = Object.freeze([_LoneSchemaDefinitionRule.LoneSchemaDefinitionRule, _UniqueOperationTypesRule.UniqueOperationTypesRule, _UniqueTypeNamesRule.UniqueTypeNamesRule, _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule, _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule, _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule, _KnownTypeNamesRule.KnownTypeNamesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule, _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule]);
exports.specifiedSDLRules = specifiedSDLRules;

},{"./rules/ExecutableDefinitionsRule.js":"61FlF","./rules/UniqueOperationNamesRule.js":"6bKxi","./rules/LoneAnonymousOperationRule.js":"5sw8S","./rules/SingleFieldSubscriptionsRule.js":"78I6r","./rules/KnownTypeNamesRule.js":"7cnuU","./rules/FragmentsOnCompositeTypesRule.js":"3cLdl","./rules/VariablesAreInputTypesRule.js":"5cck7","./rules/ScalarLeafsRule.js":"3pIxp","./rules/FieldsOnCorrectTypeRule.js":"DysOp","./rules/UniqueFragmentNamesRule.js":"6gkrP","./rules/KnownFragmentNamesRule.js":"2verg","./rules/NoUnusedFragmentsRule.js":"6FPG8","./rules/PossibleFragmentSpreadsRule.js":"NBJgy","./rules/NoFragmentCyclesRule.js":"7cs7s","./rules/UniqueVariableNamesRule.js":"4HR9n","./rules/NoUndefinedVariablesRule.js":"1qqse","./rules/NoUnusedVariablesRule.js":"1BYdg","./rules/KnownDirectivesRule.js":"2zv89","./rules/UniqueDirectivesPerLocationRule.js":"1iSv4","./rules/KnownArgumentNamesRule.js":"2lcXE","./rules/UniqueArgumentNamesRule.js":"m2Dig","./rules/ValuesOfCorrectTypeRule.js":"6RlTn","./rules/ProvidedRequiredArgumentsRule.js":"4vfZe","./rules/VariablesInAllowedPositionRule.js":"5flqI","./rules/OverlappingFieldsCanBeMergedRule.js":"2MNpW","./rules/UniqueInputFieldNamesRule.js":"5hV72","./rules/LoneSchemaDefinitionRule.js":"4HDpS","./rules/UniqueOperationTypesRule.js":"3gTe3","./rules/UniqueTypeNamesRule.js":"6QdA2","./rules/UniqueEnumValueNamesRule.js":"3lMWb","./rules/UniqueFieldDefinitionNamesRule.js":"6dxGU","./rules/UniqueDirectiveNamesRule.js":"ibRE8","./rules/PossibleTypeExtensionsRule.js":"6Vkc0"}],"61FlF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _predicates = require("../../language/predicates.js");

/**
 * Executable definitions
 *
 * A GraphQL document is only valid for execution if all definitions are either
 * operation or fragment definitions.
 */
function ExecutableDefinitionsRule(context) {
  return {
    Document: function Document(node) {
      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {
        var definition = _node$definitions2[_i2];

        if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
          var defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? 'schema' : '"' + definition.name.value + '"';
          context.reportError(new _GraphQLError.GraphQLError("The ".concat(defName, " definition is not executable."), definition));
        }
      }

      return false;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../language/predicates.js":"6u0g4"}],"6u0g4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDefinitionNode = isDefinitionNode;
exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
exports.isSelectionNode = isSelectionNode;
exports.isValueNode = isValueNode;
exports.isTypeNode = isTypeNode;
exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
exports.isTypeDefinitionNode = isTypeDefinitionNode;
exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
exports.isTypeExtensionNode = isTypeExtensionNode;

var _kinds = require("./kinds.js");

function isDefinitionNode(node) {
  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
}

function isExecutableDefinitionNode(node) {
  return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
}

function isSelectionNode(node) {
  return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
}

function isValueNode(node) {
  return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
}

function isTypeNode(node) {
  return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
}

function isTypeSystemDefinitionNode(node) {
  return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
}

function isTypeDefinitionNode(node) {
  return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
}

function isTypeSystemExtensionNode(node) {
  return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}

function isTypeExtensionNode(node) {
  return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
}

},{"./kinds.js":"6m0P6"}],"6bKxi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueOperationNamesRule = UniqueOperationNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique operation names
 *
 * A GraphQL document is only valid if all defined operations have unique names.
 */
function UniqueOperationNamesRule(context) {
  var knownOperationNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition(node) {
      var operationName = node.name;

      if (operationName) {
        if (knownOperationNames[operationName.value]) {
          context.reportError(new _GraphQLError.GraphQLError("There can be only one operation named \"".concat(operationName.value, "\"."), [knownOperationNames[operationName.value], operationName]));
        } else {
          knownOperationNames[operationName.value] = operationName;
        }
      }

      return false;
    },
    FragmentDefinition: function FragmentDefinition() {
      return false;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"5sw8S":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

/**
 * Lone anonymous operation
 *
 * A GraphQL document is only valid if when it contains an anonymous operation
 * (the query short-hand) that it contains only that one operation definition.
 */
function LoneAnonymousOperationRule(context) {
  var operationCount = 0;
  return {
    Document: function Document(node) {
      operationCount = node.definitions.filter(function (definition) {
        return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
      }).length;
    },
    OperationDefinition: function OperationDefinition(node) {
      if (!node.name && operationCount > 1) {
        context.reportError(new _GraphQLError.GraphQLError('This anonymous operation must be the only defined operation.', node));
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6"}],"78I6r":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Subscriptions must only include one field.
 *
 * A GraphQL subscription is valid only if it contains a single root field.
 */
function SingleFieldSubscriptionsRule(context) {
  return {
    OperationDefinition: function OperationDefinition(node) {
      if (node.operation === 'subscription') {
        if (node.selectionSet.selections.length !== 1) {
          context.reportError(new _GraphQLError.GraphQLError(node.name ? "Subscription \"".concat(node.name.value, "\" must select only one top level field.") : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));
        }
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"7cnuU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownTypeNamesRule = KnownTypeNamesRule;

var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.js"));

var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _predicates = require("../../language/predicates.js");

var _scalars = require("../../type/scalars.js");

var _introspection = require("../../type/introspection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Known type names
 *
 * A GraphQL document is only valid if referenced types (specifically
 * variable definitions and fragment conditions) are defined by the type schema.
 */
function KnownTypeNamesRule(context) {
  var schema = context.getSchema();
  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
  var definedTypes = Object.create(null);

  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
    var def = _context$getDocument$2[_i2];

    if ((0, _predicates.isTypeDefinitionNode)(def)) {
      definedTypes[def.name.value] = true;
    }
  }

  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
  return {
    NamedType: function NamedType(node, _1, parent, _2, ancestors) {
      var typeName = node.name.value;

      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
        var _ancestors$;

        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
        var isSDL = definitionNode != null && isSDLNode(definitionNode);

        if (isSDL && isStandardTypeName(typeName)) {
          return;
        }

        var suggestedTypes = (0, _suggestionList.default)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
        context.reportError(new _GraphQLError.GraphQLError("Unknown type \"".concat(typeName, "\".") + (0, _didYouMean.default)(suggestedTypes), node));
      }
    }
  };
}

var standardTypeNames = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes).map(function (type) {
  return type.name;
});

function isStandardTypeName(typeName) {
  return standardTypeNames.indexOf(typeName) !== -1;
}

function isSDLNode(value) {
  return !Array.isArray(value) && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
}

},{"../../jsutils/didYouMean.js":"c5AA7","../../jsutils/suggestionList.js":"52DFF","../../error/GraphQLError.js":"cXily","../../language/predicates.js":"6u0g4","../../type/scalars.js":"7mSzF","../../type/introspection.js":"5yLF0"}],"3cLdl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _printer = require("../../language/printer.js");

var _definition = require("../../type/definition.js");

var _typeFromAST = require("../../utilities/typeFromAST.js");

/**
 * Fragments on composite type
 *
 * Fragments use a type condition to determine if they apply, since fragments
 * can only be spread into a composite type (object, interface, or union), the
 * type condition must also be a composite type.
 */
function FragmentsOnCompositeTypesRule(context) {
  return {
    InlineFragment: function InlineFragment(node) {
      var typeCondition = node.typeCondition;

      if (typeCondition) {
        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);

        if (type && !(0, _definition.isCompositeType)(type)) {
          var typeStr = (0, _printer.print)(typeCondition);
          context.reportError(new _GraphQLError.GraphQLError("Fragment cannot condition on non composite type \"".concat(typeStr, "\"."), typeCondition));
        }
      }
    },
    FragmentDefinition: function FragmentDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);

      if (type && !(0, _definition.isCompositeType)(type)) {
        var typeStr = (0, _printer.print)(node.typeCondition);
        context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(node.name.value, "\" cannot condition on non composite type \"").concat(typeStr, "\"."), node.typeCondition));
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily","../../language/printer.js":"1UYdT","../../type/definition.js":"n9nw4","../../utilities/typeFromAST.js":"468O3"}],"5cck7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _printer = require("../../language/printer.js");

var _definition = require("../../type/definition.js");

var _typeFromAST = require("../../utilities/typeFromAST.js");

/**
 * Variables are input types
 *
 * A GraphQL operation is only valid if all the variables it defines are of
 * input types (scalar, enum, or input object).
 */
function VariablesAreInputTypesRule(context) {
  return {
    VariableDefinition: function VariableDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);

      if (type && !(0, _definition.isInputType)(type)) {
        var variableName = node.variable.name.value;
        var typeName = (0, _printer.print)(node.type);
        context.reportError(new _GraphQLError.GraphQLError("Variable \"$".concat(variableName, "\" cannot be non-input type \"").concat(typeName, "\"."), node.type));
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily","../../language/printer.js":"1UYdT","../../type/definition.js":"n9nw4","../../utilities/typeFromAST.js":"468O3"}],"3pIxp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScalarLeafsRule = ScalarLeafsRule;

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _definition = require("../../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Scalar leafs
 *
 * A GraphQL document is valid only if all leaf fields (fields without
 * sub selections) are of scalar or enum types.
 */
function ScalarLeafsRule(context) {
  return {
    Field: function Field(node) {
      var type = context.getType();
      var selectionSet = node.selectionSet;

      if (type) {
        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
          if (selectionSet) {
            var fieldName = node.name.value;
            var typeStr = (0, _inspect.default)(type);
            context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" must not have a selection since type \"").concat(typeStr, "\" has no subfields."), selectionSet));
          }
        } else if (!selectionSet) {
          var _fieldName = node.name.value;

          var _typeStr = (0, _inspect.default)(type);

          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(_fieldName, "\" of type \"").concat(_typeStr, "\" must have a selection of subfields. Did you mean \"").concat(_fieldName, " { ... }\"?"), node));
        }
      }
    }
  };
}

},{"../../jsutils/inspect.js":"2onMM","../../error/GraphQLError.js":"cXily","../../type/definition.js":"n9nw4"}],"DysOp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;

var _arrayFrom = _interopRequireDefault(require("../../polyfills/arrayFrom.js"));

var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.js"));

var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.js"));

var _naturalCompare = _interopRequireDefault(require("../../jsutils/naturalCompare.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _definition = require("../../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fields on correct type
 *
 * A GraphQL document is only valid if all fields selected are defined by the
 * parent type, or are an allowed meta field such as __typename.
 */
function FieldsOnCorrectTypeRule(context) {
  return {
    Field: function Field(node) {
      var type = context.getParentType();

      if (type) {
        var fieldDef = context.getFieldDef();

        if (!fieldDef) {
          // This field doesn't exist, lets look for suggestions.
          var schema = context.getSchema();
          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.

          var suggestion = (0, _didYouMean.default)('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?

          if (suggestion === '') {
            suggestion = (0, _didYouMean.default)(getSuggestedFieldNames(type, fieldName));
          } // Report an error, including helpful suggestions.


          context.reportError(new _GraphQLError.GraphQLError("Cannot query field \"".concat(fieldName, "\" on type \"").concat(type.name, "\".") + suggestion, node));
        }
      }
    }
  };
}
/**
 * Go through all of the implementations of type, as well as the interfaces that
 * they implement. If any of those types include the provided field, suggest them,
 * sorted by how often the type is referenced.
 */


function getSuggestedTypeNames(schema, type, fieldName) {
  if (!(0, _definition.isAbstractType)(type)) {
    // Must be an Object type, which does not have possible fields.
    return [];
  }

  var suggestedTypes = new Set();
  var usageCount = Object.create(null);

  for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {
    var possibleType = _schema$getPossibleTy2[_i2];

    if (!possibleType.getFields()[fieldName]) {
      continue;
    } // This object type defines this field.


    suggestedTypes.add(possibleType);
    usageCount[possibleType.name] = 1;

    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {
      var _usageCount$possibleI;

      var possibleInterface = _possibleType$getInte2[_i4];

      if (!possibleInterface.getFields()[fieldName]) {
        continue;
      } // This interface type defines this field.


      suggestedTypes.add(possibleInterface);
      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
    }
  }

  return (0, _arrayFrom.default)(suggestedTypes).sort(function (typeA, typeB) {
    // Suggest both interface and object types based on how common they are.
    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];

    if (usageCountDiff !== 0) {
      return usageCountDiff;
    } // Suggest super types first followed by subtypes


    if ((0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {
      return -1;
    }

    if ((0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {
      return 1;
    }

    return (0, _naturalCompare.default)(typeA.name, typeB.name);
  }).map(function (x) {
    return x.name;
  });
}
/**
 * For the field name provided, determine if there are any similar field names
 * that may be the result of a typo.
 */


function getSuggestedFieldNames(type, fieldName) {
  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
    var possibleFieldNames = Object.keys(type.getFields());
    return (0, _suggestionList.default)(fieldName, possibleFieldNames);
  } // Otherwise, must be a Union type, which does not define fields.


  return [];
}

},{"../../polyfills/arrayFrom.js":"1z5f4","../../jsutils/didYouMean.js":"c5AA7","../../jsutils/suggestionList.js":"52DFF","../../jsutils/naturalCompare.js":"7Fmta","../../error/GraphQLError.js":"cXily","../../type/definition.js":"n9nw4"}],"6gkrP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique fragment names
 *
 * A GraphQL document is only valid if all defined fragments have unique names.
 */
function UniqueFragmentNamesRule(context) {
  var knownFragmentNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      var fragmentName = node.name.value;

      if (knownFragmentNames[fragmentName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one fragment named \"".concat(fragmentName, "\"."), [knownFragmentNames[fragmentName], node.name]));
      } else {
        knownFragmentNames[fragmentName] = node.name;
      }

      return false;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"2verg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownFragmentNamesRule = KnownFragmentNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Known fragment names
 *
 * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
 * to fragments defined in the same document.
 */
function KnownFragmentNamesRule(context) {
  return {
    FragmentSpread: function FragmentSpread(node) {
      var fragmentName = node.name.value;
      var fragment = context.getFragment(fragmentName);

      if (!fragment) {
        context.reportError(new _GraphQLError.GraphQLError("Unknown fragment \"".concat(fragmentName, "\"."), node.name));
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"6FPG8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * No unused fragments
 *
 * A GraphQL document is only valid if all fragment definitions are spread
 * within operations, or spread within other fragments spread within operations.
 */
function NoUnusedFragmentsRule(context) {
  var operationDefs = [];
  var fragmentDefs = [];
  return {
    OperationDefinition: function OperationDefinition(node) {
      operationDefs.push(node);
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      fragmentDefs.push(node);
      return false;
    },
    Document: {
      leave: function leave() {
        var fragmentNameUsed = Object.create(null);

        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {
          var operation = operationDefs[_i2];

          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {
            var fragment = _context$getRecursive2[_i4];
            fragmentNameUsed[fragment.name.value] = true;
          }
        }

        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {
          var fragmentDef = fragmentDefs[_i6];
          var fragName = fragmentDef.name.value;

          if (fragmentNameUsed[fragName] !== true) {
            context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(fragName, "\" is never used."), fragmentDef));
          }
        }
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"NBJgy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _definition = require("../../type/definition.js");

var _typeFromAST = require("../../utilities/typeFromAST.js");

var _typeComparators = require("../../utilities/typeComparators.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Possible fragment spread
 *
 * A fragment spread is only valid if the type condition could ever possibly
 * be true: if there is a non-empty intersection of the possible parent types,
 * and possible types which pass the type condition.
 */
function PossibleFragmentSpreadsRule(context) {
  return {
    InlineFragment: function InlineFragment(node) {
      var fragType = context.getType();
      var parentType = context.getParentType();

      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        var parentTypeStr = (0, _inspect.default)(parentType);
        var fragTypeStr = (0, _inspect.default)(fragType);
        context.reportError(new _GraphQLError.GraphQLError("Fragment cannot be spread here as objects of type \"".concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
      }
    },
    FragmentSpread: function FragmentSpread(node) {
      var fragName = node.name.value;
      var fragType = getFragmentType(context, fragName);
      var parentType = context.getParentType();

      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        var parentTypeStr = (0, _inspect.default)(parentType);
        var fragTypeStr = (0, _inspect.default)(fragType);
        context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(fragName, "\" cannot be spread here as objects of type \"").concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
      }
    }
  };
}

function getFragmentType(context, name) {
  var frag = context.getFragment(name);

  if (frag) {
    var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);

    if ((0, _definition.isCompositeType)(type)) {
      return type;
    }
  }
}

},{"../../jsutils/inspect.js":"2onMM","../../error/GraphQLError.js":"cXily","../../type/definition.js":"n9nw4","../../utilities/typeFromAST.js":"468O3","../../utilities/typeComparators.js":"1ooid"}],"7cs7s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoFragmentCyclesRule = NoFragmentCyclesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

function NoFragmentCyclesRule(context) {
  // Tracks already visited fragments to maintain O(N) and to ensure that cycles
  // are not redundantly reported.
  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

  var spreadPath = []; // Position in the spread path

  var spreadPathIndexByName = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      detectCycleRecursive(node);
      return false;
    }
  }; // This does a straight-forward DFS to find cycles.
  // It does not terminate when a cycle was found but continues to explore
  // the graph to find all possible cycles.

  function detectCycleRecursive(fragment) {
    if (visitedFrags[fragment.name.value]) {
      return;
    }

    var fragmentName = fragment.name.value;
    visitedFrags[fragmentName] = true;
    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);

    if (spreadNodes.length === 0) {
      return;
    }

    spreadPathIndexByName[fragmentName] = spreadPath.length;

    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {
      var spreadNode = spreadNodes[_i2];
      var spreadName = spreadNode.name.value;
      var cycleIndex = spreadPathIndexByName[spreadName];
      spreadPath.push(spreadNode);

      if (cycleIndex === undefined) {
        var spreadFragment = context.getFragment(spreadName);

        if (spreadFragment) {
          detectCycleRecursive(spreadFragment);
        }
      } else {
        var cyclePath = spreadPath.slice(cycleIndex);
        var viaPath = cyclePath.slice(0, -1).map(function (s) {
          return '"' + s.name.value + '"';
        }).join(', ');
        context.reportError(new _GraphQLError.GraphQLError("Cannot spread fragment \"".concat(spreadName, "\" within itself") + (viaPath !== '' ? " via ".concat(viaPath, ".") : '.'), cyclePath));
      }

      spreadPath.pop();
    }

    spreadPathIndexByName[fragmentName] = undefined;
  }
}

},{"../../error/GraphQLError.js":"cXily"}],"4HR9n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueVariableNamesRule = UniqueVariableNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique variable names
 *
 * A GraphQL operation is only valid if all its variables are uniquely named.
 */
function UniqueVariableNamesRule(context) {
  var knownVariableNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      knownVariableNames = Object.create(null);
    },
    VariableDefinition: function VariableDefinition(node) {
      var variableName = node.variable.name.value;

      if (knownVariableNames[variableName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one variable named \"$".concat(variableName, "\"."), [knownVariableNames[variableName], node.variable.name]));
      } else {
        knownVariableNames[variableName] = node.variable.name;
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"1qqse":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * No undefined variables
 *
 * A GraphQL operation is only valid if all variables encountered, both directly
 * and via fragment spreads, are defined by that operation.
 */
function NoUndefinedVariablesRule(context) {
  var variableNameDefined = Object.create(null);
  return {
    OperationDefinition: {
      enter: function enter() {
        variableNameDefined = Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);

        for (var _i2 = 0; _i2 < usages.length; _i2++) {
          var _ref2 = usages[_i2];
          var node = _ref2.node;
          var varName = node.name.value;

          if (variableNameDefined[varName] !== true) {
            context.reportError(new _GraphQLError.GraphQLError(operation.name ? "Variable \"$".concat(varName, "\" is not defined by operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(varName, "\" is not defined."), [node, operation]));
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition(node) {
      variableNameDefined[node.variable.name.value] = true;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"1BYdg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoUnusedVariablesRule = NoUnusedVariablesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * No unused variables
 *
 * A GraphQL operation is only valid if all variables defined by an operation
 * are used, either directly or within a spread fragment.
 */
function NoUnusedVariablesRule(context) {
  var variableDefs = [];
  return {
    OperationDefinition: {
      enter: function enter() {
        variableDefs = [];
      },
      leave: function leave(operation) {
        var variableNameUsed = Object.create(null);
        var usages = context.getRecursiveVariableUsages(operation);

        for (var _i2 = 0; _i2 < usages.length; _i2++) {
          var _ref2 = usages[_i2];
          var node = _ref2.node;
          variableNameUsed[node.name.value] = true;
        }

        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {
          var variableDef = _variableDefs2[_i4];
          var variableName = variableDef.variable.name.value;

          if (variableNameUsed[variableName] !== true) {
            context.reportError(new _GraphQLError.GraphQLError(operation.name ? "Variable \"$".concat(variableName, "\" is never used in operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(variableName, "\" is never used."), variableDef));
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition(def) {
      variableDefs.push(def);
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"2zv89":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownDirectivesRule = KnownDirectivesRule;

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../../jsutils/invariant.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _directiveLocation = require("../../language/directiveLocation.js");

var _directives = require("../../type/directives.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Known directives
 *
 * A GraphQL document is only valid if all `@directives` are known by the
 * schema and legally positioned.
 */
function KnownDirectivesRule(context) {
  var locationsMap = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
    var directive = definedDirectives[_i2];
    locationsMap[directive.name] = directive.locations;
  }

  var astDefinitions = context.getDocument().definitions;

  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
    var def = astDefinitions[_i4];

    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
      locationsMap[def.name.value] = def.locations.map(function (name) {
        return name.value;
      });
    }
  }

  return {
    Directive: function Directive(node, _key, _parent, _path, ancestors) {
      var name = node.name.value;
      var locations = locationsMap[name];

      if (!locations) {
        context.reportError(new _GraphQLError.GraphQLError("Unknown directive \"@".concat(name, "\"."), node));
        return;
      }

      var candidateLocation = getDirectiveLocationForASTPath(ancestors);

      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {
        context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(name, "\" may not be used on ").concat(candidateLocation, "."), node));
      }
    }
  };
}

function getDirectiveLocationForASTPath(ancestors) {
  var appliedTo = ancestors[ancestors.length - 1];
  !Array.isArray(appliedTo) || (0, _invariant.default)(0);

  switch (appliedTo.kind) {
    case _kinds.Kind.OPERATION_DEFINITION:
      return getDirectiveLocationForOperation(appliedTo.operation);

    case _kinds.Kind.FIELD:
      return _directiveLocation.DirectiveLocation.FIELD;

    case _kinds.Kind.FRAGMENT_SPREAD:
      return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;

    case _kinds.Kind.INLINE_FRAGMENT:
      return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;

    case _kinds.Kind.FRAGMENT_DEFINITION:
      return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;

    case _kinds.Kind.VARIABLE_DEFINITION:
      return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;

    case _kinds.Kind.SCHEMA_DEFINITION:
    case _kinds.Kind.SCHEMA_EXTENSION:
      return _directiveLocation.DirectiveLocation.SCHEMA;

    case _kinds.Kind.SCALAR_TYPE_DEFINITION:
    case _kinds.Kind.SCALAR_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.SCALAR;

    case _kinds.Kind.OBJECT_TYPE_DEFINITION:
    case _kinds.Kind.OBJECT_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.OBJECT;

    case _kinds.Kind.FIELD_DEFINITION:
      return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;

    case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.INTERFACE;

    case _kinds.Kind.UNION_TYPE_DEFINITION:
    case _kinds.Kind.UNION_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.UNION;

    case _kinds.Kind.ENUM_TYPE_DEFINITION:
    case _kinds.Kind.ENUM_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.ENUM;

    case _kinds.Kind.ENUM_VALUE_DEFINITION:
      return _directiveLocation.DirectiveLocation.ENUM_VALUE;

    case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.INPUT_OBJECT;

    case _kinds.Kind.INPUT_VALUE_DEFINITION:
      {
        var parentNode = ancestors[ancestors.length - 3];
        return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
      }
  }
}

function getDirectiveLocationForOperation(operation) {
  switch (operation) {
    case 'query':
      return _directiveLocation.DirectiveLocation.QUERY;

    case 'mutation':
      return _directiveLocation.DirectiveLocation.MUTATION;

    case 'subscription':
      return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
  } // istanbul ignore next (Not reachable. All possible types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected operation: ' + (0, _inspect.default)(operation));
}

},{"../../jsutils/inspect.js":"2onMM","../../jsutils/invariant.js":"6ywmM","../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../language/directiveLocation.js":"3sgz1","../../type/directives.js":"2w91d"}],"1iSv4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _predicates = require("../../language/predicates.js");

var _directives = require("../../type/directives.js");

/**
 * Unique directive names per location
 *
 * A GraphQL document is only valid if all non-repeatable directives at
 * a given location are uniquely named.
 */
function UniqueDirectivesPerLocationRule(context) {
  var uniqueDirectiveMap = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
    var directive = definedDirectives[_i2];
    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
  }

  var astDefinitions = context.getDocument().definitions;

  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
    var def = astDefinitions[_i4];

    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
      uniqueDirectiveMap[def.name.value] = !def.repeatable;
    }
  }

  var schemaDirectives = Object.create(null);
  var typeDirectivesMap = Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter: function enter(node) {
      if (node.directives == null) {
        return;
      }

      var seenDirectives;

      if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {
        seenDirectives = schemaDirectives;
      } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
        var typeName = node.name.value;
        seenDirectives = typeDirectivesMap[typeName];

        if (seenDirectives === undefined) {
          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
        }
      } else {
        seenDirectives = Object.create(null);
      }

      for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {
        var _directive = _node$directives2[_i6];
        var directiveName = _directive.name.value;

        if (uniqueDirectiveMap[directiveName]) {
          if (seenDirectives[directiveName]) {
            context.reportError(new _GraphQLError.GraphQLError("The directive \"@".concat(directiveName, "\" can only be used once at this location."), [seenDirectives[directiveName], _directive]));
          } else {
            seenDirectives[directiveName] = _directive;
          }
        }
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../language/predicates.js":"6u0g4","../../type/directives.js":"2w91d"}],"2lcXE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;

var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.js"));

var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _directives = require("../../type/directives.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Known argument names
 *
 * A GraphQL field is only valid if all supplied arguments are defined by
 * that field.
 */
function KnownArgumentNamesRule(context) {
  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {
    Argument: function Argument(argNode) {
      var argDef = context.getArgument();
      var fieldDef = context.getFieldDef();
      var parentType = context.getParentType();

      if (!argDef && fieldDef && parentType) {
        var argName = argNode.name.value;
        var knownArgsNames = fieldDef.args.map(function (arg) {
          return arg.name;
        });
        var suggestions = (0, _suggestionList.default)(argName, knownArgsNames);
        context.reportError(new _GraphQLError.GraphQLError("Unknown argument \"".concat(argName, "\" on field \"").concat(parentType.name, ".").concat(fieldDef.name, "\".") + (0, _didYouMean.default)(suggestions), argNode));
      }
    }
  });
}
/**
 * @internal
 */


function KnownArgumentNamesOnDirectivesRule(context) {
  var directiveArgs = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
    var directive = definedDirectives[_i2];
    directiveArgs[directive.name] = directive.args.map(function (arg) {
      return arg.name;
    });
  }

  var astDefinitions = context.getDocument().definitions;

  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
    var def = astDefinitions[_i4];

    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;

      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      directiveArgs[def.name.value] = argsNodes.map(function (arg) {
        return arg.name.value;
      });
    }
  }

  return {
    Directive: function Directive(directiveNode) {
      var directiveName = directiveNode.name.value;
      var knownArgs = directiveArgs[directiveName];

      if (directiveNode.arguments && knownArgs) {
        for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {
          var argNode = _directiveNode$argume2[_i6];
          var argName = argNode.name.value;

          if (knownArgs.indexOf(argName) === -1) {
            var suggestions = (0, _suggestionList.default)(argName, knownArgs);
            context.reportError(new _GraphQLError.GraphQLError("Unknown argument \"".concat(argName, "\" on directive \"@").concat(directiveName, "\".") + (0, _didYouMean.default)(suggestions), argNode));
          }
        }
      }

      return false;
    }
  };
}

},{"../../jsutils/didYouMean.js":"c5AA7","../../jsutils/suggestionList.js":"52DFF","../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../type/directives.js":"2w91d"}],"m2Dig":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique argument names
 *
 * A GraphQL field or directive is only valid if all supplied arguments are
 * uniquely named.
 */
function UniqueArgumentNamesRule(context) {
  var knownArgNames = Object.create(null);
  return {
    Field: function Field() {
      knownArgNames = Object.create(null);
    },
    Directive: function Directive() {
      knownArgNames = Object.create(null);
    },
    Argument: function Argument(node) {
      var argName = node.name.value;

      if (knownArgNames[argName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one argument named \"".concat(argName, "\"."), [knownArgNames[argName], node.name]));
      } else {
        knownArgNames[argName] = node.name;
      }

      return false;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"6RlTn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;

var _objectValues3 = _interopRequireDefault(require("../../polyfills/objectValues.js"));

var _keyMap = _interopRequireDefault(require("../../jsutils/keyMap.js"));

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.js"));

var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _printer = require("../../language/printer.js");

var _definition = require("../../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Value literals of correct type
 *
 * A GraphQL document is only valid if all value literals are of the type
 * expected at their position.
 */
function ValuesOfCorrectTypeRule(context) {
  return {
    ListValue: function ListValue(node) {
      // Note: TypeInfo will traverse into a list's item type, so look to the
      // parent input type to check if it is a list.
      var type = (0, _definition.getNullableType)(context.getParentInputType());

      if (!(0, _definition.isListType)(type)) {
        isValidValueNode(context, node);
        return false; // Don't traverse further.
      }
    },
    ObjectValue: function ObjectValue(node) {
      var type = (0, _definition.getNamedType)(context.getInputType());

      if (!(0, _definition.isInputObjectType)(type)) {
        isValidValueNode(context, node);
        return false; // Don't traverse further.
      } // Ensure every required field exists.


      var fieldNodeMap = (0, _keyMap.default)(node.fields, function (field) {
        return field.name.value;
      });

      for (var _i2 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i2 < _objectValues2.length; _i2++) {
        var fieldDef = _objectValues2[_i2];
        var fieldNode = fieldNodeMap[fieldDef.name];

        if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {
          var typeStr = (0, _inspect.default)(fieldDef.type);
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(type.name, ".").concat(fieldDef.name, "\" of required type \"").concat(typeStr, "\" was not provided."), node));
        }
      }
    },
    ObjectField: function ObjectField(node) {
      var parentType = (0, _definition.getNamedType)(context.getParentInputType());
      var fieldType = context.getInputType();

      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
        var suggestions = (0, _suggestionList.default)(node.name.value, Object.keys(parentType.getFields()));
        context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(node.name.value, "\" is not defined by type \"").concat(parentType.name, "\".") + (0, _didYouMean.default)(suggestions), node));
      }
    },
    NullValue: function NullValue(node) {
      var type = context.getInputType();

      if ((0, _definition.isNonNullType)(type)) {
        context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat((0, _inspect.default)(type), "\", found ").concat((0, _printer.print)(node), "."), node));
      }
    },
    EnumValue: function EnumValue(node) {
      return isValidValueNode(context, node);
    },
    IntValue: function IntValue(node) {
      return isValidValueNode(context, node);
    },
    FloatValue: function FloatValue(node) {
      return isValidValueNode(context, node);
    },
    StringValue: function StringValue(node) {
      return isValidValueNode(context, node);
    },
    BooleanValue: function BooleanValue(node) {
      return isValidValueNode(context, node);
    }
  };
}
/**
 * Any value literal may be a valid representation of a Scalar, depending on
 * that scalar type.
 */


function isValidValueNode(context, node) {
  // Report any error at the full type expected by the location.
  var locationType = context.getInputType();

  if (!locationType) {
    return;
  }

  var type = (0, _definition.getNamedType)(locationType);

  if (!(0, _definition.isLeafType)(type)) {
    var typeStr = (0, _inspect.default)(locationType);
    context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(typeStr, "\", found ").concat((0, _printer.print)(node), "."), node));
    return;
  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
  // which may throw or return an invalid value to indicate failure.


  try {
    var parseResult = type.parseLiteral(node, undefined
    /* variables */
    );

    if (parseResult === undefined) {
      var _typeStr = (0, _inspect.default)(locationType);

      context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(_typeStr, "\", found ").concat((0, _printer.print)(node), "."), node));
    }
  } catch (error) {
    var _typeStr2 = (0, _inspect.default)(locationType);

    if (error instanceof _GraphQLError.GraphQLError) {
      context.reportError(error);
    } else {
      context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(_typeStr2, "\", found ").concat((0, _printer.print)(node), "; ") + error.message, node, undefined, undefined, undefined, error));
    }
  }
}

},{"../../polyfills/objectValues.js":"2BpS0","../../jsutils/keyMap.js":"1oNDS","../../jsutils/inspect.js":"2onMM","../../jsutils/didYouMean.js":"c5AA7","../../jsutils/suggestionList.js":"52DFF","../../error/GraphQLError.js":"cXily","../../language/printer.js":"1UYdT","../../type/definition.js":"n9nw4"}],"4vfZe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _keyMap = _interopRequireDefault(require("../../jsutils/keyMap.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _printer = require("../../language/printer.js");

var _directives = require("../../type/directives.js");

var _definition = require("../../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Provided required arguments
 *
 * A field or directive is only valid if all required (non-null without a
 * default value) field arguments have been provided.
 */
function ProvidedRequiredArgumentsRule(context) {
  return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(fieldNode) {
        var _fieldNode$arguments;

        var fieldDef = context.getFieldDef();

        if (!fieldDef) {
          return false;
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


        var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
        var argNodeMap = (0, _keyMap.default)(argNodes, function (arg) {
          return arg.name.value;
        });

        for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {
          var argDef = _fieldDef$args2[_i2];
          var argNode = argNodeMap[argDef.name];

          if (!argNode && (0, _definition.isRequiredArgument)(argDef)) {
            var argTypeStr = (0, _inspect.default)(argDef.type);
            context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), fieldNode));
          }
        }
      }
    }
  });
}
/**
 * @internal
 */


function ProvidedRequiredArgumentsOnDirectivesRule(context) {
  var requiredArgsMap = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;

  for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {
    var directive = definedDirectives[_i4];
    requiredArgsMap[directive.name] = (0, _keyMap.default)(directive.args.filter(_definition.isRequiredArgument), function (arg) {
      return arg.name;
    });
  }

  var astDefinitions = context.getDocument().definitions;

  for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {
    var def = astDefinitions[_i6];

    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;

      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      requiredArgsMap[def.name.value] = (0, _keyMap.default)(argNodes.filter(isRequiredArgumentNode), function (arg) {
        return arg.name.value;
      });
    }
  }

  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(directiveNode) {
        var directiveName = directiveNode.name.value;
        var requiredArgs = requiredArgsMap[directiveName];

        if (requiredArgs) {
          var _directiveNode$argume;

          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
          var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];

          var argNodeMap = (0, _keyMap.default)(_argNodes, function (arg) {
            return arg.name.value;
          });

          for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {
            var argName = _Object$keys2[_i8];

            if (!argNodeMap[argName]) {
              var argType = requiredArgs[argName].type;
              var argTypeStr = (0, _definition.isType)(argType) ? (0, _inspect.default)(argType) : (0, _printer.print)(argType);
              context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveName, "\" argument \"").concat(argName, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), directiveNode));
            }
          }
        }
      }
    }
  };
}

function isRequiredArgumentNode(arg) {
  return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
}

},{"../../jsutils/inspect.js":"2onMM","../../jsutils/keyMap.js":"1oNDS","../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../language/printer.js":"1UYdT","../../type/directives.js":"2w91d","../../type/definition.js":"n9nw4"}],"5flqI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _definition = require("../../type/definition.js");

var _typeFromAST = require("../../utilities/typeFromAST.js");

var _typeComparators = require("../../utilities/typeComparators.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Variables passed to field arguments conform to type
 */
function VariablesInAllowedPositionRule(context) {
  var varDefMap = Object.create(null);
  return {
    OperationDefinition: {
      enter: function enter() {
        varDefMap = Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);

        for (var _i2 = 0; _i2 < usages.length; _i2++) {
          var _ref2 = usages[_i2];
          var node = _ref2.node;
          var type = _ref2.type;
          var defaultValue = _ref2.defaultValue;
          var varName = node.name.value;
          var varDef = varDefMap[varName];

          if (varDef && type) {
            // A var type is allowed if it is the same or more strict (e.g. is
            // a subtype of) than the expected type. It can be more strict if
            // the variable type is non-null when the expected type is nullable.
            // If both are list types, the variable item type can be more strict
            // than the expected item type (contravariant).
            var schema = context.getSchema();
            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);

            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {
              var varTypeStr = (0, _inspect.default)(varType);
              var typeStr = (0, _inspect.default)(type);
              context.reportError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of type \"").concat(varTypeStr, "\" used in position expecting type \"").concat(typeStr, "\"."), [varDef, node]));
            }
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition(node) {
      varDefMap[node.variable.name.value] = node;
    }
  };
}
/**
 * Returns true if the variable is allowed in the location it was found,
 * which includes considering if default values exist for either the variable
 * or the location at which it is located.
 */


function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
  if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;
    var hasLocationDefaultValue = locationDefaultValue !== undefined;

    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
      return false;
    }

    var nullableLocationType = locationType.ofType;
    return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, nullableLocationType);
  }

  return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
}

},{"../../jsutils/inspect.js":"2onMM","../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../type/definition.js":"n9nw4","../../utilities/typeFromAST.js":"468O3","../../utilities/typeComparators.js":"1ooid"}],"2MNpW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;

var _find = _interopRequireDefault(require("../../polyfills/find.js"));

var _objectEntries3 = _interopRequireDefault(require("../../polyfills/objectEntries.js"));

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _printer = require("../../language/printer.js");

var _definition = require("../../type/definition.js");

var _typeFromAST = require("../../utilities/typeFromAST.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function reasonMessage(reason) {
  if (Array.isArray(reason)) {
    return reason.map(function (_ref) {
      var responseName = _ref[0],
          subReason = _ref[1];
      return "subfields \"".concat(responseName, "\" conflict because ") + reasonMessage(subReason);
    }).join(' and ');
  }

  return reason;
}
/**
 * Overlapping fields can be merged
 *
 * A selection set is only valid if all fields (including spreading any
 * fragments) either correspond to distinct response names or can be merged
 * without ambiguity.
 */


function OverlappingFieldsCanBeMergedRule(context) {
  // A memoization for when two fragments are compared "between" each other for
  // conflicts. Two fragments may be compared many times, so memoizing this can
  // dramatically improve the performance of this validator.
  var comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
  // selection set. Selection sets may be asked for this information multiple
  // times, so this improves the performance of this validator.

  var cachedFieldsAndFragmentNames = new Map();
  return {
    SelectionSet: function SelectionSet(selectionSet) {
      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);

      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {
        var _ref3 = conflicts[_i2];
        var _ref2$ = _ref3[0];
        var responseName = _ref2$[0];
        var reason = _ref2$[1];
        var fields1 = _ref3[1];
        var fields2 = _ref3[2];
        var reasonMsg = reasonMessage(reason);
        context.reportError(new _GraphQLError.GraphQLError("Fields \"".concat(responseName, "\" conflict because ").concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), fields1.concat(fields2)));
      }
    }
  };
}

/**
 * Algorithm:
 *
 * Conflicts occur when two fields exist in a query which will produce the same
 * response name, but represent differing values, thus creating a conflict.
 * The algorithm below finds all conflicts via making a series of comparisons
 * between fields. In order to compare as few fields as possible, this makes
 * a series of comparisons "within" sets of fields and "between" sets of fields.
 *
 * Given any selection set, a collection produces both a set of fields by
 * also including all inline fragments, as well as a list of fragments
 * referenced by fragment spreads.
 *
 * A) Each selection set represented in the document first compares "within" its
 * collected set of fields, finding any conflicts between every pair of
 * overlapping fields.
 * Note: This is the *only time* that a the fields "within" a set are compared
 * to each other. After this only fields "between" sets are compared.
 *
 * B) Also, if any fragment is referenced in a selection set, then a
 * comparison is made "between" the original set of fields and the
 * referenced fragment.
 *
 * C) Also, if multiple fragments are referenced, then comparisons
 * are made "between" each referenced fragment.
 *
 * D) When comparing "between" a set of fields and a referenced fragment, first
 * a comparison is made between each field in the original set of fields and
 * each field in the the referenced set of fields.
 *
 * E) Also, if any fragment is referenced in the referenced selection set,
 * then a comparison is made "between" the original set of fields and the
 * referenced fragment (recursively referring to step D).
 *
 * F) When comparing "between" two fragments, first a comparison is made between
 * each field in the first referenced set of fields and each field in the the
 * second referenced set of fields.
 *
 * G) Also, any fragments referenced by the first must be compared to the
 * second, and any fragments referenced by the second must be compared to the
 * first (recursively referring to step F).
 *
 * H) When comparing two fields, if both have selection sets, then a comparison
 * is made "between" both selection sets, first comparing the set of fields in
 * the first selection set with the set of fields in the second.
 *
 * I) Also, if any fragment is referenced in either selection set, then a
 * comparison is made "between" the other set of fields and the
 * referenced fragment.
 *
 * J) Also, if two fragments are referenced in both selection sets, then a
 * comparison is made "between" the two fragments.
 *
 */
// Find all conflicts found "within" a selection set, including those found
// via spreading in fragments. Called when visiting each SelectionSet in the
// GraphQL Document.
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
  var conflicts = [];

  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),
      fieldMap = _getFieldsAndFragment[0],
      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts "within" the fields of this selection set.
  // Note: this is the *only place* `collectConflictsWithin` is called.


  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);

  if (fragmentNames.length !== 0) {
    // (B) Then collect conflicts between these fields and those represented by
    // each spread fragment name found.
    for (var i = 0; i < fragmentNames.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this
      // selection set to collect conflicts between fragments spread together.
      // This compares each item in the list of fragment names to every other
      // item in that same list (except for itself).

      for (var j = i + 1; j < fragmentNames.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
      }
    }
  }

  return conflicts;
} // Collect all conflicts found between a set of fields and a fragment reference
// including via spreading in any nested fragments.


function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
  var fragment = context.getFragment(fragmentName);

  if (!fragment) {
    return;
  }

  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),
      fieldMap2 = _getReferencedFieldsA[0],
      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.


  if (fieldMap === fieldMap2) {
    return;
  } // (D) First collect any conflicts between the provided collection of fields
  // and the collection of fields represented by the given fragment.


  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields
  // and any fragment names found in the given fragment.

  for (var i = 0; i < fragmentNames2.length; i++) {
    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
  }
} // Collect all conflicts found between two fragments, including via spreading in
// any nested fragments.


function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
  // No need to compare a fragment to itself.
  if (fragmentName1 === fragmentName2) {
    return;
  } // Memoize so two fragments are not compared for conflicts more than once.


  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
    return;
  }

  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
  var fragment1 = context.getFragment(fragmentName1);
  var fragment2 = context.getFragment(fragmentName2);

  if (!fragment1 || !fragment2) {
    return;
  }

  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),
      fieldMap1 = _getReferencedFieldsA2[0],
      fragmentNames1 = _getReferencedFieldsA2[1];

  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),
      fieldMap2 = _getReferencedFieldsA3[0],
      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields
  // (not including any nested fragments).


  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested
  // fragments spread in the second fragment.

  for (var j = 0; j < fragmentNames2.length; j++) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
  } // (G) Then collect conflicts between the second fragment and any nested
  // fragments spread in the first fragment.


  for (var i = 0; i < fragmentNames1.length; i++) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
  }
} // Find all conflicts found between two selection sets, including those found
// via spreading in fragments. Called when determining if conflicts exist
// between the sub-fields of two overlapping fields.


function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  var conflicts = [];

  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),
      fieldMap1 = _getFieldsAndFragment2[0],
      fragmentNames1 = _getFieldsAndFragment2[1];

  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),
      fieldMap2 = _getFieldsAndFragment3[0],
      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.


  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and
  // those referenced by each fragment name associated with the second.

  if (fragmentNames2.length !== 0) {
    for (var j = 0; j < fragmentNames2.length; j++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
    }
  } // (I) Then collect conflicts between the second collection of fields and
  // those referenced by each fragment name associated with the first.


  if (fragmentNames1.length !== 0) {
    for (var i = 0; i < fragmentNames1.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
    }
  } // (J) Also collect conflicts between any fragment names by the first and
  // fragment names by the second. This compares each item in the first set of
  // names to each item in the second set of names.


  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {
    for (var _j = 0; _j < fragmentNames2.length; _j++) {
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);
    }
  }

  return conflicts;
} // Collect all Conflicts "within" one collection of fields.


function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
  // A field map is a keyed collection, where each key represents a response
  // name and the value at that key is a list of all fields which provide that
  // response name. For every response name, if there are multiple fields, they
  // must be compared to find a potential conflict.
  for (var _i5 = 0, _objectEntries2 = (0, _objectEntries3.default)(fieldMap); _i5 < _objectEntries2.length; _i5++) {
    var _ref5 = _objectEntries2[_i5];
    var responseName = _ref5[0];
    var fields = _ref5[1];

    // This compares every field in the list to every other field in this list
    // (except to itself). If the list only has one item, nothing needs to
    // be compared.
    if (fields.length > 1) {
      for (var i = 0; i < fields.length; i++) {
        for (var j = i + 1; j < fields.length; j++) {
          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive
          responseName, fields[i], fields[j]);

          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
} // Collect all Conflicts between two collections of fields. This is similar to,
// but different from the `collectConflictsWithin` function above. This check
// assumes that `collectConflictsWithin` has already been called on each
// provided collection of fields. This is true because this validator traverses
// each individual selection set.


function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
  // A field map is a keyed collection, where each key represents a response
  // name and the value at that key is a list of all fields which provide that
  // response name. For any response name which appears in both provided field
  // maps, each field from the first field map must be compared to every field
  // in the second field map to find potential conflicts.
  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {
    var responseName = _Object$keys2[_i7];
    var fields2 = fieldMap2[responseName];

    if (fields2) {
      var fields1 = fieldMap1[responseName];

      for (var i = 0; i < fields1.length; i++) {
        for (var j = 0; j < fields2.length; j++) {
          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);

          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
} // Determines if there is a conflict between two particular fields, including
// comparing their sub-fields.


function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
  var parentType1 = field1[0],
      node1 = field1[1],
      def1 = field1[2];
  var parentType2 = field2[0],
      node2 = field2[1],
      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same
  // time, due to the parent types, then it is safe to permit them to diverge
  // in aliased field or arguments used as they will not present any ambiguity
  // by differing.
  // It is known that two parent types could never overlap if they are
  // different Object types. Interface or Union types might overlap - if not
  // in the current state of the schema, then perhaps in some future version,
  // thus may not safely diverge.

  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);

  if (!areMutuallyExclusive) {
    var _node1$arguments, _node2$arguments;

    // Two aliases must refer to the same field.
    var name1 = node1.name.value;
    var name2 = node2.name.value;

    if (name1 !== name2) {
      return [[responseName, "\"".concat(name1, "\" and \"").concat(name2, "\" are different fields")], [node1], [node2]];
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.

    if (!sameArguments(args1, args2)) {
      return [[responseName, 'they have differing arguments'], [node1], [node2]];
    }
  } // The return type for each field.


  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;

  if (type1 && type2 && doTypesConflict(type1, type2)) {
    return [[responseName, "they return conflicting types \"".concat((0, _inspect.default)(type1), "\" and \"").concat((0, _inspect.default)(type2), "\"")], [node1], [node2]];
  } // Collect and compare sub-fields. Use the same "visited fragment names" list
  // for both collections so fields in a fragment reference are never
  // compared to themselves.


  var selectionSet1 = node1.selectionSet;
  var selectionSet2 = node2.selectionSet;

  if (selectionSet1 && selectionSet2) {
    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
    return subfieldConflicts(conflicts, responseName, node1, node2);
  }
}

function sameArguments(arguments1, arguments2) {
  if (arguments1.length !== arguments2.length) {
    return false;
  }

  return arguments1.every(function (argument1) {
    var argument2 = (0, _find.default)(arguments2, function (argument) {
      return argument.name.value === argument1.name.value;
    });

    if (!argument2) {
      return false;
    }

    return sameValue(argument1.value, argument2.value);
  });
}

function sameValue(value1, value2) {
  return (0, _printer.print)(value1) === (0, _printer.print)(value2);
} // Two types conflict if both types could not apply to a value simultaneously.
// Composite types are ignored as their individual field types will be compared
// later recursively. However List and Non-Null types must match.


function doTypesConflict(type1, type2) {
  if ((0, _definition.isListType)(type1)) {
    return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }

  if ((0, _definition.isListType)(type2)) {
    return true;
  }

  if ((0, _definition.isNonNullType)(type1)) {
    return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }

  if ((0, _definition.isNonNullType)(type2)) {
    return true;
  }

  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
    return type1 !== type2;
  }

  return false;
} // Given a selection set, return the collection of fields (a mapping of response
// name to field nodes and definitions) as well as a list of fragment names
// referenced via fragment spreads.


function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
  var cached = cachedFieldsAndFragmentNames.get(selectionSet);

  if (!cached) {
    var nodeAndDefs = Object.create(null);
    var fragmentNames = Object.create(null);

    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);

    cached = [nodeAndDefs, Object.keys(fragmentNames)];
    cachedFieldsAndFragmentNames.set(selectionSet, cached);
  }

  return cached;
} // Given a reference to a fragment, return the represented collection of fields
// as well as a list of nested fragment names referenced via fragment spreads.


function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
  // Short-circuit building a type from the node if possible.
  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);

  if (cached) {
    return cached;
  }

  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
}

function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {
    var selection = _selectionSet$selecti2[_i9];

    switch (selection.kind) {
      case _kinds.Kind.FIELD:
        {
          var fieldName = selection.name.value;
          var fieldDef = void 0;

          if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
            fieldDef = parentType.getFields()[fieldName];
          }

          var responseName = selection.alias ? selection.alias.value : fieldName;

          if (!nodeAndDefs[responseName]) {
            nodeAndDefs[responseName] = [];
          }

          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
          break;
        }

      case _kinds.Kind.FRAGMENT_SPREAD:
        fragmentNames[selection.name.value] = true;
        break;

      case _kinds.Kind.INLINE_FRAGMENT:
        {
          var typeCondition = selection.typeCondition;
          var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;

          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);

          break;
        }
    }
  }
} // Given a series of Conflicts which occurred between two sub-fields, generate
// a single Conflict.


function subfieldConflicts(conflicts, responseName, node1, node2) {
  if (conflicts.length > 0) {
    return [[responseName, conflicts.map(function (_ref6) {
      var reason = _ref6[0];
      return reason;
    })], conflicts.reduce(function (allFields, _ref7) {
      var fields1 = _ref7[1];
      return allFields.concat(fields1);
    }, [node1]), conflicts.reduce(function (allFields, _ref8) {
      var fields2 = _ref8[2];
      return allFields.concat(fields2);
    }, [node2])];
  }
}
/**
 * A way to keep track of pairs of things when the ordering of the pair does
 * not matter. We do this by maintaining a sort of double adjacency sets.
 */


var PairSet = /*#__PURE__*/function () {
  function PairSet() {
    this._data = Object.create(null);
  }

  var _proto = PairSet.prototype;

  _proto.has = function has(a, b, areMutuallyExclusive) {
    var first = this._data[a];
    var result = first && first[b];

    if (result === undefined) {
      return false;
    } // areMutuallyExclusive being false is a superset of being true,
    // hence if we want to know if this PairSet "has" these two with no
    // exclusivity, we have to ensure it was added as such.


    if (areMutuallyExclusive === false) {
      return result === false;
    }

    return true;
  };

  _proto.add = function add(a, b, areMutuallyExclusive) {
    this._pairSetAdd(a, b, areMutuallyExclusive);

    this._pairSetAdd(b, a, areMutuallyExclusive);
  };

  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {
    var map = this._data[a];

    if (!map) {
      map = Object.create(null);
      this._data[a] = map;
    }

    map[b] = areMutuallyExclusive;
  };

  return PairSet;
}();

},{"../../polyfills/find.js":"5w3fy","../../polyfills/objectEntries.js":"5fjGQ","../../jsutils/inspect.js":"2onMM","../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../language/printer.js":"1UYdT","../../type/definition.js":"n9nw4","../../utilities/typeFromAST.js":"468O3"}],"5hV72":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique input field names
 *
 * A GraphQL input object value is only valid if all supplied fields are
 * uniquely named.
 */
function UniqueInputFieldNamesRule(context) {
  var knownNameStack = [];
  var knownNames = Object.create(null);
  return {
    ObjectValue: {
      enter: function enter() {
        knownNameStack.push(knownNames);
        knownNames = Object.create(null);
      },
      leave: function leave() {
        knownNames = knownNameStack.pop();
      }
    },
    ObjectField: function ObjectField(node) {
      var fieldName = node.name.value;

      if (knownNames[fieldName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one input field named \"".concat(fieldName, "\"."), [knownNames[fieldName], node.name]));
      } else {
        knownNames[fieldName] = node.name;
      }
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"4HDpS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Lone Schema definition
 *
 * A GraphQL document is only valid if it contains only one schema definition.
 */
function LoneSchemaDefinitionRule(context) {
  var _ref, _ref2, _oldSchema$astNode;

  var oldSchema = context.getSchema();
  var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
  var schemaDefinitionsCount = 0;
  return {
    SchemaDefinition: function SchemaDefinition(node) {
      if (alreadyDefined) {
        context.reportError(new _GraphQLError.GraphQLError('Cannot define a new schema within a schema extension.', node));
        return;
      }

      if (schemaDefinitionsCount > 0) {
        context.reportError(new _GraphQLError.GraphQLError('Must provide only one schema definition.', node));
      }

      ++schemaDefinitionsCount;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"3gTe3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueOperationTypesRule = UniqueOperationTypesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique operation types
 *
 * A GraphQL document is only valid if it has only one type per operation.
 */
function UniqueOperationTypesRule(context) {
  var schema = context.getSchema();
  var definedOperationTypes = Object.create(null);
  var existingOperationTypes = schema ? {
    query: schema.getQueryType(),
    mutation: schema.getMutationType(),
    subscription: schema.getSubscriptionType()
  } : {};
  return {
    SchemaDefinition: checkOperationTypes,
    SchemaExtension: checkOperationTypes
  };

  function checkOperationTypes(node) {
    var _node$operationTypes;

    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];

    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {
      var operationType = operationTypesNodes[_i2];
      var operation = operationType.operation;
      var alreadyDefinedOperationType = definedOperationTypes[operation];

      if (existingOperationTypes[operation]) {
        context.reportError(new _GraphQLError.GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), operationType));
      } else if (alreadyDefinedOperationType) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one ".concat(operation, " type in schema."), [alreadyDefinedOperationType, operationType]));
      } else {
        definedOperationTypes[operation] = operationType;
      }
    }

    return false;
  }
}

},{"../../error/GraphQLError.js":"cXily"}],"6QdA2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueTypeNamesRule = UniqueTypeNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique type names
 *
 * A GraphQL document is only valid if all defined types have unique names.
 */
function UniqueTypeNamesRule(context) {
  var knownTypeNames = Object.create(null);
  var schema = context.getSchema();
  return {
    ScalarTypeDefinition: checkTypeName,
    ObjectTypeDefinition: checkTypeName,
    InterfaceTypeDefinition: checkTypeName,
    UnionTypeDefinition: checkTypeName,
    EnumTypeDefinition: checkTypeName,
    InputObjectTypeDefinition: checkTypeName
  };

  function checkTypeName(node) {
    var typeName = node.name.value;

    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
      context.reportError(new _GraphQLError.GraphQLError("Type \"".concat(typeName, "\" already exists in the schema. It cannot also be defined in this type definition."), node.name));
      return;
    }

    if (knownTypeNames[typeName]) {
      context.reportError(new _GraphQLError.GraphQLError("There can be only one type named \"".concat(typeName, "\"."), [knownTypeNames[typeName], node.name]));
    } else {
      knownTypeNames[typeName] = node.name;
    }

    return false;
  }
}

},{"../../error/GraphQLError.js":"cXily"}],"3lMWb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _definition = require("../../type/definition.js");

/**
 * Unique enum value names
 *
 * A GraphQL enum type is only valid if all its values are uniquely named.
 */
function UniqueEnumValueNamesRule(context) {
  var schema = context.getSchema();
  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
  var knownValueNames = Object.create(null);
  return {
    EnumTypeDefinition: checkValueUniqueness,
    EnumTypeExtension: checkValueUniqueness
  };

  function checkValueUniqueness(node) {
    var _node$values;

    var typeName = node.name.value;

    if (!knownValueNames[typeName]) {
      knownValueNames[typeName] = Object.create(null);
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
    var valueNames = knownValueNames[typeName];

    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {
      var valueDef = valueNodes[_i2];
      var valueName = valueDef.name.value;
      var existingType = existingTypeMap[typeName];

      if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {
        context.reportError(new _GraphQLError.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" already exists in the schema. It cannot also be defined in this type extension."), valueDef.name));
      } else if (valueNames[valueName]) {
        context.reportError(new _GraphQLError.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" can only be defined once."), [valueNames[valueName], valueDef.name]));
      } else {
        valueNames[valueName] = valueDef.name;
      }
    }

    return false;
  }
}

},{"../../error/GraphQLError.js":"cXily","../../type/definition.js":"n9nw4"}],"6dxGU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

var _definition = require("../../type/definition.js");

/**
 * Unique field definition names
 *
 * A GraphQL complex type is only valid if all its fields are uniquely named.
 */
function UniqueFieldDefinitionNamesRule(context) {
  var schema = context.getSchema();
  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
  var knownFieldNames = Object.create(null);
  return {
    InputObjectTypeDefinition: checkFieldUniqueness,
    InputObjectTypeExtension: checkFieldUniqueness,
    InterfaceTypeDefinition: checkFieldUniqueness,
    InterfaceTypeExtension: checkFieldUniqueness,
    ObjectTypeDefinition: checkFieldUniqueness,
    ObjectTypeExtension: checkFieldUniqueness
  };

  function checkFieldUniqueness(node) {
    var _node$fields;

    var typeName = node.name.value;

    if (!knownFieldNames[typeName]) {
      knownFieldNames[typeName] = Object.create(null);
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
    var fieldNames = knownFieldNames[typeName];

    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {
      var fieldDef = fieldNodes[_i2];
      var fieldName = fieldDef.name.value;

      if (hasField(existingTypeMap[typeName], fieldName)) {
        context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" already exists in the schema. It cannot also be defined in this type extension."), fieldDef.name));
      } else if (fieldNames[fieldName]) {
        context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" can only be defined once."), [fieldNames[fieldName], fieldDef.name]));
      } else {
        fieldNames[fieldName] = fieldDef.name;
      }
    }

    return false;
  }
}

function hasField(type, fieldName) {
  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {
    return type.getFields()[fieldName] != null;
  }

  return false;
}

},{"../../error/GraphQLError.js":"cXily","../../type/definition.js":"n9nw4"}],"ibRE8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;

var _GraphQLError = require("../../error/GraphQLError.js");

/**
 * Unique directive names
 *
 * A GraphQL document is only valid if all defined directives have unique names.
 */
function UniqueDirectiveNamesRule(context) {
  var knownDirectiveNames = Object.create(null);
  var schema = context.getSchema();
  return {
    DirectiveDefinition: function DirectiveDefinition(node) {
      var directiveName = node.name.value;

      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
        context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveName, "\" already exists in the schema. It cannot be redefined."), node.name));
        return;
      }

      if (knownDirectiveNames[directiveName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one directive named \"@".concat(directiveName, "\"."), [knownDirectiveNames[directiveName], node.name]));
      } else {
        knownDirectiveNames[directiveName] = node.name;
      }

      return false;
    }
  };
}

},{"../../error/GraphQLError.js":"cXily"}],"6Vkc0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;

var _inspect = _interopRequireDefault(require("../../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../../jsutils/invariant.js"));

var _didYouMean = _interopRequireDefault(require("../../jsutils/didYouMean.js"));

var _suggestionList = _interopRequireDefault(require("../../jsutils/suggestionList.js"));

var _GraphQLError = require("../../error/GraphQLError.js");

var _kinds = require("../../language/kinds.js");

var _predicates = require("../../language/predicates.js");

var _definition = require("../../type/definition.js");

var _defKindToExtKind;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Possible type extension
 *
 * A type extension is only valid if the type is defined and has the same kind.
 */
function PossibleTypeExtensionsRule(context) {
  var schema = context.getSchema();
  var definedTypes = Object.create(null);

  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
    var def = _context$getDocument$2[_i2];

    if ((0, _predicates.isTypeDefinitionNode)(def)) {
      definedTypes[def.name.value] = def;
    }
  }

  return {
    ScalarTypeExtension: checkExtension,
    ObjectTypeExtension: checkExtension,
    InterfaceTypeExtension: checkExtension,
    UnionTypeExtension: checkExtension,
    EnumTypeExtension: checkExtension,
    InputObjectTypeExtension: checkExtension
  };

  function checkExtension(node) {
    var typeName = node.name.value;
    var defNode = definedTypes[typeName];
    var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
    var expectedKind;

    if (defNode) {
      expectedKind = defKindToExtKind[defNode.kind];
    } else if (existingType) {
      expectedKind = typeToExtKind(existingType);
    }

    if (expectedKind) {
      if (expectedKind !== node.kind) {
        var kindStr = extensionKindToTypeName(node.kind);
        context.reportError(new _GraphQLError.GraphQLError("Cannot extend non-".concat(kindStr, " type \"").concat(typeName, "\"."), defNode ? [defNode, node] : node));
      }
    } else {
      var allTypeNames = Object.keys(definedTypes);

      if (schema) {
        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));
      }

      var suggestedTypes = (0, _suggestionList.default)(typeName, allTypeNames);
      context.reportError(new _GraphQLError.GraphQLError("Cannot extend type \"".concat(typeName, "\" because it is not defined.") + (0, _didYouMean.default)(suggestedTypes), node.name));
    }
  }
}

var defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, _kinds.Kind.SCALAR_TYPE_DEFINITION, _kinds.Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.OBJECT_TYPE_DEFINITION, _kinds.Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.INTERFACE_TYPE_DEFINITION, _kinds.Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.UNION_TYPE_DEFINITION, _kinds.Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.ENUM_TYPE_DEFINITION, _kinds.Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION, _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);

function typeToExtKind(type) {
  if ((0, _definition.isScalarType)(type)) {
    return _kinds.Kind.SCALAR_TYPE_EXTENSION;
  }

  if ((0, _definition.isObjectType)(type)) {
    return _kinds.Kind.OBJECT_TYPE_EXTENSION;
  }

  if ((0, _definition.isInterfaceType)(type)) {
    return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
  }

  if ((0, _definition.isUnionType)(type)) {
    return _kinds.Kind.UNION_TYPE_EXTENSION;
  }

  if ((0, _definition.isEnumType)(type)) {
    return _kinds.Kind.ENUM_TYPE_EXTENSION;
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isInputObjectType)(type)) {
    return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
  } // istanbul ignore next (Not reachable. All possible types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
}

function extensionKindToTypeName(kind) {
  switch (kind) {
    case _kinds.Kind.SCALAR_TYPE_EXTENSION:
      return 'scalar';

    case _kinds.Kind.OBJECT_TYPE_EXTENSION:
      return 'object';

    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
      return 'interface';

    case _kinds.Kind.UNION_TYPE_EXTENSION:
      return 'union';

    case _kinds.Kind.ENUM_TYPE_EXTENSION:
      return 'enum';

    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return 'input object';
  } // istanbul ignore next (Not reachable. All possible types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected kind: ' + (0, _inspect.default)(kind));
}

},{"../../jsutils/inspect.js":"2onMM","../../jsutils/invariant.js":"6ywmM","../../jsutils/didYouMean.js":"c5AA7","../../jsutils/suggestionList.js":"52DFF","../../error/GraphQLError.js":"cXily","../../language/kinds.js":"6m0P6","../../language/predicates.js":"6u0g4","../../type/definition.js":"n9nw4"}],"6nBGN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;

var _kinds = require("../language/kinds.js");

var _visitor = require("../language/visitor.js");

var _TypeInfo = require("../utilities/TypeInfo.js");

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * An instance of this class is passed as the "this" context to all validators,
 * allowing access to commonly useful contextual information from within a
 * validation rule.
 */
var ASTValidationContext = /*#__PURE__*/function () {
  function ASTValidationContext(ast, onError) {
    this._ast = ast;
    this._fragments = undefined;
    this._fragmentSpreads = new Map();
    this._recursivelyReferencedFragments = new Map();
    this._onError = onError;
  }

  var _proto = ASTValidationContext.prototype;

  _proto.reportError = function reportError(error) {
    this._onError(error);
  };

  _proto.getDocument = function getDocument() {
    return this._ast;
  };

  _proto.getFragment = function getFragment(name) {
    var fragments = this._fragments;

    if (!fragments) {
      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {
        if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
          frags[statement.name.value] = statement;
        }

        return frags;
      }, Object.create(null));
    }

    return fragments[name];
  };

  _proto.getFragmentSpreads = function getFragmentSpreads(node) {
    var spreads = this._fragmentSpreads.get(node);

    if (!spreads) {
      spreads = [];
      var setsToVisit = [node];

      while (setsToVisit.length !== 0) {
        var set = setsToVisit.pop();

        for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {
          var selection = _set$selections2[_i2];

          if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
            spreads.push(selection);
          } else if (selection.selectionSet) {
            setsToVisit.push(selection.selectionSet);
          }
        }
      }

      this._fragmentSpreads.set(node, spreads);
    }

    return spreads;
  };

  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
    var fragments = this._recursivelyReferencedFragments.get(operation);

    if (!fragments) {
      fragments = [];
      var collectedNames = Object.create(null);
      var nodesToVisit = [operation.selectionSet];

      while (nodesToVisit.length !== 0) {
        var node = nodesToVisit.pop();

        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {
          var spread = _this$getFragmentSpre2[_i4];
          var fragName = spread.name.value;

          if (collectedNames[fragName] !== true) {
            collectedNames[fragName] = true;
            var fragment = this.getFragment(fragName);

            if (fragment) {
              fragments.push(fragment);
              nodesToVisit.push(fragment.selectionSet);
            }
          }
        }
      }

      this._recursivelyReferencedFragments.set(operation, fragments);
    }

    return fragments;
  };

  return ASTValidationContext;
}();

exports.ASTValidationContext = ASTValidationContext;

var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {
  _inheritsLoose(SDLValidationContext, _ASTValidationContext);

  function SDLValidationContext(ast, schema, onError) {
    var _this;

    _this = _ASTValidationContext.call(this, ast, onError) || this;
    _this._schema = schema;
    return _this;
  }

  var _proto2 = SDLValidationContext.prototype;

  _proto2.getSchema = function getSchema() {
    return this._schema;
  };

  return SDLValidationContext;
}(ASTValidationContext);

exports.SDLValidationContext = SDLValidationContext;

var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {
  _inheritsLoose(ValidationContext, _ASTValidationContext2);

  function ValidationContext(schema, ast, typeInfo, onError) {
    var _this2;

    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
    _this2._schema = schema;
    _this2._typeInfo = typeInfo;
    _this2._variableUsages = new Map();
    _this2._recursiveVariableUsages = new Map();
    return _this2;
  }

  var _proto3 = ValidationContext.prototype;

  _proto3.getSchema = function getSchema() {
    return this._schema;
  };

  _proto3.getVariableUsages = function getVariableUsages(node) {
    var usages = this._variableUsages.get(node);

    if (!usages) {
      var newUsages = [];
      var typeInfo = new _TypeInfo.TypeInfo(this._schema);
      (0, _visitor.visit)(node, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
        VariableDefinition: function VariableDefinition() {
          return false;
        },
        Variable: function Variable(variable) {
          newUsages.push({
            node: variable,
            type: typeInfo.getInputType(),
            defaultValue: typeInfo.getDefaultValue()
          });
        }
      }));
      usages = newUsages;

      this._variableUsages.set(node, usages);
    }

    return usages;
  };

  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
    var usages = this._recursiveVariableUsages.get(operation);

    if (!usages) {
      usages = this.getVariableUsages(operation);

      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {
        var frag = _this$getRecursivelyR2[_i6];
        usages = usages.concat(this.getVariableUsages(frag));
      }

      this._recursiveVariableUsages.set(operation, usages);
    }

    return usages;
  };

  _proto3.getType = function getType() {
    return this._typeInfo.getType();
  };

  _proto3.getParentType = function getParentType() {
    return this._typeInfo.getParentType();
  };

  _proto3.getInputType = function getInputType() {
    return this._typeInfo.getInputType();
  };

  _proto3.getParentInputType = function getParentInputType() {
    return this._typeInfo.getParentInputType();
  };

  _proto3.getFieldDef = function getFieldDef() {
    return this._typeInfo.getFieldDef();
  };

  _proto3.getDirective = function getDirective() {
    return this._typeInfo.getDirective();
  };

  _proto3.getArgument = function getArgument() {
    return this._typeInfo.getArgument();
  };

  _proto3.getEnumValue = function getEnumValue() {
    return this._typeInfo.getEnumValue();
  };

  return ValidationContext;
}(ASTValidationContext);

exports.ValidationContext = ValidationContext;

},{"../language/kinds.js":"6m0P6","../language/visitor.js":"wwZgf","../utilities/TypeInfo.js":"2mpQy"}],"4vZSk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute = execute;
exports.executeSync = executeSync;
exports.assertValidExecutionArguments = assertValidExecutionArguments;
exports.buildExecutionContext = buildExecutionContext;
exports.collectFields = collectFields;
exports.buildResolveInfo = buildResolveInfo;
exports.getFieldDef = getFieldDef;
exports.defaultFieldResolver = exports.defaultTypeResolver = void 0;

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _memoize = _interopRequireDefault(require("../jsutils/memoize3.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _isPromise = _interopRequireDefault(require("../jsutils/isPromise.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _safeArrayFrom = _interopRequireDefault(require("../jsutils/safeArrayFrom.js"));

var _promiseReduce = _interopRequireDefault(require("../jsutils/promiseReduce.js"));

var _promiseForObject = _interopRequireDefault(require("../jsutils/promiseForObject.js"));

var _Path = require("../jsutils/Path.js");

var _GraphQLError = require("../error/GraphQLError.js");

var _locatedError = require("../error/locatedError.js");

var _kinds = require("../language/kinds.js");

var _validate = require("../type/validate.js");

var _introspection = require("../type/introspection.js");

var _directives = require("../type/directives.js");

var _definition = require("../type/definition.js");

var _typeFromAST = require("../utilities/typeFromAST.js");

var _getOperationRootType = require("../utilities/getOperationRootType.js");

var _values = require("./values.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
  /* eslint-enable no-redeclare */
  // Extract arguments from object args if provided.
  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({
    schema: argsOrSchema,
    document: document,
    rootValue: rootValue,
    contextValue: contextValue,
    variableValues: variableValues,
    operationName: operationName,
    fieldResolver: fieldResolver,
    typeResolver: typeResolver
  });
}
/**
 * Also implements the "Evaluating requests" section of the GraphQL specification.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */


function executeSync(args) {
  var result = executeImpl(args); // Assert that the execution was synchronous.

  if ((0, _isPromise.default)(result)) {
    throw new Error('GraphQL execution failed to complete synchronously.');
  }

  return result;
}

function executeImpl(args) {
  var schema = args.schema,
      document = args.document,
      rootValue = args.rootValue,
      contextValue = args.contextValue,
      variableValues = args.variableValues,
      operationName = args.operationName,
      fieldResolver = args.fieldResolver,
      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.

  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
  // a "Response" with only errors is returned.

  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.

  if (Array.isArray(exeContext)) {
    return {
      errors: exeContext
    };
  } // Return a Promise that will eventually resolve to the data described by
  // The "Response" section of the GraphQL specification.
  //
  // If errors are encountered while executing a GraphQL field, only that
  // field and its descendants will be omitted, and sibling fields will still
  // be executed. An execution which encounters errors will still result in a
  // resolved Promise.


  var data = executeOperation(exeContext, exeContext.operation, rootValue);
  return buildResponse(exeContext, data);
}
/**
 * Given a completed execution context and data, build the { errors, data }
 * response defined by the "Response" section of the GraphQL specification.
 */


function buildResponse(exeContext, data) {
  if ((0, _isPromise.default)(data)) {
    return data.then(function (resolved) {
      return buildResponse(exeContext, resolved);
    });
  }

  return exeContext.errors.length === 0 ? {
    data: data
  } : {
    errors: exeContext.errors,
    data: data
  };
}
/**
 * Essential assertions before executing to provide developer feedback for
 * improper use of the GraphQL library.
 *
 * @internal
 */


function assertValidExecutionArguments(schema, document, rawVariableValues) {
  document || (0, _devAssert.default)(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.

  (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.

  rawVariableValues == null || (0, _isObjectLike.default)(rawVariableValues) || (0, _devAssert.default)(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');
}
/**
 * Constructs a ExecutionContext object from the arguments passed to
 * execute, which we will pass throughout the other execution methods.
 *
 * Throws a GraphQLError if a valid execution context cannot be created.
 *
 * @internal
 */


function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {
  var _definition$name, _operation$variableDe;

  var operation;
  var fragments = Object.create(null);

  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {
    var definition = _document$definitions2[_i2];

    switch (definition.kind) {
      case _kinds.Kind.OPERATION_DEFINITION:
        if (operationName == null) {
          if (operation !== undefined) {
            return [new _GraphQLError.GraphQLError('Must provide operation name if query contains multiple operations.')];
          }

          operation = definition;
        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
          operation = definition;
        }

        break;

      case _kinds.Kind.FRAGMENT_DEFINITION:
        fragments[definition.name.value] = definition;
        break;
    }
  }

  if (!operation) {
    if (operationName != null) {
      return [new _GraphQLError.GraphQLError("Unknown operation named \"".concat(operationName, "\"."))];
    }

    return [new _GraphQLError.GraphQLError('Must provide an operation.')];
  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')


  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
  var coercedVariableValues = (0, _values.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
    maxErrors: 50
  });

  if (coercedVariableValues.errors) {
    return coercedVariableValues.errors;
  }

  return {
    schema: schema,
    fragments: fragments,
    rootValue: rootValue,
    contextValue: contextValue,
    operation: operation,
    variableValues: coercedVariableValues.coerced,
    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
    errors: []
  };
}
/**
 * Implements the "Evaluating operations" section of the spec.
 */


function executeOperation(exeContext, operation, rootValue) {
  var type = (0, _getOperationRootType.getOperationRootType)(exeContext.schema, operation);
  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,
  // at which point we still log the error and null the parent field, which
  // in this case is the entire response.

  try {
    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);

    if ((0, _isPromise.default)(result)) {
      return result.then(undefined, function (error) {
        exeContext.errors.push(error);
        return Promise.resolve(null);
      });
    }

    return result;
  } catch (error) {
    exeContext.errors.push(error);
    return null;
  }
}
/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "write" mode.
 */


function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
  return (0, _promiseReduce.default)(Object.keys(fields), function (results, responseName) {
    var fieldNodes = fields[responseName];
    var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

    if (result === undefined) {
      return results;
    }

    if ((0, _isPromise.default)(result)) {
      return result.then(function (resolvedResult) {
        results[responseName] = resolvedResult;
        return results;
      });
    }

    results[responseName] = result;
    return results;
  }, Object.create(null));
}
/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "read" mode.
 */


function executeFields(exeContext, parentType, sourceValue, path, fields) {
  var results = Object.create(null);
  var containsPromise = false;

  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {
    var responseName = _Object$keys2[_i4];
    var fieldNodes = fields[responseName];
    var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

    if (result !== undefined) {
      results[responseName] = result;

      if ((0, _isPromise.default)(result)) {
        containsPromise = true;
      }
    }
  } // If there are no promises, we can just return the object


  if (!containsPromise) {
    return results;
  } // Otherwise, results is a map from field name to the result of resolving that
  // field, which is possibly a promise. Return a promise that will return this
  // same map, but with any promises replaced with the values they resolved to.


  return (0, _promiseForObject.default)(results);
}
/**
 * Given a selectionSet, adds all of the fields in that selection to
 * the passed in map of fields, and returns it at the end.
 *
 * CollectFields requires the "runtime type" of an object. For a field which
 * returns an Interface or Union type, the "runtime type" will be the actual
 * Object type returned by that field.
 *
 * @internal
 */


function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {
    var selection = _selectionSet$selecti2[_i6];

    switch (selection.kind) {
      case _kinds.Kind.FIELD:
        {
          if (!shouldIncludeNode(exeContext, selection)) {
            continue;
          }

          var name = getFieldEntryKey(selection);

          if (!fields[name]) {
            fields[name] = [];
          }

          fields[name].push(selection);
          break;
        }

      case _kinds.Kind.INLINE_FRAGMENT:
        {
          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
            continue;
          }

          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
          break;
        }

      case _kinds.Kind.FRAGMENT_SPREAD:
        {
          var fragName = selection.name.value;

          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
            continue;
          }

          visitedFragmentNames[fragName] = true;
          var fragment = exeContext.fragments[fragName];

          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
            continue;
          }

          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
          break;
        }
    }
  }

  return fields;
}
/**
 * Determines if a field should be included based on the @include and @skip
 * directives, where @skip has higher precedence than @include.
 */


function shouldIncludeNode(exeContext, node) {
  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);

  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
    return false;
  }

  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);

  if ((include === null || include === void 0 ? void 0 : include.if) === false) {
    return false;
  }

  return true;
}
/**
 * Determines if a fragment is applicable to the given type.
 */


function doesFragmentConditionMatch(exeContext, fragment, type) {
  var typeConditionNode = fragment.typeCondition;

  if (!typeConditionNode) {
    return true;
  }

  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);

  if (conditionalType === type) {
    return true;
  }

  if ((0, _definition.isAbstractType)(conditionalType)) {
    return exeContext.schema.isSubType(conditionalType, type);
  }

  return false;
}
/**
 * Implements the logic to compute the key of a given field's entry
 */


function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}
/**
 * Resolves the field on the given source object. In particular, this
 * figures out the value that the field returns by calling its resolve function,
 * then calls completeValue to complete promises, serialize scalars, or execute
 * the sub-selection-set for objects.
 */


function resolveField(exeContext, parentType, source, fieldNodes, path) {
  var _fieldDef$resolve;

  var fieldNode = fieldNodes[0];
  var fieldName = fieldNode.name.value;
  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);

  if (!fieldDef) {
    return;
  }

  var returnType = fieldDef.type;
  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).

  try {
    // Build a JS object of arguments from the field.arguments AST, using the
    // variables scope to fulfill any variable references.
    // TODO: find a way to memoize, in case this field is within a List type.
    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that
    // is provided to every resolve function within an execution. It is commonly
    // used to represent an authenticated user, or request-specific caches.

    var _contextValue = exeContext.contextValue;
    var result = resolveFn(source, args, _contextValue, info);
    var completed;

    if ((0, _isPromise.default)(result)) {
      completed = result.then(function (resolved) {
        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
      });
    } else {
      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
    }

    if ((0, _isPromise.default)(completed)) {
      // Note: we don't rely on a `catch` method, but we do expect "thenable"
      // to take a second callback for the error case.
      return completed.then(undefined, function (rawError) {
        var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
        return handleFieldError(error, returnType, exeContext);
      });
    }

    return completed;
  } catch (rawError) {
    var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
    return handleFieldError(error, returnType, exeContext);
  }
}
/**
 * @internal
 */


function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
  // The resolve function's optional fourth argument is a collection of
  // information about the current execution state.
  return {
    fieldName: fieldDef.name,
    fieldNodes: fieldNodes,
    returnType: fieldDef.type,
    parentType: parentType,
    path: path,
    schema: exeContext.schema,
    fragments: exeContext.fragments,
    rootValue: exeContext.rootValue,
    operation: exeContext.operation,
    variableValues: exeContext.variableValues
  };
}

function handleFieldError(error, returnType, exeContext) {
  // If the field type is non-nullable, then it is resolved without any
  // protection from errors, however it still properly locates the error.
  if ((0, _definition.isNonNullType)(returnType)) {
    throw error;
  } // Otherwise, error protection is applied, logging the error and resolving
  // a null value for this field if one is encountered.


  exeContext.errors.push(error);
  return null;
}
/**
 * Implements the instructions for completeValue as defined in the
 * "Field entries" section of the spec.
 *
 * If the field type is Non-Null, then this recursively completes the value
 * for the inner type. It throws a field error if that completion returns null,
 * as per the "Nullability" section of the spec.
 *
 * If the field type is a List, then this recursively completes the value
 * for the inner type on each item in the list.
 *
 * If the field type is a Scalar or Enum, ensures the completed value is a legal
 * value of the type by calling the `serialize` method of GraphQL type
 * definition.
 *
 * If the field is an abstract type, determine the runtime type of the value
 * and then complete based on that type
 *
 * Otherwise, the field type expects a sub-selection set, and will complete the
 * value by evaluating all sub-selections.
 */


function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If result is an Error, throw a located error.
  if (result instanceof Error) {
    throw result;
  } // If field type is NonNull, complete for inner type, and throw field error
  // if result is null.


  if ((0, _definition.isNonNullType)(returnType)) {
    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);

    if (completed === null) {
      throw new Error("Cannot return null for non-nullable field ".concat(info.parentType.name, ".").concat(info.fieldName, "."));
    }

    return completed;
  } // If result value is null or undefined then return null.


  if (result == null) {
    return null;
  } // If field type is List, complete each item in the list with the inner type


  if ((0, _definition.isListType)(returnType)) {
    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
  // returning null if serialization is not possible.


  if ((0, _definition.isLeafType)(returnType)) {
    return completeLeafValue(returnType, result);
  } // If field type is an abstract type, Interface or Union, determine the
  // runtime Object type and complete for that type.


  if ((0, _definition.isAbstractType)(returnType)) {
    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
  } // If field type is Object, execute and complete all sub-selections.
  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isObjectType)(returnType)) {
    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
  } // istanbul ignore next (Not reachable. All possible output types have been considered)


  false || (0, _invariant.default)(0, 'Cannot complete value of unexpected output type: ' + (0, _inspect.default)(returnType));
}
/**
 * Complete a list value by completing each item in the list with the
 * inner type
 */


function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
  // This is specified as a simple map, however we're optimizing the path
  // where the list contains no Promises by avoiding creating another Promise.
  var itemType = returnType.ofType;
  var containsPromise = false;
  var completedResults = (0, _safeArrayFrom.default)(result, function (item, index) {
    // No need to modify the info object containing the path,
    // since from here on it is not ever accessed by resolver functions.
    var itemPath = (0, _Path.addPath)(path, index, undefined);

    try {
      var completedItem;

      if ((0, _isPromise.default)(item)) {
        completedItem = item.then(function (resolved) {
          return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);
        });
      } else {
        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
      }

      if ((0, _isPromise.default)(completedItem)) {
        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
        // to take a second callback for the error case.

        return completedItem.then(undefined, function (rawError) {
          var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
          return handleFieldError(error, itemType, exeContext);
        });
      }

      return completedItem;
    } catch (rawError) {
      var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
      return handleFieldError(error, itemType, exeContext);
    }
  });

  if (completedResults == null) {
    throw new _GraphQLError.GraphQLError("Expected Iterable, but did not find one for field \"".concat(info.parentType.name, ".").concat(info.fieldName, "\"."));
  }

  return containsPromise ? Promise.all(completedResults) : completedResults;
}
/**
 * Complete a Scalar or Enum by serializing to a valid value, returning
 * null if serialization is not possible.
 */


function completeLeafValue(returnType, result) {
  var serializedResult = returnType.serialize(result);

  if (serializedResult === undefined) {
    throw new Error("Expected a value of type \"".concat((0, _inspect.default)(returnType), "\" but ") + "received: ".concat((0, _inspect.default)(result)));
  }

  return serializedResult;
}
/**
 * Complete a value of an abstract type by determining the runtime object type
 * of that value, then complete the value for that type.
 */


function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
  var _returnType$resolveTy;

  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
  var contextValue = exeContext.contextValue;
  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);

  if ((0, _isPromise.default)(runtimeType)) {
    return runtimeType.then(function (resolvedRuntimeType) {
      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    });
  }

  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
}

function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
  if (runtimeTypeOrName == null) {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\". Either the \"").concat(returnType.name, "\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function."), fieldNodes);
  } // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0


  var runtimeTypeName = (0, _definition.isNamedType)(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;

  if (typeof runtimeTypeName !== 'string') {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\" with ") + "value ".concat((0, _inspect.default)(result), ", received \"").concat((0, _inspect.default)(runtimeTypeOrName), "\"."));
  }

  var runtimeType = exeContext.schema.getType(runtimeTypeName);

  if (runtimeType == null) {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a type \"").concat(runtimeTypeName, "\" that does not exist inside schema."), fieldNodes);
  }

  if (!(0, _definition.isObjectType)(runtimeType)) {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a non-object type \"").concat(runtimeTypeName, "\"."), fieldNodes);
  }

  if (!exeContext.schema.isSubType(returnType, runtimeType)) {
    throw new _GraphQLError.GraphQLError("Runtime Object type \"".concat(runtimeType.name, "\" is not a possible type for \"").concat(returnType.name, "\"."), fieldNodes);
  }

  return runtimeType;
}
/**
 * Complete an Object value by executing all sub-selections.
 */


function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If there is an isTypeOf predicate function, call it with the
  // current result. If isTypeOf returns false, then raise an error rather
  // than continuing execution.
  if (returnType.isTypeOf) {
    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

    if ((0, _isPromise.default)(isTypeOf)) {
      return isTypeOf.then(function (resolvedIsTypeOf) {
        if (!resolvedIsTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }

        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
      });
    }

    if (!isTypeOf) {
      throw invalidReturnTypeError(returnType, result, fieldNodes);
    }
  }

  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
}

function invalidReturnTypeError(returnType, result, fieldNodes) {
  return new _GraphQLError.GraphQLError("Expected value of type \"".concat(returnType.name, "\" but got: ").concat((0, _inspect.default)(result), "."), fieldNodes);
}

function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {
  // Collect sub-fields to execute to complete this value.
  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
  return executeFields(exeContext, returnType, result, path, subFieldNodes);
}
/**
 * A memoized collection of relevant subfields with regard to the return
 * type. Memoizing ensures the subfields are not repeatedly calculated, which
 * saves overhead when resolving lists of values.
 */


var collectSubfields = (0, _memoize.default)(_collectSubfields);

function _collectSubfields(exeContext, returnType, fieldNodes) {
  var subFieldNodes = Object.create(null);
  var visitedFragmentNames = Object.create(null);

  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {
    var node = fieldNodes[_i8];

    if (node.selectionSet) {
      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }

  return subFieldNodes;
}
/**
 * If a resolveType function is not given, then a default resolve behavior is
 * used which attempts two strategies:
 *
 * First, See if the provided value has a `__typename` field defined, if so, use
 * that value as name of the resolved type.
 *
 * Otherwise, test each possible type for the abstract type by calling
 * isTypeOf for the object being coerced, returning the first type that matches.
 */


var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {
  // First, look for `__typename`.
  if ((0, _isObjectLike.default)(value) && typeof value.__typename === 'string') {
    return value.__typename;
  } // Otherwise, test each possible type.


  var possibleTypes = info.schema.getPossibleTypes(abstractType);
  var promisedIsTypeOfResults = [];

  for (var i = 0; i < possibleTypes.length; i++) {
    var type = possibleTypes[i];

    if (type.isTypeOf) {
      var isTypeOfResult = type.isTypeOf(value, contextValue, info);

      if ((0, _isPromise.default)(isTypeOfResult)) {
        promisedIsTypeOfResults[i] = isTypeOfResult;
      } else if (isTypeOfResult) {
        return type.name;
      }
    }
  }

  if (promisedIsTypeOfResults.length) {
    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {
      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {
        if (isTypeOfResults[_i9]) {
          return possibleTypes[_i9].name;
        }
      }
    });
  }
};
/**
 * If a resolve function is not given, then a default resolve behavior is used
 * which takes the property of the source object of the same name as the field
 * and returns it as the result, or if it's a function, returns the result
 * of calling that function while passing along args and context value.
 */


exports.defaultTypeResolver = defaultTypeResolver;

var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {
  // ensure source is a value for which property access is acceptable.
  if ((0, _isObjectLike.default)(source) || typeof source === 'function') {
    var property = source[info.fieldName];

    if (typeof property === 'function') {
      return source[info.fieldName](args, contextValue, info);
    }

    return property;
  }
};
/**
 * This method looks up the field on the given type definition.
 * It has special casing for the three introspection fields,
 * __schema, __type and __typename. __typename is special because
 * it can always be queried as a field, even in situations where no
 * other fields are allowed, like on a Union. __schema and __type
 * could get automatically added to the query type, but that would
 * require mutating type definitions, which would cause issues.
 *
 * @internal
 */


exports.defaultFieldResolver = defaultFieldResolver;

function getFieldDef(schema, parentType, fieldName) {
  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.SchemaMetaFieldDef;
  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.TypeMetaFieldDef;
  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
    return _introspection.TypeNameMetaFieldDef;
  }

  return parentType.getFields()[fieldName];
}

},{"../jsutils/inspect.js":"2onMM","../jsutils/memoize3.js":"zMoxI","../jsutils/invariant.js":"6ywmM","../jsutils/devAssert.js":"1F99Z","../jsutils/isPromise.js":"7eMka","../jsutils/isObjectLike.js":"526rJ","../jsutils/safeArrayFrom.js":"Ef8RM","../jsutils/promiseReduce.js":"43Wcp","../jsutils/promiseForObject.js":"SmJ0i","../jsutils/Path.js":"5Ik2w","../error/GraphQLError.js":"cXily","../error/locatedError.js":"6njJq","../language/kinds.js":"6m0P6","../type/validate.js":"4v4RB","../type/introspection.js":"5yLF0","../type/directives.js":"2w91d","../type/definition.js":"n9nw4","../utilities/typeFromAST.js":"468O3","../utilities/getOperationRootType.js":"4uxet","./values.js":"2MWR0"}],"zMoxI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = memoize3;

/**
 * Memoizes the provided three-argument function.
 */
function memoize3(fn) {
  var cache0;
  return function memoized(a1, a2, a3) {
    if (!cache0) {
      cache0 = new WeakMap();
    }

    var cache1 = cache0.get(a1);
    var cache2;

    if (cache1) {
      cache2 = cache1.get(a2);

      if (cache2) {
        var cachedValue = cache2.get(a3);

        if (cachedValue !== undefined) {
          return cachedValue;
        }
      }
    } else {
      cache1 = new WeakMap();
      cache0.set(a1, cache1);
    }

    if (!cache2) {
      cache2 = new WeakMap();
      cache1.set(a2, cache2);
    }

    var newValue = fn(a1, a2, a3);
    cache2.set(a3, newValue);
    return newValue;
  };
}

},{}],"43Wcp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promiseReduce;

var _isPromise = _interopRequireDefault(require("./isPromise.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Similar to Array.prototype.reduce(), however the reducing callback may return
 * a Promise, in which case reduction will continue after each promise resolves.
 *
 * If the callback does not return a Promise, then this function will also not
 * return a Promise.
 */
function promiseReduce(values, callback, initialValue) {
  return values.reduce(function (previous, value) {
    return (0, _isPromise.default)(previous) ? previous.then(function (resolved) {
      return callback(resolved, value);
    }) : callback(previous, value);
  }, initialValue);
}

},{"./isPromise.js":"7eMka"}],"SmJ0i":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promiseForObject;

/**
 * This function transforms a JS object `ObjMap<Promise<T>>` into
 * a `Promise<ObjMap<T>>`
 *
 * This is akin to bluebird's `Promise.props`, but implemented only using
 * `Promise.all` so it will work with any implementation of ES6 promises.
 */
function promiseForObject(object) {
  var keys = Object.keys(object);
  var valuesAndPromises = keys.map(function (name) {
    return object[name];
  });
  return Promise.all(valuesAndPromises).then(function (values) {
    return values.reduce(function (resolvedObject, value, i) {
      resolvedObject[keys[i]] = value;
      return resolvedObject;
    }, Object.create(null));
  });
}

},{}],"5Ik2w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPath = addPath;
exports.pathToArray = pathToArray;

/**
 * Given a Path and a key, return a new Path containing the new key.
 */
function addPath(prev, key, typename) {
  return {
    prev: prev,
    key: key,
    typename: typename
  };
}
/**
 * Given a Path, return an Array of the path keys.
 */


function pathToArray(path) {
  var flattened = [];
  var curr = path;

  while (curr) {
    flattened.push(curr.key);
    curr = curr.prev;
  }

  return flattened.reverse();
}

},{}],"4uxet":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperationRootType = getOperationRootType;

var _GraphQLError = require("../error/GraphQLError.js");

/**
 * Extracts the root type of the operation from the schema.
 */
function getOperationRootType(schema, operation) {
  if (operation.operation === 'query') {
    var queryType = schema.getQueryType();

    if (!queryType) {
      throw new _GraphQLError.GraphQLError('Schema does not define the required query root type.', operation);
    }

    return queryType;
  }

  if (operation.operation === 'mutation') {
    var mutationType = schema.getMutationType();

    if (!mutationType) {
      throw new _GraphQLError.GraphQLError('Schema is not configured for mutations.', operation);
    }

    return mutationType;
  }

  if (operation.operation === 'subscription') {
    var subscriptionType = schema.getSubscriptionType();

    if (!subscriptionType) {
      throw new _GraphQLError.GraphQLError('Schema is not configured for subscriptions.', operation);
    }

    return subscriptionType;
  }

  throw new _GraphQLError.GraphQLError('Can only have query, mutation and subscription operations.', operation);
}

},{"../error/GraphQLError.js":"cXily"}],"2MWR0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVariableValues = getVariableValues;
exports.getArgumentValues = getArgumentValues;
exports.getDirectiveValues = getDirectiveValues;

var _find = _interopRequireDefault(require("../polyfills/find.js"));

var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _printPathArray = _interopRequireDefault(require("../jsutils/printPathArray.js"));

var _GraphQLError = require("../error/GraphQLError.js");

var _kinds = require("../language/kinds.js");

var _printer = require("../language/printer.js");

var _definition = require("../type/definition.js");

var _typeFromAST = require("../utilities/typeFromAST.js");

var _valueFromAST = require("../utilities/valueFromAST.js");

var _coerceInputValue = require("../utilities/coerceInputValue.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Prepares an object map of variableValues of the correct type based on the
 * provided variable definitions and arbitrary input. If the input cannot be
 * parsed to match the variable definitions, a GraphQLError will be thrown.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 *
 * @internal
 */
function getVariableValues(schema, varDefNodes, inputs, options) {
  var errors = [];
  var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;

  try {
    var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {
      if (maxErrors != null && errors.length >= maxErrors) {
        throw new _GraphQLError.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');
      }

      errors.push(error);
    });

    if (errors.length === 0) {
      return {
        coerced: coerced
      };
    }
  } catch (error) {
    errors.push(error);
  }

  return {
    errors: errors
  };
}

function coerceVariableValues(schema, varDefNodes, inputs, onError) {
  var coercedValues = {};

  var _loop = function _loop(_i2) {
    var varDefNode = varDefNodes[_i2];
    var varName = varDefNode.variable.name.value;
    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);

    if (!(0, _definition.isInputType)(varType)) {
      // Must use input types for variables. This should be caught during
      // validation, however is checked again here for safety.
      var varTypeStr = (0, _printer.print)(varDefNode.type);
      onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" expected value of type \"").concat(varTypeStr, "\" which cannot be used as an input type."), varDefNode.type));
      return "continue";
    }

    if (!hasOwnProperty(inputs, varName)) {
      if (varDefNode.defaultValue) {
        coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
      } else if ((0, _definition.isNonNullType)(varType)) {
        var _varTypeStr = (0, _inspect.default)(varType);

        onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of required type \"").concat(_varTypeStr, "\" was not provided."), varDefNode));
      }

      return "continue";
    }

    var value = inputs[varName];

    if (value === null && (0, _definition.isNonNullType)(varType)) {
      var _varTypeStr2 = (0, _inspect.default)(varType);

      onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of non-null type \"").concat(_varTypeStr2, "\" must not be null."), varDefNode));
      return "continue";
    }

    coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, function (path, invalidValue, error) {
      var prefix = "Variable \"$".concat(varName, "\" got invalid value ") + (0, _inspect.default)(invalidValue);

      if (path.length > 0) {
        prefix += " at \"".concat(varName).concat((0, _printPathArray.default)(path), "\"");
      }

      onError(new _GraphQLError.GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));
    });
  };

  for (var _i2 = 0; _i2 < varDefNodes.length; _i2++) {
    var _ret = _loop(_i2);

    if (_ret === "continue") continue;
  }

  return coercedValues;
}
/**
 * Prepares an object map of argument values given a list of argument
 * definitions and list of argument AST nodes.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 *
 * @internal
 */


function getArgumentValues(def, node, variableValues) {
  var _node$arguments;

  var coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')

  var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
  var argNodeMap = (0, _keyMap.default)(argumentNodes, function (arg) {
    return arg.name.value;
  });

  for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {
    var argDef = _def$args2[_i4];
    var name = argDef.name;
    var argType = argDef.type;
    var argumentNode = argNodeMap[name];

    if (!argumentNode) {
      if (argDef.defaultValue !== undefined) {
        coercedValues[name] = argDef.defaultValue;
      } else if ((0, _definition.isNonNullType)(argType)) {
        throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect.default)(argType), "\" ") + 'was not provided.', node);
      }

      continue;
    }

    var valueNode = argumentNode.value;
    var isNull = valueNode.kind === _kinds.Kind.NULL;

    if (valueNode.kind === _kinds.Kind.VARIABLE) {
      var variableName = valueNode.name.value;

      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
        if (argDef.defaultValue !== undefined) {
          coercedValues[name] = argDef.defaultValue;
        } else if ((0, _definition.isNonNullType)(argType)) {
          throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect.default)(argType), "\" ") + "was provided the variable \"$".concat(variableName, "\" which was not provided a runtime value."), valueNode);
        }

        continue;
      }

      isNull = variableValues[variableName] == null;
    }

    if (isNull && (0, _definition.isNonNullType)(argType)) {
      throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of non-null type \"").concat((0, _inspect.default)(argType), "\" ") + 'must not be null.', valueNode);
    }

    var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);

    if (coercedValue === undefined) {
      // Note: ValuesOfCorrectTypeRule validation should catch this before
      // execution. This is a runtime check to ensure execution does not
      // continue with an invalid argument value.
      throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" has invalid value ").concat((0, _printer.print)(valueNode), "."), valueNode);
    }

    coercedValues[name] = coercedValue;
  }

  return coercedValues;
}
/**
 * Prepares an object map of argument values given a directive definition
 * and a AST node which may contain directives. Optionally also accepts a map
 * of variable values.
 *
 * If the directive does not exist on the node, returns undefined.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */


function getDirectiveValues(directiveDef, node, variableValues) {
  var directiveNode = node.directives && (0, _find.default)(node.directives, function (directive) {
    return directive.name.value === directiveDef.name;
  });

  if (directiveNode) {
    return getArgumentValues(directiveDef, directiveNode, variableValues);
  }
}

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"../polyfills/find.js":"5w3fy","../jsutils/keyMap.js":"1oNDS","../jsutils/inspect.js":"2onMM","../jsutils/printPathArray.js":"gPybq","../error/GraphQLError.js":"cXily","../language/kinds.js":"6m0P6","../language/printer.js":"1UYdT","../type/definition.js":"n9nw4","../utilities/typeFromAST.js":"468O3","../utilities/valueFromAST.js":"1YgnG","../utilities/coerceInputValue.js":"5L3c7"}],"gPybq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = printPathArray;

/**
 * Build a string describing the path.
 */
function printPathArray(path) {
  return path.map(function (key) {
    return typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key;
  }).join('');
}

},{}],"1YgnG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueFromAST = valueFromAST;

var _objectValues3 = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _kinds = require("../language/kinds.js");

var _definition = require("../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * GraphQL Value literals.
 *
 * Returns `undefined` when the value could not be validly coerced according to
 * the provided type.
 *
 * | GraphQL Value        | JSON Value    |
 * | -------------------- | ------------- |
 * | Input Object         | Object        |
 * | List                 | Array         |
 * | Boolean              | Boolean       |
 * | String               | String        |
 * | Int / Float          | Number        |
 * | Enum Value           | Mixed         |
 * | NullValue            | null          |
 *
 */
function valueFromAST(valueNode, type, variables) {
  if (!valueNode) {
    // When there is no node, then there is also no value.
    // Importantly, this is different from returning the value null.
    return;
  }

  if (valueNode.kind === _kinds.Kind.VARIABLE) {
    var variableName = valueNode.name.value;

    if (variables == null || variables[variableName] === undefined) {
      // No valid return value.
      return;
    }

    var variableValue = variables[variableName];

    if (variableValue === null && (0, _definition.isNonNullType)(type)) {
      return; // Invalid: intentionally return no value.
    } // Note: This does no further checking that this variable is correct.
    // This assumes that this query has been validated and the variable
    // usage here is of the correct type.


    return variableValue;
  }

  if ((0, _definition.isNonNullType)(type)) {
    if (valueNode.kind === _kinds.Kind.NULL) {
      return; // Invalid: intentionally return no value.
    }

    return valueFromAST(valueNode, type.ofType, variables);
  }

  if (valueNode.kind === _kinds.Kind.NULL) {
    // This is explicitly returning the value null.
    return null;
  }

  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;

    if (valueNode.kind === _kinds.Kind.LIST) {
      var coercedValues = [];

      for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {
        var itemNode = _valueNode$values2[_i2];

        if (isMissingVariable(itemNode, variables)) {
          // If an array contains a missing variable, it is either coerced to
          // null or if the item type is non-null, it considered invalid.
          if ((0, _definition.isNonNullType)(itemType)) {
            return; // Invalid: intentionally return no value.
          }

          coercedValues.push(null);
        } else {
          var itemValue = valueFromAST(itemNode, itemType, variables);

          if (itemValue === undefined) {
            return; // Invalid: intentionally return no value.
          }

          coercedValues.push(itemValue);
        }
      }

      return coercedValues;
    }

    var coercedValue = valueFromAST(valueNode, itemType, variables);

    if (coercedValue === undefined) {
      return; // Invalid: intentionally return no value.
    }

    return [coercedValue];
  }

  if ((0, _definition.isInputObjectType)(type)) {
    if (valueNode.kind !== _kinds.Kind.OBJECT) {
      return; // Invalid: intentionally return no value.
    }

    var coercedObj = Object.create(null);
    var fieldNodes = (0, _keyMap.default)(valueNode.fields, function (field) {
      return field.name.value;
    });

    for (var _i4 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++) {
      var field = _objectValues2[_i4];
      var fieldNode = fieldNodes[field.name];

      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
        if (field.defaultValue !== undefined) {
          coercedObj[field.name] = field.defaultValue;
        } else if ((0, _definition.isNonNullType)(field.type)) {
          return; // Invalid: intentionally return no value.
        }

        continue;
      }

      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);

      if (fieldValue === undefined) {
        return; // Invalid: intentionally return no value.
      }

      coercedObj[field.name] = fieldValue;
    }

    return coercedObj;
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isLeafType)(type)) {
    // Scalars and Enums fulfill parsing a literal value via parseLiteral().
    // Invalid values represent a failure to parse correctly, in which case
    // no value is returned.
    var result;

    try {
      result = type.parseLiteral(valueNode, variables);
    } catch (_error) {
      return; // Invalid: intentionally return no value.
    }

    if (result === undefined) {
      return; // Invalid: intentionally return no value.
    }

    return result;
  } // istanbul ignore next (Not reachable. All possible input types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
} // Returns true if the provided valueNode is a variable which is not defined
// in the set of variables.


function isMissingVariable(valueNode, variables) {
  return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/keyMap.js":"1oNDS","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../language/kinds.js":"6m0P6","../type/definition.js":"n9nw4"}],"5L3c7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coerceInputValue = coerceInputValue;

var _objectValues3 = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _didYouMean = _interopRequireDefault(require("../jsutils/didYouMean.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _safeArrayFrom = _interopRequireDefault(require("../jsutils/safeArrayFrom.js"));

var _suggestionList = _interopRequireDefault(require("../jsutils/suggestionList.js"));

var _printPathArray = _interopRequireDefault(require("../jsutils/printPathArray.js"));

var _Path = require("../jsutils/Path.js");

var _GraphQLError = require("../error/GraphQLError.js");

var _definition = require("../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Coerces a JavaScript value given a GraphQL Input Type.
 */
function coerceInputValue(inputValue, type) {
  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
  return coerceInputValueImpl(inputValue, type, onError);
}

function defaultOnError(path, invalidValue, error) {
  var errorPrefix = 'Invalid value ' + (0, _inspect.default)(invalidValue);

  if (path.length > 0) {
    errorPrefix += " at \"value".concat((0, _printPathArray.default)(path), "\"");
  }

  error.message = errorPrefix + ': ' + error.message;
  throw error;
}

function coerceInputValueImpl(inputValue, type, onError, path) {
  if ((0, _definition.isNonNullType)(type)) {
    if (inputValue != null) {
      return coerceInputValueImpl(inputValue, type.ofType, onError, path);
    }

    onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected non-nullable type \"".concat((0, _inspect.default)(type), "\" not to be null.")));
    return;
  }

  if (inputValue == null) {
    // Explicitly return the value null.
    return null;
  }

  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    var coercedList = (0, _safeArrayFrom.default)(inputValue, function (itemValue, index) {
      var itemPath = (0, _Path.addPath)(path, index, undefined);
      return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
    });

    if (coercedList != null) {
      return coercedList;
    } // Lists accept a non-list value as a list of one.


    return [coerceInputValueImpl(inputValue, itemType, onError, path)];
  }

  if ((0, _definition.isInputObjectType)(type)) {
    if (!(0, _isObjectLike.default)(inputValue)) {
      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\" to be an object.")));
      return;
    }

    var coercedValue = {};
    var fieldDefs = type.getFields();

    for (var _i2 = 0, _objectValues2 = (0, _objectValues3.default)(fieldDefs); _i2 < _objectValues2.length; _i2++) {
      var field = _objectValues2[_i2];
      var fieldValue = inputValue[field.name];

      if (fieldValue === undefined) {
        if (field.defaultValue !== undefined) {
          coercedValue[field.name] = field.defaultValue;
        } else if ((0, _definition.isNonNullType)(field.type)) {
          var typeStr = (0, _inspect.default)(field.type);
          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
        }

        continue;
      }

      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));
    } // Ensure every provided field is defined.


    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {
      var fieldName = _Object$keys2[_i4];

      if (!fieldDefs[fieldName]) {
        var suggestions = (0, _suggestionList.default)(fieldName, Object.keys(type.getFields()));
        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + (0, _didYouMean.default)(suggestions)));
      }
    }

    return coercedValue;
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isLeafType)(type)) {
    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
    // which can throw to indicate failure. If it throws, maintain a reference
    // to the original error.

    try {
      parseResult = type.parseValue(inputValue);
    } catch (error) {
      if (error instanceof _GraphQLError.GraphQLError) {
        onError((0, _Path.pathToArray)(path), inputValue, error);
      } else {
        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\". ") + error.message, undefined, undefined, undefined, undefined, error));
      }

      return;
    }

    if (parseResult === undefined) {
      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\".")));
    }

    return parseResult;
  } // istanbul ignore next (Not reachable. All possible input types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../jsutils/didYouMean.js":"c5AA7","../jsutils/isObjectLike.js":"526rJ","../jsutils/safeArrayFrom.js":"Ef8RM","../jsutils/suggestionList.js":"52DFF","../jsutils/printPathArray.js":"gPybq","../jsutils/Path.js":"5Ik2w","../error/GraphQLError.js":"cXily","../type/definition.js":"n9nw4"}],"2E3LF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "isSchema", {
  enumerable: true,
  get: function get() {
    return _schema.isSchema;
  }
});
Object.defineProperty(exports, "assertSchema", {
  enumerable: true,
  get: function get() {
    return _schema.assertSchema;
  }
});
Object.defineProperty(exports, "GraphQLSchema", {
  enumerable: true,
  get: function get() {
    return _schema.GraphQLSchema;
  }
});
Object.defineProperty(exports, "isType", {
  enumerable: true,
  get: function get() {
    return _definition.isType;
  }
});
Object.defineProperty(exports, "isScalarType", {
  enumerable: true,
  get: function get() {
    return _definition.isScalarType;
  }
});
Object.defineProperty(exports, "isObjectType", {
  enumerable: true,
  get: function get() {
    return _definition.isObjectType;
  }
});
Object.defineProperty(exports, "isInterfaceType", {
  enumerable: true,
  get: function get() {
    return _definition.isInterfaceType;
  }
});
Object.defineProperty(exports, "isUnionType", {
  enumerable: true,
  get: function get() {
    return _definition.isUnionType;
  }
});
Object.defineProperty(exports, "isEnumType", {
  enumerable: true,
  get: function get() {
    return _definition.isEnumType;
  }
});
Object.defineProperty(exports, "isInputObjectType", {
  enumerable: true,
  get: function get() {
    return _definition.isInputObjectType;
  }
});
Object.defineProperty(exports, "isListType", {
  enumerable: true,
  get: function get() {
    return _definition.isListType;
  }
});
Object.defineProperty(exports, "isNonNullType", {
  enumerable: true,
  get: function get() {
    return _definition.isNonNullType;
  }
});
Object.defineProperty(exports, "isInputType", {
  enumerable: true,
  get: function get() {
    return _definition.isInputType;
  }
});
Object.defineProperty(exports, "isOutputType", {
  enumerable: true,
  get: function get() {
    return _definition.isOutputType;
  }
});
Object.defineProperty(exports, "isLeafType", {
  enumerable: true,
  get: function get() {
    return _definition.isLeafType;
  }
});
Object.defineProperty(exports, "isCompositeType", {
  enumerable: true,
  get: function get() {
    return _definition.isCompositeType;
  }
});
Object.defineProperty(exports, "isAbstractType", {
  enumerable: true,
  get: function get() {
    return _definition.isAbstractType;
  }
});
Object.defineProperty(exports, "isWrappingType", {
  enumerable: true,
  get: function get() {
    return _definition.isWrappingType;
  }
});
Object.defineProperty(exports, "isNullableType", {
  enumerable: true,
  get: function get() {
    return _definition.isNullableType;
  }
});
Object.defineProperty(exports, "isNamedType", {
  enumerable: true,
  get: function get() {
    return _definition.isNamedType;
  }
});
Object.defineProperty(exports, "isRequiredArgument", {
  enumerable: true,
  get: function get() {
    return _definition.isRequiredArgument;
  }
});
Object.defineProperty(exports, "isRequiredInputField", {
  enumerable: true,
  get: function get() {
    return _definition.isRequiredInputField;
  }
});
Object.defineProperty(exports, "assertType", {
  enumerable: true,
  get: function get() {
    return _definition.assertType;
  }
});
Object.defineProperty(exports, "assertScalarType", {
  enumerable: true,
  get: function get() {
    return _definition.assertScalarType;
  }
});
Object.defineProperty(exports, "assertObjectType", {
  enumerable: true,
  get: function get() {
    return _definition.assertObjectType;
  }
});
Object.defineProperty(exports, "assertInterfaceType", {
  enumerable: true,
  get: function get() {
    return _definition.assertInterfaceType;
  }
});
Object.defineProperty(exports, "assertUnionType", {
  enumerable: true,
  get: function get() {
    return _definition.assertUnionType;
  }
});
Object.defineProperty(exports, "assertEnumType", {
  enumerable: true,
  get: function get() {
    return _definition.assertEnumType;
  }
});
Object.defineProperty(exports, "assertInputObjectType", {
  enumerable: true,
  get: function get() {
    return _definition.assertInputObjectType;
  }
});
Object.defineProperty(exports, "assertListType", {
  enumerable: true,
  get: function get() {
    return _definition.assertListType;
  }
});
Object.defineProperty(exports, "assertNonNullType", {
  enumerable: true,
  get: function get() {
    return _definition.assertNonNullType;
  }
});
Object.defineProperty(exports, "assertInputType", {
  enumerable: true,
  get: function get() {
    return _definition.assertInputType;
  }
});
Object.defineProperty(exports, "assertOutputType", {
  enumerable: true,
  get: function get() {
    return _definition.assertOutputType;
  }
});
Object.defineProperty(exports, "assertLeafType", {
  enumerable: true,
  get: function get() {
    return _definition.assertLeafType;
  }
});
Object.defineProperty(exports, "assertCompositeType", {
  enumerable: true,
  get: function get() {
    return _definition.assertCompositeType;
  }
});
Object.defineProperty(exports, "assertAbstractType", {
  enumerable: true,
  get: function get() {
    return _definition.assertAbstractType;
  }
});
Object.defineProperty(exports, "assertWrappingType", {
  enumerable: true,
  get: function get() {
    return _definition.assertWrappingType;
  }
});
Object.defineProperty(exports, "assertNullableType", {
  enumerable: true,
  get: function get() {
    return _definition.assertNullableType;
  }
});
Object.defineProperty(exports, "assertNamedType", {
  enumerable: true,
  get: function get() {
    return _definition.assertNamedType;
  }
});
Object.defineProperty(exports, "getNullableType", {
  enumerable: true,
  get: function get() {
    return _definition.getNullableType;
  }
});
Object.defineProperty(exports, "getNamedType", {
  enumerable: true,
  get: function get() {
    return _definition.getNamedType;
  }
});
Object.defineProperty(exports, "GraphQLScalarType", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLScalarType;
  }
});
Object.defineProperty(exports, "GraphQLObjectType", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLObjectType;
  }
});
Object.defineProperty(exports, "GraphQLInterfaceType", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLInterfaceType;
  }
});
Object.defineProperty(exports, "GraphQLUnionType", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLUnionType;
  }
});
Object.defineProperty(exports, "GraphQLEnumType", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLEnumType;
  }
});
Object.defineProperty(exports, "GraphQLInputObjectType", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLInputObjectType;
  }
});
Object.defineProperty(exports, "GraphQLList", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLList;
  }
});
Object.defineProperty(exports, "GraphQLNonNull", {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLNonNull;
  }
});
Object.defineProperty(exports, "isDirective", {
  enumerable: true,
  get: function get() {
    return _directives.isDirective;
  }
});
Object.defineProperty(exports, "assertDirective", {
  enumerable: true,
  get: function get() {
    return _directives.assertDirective;
  }
});
Object.defineProperty(exports, "GraphQLDirective", {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLDirective;
  }
});
Object.defineProperty(exports, "isSpecifiedDirective", {
  enumerable: true,
  get: function get() {
    return _directives.isSpecifiedDirective;
  }
});
Object.defineProperty(exports, "specifiedDirectives", {
  enumerable: true,
  get: function get() {
    return _directives.specifiedDirectives;
  }
});
Object.defineProperty(exports, "GraphQLIncludeDirective", {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLIncludeDirective;
  }
});
Object.defineProperty(exports, "GraphQLSkipDirective", {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLSkipDirective;
  }
});
Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLDeprecatedDirective;
  }
});
Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLSpecifiedByDirective;
  }
});
Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
  enumerable: true,
  get: function get() {
    return _directives.DEFAULT_DEPRECATION_REASON;
  }
});
Object.defineProperty(exports, "isSpecifiedScalarType", {
  enumerable: true,
  get: function get() {
    return _scalars.isSpecifiedScalarType;
  }
});
Object.defineProperty(exports, "specifiedScalarTypes", {
  enumerable: true,
  get: function get() {
    return _scalars.specifiedScalarTypes;
  }
});
Object.defineProperty(exports, "GraphQLInt", {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLInt;
  }
});
Object.defineProperty(exports, "GraphQLFloat", {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLFloat;
  }
});
Object.defineProperty(exports, "GraphQLString", {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLString;
  }
});
Object.defineProperty(exports, "GraphQLBoolean", {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLBoolean;
  }
});
Object.defineProperty(exports, "GraphQLID", {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLID;
  }
});
Object.defineProperty(exports, "isIntrospectionType", {
  enumerable: true,
  get: function get() {
    return _introspection.isIntrospectionType;
  }
});
Object.defineProperty(exports, "introspectionTypes", {
  enumerable: true,
  get: function get() {
    return _introspection.introspectionTypes;
  }
});
Object.defineProperty(exports, "__Schema", {
  enumerable: true,
  get: function get() {
    return _introspection.__Schema;
  }
});
Object.defineProperty(exports, "__Directive", {
  enumerable: true,
  get: function get() {
    return _introspection.__Directive;
  }
});
Object.defineProperty(exports, "__DirectiveLocation", {
  enumerable: true,
  get: function get() {
    return _introspection.__DirectiveLocation;
  }
});
Object.defineProperty(exports, "__Type", {
  enumerable: true,
  get: function get() {
    return _introspection.__Type;
  }
});
Object.defineProperty(exports, "__Field", {
  enumerable: true,
  get: function get() {
    return _introspection.__Field;
  }
});
Object.defineProperty(exports, "__InputValue", {
  enumerable: true,
  get: function get() {
    return _introspection.__InputValue;
  }
});
Object.defineProperty(exports, "__EnumValue", {
  enumerable: true,
  get: function get() {
    return _introspection.__EnumValue;
  }
});
Object.defineProperty(exports, "__TypeKind", {
  enumerable: true,
  get: function get() {
    return _introspection.__TypeKind;
  }
});
Object.defineProperty(exports, "TypeKind", {
  enumerable: true,
  get: function get() {
    return _introspection.TypeKind;
  }
});
Object.defineProperty(exports, "SchemaMetaFieldDef", {
  enumerable: true,
  get: function get() {
    return _introspection.SchemaMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeMetaFieldDef", {
  enumerable: true,
  get: function get() {
    return _introspection.TypeMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeNameMetaFieldDef", {
  enumerable: true,
  get: function get() {
    return _introspection.TypeNameMetaFieldDef;
  }
});
Object.defineProperty(exports, "validateSchema", {
  enumerable: true,
  get: function get() {
    return _validate.validateSchema;
  }
});
Object.defineProperty(exports, "assertValidSchema", {
  enumerable: true,
  get: function get() {
    return _validate.assertValidSchema;
  }
});

var _schema = require("./schema.js");

var _definition = require("./definition.js");

var _directives = require("./directives.js");

var _scalars = require("./scalars.js");

var _introspection = require("./introspection.js");

var _validate = require("./validate.js");

},{"./schema.js":"5cHio","./definition.js":"n9nw4","./directives.js":"2w91d","./scalars.js":"7mSzF","./introspection.js":"5yLF0","./validate.js":"4v4RB"}],"2yf4q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Source", {
  enumerable: true,
  get: function get() {
    return _source.Source;
  }
});
Object.defineProperty(exports, "getLocation", {
  enumerable: true,
  get: function get() {
    return _location.getLocation;
  }
});
Object.defineProperty(exports, "printLocation", {
  enumerable: true,
  get: function get() {
    return _printLocation.printLocation;
  }
});
Object.defineProperty(exports, "printSourceLocation", {
  enumerable: true,
  get: function get() {
    return _printLocation.printSourceLocation;
  }
});
Object.defineProperty(exports, "Kind", {
  enumerable: true,
  get: function get() {
    return _kinds.Kind;
  }
});
Object.defineProperty(exports, "TokenKind", {
  enumerable: true,
  get: function get() {
    return _tokenKind.TokenKind;
  }
});
Object.defineProperty(exports, "Lexer", {
  enumerable: true,
  get: function get() {
    return _lexer.Lexer;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function get() {
    return _parser.parse;
  }
});
Object.defineProperty(exports, "parseValue", {
  enumerable: true,
  get: function get() {
    return _parser.parseValue;
  }
});
Object.defineProperty(exports, "parseType", {
  enumerable: true,
  get: function get() {
    return _parser.parseType;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function get() {
    return _printer.print;
  }
});
Object.defineProperty(exports, "visit", {
  enumerable: true,
  get: function get() {
    return _visitor.visit;
  }
});
Object.defineProperty(exports, "visitInParallel", {
  enumerable: true,
  get: function get() {
    return _visitor.visitInParallel;
  }
});
Object.defineProperty(exports, "getVisitFn", {
  enumerable: true,
  get: function get() {
    return _visitor.getVisitFn;
  }
});
Object.defineProperty(exports, "BREAK", {
  enumerable: true,
  get: function get() {
    return _visitor.BREAK;
  }
});
Object.defineProperty(exports, "Location", {
  enumerable: true,
  get: function get() {
    return _ast.Location;
  }
});
Object.defineProperty(exports, "Token", {
  enumerable: true,
  get: function get() {
    return _ast.Token;
  }
});
Object.defineProperty(exports, "isDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isDefinitionNode;
  }
});
Object.defineProperty(exports, "isExecutableDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isExecutableDefinitionNode;
  }
});
Object.defineProperty(exports, "isSelectionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isSelectionNode;
  }
});
Object.defineProperty(exports, "isValueNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isValueNode;
  }
});
Object.defineProperty(exports, "isTypeNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isTypeNode;
  }
});
Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isTypeSystemDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeDefinitionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isTypeDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeSystemExtensionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isTypeSystemExtensionNode;
  }
});
Object.defineProperty(exports, "isTypeExtensionNode", {
  enumerable: true,
  get: function get() {
    return _predicates.isTypeExtensionNode;
  }
});
Object.defineProperty(exports, "DirectiveLocation", {
  enumerable: true,
  get: function get() {
    return _directiveLocation.DirectiveLocation;
  }
});

var _source = require("./source.js");

var _location = require("./location.js");

var _printLocation = require("./printLocation.js");

var _kinds = require("./kinds.js");

var _tokenKind = require("./tokenKind.js");

var _lexer = require("./lexer.js");

var _parser = require("./parser.js");

var _printer = require("./printer.js");

var _visitor = require("./visitor.js");

var _ast = require("./ast.js");

var _predicates = require("./predicates.js");

var _directiveLocation = require("./directiveLocation.js");

},{"./source.js":"4CqkM","./location.js":"1lRjH","./printLocation.js":"2RXs9","./kinds.js":"6m0P6","./tokenKind.js":"3Ou8x","./lexer.js":"6U1AF","./parser.js":"3IZvo","./printer.js":"1UYdT","./visitor.js":"wwZgf","./ast.js":"swB0t","./predicates.js":"6u0g4","./directiveLocation.js":"3sgz1"}],"XOqrr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "responsePathAsArray", {
  enumerable: true,
  get: function get() {
    return _Path.pathToArray;
  }
});
Object.defineProperty(exports, "execute", {
  enumerable: true,
  get: function get() {
    return _execute.execute;
  }
});
Object.defineProperty(exports, "executeSync", {
  enumerable: true,
  get: function get() {
    return _execute.executeSync;
  }
});
Object.defineProperty(exports, "defaultFieldResolver", {
  enumerable: true,
  get: function get() {
    return _execute.defaultFieldResolver;
  }
});
Object.defineProperty(exports, "defaultTypeResolver", {
  enumerable: true,
  get: function get() {
    return _execute.defaultTypeResolver;
  }
});
Object.defineProperty(exports, "getDirectiveValues", {
  enumerable: true,
  get: function get() {
    return _values.getDirectiveValues;
  }
});

var _Path = require("../jsutils/Path.js");

var _execute = require("./execute.js");

var _values = require("./values.js");

},{"../jsutils/Path.js":"5Ik2w","./execute.js":"4vZSk","./values.js":"2MWR0"}],"5T6mJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "subscribe", {
  enumerable: true,
  get: function get() {
    return _subscribe.subscribe;
  }
});
Object.defineProperty(exports, "createSourceEventStream", {
  enumerable: true,
  get: function get() {
    return _subscribe.createSourceEventStream;
  }
});

var _subscribe = require("./subscribe.js");

},{"./subscribe.js":"5XPeO"}],"5XPeO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribe = subscribe;
exports.createSourceEventStream = createSourceEventStream;

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _isAsyncIterable = _interopRequireDefault(require("../jsutils/isAsyncIterable.js"));

var _Path = require("../jsutils/Path.js");

var _GraphQLError = require("../error/GraphQLError.js");

var _locatedError = require("../error/locatedError.js");

var _values = require("../execution/values.js");

var _execute = require("../execution/execute.js");

var _getOperationRootType = require("../utilities/getOperationRootType.js");

var _mapAsyncIterator = _interopRequireDefault(require("./mapAsyncIterator.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
  /* eslint-enable no-redeclare */
  // Extract arguments from object args if provided.
  return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({
    schema: argsOrSchema,
    document: document,
    rootValue: rootValue,
    contextValue: contextValue,
    variableValues: variableValues,
    operationName: operationName,
    fieldResolver: fieldResolver,
    subscribeFieldResolver: subscribeFieldResolver
  });
}
/**
 * This function checks if the error is a GraphQLError. If it is, report it as
 * an ExecutionResult, containing only errors and no data. Otherwise treat the
 * error as a system-class error and re-throw it.
 */


function reportGraphQLError(error) {
  if (error instanceof _GraphQLError.GraphQLError) {
    return {
      errors: [error]
    };
  }

  throw error;
}

function subscribeImpl(args) {
  var schema = args.schema,
      document = args.document,
      rootValue = args.rootValue,
      contextValue = args.contextValue,
      variableValues = args.variableValues,
      operationName = args.operationName,
      fieldResolver = args.fieldResolver,
      subscribeFieldResolver = args.subscribeFieldResolver;
  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal
  // GraphQL `execute` function, with `payload` as the rootValue.
  // This implements the "MapSourceToResponseEvent" algorithm described in
  // the GraphQL specification. The `execute` function provides the
  // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
  // "ExecuteQuery" algorithm, for which `execute` is also used.

  var mapSourceToResponse = function mapSourceToResponse(payload) {
    return (0, _execute.execute)({
      schema: schema,
      document: document,
      rootValue: payload,
      contextValue: contextValue,
      variableValues: variableValues,
      operationName: operationName,
      fieldResolver: fieldResolver
    });
  }; // Resolve the Source Stream, then map every source value to a
  // ExecutionResult value as described above.


  return sourcePromise.then(function (resultOrStream) {
    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.
      (0, _isAsyncIterable.default)(resultOrStream) ? (0, _mapAsyncIterator.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream
    );
  });
}
/**
 * Implements the "CreateSourceEventStream" algorithm described in the
 * GraphQL specification, resolving the subscription source event stream.
 *
 * Returns a Promise which resolves to either an AsyncIterable (if successful)
 * or an ExecutionResult (error). The promise will be rejected if the schema or
 * other arguments to this function are invalid, or if the resolved event stream
 * is not an async iterable.
 *
 * If the client-provided arguments to this function do not result in a
 * compliant subscription, a GraphQL Response (ExecutionResult) with
 * descriptive errors and no data will be returned.
 *
 * If the the source stream could not be created due to faulty subscription
 * resolver logic or underlying systems, the promise will resolve to a single
 * ExecutionResult containing `errors` and no `data`.
 *
 * If the operation succeeded, the promise resolves to the AsyncIterable for the
 * event stream returned by the resolver.
 *
 * A Source Event Stream represents a sequence of events, each of which triggers
 * a GraphQL execution for that event.
 *
 * This may be useful when hosting the stateful subscription service in a
 * different process or machine than the stateless GraphQL execution engine,
 * or otherwise separating these two steps. For more on this, see the
 * "Supporting Subscriptions at Scale" information in the GraphQL specification.
 */


function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  // If arguments are missing or incorrectly typed, this is an internal
  // developer mistake which should throw an early error.
  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);
  return new Promise(function (resolve) {
    // If a valid context cannot be created due to incorrect arguments,
    // this will throw an error.
    var exeContext = (0, _execute.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
    resolve( // Return early errors if execution context failed.
    Array.isArray(exeContext) ? {
      errors: exeContext
    } : executeSubscription(exeContext));
  }).catch(reportGraphQLError);
}

function executeSubscription(exeContext) {
  var schema = exeContext.schema,
      operation = exeContext.operation,
      variableValues = exeContext.variableValues,
      rootValue = exeContext.rootValue;
  var type = (0, _getOperationRootType.getOperationRootType)(schema, operation);
  var fields = (0, _execute.collectFields)(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
  var responseNames = Object.keys(fields);
  var responseName = responseNames[0];
  var fieldNodes = fields[responseName];
  var fieldNode = fieldNodes[0];
  var fieldName = fieldNode.name.value;
  var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);

  if (!fieldDef) {
    throw new _GraphQLError.GraphQLError("The subscription field \"".concat(fieldName, "\" is not defined."), fieldNodes);
  }

  var path = (0, _Path.addPath)(undefined, responseName, type.name);
  var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path); // Coerce to Promise for easier error handling and consistent return type.

  return new Promise(function (resolveResult) {
    var _fieldDef$subscribe;

    // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
    // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
    // Build a JS object of arguments from the field.arguments AST, using the
    // variables scope to fulfill any variable references.
    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
    // is provided to every resolve function within an execution. It is commonly
    // used to represent an authenticated user, or request-specific caches.

    var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
    // AsyncIterable yielding raw payloads.

    var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;
    resolveResult(resolveFn(rootValue, args, contextValue, info));
  }).then(function (eventStream) {
    if (eventStream instanceof Error) {
      throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _Path.pathToArray)(path));
    } // Assert field returned an event stream, otherwise yield an error.


    if (!(0, _isAsyncIterable.default)(eventStream)) {
      throw new Error('Subscription field must return Async Iterable. ' + "Received: ".concat((0, _inspect.default)(eventStream), "."));
    }

    return eventStream;
  }, function (error) {
    throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));
  });
}

},{"../jsutils/inspect.js":"2onMM","../jsutils/isAsyncIterable.js":"6aGRH","../jsutils/Path.js":"5Ik2w","../error/GraphQLError.js":"cXily","../error/locatedError.js":"6njJq","../execution/values.js":"2MWR0","../execution/execute.js":"4vZSk","../utilities/getOperationRootType.js":"4uxet","./mapAsyncIterator.js":"6jZjU"}],"6aGRH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isAsyncIterable;

var _symbols = require("../polyfills/symbols.js");

// eslint-disable-next-line no-redeclare
function isAsyncIterable(maybeAsyncIterable) {
  return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[_symbols.SYMBOL_ASYNC_ITERATOR]) === 'function';
}

},{"../polyfills/symbols.js":"4phrQ"}],"6jZjU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mapAsyncIterator;

var _symbols = require("../polyfills/symbols.js");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Given an AsyncIterable and a callback function, return an AsyncIterator
 * which produces values mapped via calling the callback function.
 */
function mapAsyncIterator(iterable, callback, rejectCallback) {
  // $FlowFixMe[prop-missing]
  var iteratorMethod = iterable[_symbols.SYMBOL_ASYNC_ITERATOR];
  var iterator = iteratorMethod.call(iterable);
  var $return;
  var abruptClose;

  if (typeof iterator.return === 'function') {
    $return = iterator.return;

    abruptClose = function abruptClose(error) {
      var rethrow = function rethrow() {
        return Promise.reject(error);
      };

      return $return.call(iterator).then(rethrow, rethrow);
    };
  }

  function mapResult(result) {
    return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
  }

  var mapReject;

  if (rejectCallback) {
    // Capture rejectCallback to ensure it cannot be null.
    var reject = rejectCallback;

    mapReject = function mapReject(error) {
      return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
    };
  }
  /* TODO: Flow doesn't support symbols as keys:
     https://github.com/facebook/flow/issues/3258 */


  return _defineProperty({
    next: function next() {
      return iterator.next().then(mapResult, mapReject);
    },
    return: function _return() {
      return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({
        value: undefined,
        done: true
      });
    },
    throw: function _throw(error) {
      if (typeof iterator.throw === 'function') {
        return iterator.throw(error).then(mapResult, mapReject);
      }

      return Promise.reject(error).catch(abruptClose);
    }
  }, _symbols.SYMBOL_ASYNC_ITERATOR, function () {
    return this;
  });
}

function asyncMapValue(value, callback) {
  return new Promise(function (resolve) {
    return resolve(callback(value));
  });
}

function iteratorResult(value) {
  return {
    value: value,
    done: false
  };
}

},{"../polyfills/symbols.js":"4phrQ"}],"4kkb7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function get() {
    return _validate.validate;
  }
});
Object.defineProperty(exports, "ValidationContext", {
  enumerable: true,
  get: function get() {
    return _ValidationContext.ValidationContext;
  }
});
Object.defineProperty(exports, "specifiedRules", {
  enumerable: true,
  get: function get() {
    return _specifiedRules.specifiedRules;
  }
});
Object.defineProperty(exports, "ExecutableDefinitionsRule", {
  enumerable: true,
  get: function get() {
    return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
  }
});
Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
  enumerable: true,
  get: function get() {
    return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
  }
});
Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
  enumerable: true,
  get: function get() {
    return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
  }
});
Object.defineProperty(exports, "KnownArgumentNamesRule", {
  enumerable: true,
  get: function get() {
    return _KnownArgumentNamesRule.KnownArgumentNamesRule;
  }
});
Object.defineProperty(exports, "KnownDirectivesRule", {
  enumerable: true,
  get: function get() {
    return _KnownDirectivesRule.KnownDirectivesRule;
  }
});
Object.defineProperty(exports, "KnownFragmentNamesRule", {
  enumerable: true,
  get: function get() {
    return _KnownFragmentNamesRule.KnownFragmentNamesRule;
  }
});
Object.defineProperty(exports, "KnownTypeNamesRule", {
  enumerable: true,
  get: function get() {
    return _KnownTypeNamesRule.KnownTypeNamesRule;
  }
});
Object.defineProperty(exports, "LoneAnonymousOperationRule", {
  enumerable: true,
  get: function get() {
    return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
  }
});
Object.defineProperty(exports, "NoFragmentCyclesRule", {
  enumerable: true,
  get: function get() {
    return _NoFragmentCyclesRule.NoFragmentCyclesRule;
  }
});
Object.defineProperty(exports, "NoUndefinedVariablesRule", {
  enumerable: true,
  get: function get() {
    return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
  }
});
Object.defineProperty(exports, "NoUnusedFragmentsRule", {
  enumerable: true,
  get: function get() {
    return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
  }
});
Object.defineProperty(exports, "NoUnusedVariablesRule", {
  enumerable: true,
  get: function get() {
    return _NoUnusedVariablesRule.NoUnusedVariablesRule;
  }
});
Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
  enumerable: true,
  get: function get() {
    return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
  }
});
Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
  enumerable: true,
  get: function get() {
    return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
  }
});
Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
  enumerable: true,
  get: function get() {
    return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
  }
});
Object.defineProperty(exports, "ScalarLeafsRule", {
  enumerable: true,
  get: function get() {
    return _ScalarLeafsRule.ScalarLeafsRule;
  }
});
Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
  enumerable: true,
  get: function get() {
    return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
  }
});
Object.defineProperty(exports, "UniqueArgumentNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
  enumerable: true,
  get: function get() {
    return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
  }
});
Object.defineProperty(exports, "UniqueFragmentNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
  }
});
Object.defineProperty(exports, "UniqueOperationNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueOperationNamesRule.UniqueOperationNamesRule;
  }
});
Object.defineProperty(exports, "UniqueVariableNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueVariableNamesRule.UniqueVariableNamesRule;
  }
});
Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
  enumerable: true,
  get: function get() {
    return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
  }
});
Object.defineProperty(exports, "VariablesAreInputTypesRule", {
  enumerable: true,
  get: function get() {
    return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
  }
});
Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
  enumerable: true,
  get: function get() {
    return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
  }
});
Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
  enumerable: true,
  get: function get() {
    return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
  }
});
Object.defineProperty(exports, "UniqueOperationTypesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueOperationTypesRule.UniqueOperationTypesRule;
  }
});
Object.defineProperty(exports, "UniqueTypeNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueTypeNamesRule.UniqueTypeNamesRule;
  }
});
Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
  }
});
Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
  enumerable: true,
  get: function get() {
    return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
  }
});
Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
  enumerable: true,
  get: function get() {
    return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
  }
});
Object.defineProperty(exports, "NoDeprecatedCustomRule", {
  enumerable: true,
  get: function get() {
    return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
  }
});
Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
  enumerable: true,
  get: function get() {
    return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
  }
});

var _validate = require("./validate.js");

var _ValidationContext = require("./ValidationContext.js");

var _specifiedRules = require("./specifiedRules.js");

var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.js");

var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.js");

var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.js");

var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.js");

var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.js");

var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.js");

var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.js");

var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.js");

var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.js");

var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.js");

var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.js");

var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.js");

var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.js");

var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.js");

var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.js");

var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.js");

var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.js");

var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.js");

var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.js");

var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.js");

var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.js");

var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.js");

var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.js");

var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.js");

var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.js");

var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.js");

var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.js");

var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.js");

var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.js");

var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.js");

var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.js");

var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.js");

var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.js");

var _NoDeprecatedCustomRule = require("./rules/custom/NoDeprecatedCustomRule.js");

var _NoSchemaIntrospectionCustomRule = require("./rules/custom/NoSchemaIntrospectionCustomRule.js");

},{"./validate.js":"4pm1K","./ValidationContext.js":"6nBGN","./specifiedRules.js":"3AYYC","./rules/ExecutableDefinitionsRule.js":"61FlF","./rules/FieldsOnCorrectTypeRule.js":"DysOp","./rules/FragmentsOnCompositeTypesRule.js":"3cLdl","./rules/KnownArgumentNamesRule.js":"2lcXE","./rules/KnownDirectivesRule.js":"2zv89","./rules/KnownFragmentNamesRule.js":"2verg","./rules/KnownTypeNamesRule.js":"7cnuU","./rules/LoneAnonymousOperationRule.js":"5sw8S","./rules/NoFragmentCyclesRule.js":"7cs7s","./rules/NoUndefinedVariablesRule.js":"1qqse","./rules/NoUnusedFragmentsRule.js":"6FPG8","./rules/NoUnusedVariablesRule.js":"1BYdg","./rules/OverlappingFieldsCanBeMergedRule.js":"2MNpW","./rules/PossibleFragmentSpreadsRule.js":"NBJgy","./rules/ProvidedRequiredArgumentsRule.js":"4vfZe","./rules/ScalarLeafsRule.js":"3pIxp","./rules/SingleFieldSubscriptionsRule.js":"78I6r","./rules/UniqueArgumentNamesRule.js":"m2Dig","./rules/UniqueDirectivesPerLocationRule.js":"1iSv4","./rules/UniqueFragmentNamesRule.js":"6gkrP","./rules/UniqueInputFieldNamesRule.js":"5hV72","./rules/UniqueOperationNamesRule.js":"6bKxi","./rules/UniqueVariableNamesRule.js":"4HR9n","./rules/ValuesOfCorrectTypeRule.js":"6RlTn","./rules/VariablesAreInputTypesRule.js":"5cck7","./rules/VariablesInAllowedPositionRule.js":"5flqI","./rules/LoneSchemaDefinitionRule.js":"4HDpS","./rules/UniqueOperationTypesRule.js":"3gTe3","./rules/UniqueTypeNamesRule.js":"6QdA2","./rules/UniqueEnumValueNamesRule.js":"3lMWb","./rules/UniqueFieldDefinitionNamesRule.js":"6dxGU","./rules/UniqueDirectiveNamesRule.js":"ibRE8","./rules/PossibleTypeExtensionsRule.js":"6Vkc0","./rules/custom/NoDeprecatedCustomRule.js":"5roLf","./rules/custom/NoSchemaIntrospectionCustomRule.js":"7nCcR"}],"5roLf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;

var _invariant = _interopRequireDefault(require("../../../jsutils/invariant.js"));

var _GraphQLError = require("../../../error/GraphQLError.js");

var _definition = require("../../../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * No deprecated
 *
 * A GraphQL document is only valid if all selected fields and all used enum values have not been
 * deprecated.
 *
 * Note: This rule is optional and is not part of the Validation section of the GraphQL
 * Specification. The main purpose of this rule is detection of deprecated usages and not
 * necessarily to forbid their use when querying a service.
 */
function NoDeprecatedCustomRule(context) {
  return {
    Field: function Field(node) {
      var fieldDef = context.getFieldDef();
      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;

      if (fieldDef && deprecationReason != null) {
        var parentType = context.getParentType();
        parentType != null || (0, _invariant.default)(0);
        context.reportError(new _GraphQLError.GraphQLError("The field ".concat(parentType.name, ".").concat(fieldDef.name, " is deprecated. ").concat(deprecationReason), node));
      }
    },
    Argument: function Argument(node) {
      var argDef = context.getArgument();
      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;

      if (argDef && deprecationReason != null) {
        var directiveDef = context.getDirective();

        if (directiveDef != null) {
          context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
        } else {
          var parentType = context.getParentType();
          var fieldDef = context.getFieldDef();
          parentType != null && fieldDef != null || (0, _invariant.default)(0);
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(parentType.name, ".").concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
        }
      }
    },
    ObjectField: function ObjectField(node) {
      var inputObjectDef = (0, _definition.getNamedType)(context.getParentInputType());

      if ((0, _definition.isInputObjectType)(inputObjectDef)) {
        var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off

        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;

        if (deprecationReason != null) {
          context.reportError(new _GraphQLError.GraphQLError("The input field ".concat(inputObjectDef.name, ".").concat(inputFieldDef.name, " is deprecated. ").concat(deprecationReason), node));
        }
      }
    },
    EnumValue: function EnumValue(node) {
      var enumValueDef = context.getEnumValue();
      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;

      if (enumValueDef && deprecationReason != null) {
        var enumTypeDef = (0, _definition.getNamedType)(context.getInputType());
        enumTypeDef != null || (0, _invariant.default)(0);
        context.reportError(new _GraphQLError.GraphQLError("The enum value \"".concat(enumTypeDef.name, ".").concat(enumValueDef.name, "\" is deprecated. ").concat(deprecationReason), node));
      }
    }
  };
}

},{"../../../jsutils/invariant.js":"6ywmM","../../../error/GraphQLError.js":"cXily","../../../type/definition.js":"n9nw4"}],"7nCcR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;

var _GraphQLError = require("../../../error/GraphQLError.js");

var _definition = require("../../../type/definition.js");

var _introspection = require("../../../type/introspection.js");

/**
 * Prohibit introspection queries
 *
 * A GraphQL document is only valid if all fields selected are not fields that
 * return an introspection type.
 *
 * Note: This rule is optional and is not part of the Validation section of the
 * GraphQL Specification. This rule effectively disables introspection, which
 * does not reflect best practices and should only be done if absolutely necessary.
 */
function NoSchemaIntrospectionCustomRule(context) {
  return {
    Field: function Field(node) {
      var type = (0, _definition.getNamedType)(context.getType());

      if (type && (0, _introspection.isIntrospectionType)(type)) {
        context.reportError(new _GraphQLError.GraphQLError("GraphQL introspection has been disabled, but the requested query contained the field \"".concat(node.name.value, "\"."), node));
      }
    }
  };
}

},{"../../../error/GraphQLError.js":"cXily","../../../type/definition.js":"n9nw4","../../../type/introspection.js":"5yLF0"}],"1abKY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GraphQLError", {
  enumerable: true,
  get: function get() {
    return _GraphQLError.GraphQLError;
  }
});
Object.defineProperty(exports, "printError", {
  enumerable: true,
  get: function get() {
    return _GraphQLError.printError;
  }
});
Object.defineProperty(exports, "syntaxError", {
  enumerable: true,
  get: function get() {
    return _syntaxError.syntaxError;
  }
});
Object.defineProperty(exports, "locatedError", {
  enumerable: true,
  get: function get() {
    return _locatedError.locatedError;
  }
});
Object.defineProperty(exports, "formatError", {
  enumerable: true,
  get: function get() {
    return _formatError.formatError;
  }
});

var _GraphQLError = require("./GraphQLError.js");

var _syntaxError = require("./syntaxError.js");

var _locatedError = require("./locatedError.js");

var _formatError = require("./formatError.js");

},{"./GraphQLError.js":"cXily","./syntaxError.js":"1YalC","./locatedError.js":"6njJq","./formatError.js":"69fBC"}],"69fBC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatError = formatError;

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a GraphQLError, format it according to the rules described by the
 * Response Format, Errors section of the GraphQL Specification.
 */
function formatError(error) {
  var _error$message;

  error || (0, _devAssert.default)(0, 'Received null or undefined error.');
  var message = (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'An unknown error occurred.';
  var locations = error.locations;
  var path = error.path;
  var extensions = error.extensions;
  return extensions ? {
    message: message,
    locations: locations,
    path: path,
    extensions: extensions
  } : {
    message: message,
    locations: locations,
    path: path
  };
}
/**
 * @see https://github.com/graphql/graphql-spec/blob/master/spec/Section%207%20--%20Response.md#errors
 */

},{"../jsutils/devAssert.js":"1F99Z"}],"6Mx8s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getIntrospectionQuery", {
  enumerable: true,
  get: function get() {
    return _getIntrospectionQuery.getIntrospectionQuery;
  }
});
Object.defineProperty(exports, "getOperationAST", {
  enumerable: true,
  get: function get() {
    return _getOperationAST.getOperationAST;
  }
});
Object.defineProperty(exports, "getOperationRootType", {
  enumerable: true,
  get: function get() {
    return _getOperationRootType.getOperationRootType;
  }
});
Object.defineProperty(exports, "introspectionFromSchema", {
  enumerable: true,
  get: function get() {
    return _introspectionFromSchema.introspectionFromSchema;
  }
});
Object.defineProperty(exports, "buildClientSchema", {
  enumerable: true,
  get: function get() {
    return _buildClientSchema.buildClientSchema;
  }
});
Object.defineProperty(exports, "buildASTSchema", {
  enumerable: true,
  get: function get() {
    return _buildASTSchema.buildASTSchema;
  }
});
Object.defineProperty(exports, "buildSchema", {
  enumerable: true,
  get: function get() {
    return _buildASTSchema.buildSchema;
  }
});
Object.defineProperty(exports, "extendSchema", {
  enumerable: true,
  get: function get() {
    return _extendSchema.extendSchema;
  }
});
Object.defineProperty(exports, "getDescription", {
  enumerable: true,
  get: function get() {
    return _extendSchema.getDescription;
  }
});
Object.defineProperty(exports, "lexicographicSortSchema", {
  enumerable: true,
  get: function get() {
    return _lexicographicSortSchema.lexicographicSortSchema;
  }
});
Object.defineProperty(exports, "printSchema", {
  enumerable: true,
  get: function get() {
    return _printSchema.printSchema;
  }
});
Object.defineProperty(exports, "printType", {
  enumerable: true,
  get: function get() {
    return _printSchema.printType;
  }
});
Object.defineProperty(exports, "printIntrospectionSchema", {
  enumerable: true,
  get: function get() {
    return _printSchema.printIntrospectionSchema;
  }
});
Object.defineProperty(exports, "typeFromAST", {
  enumerable: true,
  get: function get() {
    return _typeFromAST.typeFromAST;
  }
});
Object.defineProperty(exports, "valueFromAST", {
  enumerable: true,
  get: function get() {
    return _valueFromAST.valueFromAST;
  }
});
Object.defineProperty(exports, "valueFromASTUntyped", {
  enumerable: true,
  get: function get() {
    return _valueFromASTUntyped.valueFromASTUntyped;
  }
});
Object.defineProperty(exports, "astFromValue", {
  enumerable: true,
  get: function get() {
    return _astFromValue.astFromValue;
  }
});
Object.defineProperty(exports, "TypeInfo", {
  enumerable: true,
  get: function get() {
    return _TypeInfo.TypeInfo;
  }
});
Object.defineProperty(exports, "visitWithTypeInfo", {
  enumerable: true,
  get: function get() {
    return _TypeInfo.visitWithTypeInfo;
  }
});
Object.defineProperty(exports, "coerceInputValue", {
  enumerable: true,
  get: function get() {
    return _coerceInputValue.coerceInputValue;
  }
});
Object.defineProperty(exports, "concatAST", {
  enumerable: true,
  get: function get() {
    return _concatAST.concatAST;
  }
});
Object.defineProperty(exports, "separateOperations", {
  enumerable: true,
  get: function get() {
    return _separateOperations.separateOperations;
  }
});
Object.defineProperty(exports, "stripIgnoredCharacters", {
  enumerable: true,
  get: function get() {
    return _stripIgnoredCharacters.stripIgnoredCharacters;
  }
});
Object.defineProperty(exports, "isEqualType", {
  enumerable: true,
  get: function get() {
    return _typeComparators.isEqualType;
  }
});
Object.defineProperty(exports, "isTypeSubTypeOf", {
  enumerable: true,
  get: function get() {
    return _typeComparators.isTypeSubTypeOf;
  }
});
Object.defineProperty(exports, "doTypesOverlap", {
  enumerable: true,
  get: function get() {
    return _typeComparators.doTypesOverlap;
  }
});
Object.defineProperty(exports, "assertValidName", {
  enumerable: true,
  get: function get() {
    return _assertValidName.assertValidName;
  }
});
Object.defineProperty(exports, "isValidNameError", {
  enumerable: true,
  get: function get() {
    return _assertValidName.isValidNameError;
  }
});
Object.defineProperty(exports, "BreakingChangeType", {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.BreakingChangeType;
  }
});
Object.defineProperty(exports, "DangerousChangeType", {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.DangerousChangeType;
  }
});
Object.defineProperty(exports, "findBreakingChanges", {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.findBreakingChanges;
  }
});
Object.defineProperty(exports, "findDangerousChanges", {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.findDangerousChanges;
  }
});
Object.defineProperty(exports, "findDeprecatedUsages", {
  enumerable: true,
  get: function get() {
    return _findDeprecatedUsages.findDeprecatedUsages;
  }
});

var _getIntrospectionQuery = require("./getIntrospectionQuery.js");

var _getOperationAST = require("./getOperationAST.js");

var _getOperationRootType = require("./getOperationRootType.js");

var _introspectionFromSchema = require("./introspectionFromSchema.js");

var _buildClientSchema = require("./buildClientSchema.js");

var _buildASTSchema = require("./buildASTSchema.js");

var _extendSchema = require("./extendSchema.js");

var _lexicographicSortSchema = require("./lexicographicSortSchema.js");

var _printSchema = require("./printSchema.js");

var _typeFromAST = require("./typeFromAST.js");

var _valueFromAST = require("./valueFromAST.js");

var _valueFromASTUntyped = require("./valueFromASTUntyped.js");

var _astFromValue = require("./astFromValue.js");

var _TypeInfo = require("./TypeInfo.js");

var _coerceInputValue = require("./coerceInputValue.js");

var _concatAST = require("./concatAST.js");

var _separateOperations = require("./separateOperations.js");

var _stripIgnoredCharacters = require("./stripIgnoredCharacters.js");

var _typeComparators = require("./typeComparators.js");

var _assertValidName = require("./assertValidName.js");

var _findBreakingChanges = require("./findBreakingChanges.js");

var _findDeprecatedUsages = require("./findDeprecatedUsages.js");

},{"./getIntrospectionQuery.js":"15iHx","./getOperationAST.js":"263ch","./getOperationRootType.js":"4uxet","./introspectionFromSchema.js":"4hPWZ","./buildClientSchema.js":"3NzxC","./buildASTSchema.js":"3dGY8","./extendSchema.js":"3bSEk","./lexicographicSortSchema.js":"6Xr0t","./printSchema.js":"7bW2u","./typeFromAST.js":"468O3","./valueFromAST.js":"1YgnG","./valueFromASTUntyped.js":"3ZEuT","./astFromValue.js":"5zDuh","./TypeInfo.js":"2mpQy","./coerceInputValue.js":"5L3c7","./concatAST.js":"6hFSI","./separateOperations.js":"2sDjh","./stripIgnoredCharacters.js":"44rQz","./typeComparators.js":"1ooid","./assertValidName.js":"7qpM9","./findBreakingChanges.js":"21WGd","./findDeprecatedUsages.js":"2x31A"}],"15iHx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIntrospectionQuery = getIntrospectionQuery;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getIntrospectionQuery(options) {
  var optionsWithDefault = _objectSpread({
    descriptions: true,
    specifiedByUrl: false,
    directiveIsRepeatable: false,
    schemaDescription: false,
    inputValueDeprecation: false
  }, options);

  var descriptions = optionsWithDefault.descriptions ? 'description' : '';
  var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByUrl' : '';
  var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
  var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';

  function inputDeprecation(str) {
    return optionsWithDefault.inputValueDeprecation ? str : '';
  }

  return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(inputDeprecation('(includeDeprecated: true)'), " {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n      ").concat(inputDeprecation('isDeprecated'), "\n      ").concat(inputDeprecation('deprecationReason'), "\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
}

},{}],"263ch":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperationAST = getOperationAST;

var _kinds = require("../language/kinds.js");

/**
 * Returns an operation AST given a document AST and optionally an operation
 * name. If a name is not provided, an operation is only returned if only one is
 * provided in the document.
 */
function getOperationAST(documentAST, operationName) {
  var operation = null;

  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
    var definition = _documentAST$definiti2[_i2];

    if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
      var _definition$name;

      if (operationName == null) {
        // If no operation name was provided, only return an Operation if there
        // is one defined in the document. Upon encountering the second, return
        // null.
        if (operation) {
          return null;
        }

        operation = definition;
      } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
        return definition;
      }
    }
  }

  return operation;
}

},{"../language/kinds.js":"6m0P6"}],"4hPWZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.introspectionFromSchema = introspectionFromSchema;

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _parser = require("../language/parser.js");

var _execute = require("../execution/execute.js");

var _getIntrospectionQuery = require("./getIntrospectionQuery.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Build an IntrospectionQuery from a GraphQLSchema
 *
 * IntrospectionQuery is useful for utilities that care about type and field
 * relationships, but do not need to traverse through those relationships.
 *
 * This is the inverse of buildClientSchema. The primary use case is outside
 * of the server context, for instance when doing schema comparisons.
 */
function introspectionFromSchema(schema, options) {
  var optionsWithDefaults = _objectSpread({
    specifiedByUrl: true,
    directiveIsRepeatable: true,
    schemaDescription: true,
    inputValueDeprecation: true
  }, options);

  var document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
  var result = (0, _execute.executeSync)({
    schema: schema,
    document: document
  });
  !result.errors && result.data || (0, _invariant.default)(0);
  return result.data;
}

},{"../jsutils/invariant.js":"6ywmM","../language/parser.js":"3IZvo","../execution/execute.js":"4vZSk","./getIntrospectionQuery.js":"15iHx"}],"3NzxC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildClientSchema = buildClientSchema;

var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.js"));

var _isObjectLike = _interopRequireDefault(require("../jsutils/isObjectLike.js"));

var _parser = require("../language/parser.js");

var _schema = require("../type/schema.js");

var _directives = require("../type/directives.js");

var _scalars = require("../type/scalars.js");

var _introspection = require("../type/introspection.js");

var _definition = require("../type/definition.js");

var _valueFromAST = require("./valueFromAST.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Build a GraphQLSchema for use by client tools.
 *
 * Given the result of a client running the introspection query, creates and
 * returns a GraphQLSchema instance which can be then used with all graphql-js
 * tools, but cannot be used to execute a query, as introspection does not
 * represent the "resolver", "parse" or "serialize" functions or any other
 * server-internal mechanisms.
 *
 * This function expects a complete introspection result. Don't forget to check
 * the "errors" field of a server response before calling this function.
 */
function buildClientSchema(introspection, options) {
  (0, _isObjectLike.default)(introspection) && (0, _isObjectLike.default)(introspection.__schema) || (0, _devAssert.default)(0, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat((0, _inspect.default)(introspection), ".")); // Get the schema from the introspection result.

  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

  var typeMap = (0, _keyValMap.default)(schemaIntrospection.types, function (typeIntrospection) {
    return typeIntrospection.name;
  }, function (typeIntrospection) {
    return buildType(typeIntrospection);
  }); // Include standard types only if they are used.

  for (var _i2 = 0, _ref2 = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes); _i2 < _ref2.length; _i2++) {
    var stdType = _ref2[_i2];

    if (typeMap[stdType.name]) {
      typeMap[stdType.name] = stdType;
    }
  } // Get the root Query, Mutation, and Subscription types.


  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
  // directives were not queried for.

  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.

  return new _schema.GraphQLSchema({
    description: schemaIntrospection.description,
    query: queryType,
    mutation: mutationType,
    subscription: subscriptionType,
    types: (0, _objectValues.default)(typeMap),
    directives: directives,
    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
  }); // Given a type reference in introspection, return the GraphQLType instance.
  // preferring cached instances before building new instances.

  function getType(typeRef) {
    if (typeRef.kind === _introspection.TypeKind.LIST) {
      var itemRef = typeRef.ofType;

      if (!itemRef) {
        throw new Error('Decorated type deeper than introspection query.');
      }

      return new _definition.GraphQLList(getType(itemRef));
    }

    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
      var nullableRef = typeRef.ofType;

      if (!nullableRef) {
        throw new Error('Decorated type deeper than introspection query.');
      }

      var nullableType = getType(nullableRef);
      return new _definition.GraphQLNonNull((0, _definition.assertNullableType)(nullableType));
    }

    return getNamedType(typeRef);
  }

  function getNamedType(typeRef) {
    var typeName = typeRef.name;

    if (!typeName) {
      throw new Error("Unknown type reference: ".concat((0, _inspect.default)(typeRef), "."));
    }

    var type = typeMap[typeName];

    if (!type) {
      throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
    }

    return type;
  }

  function getObjectType(typeRef) {
    return (0, _definition.assertObjectType)(getNamedType(typeRef));
  }

  function getInterfaceType(typeRef) {
    return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
  } // Given a type's introspection result, construct the correct
  // GraphQLType instance.


  function buildType(type) {
    if (type != null && type.name != null && type.kind != null) {
      switch (type.kind) {
        case _introspection.TypeKind.SCALAR:
          return buildScalarDef(type);

        case _introspection.TypeKind.OBJECT:
          return buildObjectDef(type);

        case _introspection.TypeKind.INTERFACE:
          return buildInterfaceDef(type);

        case _introspection.TypeKind.UNION:
          return buildUnionDef(type);

        case _introspection.TypeKind.ENUM:
          return buildEnumDef(type);

        case _introspection.TypeKind.INPUT_OBJECT:
          return buildInputObjectDef(type);
      }
    }

    var typeStr = (0, _inspect.default)(type);
    throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
  }

  function buildScalarDef(scalarIntrospection) {
    return new _definition.GraphQLScalarType({
      name: scalarIntrospection.name,
      description: scalarIntrospection.description,
      specifiedByUrl: scalarIntrospection.specifiedByUrl
    });
  }

  function buildImplementationsList(implementingIntrospection) {
    // TODO: Temporary workaround until GraphQL ecosystem will fully support
    // 'interfaces' on interface types.
    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
      return [];
    }

    if (!implementingIntrospection.interfaces) {
      var implementingIntrospectionStr = (0, _inspect.default)(implementingIntrospection);
      throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
    }

    return implementingIntrospection.interfaces.map(getInterfaceType);
  }

  function buildObjectDef(objectIntrospection) {
    return new _definition.GraphQLObjectType({
      name: objectIntrospection.name,
      description: objectIntrospection.description,
      interfaces: function interfaces() {
        return buildImplementationsList(objectIntrospection);
      },
      fields: function fields() {
        return buildFieldDefMap(objectIntrospection);
      }
    });
  }

  function buildInterfaceDef(interfaceIntrospection) {
    return new _definition.GraphQLInterfaceType({
      name: interfaceIntrospection.name,
      description: interfaceIntrospection.description,
      interfaces: function interfaces() {
        return buildImplementationsList(interfaceIntrospection);
      },
      fields: function fields() {
        return buildFieldDefMap(interfaceIntrospection);
      }
    });
  }

  function buildUnionDef(unionIntrospection) {
    if (!unionIntrospection.possibleTypes) {
      var unionIntrospectionStr = (0, _inspect.default)(unionIntrospection);
      throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
    }

    return new _definition.GraphQLUnionType({
      name: unionIntrospection.name,
      description: unionIntrospection.description,
      types: function types() {
        return unionIntrospection.possibleTypes.map(getObjectType);
      }
    });
  }

  function buildEnumDef(enumIntrospection) {
    if (!enumIntrospection.enumValues) {
      var enumIntrospectionStr = (0, _inspect.default)(enumIntrospection);
      throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
    }

    return new _definition.GraphQLEnumType({
      name: enumIntrospection.name,
      description: enumIntrospection.description,
      values: (0, _keyValMap.default)(enumIntrospection.enumValues, function (valueIntrospection) {
        return valueIntrospection.name;
      }, function (valueIntrospection) {
        return {
          description: valueIntrospection.description,
          deprecationReason: valueIntrospection.deprecationReason
        };
      })
    });
  }

  function buildInputObjectDef(inputObjectIntrospection) {
    if (!inputObjectIntrospection.inputFields) {
      var inputObjectIntrospectionStr = (0, _inspect.default)(inputObjectIntrospection);
      throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
    }

    return new _definition.GraphQLInputObjectType({
      name: inputObjectIntrospection.name,
      description: inputObjectIntrospection.description,
      fields: function fields() {
        return buildInputValueDefMap(inputObjectIntrospection.inputFields);
      }
    });
  }

  function buildFieldDefMap(typeIntrospection) {
    if (!typeIntrospection.fields) {
      throw new Error("Introspection result missing fields: ".concat((0, _inspect.default)(typeIntrospection), "."));
    }

    return (0, _keyValMap.default)(typeIntrospection.fields, function (fieldIntrospection) {
      return fieldIntrospection.name;
    }, buildField);
  }

  function buildField(fieldIntrospection) {
    var type = getType(fieldIntrospection.type);

    if (!(0, _definition.isOutputType)(type)) {
      var typeStr = (0, _inspect.default)(type);
      throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
    }

    if (!fieldIntrospection.args) {
      var fieldIntrospectionStr = (0, _inspect.default)(fieldIntrospection);
      throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
    }

    return {
      description: fieldIntrospection.description,
      deprecationReason: fieldIntrospection.deprecationReason,
      type: type,
      args: buildInputValueDefMap(fieldIntrospection.args)
    };
  }

  function buildInputValueDefMap(inputValueIntrospections) {
    return (0, _keyValMap.default)(inputValueIntrospections, function (inputValue) {
      return inputValue.name;
    }, buildInputValue);
  }

  function buildInputValue(inputValueIntrospection) {
    var type = getType(inputValueIntrospection.type);

    if (!(0, _definition.isInputType)(type)) {
      var typeStr = (0, _inspect.default)(type);
      throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
    }

    var defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
    return {
      description: inputValueIntrospection.description,
      type: type,
      defaultValue: defaultValue,
      deprecationReason: inputValueIntrospection.deprecationReason
    };
  }

  function buildDirective(directiveIntrospection) {
    if (!directiveIntrospection.args) {
      var directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);
      throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
    }

    if (!directiveIntrospection.locations) {
      var _directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);

      throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
    }

    return new _directives.GraphQLDirective({
      name: directiveIntrospection.name,
      description: directiveIntrospection.description,
      isRepeatable: directiveIntrospection.isRepeatable,
      locations: directiveIntrospection.locations.slice(),
      args: buildInputValueDefMap(directiveIntrospection.args)
    });
  }
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../jsutils/devAssert.js":"1F99Z","../jsutils/keyValMap.js":"76vLr","../jsutils/isObjectLike.js":"526rJ","../language/parser.js":"3IZvo","../type/schema.js":"5cHio","../type/directives.js":"2w91d","../type/scalars.js":"7mSzF","../type/introspection.js":"5yLF0","../type/definition.js":"n9nw4","./valueFromAST.js":"1YgnG"}],"3dGY8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildASTSchema = buildASTSchema;
exports.buildSchema = buildSchema;

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _kinds = require("../language/kinds.js");

var _parser = require("../language/parser.js");

var _validate = require("../validation/validate.js");

var _schema = require("../type/schema.js");

var _directives = require("../type/directives.js");

var _extendSchema = require("./extendSchema.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This takes the ast of a schema document produced by the parse function in
 * src/language/parser.js.
 *
 * If no schema definition is provided, then it will look for types named Query
 * and Mutation.
 *
 * Given that AST it constructs a GraphQLSchema. The resulting schema
 * has no resolve methods, so execution will use default resolvers.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
function buildASTSchema(documentAST, options) {
  documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');

  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
    (0, _validate.assertValidSDL)(documentAST);
  }

  var emptySchemaConfig = {
    description: undefined,
    types: [],
    directives: [],
    extensions: undefined,
    extensionASTNodes: [],
    assumeValid: false
  };
  var config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);

  if (config.astNode == null) {
    for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
      var type = _config$types2[_i2];

      switch (type.name) {
        // Note: While this could make early assertions to get the correctly
        // typed values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        case 'Query':
          config.query = type;
          break;

        case 'Mutation':
          config.mutation = type;
          break;

        case 'Subscription':
          config.subscription = type;
          break;
      }
    }
  }

  var directives = config.directives; // If specified directives were not explicitly declared, add them.

  var _loop = function _loop(_i4) {
    var stdDirective = _directives.specifiedDirectives[_i4];

    if (directives.every(function (directive) {
      return directive.name !== stdDirective.name;
    })) {
      directives.push(stdDirective);
    }
  };

  for (var _i4 = 0; _i4 < _directives.specifiedDirectives.length; _i4++) {
    _loop(_i4);
  }

  return new _schema.GraphQLSchema(config);
}
/**
 * A helper function to build a GraphQLSchema directly from a source
 * document.
 */


function buildSchema(source, options) {
  var document = (0, _parser.parse)(source, {
    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
    allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
    allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
    experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
  });
  return buildASTSchema(document, {
    commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
  });
}

},{"../jsutils/devAssert.js":"1F99Z","../language/kinds.js":"6m0P6","../language/parser.js":"3IZvo","../validation/validate.js":"4pm1K","../type/schema.js":"5cHio","../type/directives.js":"2w91d","./extendSchema.js":"3bSEk"}],"3bSEk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extendSchema = extendSchema;
exports.extendSchemaImpl = extendSchemaImpl;
exports.getDescription = getDescription;

var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _mapValue = _interopRequireDefault(require("../jsutils/mapValue.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _devAssert = _interopRequireDefault(require("../jsutils/devAssert.js"));

var _kinds = require("../language/kinds.js");

var _tokenKind = require("../language/tokenKind.js");

var _blockString = require("../language/blockString.js");

var _predicates = require("../language/predicates.js");

var _validate = require("../validation/validate.js");

var _values = require("../execution/values.js");

var _schema = require("../type/schema.js");

var _scalars = require("../type/scalars.js");

var _introspection = require("../type/introspection.js");

var _directives = require("../type/directives.js");

var _definition = require("../type/definition.js");

var _valueFromAST = require("./valueFromAST.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Produces a new schema given an existing schema and a document which may
 * contain GraphQL type extensions and definitions. The original schema will
 * remain unaltered.
 *
 * Because a schema represents a graph of references, a schema cannot be
 * extended without effectively making an entire copy. We do not know until it's
 * too late if subgraphs remain unchanged.
 *
 * This algorithm copies the provided schema, applying extensions while
 * producing the copy. The original schema remains unaltered.
 *
 * Accepts options as a third argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
function extendSchema(schema, documentAST, options) {
  (0, _schema.assertSchema)(schema);
  documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');

  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
    (0, _validate.assertValidSDLExtension)(documentAST, schema);
  }

  var schemaConfig = schema.toConfig();
  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
  return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
}
/**
 * @internal
 */


function extendSchemaImpl(schemaConfig, documentAST, options) {
  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;

  // Collect the type definitions and extensions found in the document.
  var typeDefs = [];
  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
  // have the same name. For example, a type named "skip".

  var directiveDefs = [];
  var schemaDef; // Schema extensions are collected which may add additional operation types.

  var schemaExtensions = [];

  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
    var def = _documentAST$definiti2[_i2];

    if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
      schemaDef = def;
    } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
      schemaExtensions.push(def);
    } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
      typeDefs.push(def);
    } else if ((0, _predicates.isTypeExtensionNode)(def)) {
      var extendedTypeName = def.name.value;
      var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
    } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
      directiveDefs.push(def);
    }
  } // If this document contains no new types, extensions, or directives then
  // return the same unmodified GraphQLSchema instance.


  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
    return schemaConfig;
  }

  var typeMap = Object.create(null);

  for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {
    var existingType = _schemaConfig$types2[_i4];
    typeMap[existingType.name] = extendNamedType(existingType);
  }

  for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {
    var _stdTypeMap$name;

    var typeNode = typeDefs[_i6];
    var name = typeNode.name.value;
    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
  }

  var operationTypes = _objectSpread(_objectSpread({
    // Get the extended root operation types.
    query: schemaConfig.query && replaceNamedType(schemaConfig.query),
    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.


  return _objectSpread(_objectSpread({
    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
  }, operationTypes), {}, {
    types: (0, _objectValues.default)(typeMap),
    directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
    extensions: undefined,
    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
  }); // Below are functions used for producing this schema that have closed over
  // this scope and have access to the schema, cache, and newly defined types.

  function replaceType(type) {
    if ((0, _definition.isListType)(type)) {
      // $FlowFixMe[incompatible-return]
      return new _definition.GraphQLList(replaceType(type.ofType));
    }

    if ((0, _definition.isNonNullType)(type)) {
      // $FlowFixMe[incompatible-return]
      return new _definition.GraphQLNonNull(replaceType(type.ofType));
    }

    return replaceNamedType(type);
  }

  function replaceNamedType(type) {
    // Note: While this could make early assertions to get the correctly
    // typed values, that would throw immediately while type system
    // validation with validateSchema() will produce more actionable results.
    return typeMap[type.name];
  }

  function replaceDirective(directive) {
    var config = directive.toConfig();
    return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
      args: (0, _mapValue.default)(config.args, extendArg)
    }));
  }

  function extendNamedType(type) {
    if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
      // Builtin types are not extended.
      return type;
    }

    if ((0, _definition.isScalarType)(type)) {
      return extendScalarType(type);
    }

    if ((0, _definition.isObjectType)(type)) {
      return extendObjectType(type);
    }

    if ((0, _definition.isInterfaceType)(type)) {
      return extendInterfaceType(type);
    }

    if ((0, _definition.isUnionType)(type)) {
      return extendUnionType(type);
    }

    if ((0, _definition.isEnumType)(type)) {
      return extendEnumType(type);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition.isInputObjectType)(type)) {
      return extendInputObjectType(type);
    } // istanbul ignore next (Not reachable. All possible types have been considered)


    false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
  }

  function extendInputObjectType(type) {
    var _typeExtensionsMap$co;

    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
    return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {
      fields: function fields() {
        return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, function (field) {
          return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type)
          });
        })), buildInputFieldMap(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }

  function extendEnumType(type) {
    var _typeExtensionsMap$ty;

    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
    return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {
      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }

  function extendScalarType(type) {
    var _typeExtensionsMap$co2;

    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
    var specifiedByUrl = config.specifiedByUrl;

    for (var _i8 = 0; _i8 < extensions.length; _i8++) {
      var _getSpecifiedByUrl;

      var extensionNode = extensions[_i8];
      specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
    }

    return new _definition.GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {
      specifiedByUrl: specifiedByUrl,
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }

  function extendObjectType(type) {
    var _typeExtensionsMap$co3;

    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
    return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
      interfaces: function interfaces() {
        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
      },
      fields: function fields() {
        return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }

  function extendInterfaceType(type) {
    var _typeExtensionsMap$co4;

    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
    return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {
      interfaces: function interfaces() {
        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
      },
      fields: function fields() {
        return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }

  function extendUnionType(type) {
    var _typeExtensionsMap$co5;

    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
    return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {
      types: function types() {
        return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }

  function extendField(field) {
    return _objectSpread(_objectSpread({}, field), {}, {
      type: replaceType(field.type),
      // $FlowFixMe[incompatible-call]
      args: (0, _mapValue.default)(field.args, extendArg)
    });
  }

  function extendArg(arg) {
    return _objectSpread(_objectSpread({}, arg), {}, {
      type: replaceType(arg.type)
    });
  }

  function getOperationTypes(nodes) {
    var opTypes = {};

    for (var _i10 = 0; _i10 < nodes.length; _i10++) {
      var _node$operationTypes;

      var node = nodes[_i10];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];

      for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {
        var operationType = operationTypesNodes[_i12];
        opTypes[operationType.operation] = getNamedType(operationType.type);
      }
    } // Note: While this could make early assertions to get the correctly
    // typed values below, that would throw immediately while type system
    // validation with validateSchema() will produce more actionable results.


    return opTypes;
  }

  function getNamedType(node) {
    var _stdTypeMap$name2;

    var name = node.name.value;
    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];

    if (type === undefined) {
      throw new Error("Unknown type: \"".concat(name, "\"."));
    }

    return type;
  }

  function getWrappedType(node) {
    if (node.kind === _kinds.Kind.LIST_TYPE) {
      return new _definition.GraphQLList(getWrappedType(node.type));
    }

    if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
      return new _definition.GraphQLNonNull(getWrappedType(node.type));
    }

    return getNamedType(node);
  }

  function buildDirective(node) {
    var locations = node.locations.map(function (_ref) {
      var value = _ref.value;
      return value;
    });
    return new _directives.GraphQLDirective({
      name: node.name.value,
      description: getDescription(node, options),
      locations: locations,
      isRepeatable: node.repeatable,
      args: buildArgumentMap(node.arguments),
      astNode: node
    });
  }

  function buildFieldMap(nodes) {
    var fieldConfigMap = Object.create(null);

    for (var _i14 = 0; _i14 < nodes.length; _i14++) {
      var _node$fields;

      var node = nodes[_i14];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];

      for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {
        var field = nodeFields[_i16];
        fieldConfigMap[field.name.value] = {
          // Note: While this could make assertions to get the correctly typed
          // value, that would throw immediately while type system validation
          // with validateSchema() will produce more actionable results.
          type: getWrappedType(field.type),
          description: getDescription(field, options),
          args: buildArgumentMap(field.arguments),
          deprecationReason: getDeprecationReason(field),
          astNode: field
        };
      }
    }

    return fieldConfigMap;
  }

  function buildArgumentMap(args) {
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    var argsNodes = args !== null && args !== void 0 ? args : [];
    var argConfigMap = Object.create(null);

    for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {
      var arg = argsNodes[_i18];
      // Note: While this could make assertions to get the correctly typed
      // value, that would throw immediately while type system validation
      // with validateSchema() will produce more actionable results.
      var type = getWrappedType(arg.type);
      argConfigMap[arg.name.value] = {
        type: type,
        description: getDescription(arg, options),
        defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
        deprecationReason: getDeprecationReason(arg),
        astNode: arg
      };
    }

    return argConfigMap;
  }

  function buildInputFieldMap(nodes) {
    var inputFieldMap = Object.create(null);

    for (var _i20 = 0; _i20 < nodes.length; _i20++) {
      var _node$fields2;

      var node = nodes[_i20];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];

      for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {
        var field = fieldsNodes[_i22];
        // Note: While this could make assertions to get the correctly typed
        // value, that would throw immediately while type system validation
        // with validateSchema() will produce more actionable results.
        var type = getWrappedType(field.type);
        inputFieldMap[field.name.value] = {
          type: type,
          description: getDescription(field, options),
          defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
          deprecationReason: getDeprecationReason(field),
          astNode: field
        };
      }
    }

    return inputFieldMap;
  }

  function buildEnumValueMap(nodes) {
    var enumValueMap = Object.create(null);

    for (var _i24 = 0; _i24 < nodes.length; _i24++) {
      var _node$values;

      var node = nodes[_i24];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];

      for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {
        var value = valuesNodes[_i26];
        enumValueMap[value.name.value] = {
          description: getDescription(value, options),
          deprecationReason: getDeprecationReason(value),
          astNode: value
        };
      }
    }

    return enumValueMap;
  }

  function buildInterfaces(nodes) {
    var interfaces = [];

    for (var _i28 = 0; _i28 < nodes.length; _i28++) {
      var _node$interfaces;

      var node = nodes[_i28];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];

      for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {
        var type = interfacesNodes[_i30];
        // Note: While this could make assertions to get the correctly typed
        // values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable
        // results.
        interfaces.push(getNamedType(type));
      }
    }

    return interfaces;
  }

  function buildUnionTypes(nodes) {
    var types = [];

    for (var _i32 = 0; _i32 < nodes.length; _i32++) {
      var _node$types;

      var node = nodes[_i32];
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
      var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];

      for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {
        var type = typeNodes[_i34];
        // Note: While this could make assertions to get the correctly typed
        // values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable
        // results.
        types.push(getNamedType(type));
      }
    }

    return types;
  }

  function buildType(astNode) {
    var _typeExtensionsMap$na;

    var name = astNode.name.value;
    var description = getDescription(astNode, options);
    var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];

    switch (astNode.kind) {
      case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        {
          var extensionASTNodes = extensionNodes;
          var allNodes = [astNode].concat(extensionASTNodes);
          return new _definition.GraphQLObjectType({
            name: name,
            description: description,
            interfaces: function interfaces() {
              return buildInterfaces(allNodes);
            },
            fields: function fields() {
              return buildFieldMap(allNodes);
            },
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }

      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        {
          var _extensionASTNodes = extensionNodes;

          var _allNodes = [astNode].concat(_extensionASTNodes);

          return new _definition.GraphQLInterfaceType({
            name: name,
            description: description,
            interfaces: function interfaces() {
              return buildInterfaces(_allNodes);
            },
            fields: function fields() {
              return buildFieldMap(_allNodes);
            },
            astNode: astNode,
            extensionASTNodes: _extensionASTNodes
          });
        }

      case _kinds.Kind.ENUM_TYPE_DEFINITION:
        {
          var _extensionASTNodes2 = extensionNodes;

          var _allNodes2 = [astNode].concat(_extensionASTNodes2);

          return new _definition.GraphQLEnumType({
            name: name,
            description: description,
            values: buildEnumValueMap(_allNodes2),
            astNode: astNode,
            extensionASTNodes: _extensionASTNodes2
          });
        }

      case _kinds.Kind.UNION_TYPE_DEFINITION:
        {
          var _extensionASTNodes3 = extensionNodes;

          var _allNodes3 = [astNode].concat(_extensionASTNodes3);

          return new _definition.GraphQLUnionType({
            name: name,
            description: description,
            types: function types() {
              return buildUnionTypes(_allNodes3);
            },
            astNode: astNode,
            extensionASTNodes: _extensionASTNodes3
          });
        }

      case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        {
          var _extensionASTNodes4 = extensionNodes;
          return new _definition.GraphQLScalarType({
            name: name,
            description: description,
            specifiedByUrl: getSpecifiedByUrl(astNode),
            astNode: astNode,
            extensionASTNodes: _extensionASTNodes4
          });
        }

      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        {
          var _extensionASTNodes5 = extensionNodes;

          var _allNodes4 = [astNode].concat(_extensionASTNodes5);

          return new _definition.GraphQLInputObjectType({
            name: name,
            description: description,
            fields: function fields() {
              return buildInputFieldMap(_allNodes4);
            },
            astNode: astNode,
            extensionASTNodes: _extensionASTNodes5
          });
        }
    } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)


    false || (0, _invariant.default)(0, 'Unexpected type definition node: ' + (0, _inspect.default)(astNode));
  }
}

var stdTypeMap = (0, _keyMap.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {
  return type.name;
});
/**
 * Given a field or enum value node, returns the string value for the
 * deprecation reason.
 */

function getDeprecationReason(node) {
  var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);
  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
}
/**
 * Given a scalar node, returns the string value for the specifiedByUrl.
 */


function getSpecifiedByUrl(node) {
  var specifiedBy = (0, _values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective, node);
  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
}
/**
 * Given an ast node, returns its string description.
 * @deprecated: provided to ease adoption and will be removed in v16.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */


function getDescription(node, options) {
  if (node.description) {
    return node.description.value;
  }

  if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
    var rawValue = getLeadingCommentBlock(node);

    if (rawValue !== undefined) {
      return (0, _blockString.dedentBlockStringValue)('\n' + rawValue);
    }
  }
}

function getLeadingCommentBlock(node) {
  var loc = node.loc;

  if (!loc) {
    return;
  }

  var comments = [];
  var token = loc.startToken.prev;

  while (token != null && token.kind === _tokenKind.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
    var value = String(token.value);
    comments.push(value);
    token = token.prev;
  }

  return comments.length > 0 ? comments.reverse().join('\n') : undefined;
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/keyMap.js":"1oNDS","../jsutils/inspect.js":"2onMM","../jsutils/mapValue.js":"5uH4m","../jsutils/invariant.js":"6ywmM","../jsutils/devAssert.js":"1F99Z","../language/kinds.js":"6m0P6","../language/tokenKind.js":"3Ou8x","../language/blockString.js":"2xxl5","../language/predicates.js":"6u0g4","../validation/validate.js":"4pm1K","../execution/values.js":"2MWR0","../type/schema.js":"5cHio","../type/scalars.js":"7mSzF","../type/introspection.js":"5yLF0","../type/directives.js":"2w91d","../type/definition.js":"n9nw4","./valueFromAST.js":"1YgnG"}],"6Xr0t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lexicographicSortSchema = lexicographicSortSchema;

var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _keyValMap = _interopRequireDefault(require("../jsutils/keyValMap.js"));

var _naturalCompare = _interopRequireDefault(require("../jsutils/naturalCompare.js"));

var _schema = require("../type/schema.js");

var _directives = require("../type/directives.js");

var _introspection = require("../type/introspection.js");

var _definition = require("../type/definition.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Sort GraphQLSchema.
 *
 * This function returns a sorted copy of the given GraphQLSchema.
 */
function lexicographicSortSchema(schema) {
  var schemaConfig = schema.toConfig();
  var typeMap = (0, _keyValMap.default)(sortByName(schemaConfig.types), function (type) {
    return type.name;
  }, sortNamedType);
  return new _schema.GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {
    types: (0, _objectValues.default)(typeMap),
    directives: sortByName(schemaConfig.directives).map(sortDirective),
    query: replaceMaybeType(schemaConfig.query),
    mutation: replaceMaybeType(schemaConfig.mutation),
    subscription: replaceMaybeType(schemaConfig.subscription)
  }));

  function replaceType(type) {
    if ((0, _definition.isListType)(type)) {
      // $FlowFixMe[incompatible-return]
      return new _definition.GraphQLList(replaceType(type.ofType));
    } else if ((0, _definition.isNonNullType)(type)) {
      // $FlowFixMe[incompatible-return]
      return new _definition.GraphQLNonNull(replaceType(type.ofType));
    }

    return replaceNamedType(type);
  }

  function replaceNamedType(type) {
    return typeMap[type.name];
  }

  function replaceMaybeType(maybeType) {
    return maybeType && replaceNamedType(maybeType);
  }

  function sortDirective(directive) {
    var config = directive.toConfig();
    return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
      locations: sortBy(config.locations, function (x) {
        return x;
      }),
      args: sortArgs(config.args)
    }));
  }

  function sortArgs(args) {
    return sortObjMap(args, function (arg) {
      return _objectSpread(_objectSpread({}, arg), {}, {
        type: replaceType(arg.type)
      });
    });
  }

  function sortFields(fieldsMap) {
    return sortObjMap(fieldsMap, function (field) {
      return _objectSpread(_objectSpread({}, field), {}, {
        type: replaceType(field.type),
        args: sortArgs(field.args)
      });
    });
  }

  function sortInputFields(fieldsMap) {
    return sortObjMap(fieldsMap, function (field) {
      return _objectSpread(_objectSpread({}, field), {}, {
        type: replaceType(field.type)
      });
    });
  }

  function sortTypes(arr) {
    return sortByName(arr).map(replaceNamedType);
  }

  function sortNamedType(type) {
    if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
      return type;
    }

    if ((0, _definition.isObjectType)(type)) {
      var config = type.toConfig();
      return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
        interfaces: function interfaces() {
          return sortTypes(config.interfaces);
        },
        fields: function fields() {
          return sortFields(config.fields);
        }
      }));
    }

    if ((0, _definition.isInterfaceType)(type)) {
      var _config = type.toConfig();

      return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {
        interfaces: function interfaces() {
          return sortTypes(_config.interfaces);
        },
        fields: function fields() {
          return sortFields(_config.fields);
        }
      }));
    }

    if ((0, _definition.isUnionType)(type)) {
      var _config2 = type.toConfig();

      return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {
        types: function types() {
          return sortTypes(_config2.types);
        }
      }));
    }

    if ((0, _definition.isEnumType)(type)) {
      var _config3 = type.toConfig();

      return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {
        values: sortObjMap(_config3.values)
      }));
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


    if ((0, _definition.isInputObjectType)(type)) {
      var _config4 = type.toConfig();

      return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {
        fields: function fields() {
          return sortInputFields(_config4.fields);
        }
      }));
    } // istanbul ignore next (Not reachable. All possible types have been considered)


    false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
  }
}

function sortObjMap(map, sortValueFn) {
  var sortedMap = Object.create(null);
  var sortedKeys = sortBy(Object.keys(map), function (x) {
    return x;
  });

  for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {
    var key = sortedKeys[_i2];
    var value = map[key];
    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
  }

  return sortedMap;
}

function sortByName(array) {
  return sortBy(array, function (obj) {
    return obj.name;
  });
}

function sortBy(array, mapToKey) {
  return array.slice().sort(function (obj1, obj2) {
    var key1 = mapToKey(obj1);
    var key2 = mapToKey(obj2);
    return (0, _naturalCompare.default)(key1, key2);
  });
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../jsutils/keyValMap.js":"76vLr","../jsutils/naturalCompare.js":"7Fmta","../type/schema.js":"5cHio","../type/directives.js":"2w91d","../type/introspection.js":"5yLF0","../type/definition.js":"n9nw4"}],"7bW2u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printSchema = printSchema;
exports.printIntrospectionSchema = printIntrospectionSchema;
exports.printType = printType;

var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _printer = require("../language/printer.js");

var _blockString = require("../language/blockString.js");

var _introspection = require("../type/introspection.js");

var _scalars = require("../type/scalars.js");

var _directives = require("../type/directives.js");

var _definition = require("../type/definition.js");

var _astFromValue = require("./astFromValue.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
function printSchema(schema, options) {
  return printFilteredSchema(schema, function (n) {
    return !(0, _directives.isSpecifiedDirective)(n);
  }, isDefinedType, options);
}

function printIntrospectionSchema(schema, options) {
  return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
}

function isDefinedType(type) {
  return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
}

function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
  var directives = schema.getDirectives().filter(directiveFilter);
  var types = (0, _objectValues.default)(schema.getTypeMap()).filter(typeFilter);
  return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {
    return printDirective(directive, options);
  }), types.map(function (type) {
    return printType(type, options);
  })).filter(Boolean).join('\n\n') + '\n';
}

function printSchemaDefinition(schema) {
  if (schema.description == null && isSchemaOfCommonNames(schema)) {
    return;
  }

  var operationTypes = [];
  var queryType = schema.getQueryType();

  if (queryType) {
    operationTypes.push("  query: ".concat(queryType.name));
  }

  var mutationType = schema.getMutationType();

  if (mutationType) {
    operationTypes.push("  mutation: ".concat(mutationType.name));
  }

  var subscriptionType = schema.getSubscriptionType();

  if (subscriptionType) {
    operationTypes.push("  subscription: ".concat(subscriptionType.name));
  }

  return printDescription({}, schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
}
/**
 * GraphQL schema define root types for each type of operation. These types are
 * the same as any other type and can be named in any manner, however there is
 * a common naming convention:
 *
 *   schema {
 *     query: Query
 *     mutation: Mutation
 *   }
 *
 * When using this naming convention, the schema description can be omitted.
 */


function isSchemaOfCommonNames(schema) {
  var queryType = schema.getQueryType();

  if (queryType && queryType.name !== 'Query') {
    return false;
  }

  var mutationType = schema.getMutationType();

  if (mutationType && mutationType.name !== 'Mutation') {
    return false;
  }

  var subscriptionType = schema.getSubscriptionType();

  if (subscriptionType && subscriptionType.name !== 'Subscription') {
    return false;
  }

  return true;
}

function printType(type, options) {
  if ((0, _definition.isScalarType)(type)) {
    return printScalar(type, options);
  }

  if ((0, _definition.isObjectType)(type)) {
    return printObject(type, options);
  }

  if ((0, _definition.isInterfaceType)(type)) {
    return printInterface(type, options);
  }

  if ((0, _definition.isUnionType)(type)) {
    return printUnion(type, options);
  }

  if ((0, _definition.isEnumType)(type)) {
    return printEnum(type, options);
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isInputObjectType)(type)) {
    return printInputObject(type, options);
  } // istanbul ignore next (Not reachable. All possible types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
}

function printScalar(type, options) {
  return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
}

function printImplementedInterfaces(type) {
  var interfaces = type.getInterfaces();
  return interfaces.length ? ' implements ' + interfaces.map(function (i) {
    return i.name;
  }).join(' & ') : '';
}

function printObject(type, options) {
  return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}

function printInterface(type, options) {
  return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}

function printUnion(type, options) {
  var types = type.getTypes();
  var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
  return printDescription(options, type) + 'union ' + type.name + possibleTypes;
}

function printEnum(type, options) {
  var values = type.getValues().map(function (value, i) {
    return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason);
  });
  return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
}

function printInputObject(type, options) {
  var fields = (0, _objectValues.default)(type.getFields()).map(function (f, i) {
    return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
  });
  return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
}

function printFields(options, type) {
  var fields = (0, _objectValues.default)(type.getFields()).map(function (f, i) {
    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason);
  });
  return printBlock(fields);
}

function printBlock(items) {
  return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
}

function printArgs(options, args) {
  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  if (args.length === 0) {
    return '';
  } // If every arg does not have a description, print them on one line.


  if (args.every(function (arg) {
    return !arg.description;
  })) {
    return '(' + args.map(printInputValue).join(', ') + ')';
  }

  return '(\n' + args.map(function (arg, i) {
    return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
  }).join('\n') + '\n' + indentation + ')';
}

function printInputValue(arg) {
  var defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);
  var argDecl = arg.name + ': ' + String(arg.type);

  if (defaultAST) {
    argDecl += " = ".concat((0, _printer.print)(defaultAST));
  }

  return argDecl + printDeprecated(arg.deprecationReason);
}

function printDirective(directive, options) {
  return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
}

function printDeprecated(reason) {
  if (reason == null) {
    return '';
  }

  var reasonAST = (0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString);

  if (reasonAST && reason !== _directives.DEFAULT_DEPRECATION_REASON) {
    return ' @deprecated(reason: ' + (0, _printer.print)(reasonAST) + ')';
  }

  return ' @deprecated';
}

function printSpecifiedByUrl(scalar) {
  if (scalar.specifiedByUrl == null) {
    return '';
  }

  var url = scalar.specifiedByUrl;
  var urlAST = (0, _astFromValue.astFromValue)(url, _scalars.GraphQLString);
  urlAST || (0, _invariant.default)(0, 'Unexpected null value returned from `astFromValue` for specifiedByUrl');
  return ' @specifiedBy(url: ' + (0, _printer.print)(urlAST) + ')';
}

function printDescription(options, def) {
  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var description = def.description;

  if (description == null) {
    return '';
  }

  if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
    return printDescriptionWithComments(description, indentation, firstInBlock);
  }

  var preferMultipleLines = description.length > 70;
  var blockString = (0, _blockString.printBlockString)(description, '', preferMultipleLines);
  var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
  return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
}

function printDescriptionWithComments(description, indentation, firstInBlock) {
  var prefix = indentation && !firstInBlock ? '\n' : '';
  var comment = description.split('\n').map(function (line) {
    return indentation + (line !== '' ? '# ' + line : '#');
  }).join('\n');
  return prefix + comment + '\n';
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../language/printer.js":"1UYdT","../language/blockString.js":"2xxl5","../type/introspection.js":"5yLF0","../type/scalars.js":"7mSzF","../type/directives.js":"2w91d","../type/definition.js":"n9nw4","./astFromValue.js":"5zDuh"}],"6hFSI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatAST = concatAST;

/**
 * Provided a collection of ASTs, presumably each from different files,
 * concatenate the ASTs together into batched AST, useful for validating many
 * GraphQL source files which together represent one conceptual application.
 */
function concatAST(documents) {
  var definitions = [];

  for (var _i2 = 0; _i2 < documents.length; _i2++) {
    var doc = documents[_i2];
    definitions = definitions.concat(doc.definitions);
  }

  return {
    kind: 'Document',
    definitions: definitions
  };
}

},{}],"2sDjh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separateOperations = separateOperations;

var _kinds = require("../language/kinds.js");

var _visitor = require("../language/visitor.js");

/**
 * separateOperations accepts a single AST document which may contain many
 * operations and fragments and returns a collection of AST documents each of
 * which contains a single operation as well the fragment definitions it
 * refers to.
 */
function separateOperations(documentAST) {
  var operations = [];
  var depGraph = Object.create(null); // Populate metadata and build a dependency graph.

  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
    var definitionNode = _documentAST$definiti2[_i2];

    switch (definitionNode.kind) {
      case _kinds.Kind.OPERATION_DEFINITION:
        operations.push(definitionNode);
        break;

      case _kinds.Kind.FRAGMENT_DEFINITION:
        depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);
        break;
    }
  } // For each operation, produce a new synthesized AST which includes only what
  // is necessary for completing that operation.


  var separatedDocumentASTs = Object.create(null);

  var _loop = function _loop(_i4) {
    var operation = operations[_i4];
    var dependencies = new Set();

    for (var _i6 = 0, _collectDependencies2 = collectDependencies(operation.selectionSet); _i6 < _collectDependencies2.length; _i6++) {
      var fragmentName = _collectDependencies2[_i6];
      collectTransitiveDependencies(dependencies, depGraph, fragmentName);
    } // Provides the empty string for anonymous operations.


    var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted
    // to retain the same order as the original document.

    separatedDocumentASTs[operationName] = {
      kind: _kinds.Kind.DOCUMENT,
      definitions: documentAST.definitions.filter(function (node) {
        return node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);
      })
    };
  };

  for (var _i4 = 0; _i4 < operations.length; _i4++) {
    _loop(_i4);
  }

  return separatedDocumentASTs;
}

// From a dependency graph, collects a list of transitive dependencies by
// recursing through a dependency graph.
function collectTransitiveDependencies(collected, depGraph, fromName) {
  if (!collected.has(fromName)) {
    collected.add(fromName);
    var immediateDeps = depGraph[fromName];

    if (immediateDeps !== undefined) {
      for (var _i8 = 0; _i8 < immediateDeps.length; _i8++) {
        var toName = immediateDeps[_i8];
        collectTransitiveDependencies(collected, depGraph, toName);
      }
    }
  }
}

function collectDependencies(selectionSet) {
  var dependencies = [];
  (0, _visitor.visit)(selectionSet, {
    FragmentSpread: function FragmentSpread(node) {
      dependencies.push(node.name.value);
    }
  });
  return dependencies;
}

},{"../language/kinds.js":"6m0P6","../language/visitor.js":"wwZgf"}],"44rQz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stripIgnoredCharacters = stripIgnoredCharacters;

var _source = require("../language/source.js");

var _tokenKind = require("../language/tokenKind.js");

var _lexer = require("../language/lexer.js");

var _blockString = require("../language/blockString.js");

/**
 * Strips characters that are not significant to the validity or execution
 * of a GraphQL document:
 *   - UnicodeBOM
 *   - WhiteSpace
 *   - LineTerminator
 *   - Comment
 *   - Comma
 *   - BlockString indentation
 *
 * Note: It is required to have a delimiter character between neighboring
 * non-punctuator tokens and this function always uses single space as delimiter.
 *
 * It is guaranteed that both input and output documents if parsed would result
 * in the exact same AST except for nodes location.
 *
 * Warning: It is guaranteed that this function will always produce stable results.
 * However, it's not guaranteed that it will stay the same between different
 * releases due to bugfixes or changes in the GraphQL specification.
 *
 * Query example:
 *
 * query SomeQuery($foo: String!, $bar: String) {
 *   someField(foo: $foo, bar: $bar) {
 *     a
 *     b {
 *       c
 *       d
 *     }
 *   }
 * }
 *
 * Becomes:
 *
 * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
 *
 * SDL example:
 *
 * """
 * Type description
 * """
 * type Foo {
 *   """
 *   Field description
 *   """
 *   bar: String
 * }
 *
 * Becomes:
 *
 * """Type description""" type Foo{"""Field description""" bar:String}
 */
function stripIgnoredCharacters(source) {
  var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
  var body = sourceObj.body;
  var lexer = new _lexer.Lexer(sourceObj);
  var strippedBody = '';
  var wasLastAddedTokenNonPunctuator = false;

  while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
    var currentToken = lexer.token;
    var tokenKind = currentToken.kind;
    /**
     * Every two non-punctuator tokens should have space between them.
     * Also prevent case of non-punctuator token following by spread resulting
     * in invalid token (e.g. `1...` is invalid Float token).
     */

    var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);

    if (wasLastAddedTokenNonPunctuator) {
      if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
        strippedBody += ' ';
      }
    }

    var tokenBody = body.slice(currentToken.start, currentToken.end);

    if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
      strippedBody += dedentBlockString(tokenBody);
    } else {
      strippedBody += tokenBody;
    }

    wasLastAddedTokenNonPunctuator = isNonPunctuator;
  }

  return strippedBody;
}

function dedentBlockString(blockStr) {
  // skip leading and trailing triple quotations
  var rawStr = blockStr.slice(3, -3);
  var body = (0, _blockString.dedentBlockStringValue)(rawStr);

  if ((0, _blockString.getBlockStringIndentation)(body) > 0) {
    body = '\n' + body;
  }

  var lastChar = body[body.length - 1];
  var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';

  if (hasTrailingQuote || lastChar === '\\') {
    body += '\n';
  }

  return '"""' + body + '"""';
}

},{"../language/source.js":"4CqkM","../language/tokenKind.js":"3Ou8x","../language/lexer.js":"6U1AF","../language/blockString.js":"2xxl5"}],"21WGd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findBreakingChanges = findBreakingChanges;
exports.findDangerousChanges = findDangerousChanges;
exports.DangerousChangeType = exports.BreakingChangeType = void 0;

var _objectValues = _interopRequireDefault(require("../polyfills/objectValues.js"));

var _keyMap = _interopRequireDefault(require("../jsutils/keyMap.js"));

var _inspect = _interopRequireDefault(require("../jsutils/inspect.js"));

var _invariant = _interopRequireDefault(require("../jsutils/invariant.js"));

var _naturalCompare = _interopRequireDefault(require("../jsutils/naturalCompare.js"));

var _printer = require("../language/printer.js");

var _visitor = require("../language/visitor.js");

var _scalars = require("../type/scalars.js");

var _definition = require("../type/definition.js");

var _astFromValue = require("./astFromValue.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BreakingChangeType = Object.freeze({
  TYPE_REMOVED: 'TYPE_REMOVED',
  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',
  IMPLEMENTED_INTERFACE_REMOVED: 'IMPLEMENTED_INTERFACE_REMOVED',
  FIELD_REMOVED: 'FIELD_REMOVED',
  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',
  ARG_REMOVED: 'ARG_REMOVED',
  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',
  DIRECTIVE_REPEATABLE_REMOVED: 'DIRECTIVE_REPEATABLE_REMOVED',
  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'
});
exports.BreakingChangeType = BreakingChangeType;
var DangerousChangeType = Object.freeze({
  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',
  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',
  IMPLEMENTED_INTERFACE_ADDED: 'IMPLEMENTED_INTERFACE_ADDED',
  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'
});
exports.DangerousChangeType = DangerousChangeType;

/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of breaking changes covered by the other functions down below.
 */
function findBreakingChanges(oldSchema, newSchema) {
  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {
    return change.type in BreakingChangeType;
  });
  return breakingChanges;
}
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of potentially dangerous changes covered by the other functions down below.
 */


function findDangerousChanges(oldSchema, newSchema) {
  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {
    return change.type in DangerousChangeType;
  });
  return dangerousChanges;
}

function findSchemaChanges(oldSchema, newSchema) {
  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
}

function findDirectiveChanges(oldSchema, newSchema) {
  var schemaChanges = [];
  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());

  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {
    var oldDirective = _directivesDiff$remov2[_i2];
    schemaChanges.push({
      type: BreakingChangeType.DIRECTIVE_REMOVED,
      description: "".concat(oldDirective.name, " was removed.")
    });
  }

  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {
    var _ref2 = _directivesDiff$persi2[_i4];
    var _oldDirective = _ref2[0];
    var newDirective = _ref2[1];
    var argsDiff = diff(_oldDirective.args, newDirective.args);

    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {
      var newArg = _argsDiff$added2[_i6];

      if ((0, _definition.isRequiredArgument)(newArg)) {
        schemaChanges.push({
          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
          description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
        });
      }
    }

    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {
      var oldArg = _argsDiff$removed2[_i8];
      schemaChanges.push({
        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
        description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
      });
    }

    if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
      schemaChanges.push({
        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
        description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
      });
    }

    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {
      var location = _oldDirective$locatio2[_i10];

      if (newDirective.locations.indexOf(location) === -1) {
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
          description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
        });
      }
    }
  }

  return schemaChanges;
}

function findTypeChanges(oldSchema, newSchema) {
  var schemaChanges = [];
  var typesDiff = diff((0, _objectValues.default)(oldSchema.getTypeMap()), (0, _objectValues.default)(newSchema.getTypeMap()));

  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {
    var oldType = _typesDiff$removed2[_i12];
    schemaChanges.push({
      type: BreakingChangeType.TYPE_REMOVED,
      description: (0, _scalars.isSpecifiedScalarType)(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
    });
  }

  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {
    var _ref4 = _typesDiff$persisted2[_i14];
    var _oldType = _ref4[0];
    var newType = _ref4[1];

    if ((0, _definition.isEnumType)(_oldType) && (0, _definition.isEnumType)(newType)) {
      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
    } else if ((0, _definition.isUnionType)(_oldType) && (0, _definition.isUnionType)(newType)) {
      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
    } else if ((0, _definition.isInputObjectType)(_oldType) && (0, _definition.isInputObjectType)(newType)) {
      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
    } else if ((0, _definition.isObjectType)(_oldType) && (0, _definition.isObjectType)(newType)) {
      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
    } else if ((0, _definition.isInterfaceType)(_oldType) && (0, _definition.isInterfaceType)(newType)) {
      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
    } else if (_oldType.constructor !== newType.constructor) {
      schemaChanges.push({
        type: BreakingChangeType.TYPE_CHANGED_KIND,
        description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
      });
    }
  }

  return schemaChanges;
}

function findInputObjectTypeChanges(oldType, newType) {
  var schemaChanges = [];
  var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));

  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {
    var newField = _fieldsDiff$added2[_i16];

    if ((0, _definition.isRequiredInputField)(newField)) {
      schemaChanges.push({
        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
        description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
      });
    } else {
      schemaChanges.push({
        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
        description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
      });
    }
  }

  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {
    var oldField = _fieldsDiff$removed2[_i18];
    schemaChanges.push({
      type: BreakingChangeType.FIELD_REMOVED,
      description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
    });
  }

  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {
    var _ref6 = _fieldsDiff$persisted2[_i20];
    var _oldField = _ref6[0];
    var _newField = _ref6[1];
    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);

    if (!isSafe) {
      schemaChanges.push({
        type: BreakingChangeType.FIELD_CHANGED_KIND,
        description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
      });
    }
  }

  return schemaChanges;
}

function findUnionTypeChanges(oldType, newType) {
  var schemaChanges = [];
  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());

  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {
    var newPossibleType = _possibleTypesDiff$ad2[_i22];
    schemaChanges.push({
      type: DangerousChangeType.TYPE_ADDED_TO_UNION,
      description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
    });
  }

  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {
    var oldPossibleType = _possibleTypesDiff$re2[_i24];
    schemaChanges.push({
      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
      description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
    });
  }

  return schemaChanges;
}

function findEnumTypeChanges(oldType, newType) {
  var schemaChanges = [];
  var valuesDiff = diff(oldType.getValues(), newType.getValues());

  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {
    var newValue = _valuesDiff$added2[_i26];
    schemaChanges.push({
      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
      description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
    });
  }

  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {
    var oldValue = _valuesDiff$removed2[_i28];
    schemaChanges.push({
      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
      description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
    });
  }

  return schemaChanges;
}

function findImplementedInterfacesChanges(oldType, newType) {
  var schemaChanges = [];
  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());

  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {
    var newInterface = _interfacesDiff$added2[_i30];
    schemaChanges.push({
      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
      description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
    });
  }

  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {
    var oldInterface = _interfacesDiff$remov2[_i32];
    schemaChanges.push({
      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
      description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
    });
  }

  return schemaChanges;
}

function findFieldChanges(oldType, newType) {
  var schemaChanges = [];
  var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));

  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {
    var oldField = _fieldsDiff$removed4[_i34];
    schemaChanges.push({
      type: BreakingChangeType.FIELD_REMOVED,
      description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
    });
  }

  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {
    var _ref8 = _fieldsDiff$persisted4[_i36];
    var _oldField2 = _ref8[0];
    var newField = _ref8[1];
    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);

    if (!isSafe) {
      schemaChanges.push({
        type: BreakingChangeType.FIELD_CHANGED_KIND,
        description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
      });
    }
  }

  return schemaChanges;
}

function findArgChanges(oldType, oldField, newField) {
  var schemaChanges = [];
  var argsDiff = diff(oldField.args, newField.args);

  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {
    var oldArg = _argsDiff$removed4[_i38];
    schemaChanges.push({
      type: BreakingChangeType.ARG_REMOVED,
      description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
    });
  }

  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {
    var _ref10 = _argsDiff$persisted2[_i40];
    var _oldArg = _ref10[0];
    var newArg = _ref10[1];
    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);

    if (!isSafe) {
      schemaChanges.push({
        type: BreakingChangeType.ARG_CHANGED_KIND,
        description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
      });
    } else if (_oldArg.defaultValue !== undefined) {
      if (newArg.defaultValue === undefined) {
        schemaChanges.push({
          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
          description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
        });
      } else {
        // Since we looking only for client's observable changes we should
        // compare default values in the same representation as they are
        // represented inside introspection.
        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);

        if (oldValueStr !== newValueStr) {
          schemaChanges.push({
            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
          });
        }
      }
    }
  }

  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {
    var _newArg = _argsDiff$added4[_i42];

    if ((0, _definition.isRequiredArgument)(_newArg)) {
      schemaChanges.push({
        type: BreakingChangeType.REQUIRED_ARG_ADDED,
        description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
      });
    } else {
      schemaChanges.push({
        type: DangerousChangeType.OPTIONAL_ARG_ADDED,
        description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
      });
    }
  }

  return schemaChanges;
}

function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
  if ((0, _definition.isListType)(oldType)) {
    return (// if they're both lists, make sure the underlying types are compatible
      (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe
      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
    );
  }

  if ((0, _definition.isNonNullType)(oldType)) {
    // if they're both non-null, make sure the underlying types are compatible
    return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
  }

  return (// if they're both named types, see if their names are equivalent
    (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
    (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
  );
}

function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
  if ((0, _definition.isListType)(oldType)) {
    // if they're both lists, make sure the underlying types are compatible
    return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
  }

  if ((0, _definition.isNonNullType)(oldType)) {
    return (// if they're both non-null, make sure the underlying types are
      // compatible
      (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe
      !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
    );
  } // if they're both named types, see if their names are equivalent


  return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
}

function typeKindName(type) {
  if ((0, _definition.isScalarType)(type)) {
    return 'a Scalar type';
  }

  if ((0, _definition.isObjectType)(type)) {
    return 'an Object type';
  }

  if ((0, _definition.isInterfaceType)(type)) {
    return 'an Interface type';
  }

  if ((0, _definition.isUnionType)(type)) {
    return 'a Union type';
  }

  if ((0, _definition.isEnumType)(type)) {
    return 'an Enum type';
  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')


  if ((0, _definition.isInputObjectType)(type)) {
    return 'an Input type';
  } // istanbul ignore next (Not reachable. All possible named types have been considered)


  false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
}

function stringifyValue(value, type) {
  var ast = (0, _astFromValue.astFromValue)(value, type);
  ast != null || (0, _invariant.default)(0);
  var sortedAST = (0, _visitor.visit)(ast, {
    ObjectValue: function ObjectValue(objectNode) {
      // Make a copy since sort mutates array
      var fields = [].concat(objectNode.fields);
      fields.sort(function (fieldA, fieldB) {
        return (0, _naturalCompare.default)(fieldA.name.value, fieldB.name.value);
      });
      return _objectSpread(_objectSpread({}, objectNode), {}, {
        fields: fields
      });
    }
  });
  return (0, _printer.print)(sortedAST);
}

function diff(oldArray, newArray) {
  var added = [];
  var removed = [];
  var persisted = [];
  var oldMap = (0, _keyMap.default)(oldArray, function (_ref11) {
    var name = _ref11.name;
    return name;
  });
  var newMap = (0, _keyMap.default)(newArray, function (_ref12) {
    var name = _ref12.name;
    return name;
  });

  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {
    var oldItem = oldArray[_i44];
    var newItem = newMap[oldItem.name];

    if (newItem === undefined) {
      removed.push(oldItem);
    } else {
      persisted.push([oldItem, newItem]);
    }
  }

  for (var _i46 = 0; _i46 < newArray.length; _i46++) {
    var _newItem = newArray[_i46];

    if (oldMap[_newItem.name] === undefined) {
      added.push(_newItem);
    }
  }

  return {
    added: added,
    persisted: persisted,
    removed: removed
  };
}

},{"../polyfills/objectValues.js":"2BpS0","../jsutils/keyMap.js":"1oNDS","../jsutils/inspect.js":"2onMM","../jsutils/invariant.js":"6ywmM","../jsutils/naturalCompare.js":"7Fmta","../language/printer.js":"1UYdT","../language/visitor.js":"wwZgf","../type/scalars.js":"7mSzF","../type/definition.js":"n9nw4","./astFromValue.js":"5zDuh"}],"2x31A":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDeprecatedUsages = findDeprecatedUsages;

var _validate = require("../validation/validate.js");

var _NoDeprecatedCustomRule = require("../validation/rules/custom/NoDeprecatedCustomRule.js");

/**
 * A validation rule which reports deprecated usages.
 *
 * Returns a list of GraphQLError instances describing each deprecated use.
 *
 * @deprecated Please use `validate` with `NoDeprecatedCustomRule` instead:
 *
 * ```
 * import { validate, NoDeprecatedCustomRule } from 'graphql'
 *
 * const errors = validate(schema, document, [NoDeprecatedCustomRule])
 * ```
 */
function findDeprecatedUsages(schema, ast) {
  return (0, _validate.validate)(schema, ast, [_NoDeprecatedCustomRule.NoDeprecatedCustomRule]);
}

},{"../validation/validate.js":"4pm1K","../validation/rules/custom/NoDeprecatedCustomRule.js":"5roLf"}],"6mqMf":[function(require,module,exports) {
'use strict';

module.exports = function (data, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (node) {
        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        if (node === undefined) return;
        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
        if (typeof node !== 'object') return JSON.stringify(node);

        var i, out;
        if (Array.isArray(node)) {
            out = '[';
            for (i = 0; i < node.length; i++) {
                if (i) out += ',';
                out += stringify(node[i]) || 'null';
            }
            return out + ']';
        }

        if (node === null) return 'null';

        if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify('__cycle__');
            throw new TypeError('Converting circular structure to JSON');
        }

        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = '';
        for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify(node[key]);

            if (!value) continue;
            if (out) out += ',';
            out += JSON.stringify(key) + ':' + value;
        }
        seen.splice(seenIndex, 1);
        return '{' + out + '}';
    })(data);
};

},{}],"47kMI":[function(require,module,exports) {
module.exports = require('./lib/Observable.js').Observable;

},{"./lib/Observable.js":"1cy2G"}],"1cy2G":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Observable = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// === Symbol Support ===
var hasSymbols = function () {
  return typeof Symbol === 'function';
};

var hasSymbol = function (name) {
  return hasSymbols() && Boolean(Symbol[name]);
};

var getSymbol = function (name) {
  return hasSymbol(name) ? Symbol[name] : '@@' + name;
};

if (hasSymbols() && !hasSymbol('observable')) {
  Symbol.observable = Symbol('observable');
}

var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

function getMethod(obj, key) {
  var value = obj[key];
  if (value == null) return undefined;
  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
  return value;
}

function getSpecies(obj) {
  var ctor = obj.constructor;

  if (ctor !== undefined) {
    ctor = ctor[SymbolSpecies];

    if (ctor === null) {
      ctor = undefined;
    }
  }

  return ctor !== undefined ? ctor : Observable;
}

function isObservable(x) {
  return x instanceof Observable; // SPEC: Brand check
}

function hostReportError(e) {
  if (hostReportError.log) {
    hostReportError.log(e);
  } else {
    setTimeout(function () {
      throw e;
    });
  }
}

function enqueue(fn) {
  Promise.resolve().then(function () {
    try {
      fn();
    } catch (e) {
      hostReportError(e);
    }
  });
}

function cleanupSubscription(subscription) {
  var cleanup = subscription._cleanup;
  if (cleanup === undefined) return;
  subscription._cleanup = undefined;

  if (!cleanup) {
    return;
  }

  try {
    if (typeof cleanup === 'function') {
      cleanup();
    } else {
      var unsubscribe = getMethod(cleanup, 'unsubscribe');

      if (unsubscribe) {
        unsubscribe.call(cleanup);
      }
    }
  } catch (e) {
    hostReportError(e);
  }
}

function closeSubscription(subscription) {
  subscription._observer = undefined;
  subscription._queue = undefined;
  subscription._state = 'closed';
}

function flushSubscription(subscription) {
  var queue = subscription._queue;

  if (!queue) {
    return;
  }

  subscription._queue = undefined;
  subscription._state = 'ready';

  for (var i = 0; i < queue.length; ++i) {
    notifySubscription(subscription, queue[i].type, queue[i].value);
    if (subscription._state === 'closed') break;
  }
}

function notifySubscription(subscription, type, value) {
  subscription._state = 'running';
  var observer = subscription._observer;

  try {
    var m = getMethod(observer, type);

    switch (type) {
      case 'next':
        if (m) m.call(observer, value);
        break;

      case 'error':
        closeSubscription(subscription);
        if (m) m.call(observer, value);else throw value;
        break;

      case 'complete':
        closeSubscription(subscription);
        if (m) m.call(observer);
        break;
    }
  } catch (e) {
    hostReportError(e);
  }

  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
}

function onNotify(subscription, type, value) {
  if (subscription._state === 'closed') return;

  if (subscription._state === 'buffering') {
    subscription._queue.push({
      type: type,
      value: value
    });

    return;
  }

  if (subscription._state !== 'ready') {
    subscription._state = 'buffering';
    subscription._queue = [{
      type: type,
      value: value
    }];
    enqueue(function () {
      return flushSubscription(subscription);
    });
    return;
  }

  notifySubscription(subscription, type, value);
}

var Subscription =
/*#__PURE__*/
function () {
  function Subscription(observer, subscriber) {
    _classCallCheck(this, Subscription);

    // ASSERT: observer is an object
    // ASSERT: subscriber is callable
    this._cleanup = undefined;
    this._observer = observer;
    this._queue = undefined;
    this._state = 'initializing';
    var subscriptionObserver = new SubscriptionObserver(this);

    try {
      this._cleanup = subscriber.call(undefined, subscriptionObserver);
    } catch (e) {
      subscriptionObserver.error(e);
    }

    if (this._state === 'initializing') this._state = 'ready';
  }

  _createClass(Subscription, [{
    key: "unsubscribe",
    value: function unsubscribe() {
      if (this._state !== 'closed') {
        closeSubscription(this);
        cleanupSubscription(this);
      }
    }
  }, {
    key: "closed",
    get: function () {
      return this._state === 'closed';
    }
  }]);

  return Subscription;
}();

var SubscriptionObserver =
/*#__PURE__*/
function () {
  function SubscriptionObserver(subscription) {
    _classCallCheck(this, SubscriptionObserver);

    this._subscription = subscription;
  }

  _createClass(SubscriptionObserver, [{
    key: "next",
    value: function next(value) {
      onNotify(this._subscription, 'next', value);
    }
  }, {
    key: "error",
    value: function error(value) {
      onNotify(this._subscription, 'error', value);
    }
  }, {
    key: "complete",
    value: function complete() {
      onNotify(this._subscription, 'complete');
    }
  }, {
    key: "closed",
    get: function () {
      return this._subscription._state === 'closed';
    }
  }]);

  return SubscriptionObserver;
}();

var Observable =
/*#__PURE__*/
function () {
  function Observable(subscriber) {
    _classCallCheck(this, Observable);

    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
    this._subscriber = subscriber;
  }

  _createClass(Observable, [{
    key: "subscribe",
    value: function subscribe(observer) {
      if (typeof observer !== 'object' || observer === null) {
        observer = {
          next: observer,
          error: arguments[1],
          complete: arguments[2]
        };
      }

      return new Subscription(observer, this._subscriber);
    }
  }, {
    key: "forEach",
    value: function forEach(fn) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (typeof fn !== 'function') {
          reject(new TypeError(fn + ' is not a function'));
          return;
        }

        function done() {
          subscription.unsubscribe();
          resolve();
        }

        var subscription = _this.subscribe({
          next: function (value) {
            try {
              fn(value, done);
            } catch (e) {
              reject(e);
              subscription.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
      });
    }
  }, {
    key: "map",
    value: function map(fn) {
      var _this2 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
      var C = getSpecies(this);
      return new C(function (observer) {
        return _this2.subscribe({
          next: function (value) {
            try {
              value = fn(value);
            } catch (e) {
              return observer.error(e);
            }

            observer.next(value);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            observer.complete();
          }
        });
      });
    }
  }, {
    key: "filter",
    value: function filter(fn) {
      var _this3 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
      var C = getSpecies(this);
      return new C(function (observer) {
        return _this3.subscribe({
          next: function (value) {
            try {
              if (!fn(value)) return;
            } catch (e) {
              return observer.error(e);
            }

            observer.next(value);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            observer.complete();
          }
        });
      });
    }
  }, {
    key: "reduce",
    value: function reduce(fn) {
      var _this4 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
      var C = getSpecies(this);
      var hasSeed = arguments.length > 1;
      var hasValue = false;
      var seed = arguments[1];
      var acc = seed;
      return new C(function (observer) {
        return _this4.subscribe({
          next: function (value) {
            var first = !hasValue;
            hasValue = true;

            if (!first || hasSeed) {
              try {
                acc = fn(acc, value);
              } catch (e) {
                return observer.error(e);
              }
            } else {
              acc = value;
            }
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
            observer.next(acc);
            observer.complete();
          }
        });
      });
    }
  }, {
    key: "concat",
    value: function concat() {
      var _this5 = this;

      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }

      var C = getSpecies(this);
      return new C(function (observer) {
        var subscription;
        var index = 0;

        function startNext(next) {
          subscription = next.subscribe({
            next: function (v) {
              observer.next(v);
            },
            error: function (e) {
              observer.error(e);
            },
            complete: function () {
              if (index === sources.length) {
                subscription = undefined;
                observer.complete();
              } else {
                startNext(C.from(sources[index++]));
              }
            }
          });
        }

        startNext(_this5);
        return function () {
          if (subscription) {
            subscription.unsubscribe();
            subscription = undefined;
          }
        };
      });
    }
  }, {
    key: "flatMap",
    value: function flatMap(fn) {
      var _this6 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
      var C = getSpecies(this);
      return new C(function (observer) {
        var subscriptions = [];

        var outer = _this6.subscribe({
          next: function (value) {
            if (fn) {
              try {
                value = fn(value);
              } catch (e) {
                return observer.error(e);
              }
            }

            var inner = C.from(value).subscribe({
              next: function (value) {
                observer.next(value);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                var i = subscriptions.indexOf(inner);
                if (i >= 0) subscriptions.splice(i, 1);
                completeIfDone();
              }
            });
            subscriptions.push(inner);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            completeIfDone();
          }
        });

        function completeIfDone() {
          if (outer.closed && subscriptions.length === 0) observer.complete();
        }

        return function () {
          subscriptions.forEach(function (s) {
            return s.unsubscribe();
          });
          outer.unsubscribe();
        };
      });
    }
  }, {
    key: SymbolObservable,
    value: function () {
      return this;
    }
  }], [{
    key: "from",
    value: function from(x) {
      var C = typeof this === 'function' ? this : Observable;
      if (x == null) throw new TypeError(x + ' is not an object');
      var method = getMethod(x, SymbolObservable);

      if (method) {
        var observable = method.call(x);
        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
        if (isObservable(observable) && observable.constructor === C) return observable;
        return new C(function (observer) {
          return observable.subscribe(observer);
        });
      }

      if (hasSymbol('iterator')) {
        method = getMethod(x, SymbolIterator);

        if (method) {
          return new C(function (observer) {
            enqueue(function () {
              if (observer.closed) return;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _item = _step.value;
                  observer.next(_item);
                  if (observer.closed) return;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              observer.complete();
            });
          });
        }
      }

      if (Array.isArray(x)) {
        return new C(function (observer) {
          enqueue(function () {
            if (observer.closed) return;

            for (var i = 0; i < x.length; ++i) {
              observer.next(x[i]);
              if (observer.closed) return;
            }

            observer.complete();
          });
        });
      }

      throw new TypeError(x + ' is not observable');
    }
  }, {
    key: "of",
    value: function of() {
      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }

      var C = typeof this === 'function' ? this : Observable;
      return new C(function (observer) {
        enqueue(function () {
          if (observer.closed) return;

          for (var i = 0; i < items.length; ++i) {
            observer.next(items[i]);
            if (observer.closed) return;
          }

          observer.complete();
        });
      });
    }
  }, {
    key: SymbolSpecies,
    get: function () {
      return this;
    }
  }]);

  return Observable;
}();

exports.Observable = Observable;

if (hasSymbols()) {
  Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
      symbol: SymbolObservable,
      hostReportError: hostReportError
    },
    configurable: true
  });
}
},{}],"4nTep":[function(require,module,exports) {
"use strict";
var global = arguments[3];
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _ponyfill = require('./ponyfill.js');
var _ponyfill2 = _interopRequireDefault(_ponyfill);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}
var root;
/*global window*/
if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}
var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;

},{"./ponyfill.js":"2FCpF"}],"2FCpF":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {

			// This just needs to be something that won't trample other user's Symbol.for use
			// It also will guide people to the source of their issues, if this is problematic.
			// META: It's a resource locator!
			result = _Symbol['for']('https://github.com/benlesh/symbol-observable');
			try {
				_Symbol.observable = result;
			} catch (err) {
				// Do nothing. In some environments, users have frozen `Symbol` for security reasons,
				// if it is frozen assigning to it will throw. In this case, we don't care, because
				// they will need to use the returned value from the ponyfill.
			}
		}
	} else {
		result = '@@observable';
	}

	return result;
};
},{}],"3T4ud":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, '__esModule', {
  value: true
});
var utilities = require('../../utilities');
var tsInvariant = require('ts-invariant');
var tslib = require('tslib');
function fromError(errorValue) {
  return new utilities.Observable(function (observer) {
    observer.error(errorValue);
  });
}
function toPromise(observable) {
  var completed = false;
  return new Promise(function (resolve, reject) {
    observable.subscribe({
      next: function (data) {
        if (completed) {
          "development" === "production" || tsInvariant.invariant.warn("Promise Wrapper does not support multiple results from Observable");
        } else {
          completed = true;
          resolve(data);
        }
      },
      error: reject
    });
  });
}
function fromPromise(promise) {
  return new utilities.Observable(function (observer) {
    promise.then(function (value) {
      observer.next(value);
      observer.complete();
    }).catch(observer.error.bind(observer));
  });
}
var throwServerError = function (response, result, message) {
  var error = new Error(message);
  error.name = 'ServerError';
  error.response = response;
  error.statusCode = response.status;
  error.result = result;
  throw error;
};
function validateOperation(operation) {
  var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];
  for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
    var key = _a[_i];
    if (OPERATION_FIELDS.indexOf(key) < 0) {
      throw "development" === "production" ? new tsInvariant.InvariantError(26) : new tsInvariant.InvariantError("illegal argument: " + key);
    }
  }
  return operation;
}
function createOperation(starting, operation) {
  var context = tslib.__assign({}, starting);
  var setContext = function (next) {
    if (typeof next === 'function') {
      context = tslib.__assign(tslib.__assign({}, context), next(context));
    } else {
      context = tslib.__assign(tslib.__assign({}, context), next);
    }
  };
  var getContext = function () {
    return tslib.__assign({}, context);
  };
  Object.defineProperty(operation, 'setContext', {
    enumerable: false,
    value: setContext
  });
  Object.defineProperty(operation, 'getContext', {
    enumerable: false,
    value: getContext
  });
  return operation;
}
function transformOperation(operation) {
  var transformedOperation = {
    variables: operation.variables || ({}),
    extensions: operation.extensions || ({}),
    operationName: operation.operationName,
    query: operation.query
  };
  if (!transformedOperation.operationName) {
    transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? utilities.getOperationName(transformedOperation.query) || undefined : '';
  }
  return transformedOperation;
}
exports.createOperation = createOperation;
exports.fromError = fromError;
exports.fromPromise = fromPromise;
exports.throwServerError = throwServerError;
exports.toPromise = toPromise;
exports.transformOperation = transformOperation;
exports.validateOperation = validateOperation;

},{"../../utilities":"6w0bE","ts-invariant":"3uYVD","tslib":"4rd38"}],"1Z7oR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, '__esModule', {
  value: true
});
var utils = require('../utils');
var tsInvariant = require('ts-invariant');
var tslib = require('tslib');
var graphql = require('graphql');
var core = require('../core');
var utilities = require('../../utilities');
var hasOwnProperty = Object.prototype.hasOwnProperty;
function parseAndCheckHttpResponse(operations) {
  return function (response) {
    return response.text().then(function (bodyText) {
      try {
        return JSON.parse(bodyText);
      } catch (err) {
        var parseError = err;
        parseError.name = 'ServerParseError';
        parseError.response = response;
        parseError.statusCode = response.status;
        parseError.bodyText = bodyText;
        throw parseError;
      }
    }).then(function (result) {
      if (response.status >= 300) {
        utils.throwServerError(response, result, "Response not successful: Received status code " + response.status);
      }
      if (!Array.isArray(result) && !hasOwnProperty.call(result, 'data') && !hasOwnProperty.call(result, 'errors')) {
        utils.throwServerError(response, result, "Server response was missing for query '" + (Array.isArray(operations) ? operations.map(function (op) {
          return op.operationName;
        }) : operations.operationName) + "'.");
      }
      return result;
    });
  };
}
var serializeFetchParameter = function (p, label) {
  var serialized;
  try {
    serialized = JSON.stringify(p);
  } catch (e) {
    var parseError = "development" === "production" ? new tsInvariant.InvariantError(23) : new tsInvariant.InvariantError("Network request failed. " + label + " is not serializable: " + e.message);
    parseError.parseError = e;
    throw parseError;
  }
  return serialized;
};
var defaultHttpOptions = {
  includeQuery: true,
  includeExtensions: false
};
var defaultHeaders = {
  accept: '*/*',
  'content-type': 'application/json'
};
var defaultOptions = {
  method: 'POST'
};
var fallbackHttpConfig = {
  http: defaultHttpOptions,
  headers: defaultHeaders,
  options: defaultOptions
};
var selectHttpOptionsAndBody = function (operation, fallbackConfig) {
  var configs = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    configs[_i - 2] = arguments[_i];
  }
  var options = tslib.__assign(tslib.__assign({}, fallbackConfig.options), {
    headers: fallbackConfig.headers,
    credentials: fallbackConfig.credentials
  });
  var http = fallbackConfig.http || ({});
  configs.forEach(function (config) {
    options = tslib.__assign(tslib.__assign(tslib.__assign({}, options), config.options), {
      headers: tslib.__assign(tslib.__assign({}, options.headers), config.headers)
    });
    if (config.credentials) options.credentials = config.credentials;
    http = tslib.__assign(tslib.__assign({}, http), config.http);
  });
  var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
  var body = {
    operationName: operationName,
    variables: variables
  };
  if (http.includeExtensions) body.extensions = extensions;
  if (http.includeQuery) body.query = graphql.print(query);
  return {
    options: options,
    body: body
  };
};
var checkFetcher = function (fetcher) {
  if (!fetcher && typeof fetch === 'undefined') {
    throw "development" === "production" ? new tsInvariant.InvariantError(22) : new tsInvariant.InvariantError("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    ");
  }
};
var createSignalIfSupported = function () {
  if (typeof AbortController === 'undefined') return {
    controller: false,
    signal: false
  };
  var controller = new AbortController();
  var signal = controller.signal;
  return {
    controller: controller,
    signal: signal
  };
};
var selectURI = function (operation, fallbackURI) {
  var context = operation.getContext();
  var contextURI = context.uri;
  if (contextURI) {
    return contextURI;
  } else if (typeof fallbackURI === 'function') {
    return fallbackURI(operation);
  } else {
    return fallbackURI || '/graphql';
  }
};
function rewriteURIForGET(chosenURI, body) {
  var queryParams = [];
  var addQueryParam = function (key, value) {
    queryParams.push(key + "=" + encodeURIComponent(value));
  };
  if (('query' in body)) {
    addQueryParam('query', body.query);
  }
  if (body.operationName) {
    addQueryParam('operationName', body.operationName);
  }
  if (body.variables) {
    var serializedVariables = void 0;
    try {
      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');
    } catch (parseError) {
      return {
        parseError: parseError
      };
    }
    addQueryParam('variables', serializedVariables);
  }
  if (body.extensions) {
    var serializedExtensions = void 0;
    try {
      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');
    } catch (parseError) {
      return {
        parseError: parseError
      };
    }
    addQueryParam('extensions', serializedExtensions);
  }
  var fragment = '', preFragment = chosenURI;
  var fragmentStart = chosenURI.indexOf('#');
  if (fragmentStart !== -1) {
    fragment = chosenURI.substr(fragmentStart);
    preFragment = chosenURI.substr(0, fragmentStart);
  }
  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';
  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;
  return {
    newURI: newURI
  };
}
var createHttpLink = function (linkOptions) {
  if (linkOptions === void 0) {
    linkOptions = {};
  }
  var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, _b = linkOptions.includeUnusedVariables, includeUnusedVariables = _b === void 0 ? false : _b, requestOptions = tslib.__rest(linkOptions, ["uri", "fetch", "includeExtensions", "useGETForQueries", "includeUnusedVariables"]);
  checkFetcher(fetcher);
  if (!fetcher) {
    fetcher = fetch;
  }
  var linkConfig = {
    http: {
      includeExtensions: includeExtensions
    },
    options: requestOptions.fetchOptions,
    credentials: requestOptions.credentials,
    headers: requestOptions.headers
  };
  return new core.ApolloLink(function (operation) {
    var chosenURI = selectURI(operation, uri);
    var context = operation.getContext();
    var clientAwarenessHeaders = {};
    if (context.clientAwareness) {
      var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;
      if (name_1) {
        clientAwarenessHeaders['apollographql-client-name'] = name_1;
      }
      if (version) {
        clientAwarenessHeaders['apollographql-client-version'] = version;
      }
    }
    var contextHeaders = tslib.__assign(tslib.__assign({}, clientAwarenessHeaders), context.headers);
    var contextConfig = {
      http: context.http,
      options: context.fetchOptions,
      credentials: context.credentials,
      headers: contextHeaders
    };
    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;
    if (body.variables && !includeUnusedVariables) {
      var unusedNames_1 = new Set(Object.keys(body.variables));
      graphql.visit(operation.query, {
        Variable: function (node, _key, parent) {
          if (parent && parent.kind !== 'VariableDefinition') {
            unusedNames_1.delete(node.name.value);
          }
        }
      });
      if (unusedNames_1.size) {
        body.variables = tslib.__assign({}, body.variables);
        unusedNames_1.forEach(function (name) {
          delete body.variables[name];
        });
      }
    }
    var controller;
    if (!options.signal) {
      var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
      controller = _controller;
      if (controller) options.signal = signal;
    }
    var definitionIsMutation = function (d) {
      return d.kind === 'OperationDefinition' && d.operation === 'mutation';
    };
    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {
      options.method = 'GET';
    }
    if (options.method === 'GET') {
      var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
      if (parseError) {
        return utils.fromError(parseError);
      }
      chosenURI = newURI;
    } else {
      try {
        options.body = serializeFetchParameter(body, 'Payload');
      } catch (parseError) {
        return utils.fromError(parseError);
      }
    }
    return new utilities.Observable(function (observer) {
      fetcher(chosenURI, options).then(function (response) {
        operation.setContext({
          response: response
        });
        return response;
      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {
        observer.next(result);
        observer.complete();
        return result;
      }).catch(function (err) {
        if (err.name === 'AbortError') return;
        if (err.result && err.result.errors && err.result.data) {
          observer.next(err.result);
        }
        observer.error(err);
      });
      return function () {
        if (controller) controller.abort();
      };
    });
  });
};
var HttpLink = (function (_super) {
  tslib.__extends(HttpLink, _super);
  function HttpLink(options) {
    if (options === void 0) {
      options = {};
    }
    var _this = _super.call(this, createHttpLink(options).request) || this;
    _this.options = options;
    return _this;
  }
  return HttpLink;
})(core.ApolloLink);
exports.HttpLink = HttpLink;
exports.checkFetcher = checkFetcher;
exports.createHttpLink = createHttpLink;
exports.createSignalIfSupported = createSignalIfSupported;
exports.fallbackHttpConfig = fallbackHttpConfig;
exports.parseAndCheckHttpResponse = parseAndCheckHttpResponse;
exports.rewriteURIForGET = rewriteURIForGET;
exports.selectHttpOptionsAndBody = selectHttpOptionsAndBody;
exports.selectURI = selectURI;
exports.serializeFetchParameter = serializeFetchParameter;

},{"../utils":"3T4ud","ts-invariant":"3uYVD","tslib":"4rd38","graphql":"5gqTn","../core":"5MGqW","../../utilities":"6w0bE"}],"5NdOJ":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _a = Object.prototype, toString = _a.toString, hasOwnProperty = _a.hasOwnProperty;
var fnToStr = Function.prototype.toString;
var previousComparisons = new Map();
/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */
function equal(a, b) {
    try {
        return check(a, b);
    }
    finally {
        previousComparisons.clear();
    }
}
function check(a, b) {
    // If the two values are strictly equal, our job is easy.
    if (a === b) {
        return true;
    }
    // Object.prototype.toString returns a representation of the runtime type of
    // the given value that is considerably more precise than typeof.
    var aTag = toString.call(a);
    var bTag = toString.call(b);
    // If the runtime types of a and b are different, they could maybe be equal
    // under some interpretation of equality, but for simplicity and performance
    // we just return false instead.
    if (aTag !== bTag) {
        return false;
    }
    switch (aTag) {
        case '[object Array]':
            // Arrays are a lot like other objects, but we can cheaply compare their
            // lengths as a short-cut before comparing their elements.
            if (a.length !== b.length)
                return false;
        // Fall through to object case...
        case '[object Object]': {
            if (previouslyCompared(a, b))
                return true;
            var aKeys = definedKeys(a);
            var bKeys = definedKeys(b);
            // If `a` and `b` have a different number of enumerable keys, they
            // must be different.
            var keyCount = aKeys.length;
            if (keyCount !== bKeys.length)
                return false;
            // Now make sure they have the same keys.
            for (var k = 0; k < keyCount; ++k) {
                if (!hasOwnProperty.call(b, aKeys[k])) {
                    return false;
                }
            }
            // Finally, check deep equality of all child properties.
            for (var k = 0; k < keyCount; ++k) {
                var key = aKeys[k];
                if (!check(a[key], b[key])) {
                    return false;
                }
            }
            return true;
        }
        case '[object Error]':
            return a.name === b.name && a.message === b.message;
        case '[object Number]':
            // Handle NaN, which is !== itself.
            if (a !== a)
                return b !== b;
        // Fall through to shared +a === +b case...
        case '[object Boolean]':
        case '[object Date]':
            return +a === +b;
        case '[object RegExp]':
        case '[object String]':
            return a == "" + b;
        case '[object Map]':
        case '[object Set]': {
            if (a.size !== b.size)
                return false;
            if (previouslyCompared(a, b))
                return true;
            var aIterator = a.entries();
            var isMap = aTag === '[object Map]';
            while (true) {
                var info = aIterator.next();
                if (info.done)
                    break;
                // If a instanceof Set, aValue === aKey.
                var _a = info.value, aKey = _a[0], aValue = _a[1];
                // So this works the same way for both Set and Map.
                if (!b.has(aKey)) {
                    return false;
                }
                // However, we care about deep equality of values only when dealing
                // with Map structures.
                if (isMap && !check(aValue, b.get(aKey))) {
                    return false;
                }
            }
            return true;
        }
        case '[object AsyncFunction]':
        case '[object GeneratorFunction]':
        case '[object AsyncGeneratorFunction]':
        case '[object Function]': {
            var aCode = fnToStr.call(a);
            if (aCode !== fnToStr.call(b)) {
                return false;
            }
            // We consider non-native functions equal if they have the same code
            // (native functions require === because their code is censored).
            // Note that this behavior is not entirely sound, since !== function
            // objects with the same code can behave differently depending on
            // their closure scope. However, any function can behave differently
            // depending on the values of its input arguments (including this)
            // and its calling context (including its closure scope), even
            // though the function object is === to itself; and it is entirely
            // possible for functions that are not === to behave exactly the
            // same under all conceivable circumstances. Because none of these
            // factors are statically decidable in JavaScript, JS function
            // equality is not well-defined. This ambiguity allows us to
            // consider the best possible heuristic among various imperfect
            // options, and equating non-native functions that have the same
            // code has enormous practical benefits, such as when comparing
            // functions that are repeatedly passed as fresh function
            // expressions within objects that are otherwise deeply equal. Since
            // any function created from the same syntactic expression (in the
            // same code location) will always stringify to the same code
            // according to fnToStr.call, we can reasonably expect these
            // repeatedly passed function expressions to have the same code, and
            // thus behave "the same" (with all the caveats mentioned above),
            // even though the runtime function objects are !== to one another.
            return !endsWith(aCode, nativeCodeSuffix);
        }
    }
    // Otherwise the values are not equal.
    return false;
}
function definedKeys(obj) {
    // Remember that the second argument to Array.prototype.filter will be
    // used as `this` within the callback function.
    return Object.keys(obj).filter(isDefinedKey, obj);
}
function isDefinedKey(key) {
    return this[key] !== void 0;
}
var nativeCodeSuffix = "{ [native code] }";
function endsWith(full, suffix) {
    var fromIndex = full.length - suffix.length;
    return fromIndex >= 0 &&
        full.indexOf(suffix, fromIndex) === fromIndex;
}
function previouslyCompared(a, b) {
    // Though cyclic references can make an object graph appear infinite from the
    // perspective of a depth-first traversal, the graph still contains a finite
    // number of distinct object references. We use the previousComparisons cache
    // to avoid comparing the same pair of object references more than once, which
    // guarantees termination (even if we end up comparing every object in one
    // graph to every object in the other graph, which is extremely unlikely),
    // while still allowing weird isomorphic structures (like rings with different
    // lengths) a chance to pass the equality test.
    var bSet = previousComparisons.get(a);
    if (bSet) {
        // Return true here because we can be sure false will be returned somewhere
        // else if the objects are not equivalent.
        if (bSet.has(b))
            return true;
    }
    else {
        previousComparisons.set(a, bSet = new Set);
    }
    bSet.add(b);
    return false;
}

exports.default = equal;
exports.equal = equal;

},{}],"6ik73":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var utilities = require('../utilities');

function isApolloError(err) {
    return err.hasOwnProperty('graphQLErrors');
}
var generateErrorMessage = function (err) {
    var message = '';
    if (utilities.isNonEmptyArray(err.graphQLErrors)) {
        err.graphQLErrors.forEach(function (graphQLError) {
            var errorMessage = graphQLError
                ? graphQLError.message
                : 'Error message not found.';
            message += errorMessage + "\n";
        });
    }
    if (err.networkError) {
        message += err.networkError.message + "\n";
    }
    message = message.replace(/\n$/, '');
    return message;
};
var ApolloError = (function (_super) {
    tslib.__extends(ApolloError, _super);
    function ApolloError(_a) {
        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;
        var _this = _super.call(this, errorMessage) || this;
        _this.graphQLErrors = graphQLErrors || [];
        _this.networkError = networkError || null;
        _this.message = errorMessage || generateErrorMessage(_this);
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError.prototype;
        return _this;
    }
    return ApolloError;
}(Error));

exports.ApolloError = ApolloError;
exports.isApolloError = isApolloError;

},{"tslib":"4rd38","../utilities":"6w0bE"}],"7trpi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, '__esModule', {
  value: true
});
var optimism = require('optimism');
var utilities = require('../utilities');
var tslib = require('tslib');
var tsInvariant = require('ts-invariant');
var equality = require('@wry/equality');
var context = require('@wry/context');
var ApolloCache = (function () {
  function ApolloCache() {
    this.getFragmentDoc = optimism.wrap(utilities.getFragmentQueryDocument);
  }
  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {
    this.performTransaction(transaction, optimisticId);
  };
  ApolloCache.prototype.transformDocument = function (document) {
    return document;
  };
  ApolloCache.prototype.identify = function (object) {
    return;
  };
  ApolloCache.prototype.gc = function () {
    return [];
  };
  ApolloCache.prototype.modify = function (options) {
    return false;
  };
  ApolloCache.prototype.transformForLink = function (document) {
    return document;
  };
  ApolloCache.prototype.readQuery = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = !!options.optimistic;
    }
    return this.read({
      rootId: options.id || 'ROOT_QUERY',
      query: options.query,
      variables: options.variables,
      returnPartialData: options.returnPartialData,
      optimistic: optimistic
    });
  };
  ApolloCache.prototype.readFragment = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = !!options.optimistic;
    }
    return this.read({
      query: this.getFragmentDoc(options.fragment, options.fragmentName),
      variables: options.variables,
      rootId: options.id,
      returnPartialData: options.returnPartialData,
      optimistic: optimistic
    });
  };
  ApolloCache.prototype.writeQuery = function (options) {
    return this.write({
      dataId: options.id || 'ROOT_QUERY',
      result: options.data,
      query: options.query,
      variables: options.variables,
      broadcast: options.broadcast
    });
  };
  ApolloCache.prototype.writeFragment = function (options) {
    return this.write({
      dataId: options.id,
      result: options.data,
      variables: options.variables,
      query: this.getFragmentDoc(options.fragment, options.fragmentName),
      broadcast: options.broadcast
    });
  };
  return ApolloCache;
})();
(function (Cache) {})(exports.Cache || (exports.Cache = {}));
var MissingFieldError = (function () {
  function MissingFieldError(message, path, query, clientOnly, variables) {
    this.message = message;
    this.path = path;
    this.query = query;
    this.clientOnly = clientOnly;
    this.variables = variables;
  }
  return MissingFieldError;
})();
var hasOwn = Object.prototype.hasOwnProperty;
function getTypenameFromStoreObject(store, objectOrReference) {
  return utilities.isReference(objectOrReference) ? store.get(objectOrReference.__ref, "__typename") : objectOrReference && objectOrReference.__typename;
}
var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
function fieldNameFromStoreName(storeFieldName) {
  var match = storeFieldName.match(TypeOrFieldNameRegExp);
  return match ? match[0] : storeFieldName;
}
function selectionSetMatchesResult(selectionSet, result, variables) {
  if (result && typeof result === "object") {
    return Array.isArray(result) ? result.every(function (item) {
      return selectionSetMatchesResult(selectionSet, item, variables);
    }) : selectionSet.selections.every(function (field) {
      if (utilities.isField(field) && utilities.shouldInclude(field, variables)) {
        var key = utilities.resultKeyNameFromField(field);
        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));
      }
      return true;
    });
  }
  return false;
}
function storeValueIsStoreObject(value) {
  return value !== null && typeof value === "object" && !utilities.isReference(value) && !Array.isArray(value);
}
function makeProcessedFieldsMerger() {
  return new utilities.DeepMerger();
}
var DELETE = Object.create(null);
var delModifier = function () {
  return DELETE;
};
var INVALIDATE = Object.create(null);
var EntityStore = (function () {
  function EntityStore(policies, group) {
    var _this = this;
    this.policies = policies;
    this.group = group;
    this.data = Object.create(null);
    this.rootIds = Object.create(null);
    this.refs = Object.create(null);
    this.getFieldValue = function (objectOrReference, storeFieldName) {
      return utilities.maybeDeepFreeze(utilities.isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);
    };
    this.canRead = function (objOrRef) {
      return utilities.isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === "object";
    };
    this.toReference = function (objOrIdOrRef, mergeIntoStore) {
      if (typeof objOrIdOrRef === "string") {
        return utilities.makeReference(objOrIdOrRef);
      }
      if (utilities.isReference(objOrIdOrRef)) {
        return objOrIdOrRef;
      }
      var id = _this.policies.identify(objOrIdOrRef)[0];
      if (id) {
        var ref = utilities.makeReference(id);
        if (mergeIntoStore) {
          _this.merge(id, objOrIdOrRef);
        }
        return ref;
      }
    };
  }
  EntityStore.prototype.toObject = function () {
    return tslib.__assign({}, this.data);
  };
  EntityStore.prototype.has = function (dataId) {
    return this.lookup(dataId, true) !== void 0;
  };
  EntityStore.prototype.get = function (dataId, fieldName) {
    this.group.depend(dataId, fieldName);
    if (hasOwn.call(this.data, dataId)) {
      var storeObject = this.data[dataId];
      if (storeObject && hasOwn.call(storeObject, fieldName)) {
        return storeObject[fieldName];
      }
    }
    if (fieldName === "__typename" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {
      return this.policies.rootTypenamesById[dataId];
    }
    if (this instanceof Layer) {
      return this.parent.get(dataId, fieldName);
    }
  };
  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {
    if (dependOnExistence) this.group.depend(dataId, "__exists");
    if (hasOwn.call(this.data, dataId)) {
      return this.data[dataId];
    }
    if (this instanceof Layer) {
      return this.parent.lookup(dataId, dependOnExistence);
    }
    if (this.policies.rootTypenamesById[dataId]) {
      return Object.create(null);
    }
  };
  EntityStore.prototype.merge = function (dataId, incoming) {
    var _this = this;
    var existing = this.lookup(dataId);
    var merged = new utilities.DeepMerger(storeObjectReconciler).merge(existing, incoming);
    this.data[dataId] = merged;
    if (merged !== existing) {
      delete this.refs[dataId];
      if (this.group.caching) {
        var fieldsToDirty_1 = Object.create(null);
        if (!existing) fieldsToDirty_1.__exists = 1;
        Object.keys(incoming).forEach(function (storeFieldName) {
          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
            fieldsToDirty_1[storeFieldName] = 1;
            var fieldName = fieldNameFromStoreName(storeFieldName);
            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {
              fieldsToDirty_1[fieldName] = 1;
            }
            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
              delete merged[storeFieldName];
            }
          }
        });
        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {
          return _this.group.dirty(dataId, fieldName);
        });
      }
    }
  };
  EntityStore.prototype.modify = function (dataId, fields) {
    var _this = this;
    var storeObject = this.lookup(dataId);
    if (storeObject) {
      var changedFields_1 = Object.create(null);
      var needToMerge_1 = false;
      var allDeleted_1 = true;
      var sharedDetails_1 = {
        DELETE: DELETE,
        INVALIDATE: INVALIDATE,
        isReference: utilities.isReference,
        toReference: this.toReference,
        canRead: this.canRead,
        readField: function (fieldNameOrOptions, from) {
          return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
            fieldName: fieldNameOrOptions,
            from: from || utilities.makeReference(dataId)
          } : fieldNameOrOptions, {
            store: _this
          });
        }
      };
      Object.keys(storeObject).forEach(function (storeFieldName) {
        var fieldName = fieldNameFromStoreName(storeFieldName);
        var fieldValue = storeObject[storeFieldName];
        if (fieldValue === void 0) return;
        var modify = typeof fields === "function" ? fields : fields[storeFieldName] || fields[fieldName];
        if (modify) {
          var newValue = modify === delModifier ? DELETE : modify(utilities.maybeDeepFreeze(fieldValue), tslib.__assign(tslib.__assign({}, sharedDetails_1), {
            fieldName: fieldName,
            storeFieldName: storeFieldName,
            storage: _this.getStorage(dataId, storeFieldName)
          }));
          if (newValue === INVALIDATE) {
            _this.group.dirty(dataId, storeFieldName);
          } else {
            if (newValue === DELETE) newValue = void 0;
            if (newValue !== fieldValue) {
              changedFields_1[storeFieldName] = newValue;
              needToMerge_1 = true;
              fieldValue = newValue;
            }
          }
        }
        if (fieldValue !== void 0) {
          allDeleted_1 = false;
        }
      });
      if (needToMerge_1) {
        this.merge(dataId, changedFields_1);
        if (allDeleted_1) {
          if (this instanceof Layer) {
            this.data[dataId] = void 0;
          } else {
            delete this.data[dataId];
          }
          this.group.dirty(dataId, "__exists");
        }
        return true;
      }
    }
    return false;
  };
  EntityStore.prototype.delete = function (dataId, fieldName, args) {
    var _a;
    var storeObject = this.lookup(dataId);
    if (storeObject) {
      var typename = this.getFieldValue(storeObject, "__typename");
      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({
        typename: typename,
        fieldName: fieldName,
        args: args
      }) : fieldName;
      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);
    }
    return false;
  };
  EntityStore.prototype.evict = function (options) {
    var evicted = false;
    if (options.id) {
      if (hasOwn.call(this.data, options.id)) {
        evicted = this.delete(options.id, options.fieldName, options.args);
      }
      if (this instanceof Layer) {
        evicted = this.parent.evict(options) || evicted;
      }
      if (options.fieldName || evicted) {
        this.group.dirty(options.id, options.fieldName || "__exists");
      }
    }
    return evicted;
  };
  EntityStore.prototype.clear = function () {
    this.replace(null);
  };
  EntityStore.prototype.extract = function () {
    var _this = this;
    var obj = this.toObject();
    var extraRootIds = [];
    this.getRootIdSet().forEach(function (id) {
      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {
        extraRootIds.push(id);
      }
    });
    if (extraRootIds.length) {
      obj.__META = {
        extraRootIds: extraRootIds.sort()
      };
    }
    return obj;
  };
  EntityStore.prototype.replace = function (newData) {
    var _this = this;
    Object.keys(this.data).forEach(function (dataId) {
      if (!(newData && hasOwn.call(newData, dataId))) {
        _this.delete(dataId);
      }
    });
    if (newData) {
      var __META = newData.__META, rest_1 = tslib.__rest(newData, ["__META"]);
      Object.keys(rest_1).forEach(function (dataId) {
        _this.merge(dataId, rest_1[dataId]);
      });
      if (__META) {
        __META.extraRootIds.forEach(this.retain, this);
      }
    }
  };
  EntityStore.prototype.retain = function (rootId) {
    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
  };
  EntityStore.prototype.release = function (rootId) {
    if (this.rootIds[rootId] > 0) {
      var count = --this.rootIds[rootId];
      if (!count) delete this.rootIds[rootId];
      return count;
    }
    return 0;
  };
  EntityStore.prototype.getRootIdSet = function (ids) {
    if (ids === void 0) {
      ids = new Set();
    }
    Object.keys(this.rootIds).forEach(ids.add, ids);
    if (this instanceof Layer) {
      this.parent.getRootIdSet(ids);
    } else {
      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
    }
    return ids;
  };
  EntityStore.prototype.gc = function () {
    var _this = this;
    var ids = this.getRootIdSet();
    var snapshot = this.toObject();
    ids.forEach(function (id) {
      if (hasOwn.call(snapshot, id)) {
        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
        delete snapshot[id];
      }
    });
    var idsToRemove = Object.keys(snapshot);
    if (idsToRemove.length) {
      var root_1 = this;
      while (root_1 instanceof Layer) root_1 = root_1.parent;
      idsToRemove.forEach(function (id) {
        return root_1.delete(id);
      });
    }
    return idsToRemove;
  };
  EntityStore.prototype.findChildRefIds = function (dataId) {
    if (!hasOwn.call(this.refs, dataId)) {
      var found_1 = this.refs[dataId] = Object.create(null);
      var workSet_1 = new Set([this.data[dataId]]);
      var canTraverse_1 = function (obj) {
        return obj !== null && typeof obj === 'object';
      };
      workSet_1.forEach(function (obj) {
        if (utilities.isReference(obj)) {
          found_1[obj.__ref] = true;
        } else if (canTraverse_1(obj)) {
          Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);
        }
      });
    }
    return this.refs[dataId];
  };
  EntityStore.prototype.makeCacheKey = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return this.group.keyMaker.lookupArray(args);
  };
  return EntityStore;
})();
var CacheGroup = (function () {
  function CacheGroup(caching) {
    this.caching = caching;
    this.d = null;
    this.keyMaker = new optimism.KeyTrie(utilities.canUseWeakMap);
    this.d = caching ? optimism.dep() : null;
  }
  CacheGroup.prototype.depend = function (dataId, storeFieldName) {
    if (this.d) {
      this.d(makeDepKey(dataId, storeFieldName));
      var fieldName = fieldNameFromStoreName(storeFieldName);
      if (fieldName !== storeFieldName) {
        this.d(makeDepKey(dataId, fieldName));
      }
    }
  };
  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {
    if (this.d) {
      this.d.dirty(makeDepKey(dataId, storeFieldName));
    }
  };
  return CacheGroup;
})();
function makeDepKey(dataId, storeFieldName) {
  return storeFieldName + '#' + dataId;
}
(function (EntityStore) {
  var Root = (function (_super) {
    tslib.__extends(Root, _super);
    function Root(_a) {
      var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;
      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;
      _this.storageTrie = new optimism.KeyTrie(utilities.canUseWeakMap);
      _this.sharedLayerGroup = new CacheGroup(resultCaching);
      if (seed) _this.replace(seed);
      return _this;
    }
    Root.prototype.addLayer = function (layerId, replay) {
      return new Layer(layerId, this, replay, this.sharedLayerGroup);
    };
    Root.prototype.removeLayer = function () {
      return this;
    };
    Root.prototype.getStorage = function () {
      return this.storageTrie.lookupArray(arguments);
    };
    return Root;
  })(EntityStore);
  EntityStore.Root = Root;
})(EntityStore || (EntityStore = {}));
var Layer = (function (_super) {
  tslib.__extends(Layer, _super);
  function Layer(id, parent, replay, group) {
    var _this = _super.call(this, parent.policies, group) || this;
    _this.id = id;
    _this.parent = parent;
    _this.replay = replay;
    _this.group = group;
    replay(_this);
    return _this;
  }
  Layer.prototype.addLayer = function (layerId, replay) {
    return new Layer(layerId, this, replay, this.group);
  };
  Layer.prototype.removeLayer = function (layerId) {
    var _this = this;
    var parent = this.parent.removeLayer(layerId);
    if (layerId === this.id) {
      if (this.group.caching) {
        Object.keys(this.data).forEach(function (dataId) {
          if (_this.data[dataId] !== parent.lookup(dataId)) {
            _this.delete(dataId);
          }
        });
      }
      return parent;
    }
    if (parent === this.parent) return this;
    return parent.addLayer(this.id, this.replay);
  };
  Layer.prototype.toObject = function () {
    return tslib.__assign(tslib.__assign({}, this.parent.toObject()), this.data);
  };
  Layer.prototype.findChildRefIds = function (dataId) {
    var fromParent = this.parent.findChildRefIds(dataId);
    return hasOwn.call(this.data, dataId) ? tslib.__assign(tslib.__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
  };
  Layer.prototype.getStorage = function () {
    var p = this.parent;
    while (p.parent) p = p.parent;
    return p.getStorage.apply(p, arguments);
  };
  return Layer;
})(EntityStore);
function storeObjectReconciler(existingObject, incomingObject, property) {
  var existingValue = existingObject[property];
  var incomingValue = incomingObject[property];
  return equality.equal(existingValue, incomingValue) ? existingValue : incomingValue;
}
function supportsResultCaching(store) {
  return !!(store instanceof EntityStore && store.group.caching);
}
function missingFromInvariant(err, context) {
  return new MissingFieldError(err.message, context.path.slice(), context.query, context.clientOnly, context.variables);
}
var StoreReader = (function () {
  function StoreReader(config) {
    var _this = this;
    this.config = config;
    this.executeSelectionSet = optimism.wrap(function (options) {
      return _this.execSelectionSetImpl(options);
    }, {
      keyArgs: function (options) {
        return [options.selectionSet, options.objectOrReference, options.context];
      },
      makeCacheKey: function (selectionSet, parent, context) {
        if (supportsResultCaching(context.store)) {
          return context.store.makeCacheKey(selectionSet, utilities.isReference(parent) ? parent.__ref : parent, context.varString);
        }
      }
    });
    this.knownResults = new WeakMap();
    this.executeSubSelectedArray = optimism.wrap(function (options) {
      return _this.execSubSelectedArrayImpl(options);
    }, {
      makeCacheKey: function (_a) {
        var field = _a.field, array = _a.array, context = _a.context;
        if (supportsResultCaching(context.store)) {
          return context.store.makeCacheKey(field, array, context.varString);
        }
      }
    });
    this.config = tslib.__assign({
      addTypename: true
    }, config);
  }
  StoreReader.prototype.diffQueryAgainstStore = function (_a) {
    var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c;
    var policies = this.config.cache.policies;
    variables = tslib.__assign(tslib.__assign({}, utilities.getDefaultValues(utilities.getQueryDefinition(query))), variables);
    var execResult = this.executeSelectionSet({
      selectionSet: utilities.getMainDefinition(query).selectionSet,
      objectOrReference: utilities.makeReference(rootId),
      context: {
        store: store,
        query: query,
        policies: policies,
        variables: variables,
        varString: JSON.stringify(variables),
        fragmentMap: utilities.createFragmentMap(utilities.getFragmentDefinitions(query)),
        path: [],
        clientOnly: false
      }
    });
    var hasMissingFields = execResult.missing && execResult.missing.length > 0;
    if (hasMissingFields && !returnPartialData) {
      throw execResult.missing[0];
    }
    return {
      result: execResult.result,
      missing: execResult.missing,
      complete: !hasMissingFields
    };
  };
  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {
    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {
      var latest = this.executeSelectionSet.peek(selectionSet, parent, context);
      if (latest && result === latest.result) {
        return true;
      }
    }
    return false;
  };
  StoreReader.prototype.execSelectionSetImpl = function (_a) {
    var _this = this;
    var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, context = _a.context;
    if (utilities.isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {
      return {
        result: {},
        missing: [missingFromInvariant("development" === "production" ? new tsInvariant.InvariantError(4) : new tsInvariant.InvariantError("Dangling reference to missing " + objectOrReference.__ref + " object"), context)]
      };
    }
    var variables = context.variables, policies = context.policies, store = context.store;
    var objectsToMerge = [];
    var finalResult = {
      result: null
    };
    var typename = store.getFieldValue(objectOrReference, "__typename");
    if (this.config.addTypename && typeof typename === "string" && !policies.rootIdsByTypename[typename]) {
      objectsToMerge.push({
        __typename: typename
      });
    }
    function getMissing() {
      return finalResult.missing || (finalResult.missing = []);
    }
    function handleMissing(result) {
      var _a;
      if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);
      return result.result;
    }
    var workSet = new Set(selectionSet.selections);
    workSet.forEach(function (selection) {
      var _a;
      if (!utilities.shouldInclude(selection, variables)) return;
      if (utilities.isField(selection)) {
        var fieldValue = policies.readField({
          fieldName: selection.name.value,
          field: selection,
          variables: context.variables,
          from: objectOrReference
        }, context);
        var resultName = utilities.resultKeyNameFromField(selection);
        context.path.push(resultName);
        var wasClientOnly = context.clientOnly;
        context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function (d) {
          return d.name.value === "client";
        }));
        if (fieldValue === void 0) {
          if (!utilities.addTypenameToDocument.added(selection)) {
            getMissing().push(missingFromInvariant("development" === "production" ? new tsInvariant.InvariantError(5) : new tsInvariant.InvariantError("Can't find field '" + selection.name.value + "' on " + (utilities.isReference(objectOrReference) ? objectOrReference.__ref + " object" : "object " + JSON.stringify(objectOrReference, null, 2))), context));
          }
        } else if (Array.isArray(fieldValue)) {
          fieldValue = handleMissing(_this.executeSubSelectedArray({
            field: selection,
            array: fieldValue,
            context: context
          }));
        } else if (!selection.selectionSet) {
          if ("development" !== 'production') {
            assertSelectionSetForIdValue(context.store, selection, fieldValue);
            utilities.maybeDeepFreeze(fieldValue);
          }
        } else if (fieldValue != null) {
          fieldValue = handleMissing(_this.executeSelectionSet({
            selectionSet: selection.selectionSet,
            objectOrReference: fieldValue,
            context: context
          }));
        }
        if (fieldValue !== void 0) {
          objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));
        }
        context.clientOnly = wasClientOnly;
        tsInvariant.invariant(context.path.pop() === resultName);
      } else {
        var fragment = utilities.getFragmentFromSelection(selection, context.fragmentMap);
        if (fragment && policies.fragmentMatches(fragment, typename)) {
          fragment.selectionSet.selections.forEach(workSet.add, workSet);
        }
      }
    });
    finalResult.result = utilities.mergeDeepArray(objectsToMerge);
    if ("development" !== 'production') {
      Object.freeze(finalResult.result);
    }
    this.knownResults.set(finalResult.result, selectionSet);
    return finalResult;
  };
  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {
    var _this = this;
    var field = _a.field, array = _a.array, context = _a.context;
    var missing;
    function handleMissing(childResult, i) {
      if (childResult.missing) {
        missing = missing || [];
        missing.push.apply(missing, childResult.missing);
      }
      tsInvariant.invariant(context.path.pop() === i);
      return childResult.result;
    }
    if (field.selectionSet) {
      array = array.filter(context.store.canRead);
    }
    array = array.map(function (item, i) {
      if (item === null) {
        return null;
      }
      context.path.push(i);
      if (Array.isArray(item)) {
        return handleMissing(_this.executeSubSelectedArray({
          field: field,
          array: item,
          context: context
        }), i);
      }
      if (field.selectionSet) {
        return handleMissing(_this.executeSelectionSet({
          selectionSet: field.selectionSet,
          objectOrReference: item,
          context: context
        }), i);
      }
      if ("development" !== 'production') {
        assertSelectionSetForIdValue(context.store, field, item);
      }
      tsInvariant.invariant(context.path.pop() === i);
      return item;
    });
    if ("development" !== 'production') {
      Object.freeze(array);
    }
    return {
      result: array,
      missing: missing
    };
  };
  return StoreReader;
})();
function assertSelectionSetForIdValue(store, field, fieldValue) {
  if (!field.selectionSet) {
    var workSet_1 = new Set([fieldValue]);
    workSet_1.forEach(function (value) {
      if (value && typeof value === "object") {
        "development" === "production" ? tsInvariant.invariant(!utilities.isReference(value), 6) : tsInvariant.invariant(!utilities.isReference(value), "Missing selection set for object of type " + getTypenameFromStoreObject(store, value) + " returned for query field " + field.name.value);
        Object.values(value).forEach(workSet_1.add, workSet_1);
      }
    });
  }
}
var StoreWriter = (function () {
  function StoreWriter(cache, reader) {
    this.cache = cache;
    this.reader = reader;
  }
  StoreWriter.prototype.writeToStore = function (_a) {
    var query = _a.query, result = _a.result, dataId = _a.dataId, store = _a.store, variables = _a.variables;
    var operationDefinition = utilities.getOperationDefinition(query);
    var merger = makeProcessedFieldsMerger();
    variables = tslib.__assign(tslib.__assign({}, utilities.getDefaultValues(operationDefinition)), variables);
    var ref = this.processSelectionSet({
      result: result || Object.create(null),
      dataId: dataId,
      selectionSet: operationDefinition.selectionSet,
      mergeTree: {
        map: new Map()
      },
      context: {
        store: store,
        written: Object.create(null),
        merge: function (existing, incoming) {
          return merger.merge(existing, incoming);
        },
        variables: variables,
        varString: JSON.stringify(variables),
        fragmentMap: utilities.createFragmentMap(utilities.getFragmentDefinitions(query))
      }
    });
    if (!utilities.isReference(ref)) {
      throw "development" === "production" ? new tsInvariant.InvariantError(7) : new tsInvariant.InvariantError("Could not identify object " + JSON.stringify(result));
    }
    store.retain(ref.__ref);
    return ref;
  };
  StoreWriter.prototype.processSelectionSet = function (_a) {
    var _this = this;
    var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, mergeTree = _a.mergeTree;
    var policies = this.cache.policies;
    var _b = policies.identify(result, selectionSet, context.fragmentMap), id = _b[0], keyObject = _b[1];
    dataId = dataId || id;
    if ("string" === typeof dataId) {
      var sets = context.written[dataId] || (context.written[dataId] = []);
      var ref = utilities.makeReference(dataId);
      if (sets.indexOf(selectionSet) >= 0) return ref;
      sets.push(selectionSet);
      if (this.reader && this.reader.isFresh(result, ref, selectionSet, context)) {
        return ref;
      }
    }
    var incomingFields = Object.create(null);
    if (keyObject) {
      incomingFields = context.merge(incomingFields, keyObject);
    }
    var typename = dataId && policies.rootTypenamesById[dataId] || utilities.getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, "__typename");
    if ("string" === typeof typename) {
      incomingFields.__typename = typename;
    }
    var workSet = new Set(selectionSet.selections);
    workSet.forEach(function (selection) {
      var _a;
      if (!utilities.shouldInclude(selection, context.variables)) return;
      if (utilities.isField(selection)) {
        var resultFieldKey = utilities.resultKeyNameFromField(selection);
        var value = result[resultFieldKey];
        if (typeof value !== 'undefined') {
          var storeFieldName = policies.getStoreFieldName({
            typename: typename,
            fieldName: selection.name.value,
            field: selection,
            variables: context.variables
          });
          var childTree = getChildMergeTree(mergeTree, storeFieldName);
          var incomingValue = _this.processFieldValue(value, selection, context, childTree);
          var childTypename = selection.selectionSet && context.store.getFieldValue(incomingValue, "__typename") || void 0;
          var merge = policies.getMergeFunction(typename, selection.name.value, childTypename);
          if (merge) {
            childTree.info = {
              field: selection,
              typename: typename,
              merge: merge
            };
          } else {
            maybeRecycleChildMergeTree(mergeTree, storeFieldName);
          }
          incomingFields = context.merge(incomingFields, (_a = {}, _a[storeFieldName] = incomingValue, _a));
        } else if (policies.usingPossibleTypes && !utilities.hasDirectives(["defer", "client"], selection)) {
          throw "development" === "production" ? new tsInvariant.InvariantError(8) : new tsInvariant.InvariantError("Missing field '" + resultFieldKey + "' in " + JSON.stringify(result, null, 2).substring(0, 100));
        }
      } else {
        var fragment = utilities.getFragmentFromSelection(selection, context.fragmentMap);
        if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {
          fragment.selectionSet.selections.forEach(workSet.add, workSet);
        }
      }
    });
    if ("string" === typeof dataId) {
      var entityRef_1 = utilities.makeReference(dataId);
      if (mergeTree.map.size) {
        incomingFields = this.applyMerges(mergeTree, entityRef_1, incomingFields, context);
      }
      if ("development" !== "production") {
        var hasSelectionSet_1 = function (storeFieldName) {
          return fieldsWithSelectionSets_1.has(fieldNameFromStoreName(storeFieldName));
        };
        var fieldsWithSelectionSets_1 = new Set();
        workSet.forEach(function (selection) {
          if (utilities.isField(selection) && selection.selectionSet) {
            fieldsWithSelectionSets_1.add(selection.name.value);
          }
        });
        var hasMergeFunction_1 = function (storeFieldName) {
          var childTree = mergeTree.map.get(storeFieldName);
          return Boolean(childTree && childTree.info && childTree.info.merge);
        };
        Object.keys(incomingFields).forEach(function (storeFieldName) {
          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {
            warnAboutDataLoss(entityRef_1, incomingFields, storeFieldName, context.store);
          }
        });
      }
      context.store.merge(dataId, incomingFields);
      return entityRef_1;
    }
    return incomingFields;
  };
  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {
    var _this = this;
    if (!field.selectionSet || value === null) {
      return "development" === 'production' ? value : utilities.cloneDeep(value);
    }
    if (Array.isArray(value)) {
      return value.map(function (item, i) {
        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));
        maybeRecycleChildMergeTree(mergeTree, i);
        return value;
      });
    }
    return this.processSelectionSet({
      result: value,
      selectionSet: field.selectionSet,
      context: context,
      mergeTree: mergeTree
    });
  };
  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {
    var _a;
    var _this = this;
    if (mergeTree.map.size && !utilities.isReference(incoming)) {
      var e_1 = !Array.isArray(incoming) && (utilities.isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;
      var i_1 = incoming;
      if (e_1 && !getStorageArgs) {
        getStorageArgs = [utilities.isReference(e_1) ? e_1.__ref : e_1];
      }
      var changedFields_1;
      var getValue_1 = function (from, name) {
        return Array.isArray(from) ? typeof name === "number" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));
      };
      mergeTree.map.forEach(function (childTree, storeFieldName) {
        if (getStorageArgs) {
          getStorageArgs.push(storeFieldName);
        }
        var eVal = getValue_1(e_1, storeFieldName);
        var iVal = getValue_1(i_1, storeFieldName);
        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);
        if (aVal !== iVal) {
          changedFields_1 = changedFields_1 || new Map();
          changedFields_1.set(storeFieldName, aVal);
        }
        if (getStorageArgs) {
          tsInvariant.invariant(getStorageArgs.pop() === storeFieldName);
        }
      });
      if (changedFields_1) {
        incoming = Array.isArray(i_1) ? i_1.slice(0) : tslib.__assign({}, i_1);
        changedFields_1.forEach(function (value, name) {
          incoming[name] = value;
        });
      }
    }
    if (mergeTree.info) {
      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));
    }
    return incoming;
  };
  return StoreWriter;
})();
var emptyMergeTreePool = [];
function getChildMergeTree(_a, name) {
  var map = _a.map;
  if (!map.has(name)) {
    map.set(name, emptyMergeTreePool.pop() || ({
      map: new Map()
    }));
  }
  return map.get(name);
}
function maybeRecycleChildMergeTree(_a, name) {
  var map = _a.map;
  var childTree = map.get(name);
  if (childTree && !childTree.info && !childTree.map.size) {
    emptyMergeTreePool.push(childTree);
    map.delete(name);
  }
}
var warnings = new Set();
function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
  var getChild = function (objOrRef) {
    var child = store.getFieldValue(objOrRef, storeFieldName);
    return typeof child === "object" && child;
  };
  var existing = getChild(existingRef);
  if (!existing) return;
  var incoming = getChild(incomingObj);
  if (!incoming) return;
  if (utilities.isReference(existing)) return;
  if (equality.equal(existing, incoming)) return;
  if (Object.keys(existing).every(function (key) {
    return store.getFieldValue(incoming, key) !== void 0;
  })) {
    return;
  }
  var parentType = store.getFieldValue(existingRef, "__typename") || store.getFieldValue(incomingObj, "__typename");
  var fieldName = fieldNameFromStoreName(storeFieldName);
  var typeDotName = parentType + "." + fieldName;
  if (warnings.has(typeDotName)) return;
  warnings.add(typeDotName);
  var childTypenames = [];
  if (!Array.isArray(existing) && !Array.isArray(incoming)) {
    [existing, incoming].forEach(function (child) {
      var typename = store.getFieldValue(child, "__typename");
      if (typeof typename === "string" && !childTypenames.includes(typename)) {
        childTypenames.push(typename);
      }
    });
  }
  "development" === "production" || tsInvariant.invariant.warn("Cache data may be lost when replacing the " + fieldName + " field of a " + parentType + " object.\n\nTo address this problem (which is not a bug in Apollo Client), " + (childTypenames.length ? "either ensure all objects of type " + childTypenames.join(" and ") + " have an ID or a custom merge function, or " : "") + "define a custom merge function for the " + typeDotName + " field, so InMemoryCache can safely merge these objects:\n\n  existing: " + JSON.stringify(existing).slice(0, 1000) + "\n  incoming: " + JSON.stringify(incoming).slice(0, 1000) + "\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n");
}
var cacheSlot = new context.Slot();
function consumeAndIterate(set, callback) {
  if (set.size) {
    var items_1 = [];
    set.forEach(function (item) {
      return items_1.push(item);
    });
    set.clear();
    items_1.forEach(callback);
  }
}
var cacheInfoMap = new WeakMap();
function getCacheInfo(cache) {
  var info = cacheInfoMap.get(cache);
  if (!info) {
    cacheInfoMap.set(cache, info = {
      vars: new Set(),
      dep: optimism.dep()
    });
  }
  return info;
}
function forgetCache(cache) {
  getCacheInfo(cache).vars.forEach(function (rv) {
    return rv.forgetCache(cache);
  });
}
function recallCache(cache) {
  getCacheInfo(cache).vars.forEach(function (rv) {
    return rv.attachCache(cache);
  });
}
function makeVar(value) {
  var caches = new Set();
  var listeners = new Set();
  var rv = function (newValue) {
    if (arguments.length > 0) {
      if (value !== newValue) {
        value = newValue;
        caches.forEach(function (cache) {
          getCacheInfo(cache).dep.dirty(rv);
          broadcast(cache);
        });
        consumeAndIterate(listeners, function (listener) {
          return listener(value);
        });
      }
    } else {
      var cache = cacheSlot.getValue();
      if (cache) {
        attach(cache);
        getCacheInfo(cache).dep(rv);
      }
    }
    return value;
  };
  rv.onNextChange = function (listener) {
    listeners.add(listener);
    return function () {
      listeners.delete(listener);
    };
  };
  var attach = rv.attachCache = function (cache) {
    caches.add(cache);
    getCacheInfo(cache).vars.add(rv);
    return rv;
  };
  rv.forgetCache = function (cache) {
    return caches.delete(cache);
  };
  return rv;
}
function broadcast(cache) {
  if (cache.broadcastWatches) {
    cache.broadcastWatches();
  }
}
function argsFromFieldSpecifier(spec) {
  return spec.args !== void 0 ? spec.args : spec.field ? utilities.argumentsObjectFromField(spec.field, spec.variables) : null;
}
var defaultDataIdFromObject = function (_a, context) {
  var __typename = _a.__typename, id = _a.id, _id = _a._id;
  if (typeof __typename === "string") {
    if (context) {
      context.keyObject = id !== void 0 ? {
        id: id
      } : _id !== void 0 ? {
        _id: _id
      } : void 0;
    }
    if (id === void 0) id = _id;
    if (id !== void 0) {
      return __typename + ":" + (typeof id === "number" || typeof id === "string" ? id : JSON.stringify(id));
    }
  }
};
var nullKeyFieldsFn = function () {
  return void 0;
};
var simpleKeyArgsFn = function (_args, context) {
  return context.fieldName;
};
var mergeTrueFn = function (existing, incoming, _a) {
  var mergeObjects = _a.mergeObjects;
  return mergeObjects(existing, incoming);
};
var mergeFalseFn = function (_, incoming) {
  return incoming;
};
var Policies = (function () {
  function Policies(config) {
    this.config = config;
    this.typePolicies = Object.create(null);
    this.toBeAdded = Object.create(null);
    this.supertypeMap = new Map();
    this.fuzzySubtypes = new Map();
    this.rootIdsByTypename = Object.create(null);
    this.rootTypenamesById = Object.create(null);
    this.usingPossibleTypes = false;
    this.config = tslib.__assign({
      dataIdFromObject: defaultDataIdFromObject
    }, config);
    this.cache = this.config.cache;
    this.setRootTypename("Query");
    this.setRootTypename("Mutation");
    this.setRootTypename("Subscription");
    if (config.possibleTypes) {
      this.addPossibleTypes(config.possibleTypes);
    }
    if (config.typePolicies) {
      this.addTypePolicies(config.typePolicies);
    }
  }
  Policies.prototype.identify = function (object, selectionSet, fragmentMap) {
    var typename = selectionSet && fragmentMap ? utilities.getTypenameFromResult(object, selectionSet, fragmentMap) : object.__typename;
    if (typename === this.rootTypenamesById.ROOT_QUERY) {
      return ["ROOT_QUERY"];
    }
    var context = {
      typename: typename,
      selectionSet: selectionSet,
      fragmentMap: fragmentMap
    };
    var id;
    var policy = typename && this.getTypePolicy(typename);
    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;
    while (keyFn) {
      var specifierOrId = keyFn(object, context);
      if (Array.isArray(specifierOrId)) {
        keyFn = keyFieldsFnFromSpecifier(specifierOrId);
      } else {
        id = specifierOrId;
        break;
      }
    }
    id = id ? String(id) : void 0;
    return context.keyObject ? [id, context.keyObject] : [id];
  };
  Policies.prototype.addTypePolicies = function (typePolicies) {
    var _this = this;
    Object.keys(typePolicies).forEach(function (typename) {
      var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = tslib.__rest(_a, ["queryType", "mutationType", "subscriptionType"]);
      if (queryType) _this.setRootTypename("Query", typename);
      if (mutationType) _this.setRootTypename("Mutation", typename);
      if (subscriptionType) _this.setRootTypename("Subscription", typename);
      if (hasOwn.call(_this.toBeAdded, typename)) {
        _this.toBeAdded[typename].push(incoming);
      } else {
        _this.toBeAdded[typename] = [incoming];
      }
    });
  };
  Policies.prototype.updateTypePolicy = function (typename, incoming) {
    var _this = this;
    var existing = this.getTypePolicy(typename);
    var keyFields = incoming.keyFields, fields = incoming.fields;
    function setMerge(existing, merge) {
      existing.merge = typeof merge === "function" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;
    }
    setMerge(existing, incoming.merge);
    existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === "function" ? keyFields : existing.keyFn;
    if (fields) {
      Object.keys(fields).forEach(function (fieldName) {
        var existing = _this.getFieldPolicy(typename, fieldName, true);
        var incoming = fields[fieldName];
        if (typeof incoming === "function") {
          existing.read = incoming;
        } else {
          var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;
          existing.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === "function" ? keyArgs : existing.keyFn;
          if (typeof read === "function") {
            existing.read = read;
          }
          setMerge(existing, merge);
        }
        if (existing.read && existing.merge) {
          existing.keyFn = existing.keyFn || simpleKeyArgsFn;
        }
      });
    }
  };
  Policies.prototype.setRootTypename = function (which, typename) {
    if (typename === void 0) {
      typename = which;
    }
    var rootId = "ROOT_" + which.toUpperCase();
    var old = this.rootTypenamesById[rootId];
    if (typename !== old) {
      "development" === "production" ? tsInvariant.invariant(!old || old === which, 1) : tsInvariant.invariant(!old || old === which, "Cannot change root " + which + " __typename more than once");
      if (old) delete this.rootIdsByTypename[old];
      this.rootIdsByTypename[typename] = rootId;
      this.rootTypenamesById[rootId] = typename;
    }
  };
  Policies.prototype.addPossibleTypes = function (possibleTypes) {
    var _this = this;
    this.usingPossibleTypes = true;
    Object.keys(possibleTypes).forEach(function (supertype) {
      _this.getSupertypeSet(supertype, true);
      possibleTypes[supertype].forEach(function (subtype) {
        _this.getSupertypeSet(subtype, true).add(supertype);
        var match = subtype.match(TypeOrFieldNameRegExp);
        if (!match || match[0] !== subtype) {
          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
        }
      });
    });
  };
  Policies.prototype.getTypePolicy = function (typename) {
    var _this = this;
    if (!hasOwn.call(this.typePolicies, typename)) {
      var policy_1 = this.typePolicies[typename] = Object.create(null);
      policy_1.fields = Object.create(null);
      var supertypes = this.supertypeMap.get(typename);
      if (supertypes && supertypes.size) {
        supertypes.forEach(function (supertype) {
          var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = tslib.__rest(_a, ["fields"]);
          Object.assign(policy_1, rest);
          Object.assign(policy_1.fields, fields);
        });
      }
    }
    var inbox = this.toBeAdded[typename];
    if (inbox && inbox.length) {
      this.updateTypePolicy(typename, utilities.compact.apply(void 0, inbox.splice(0)));
    }
    return this.typePolicies[typename];
  };
  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {
    if (typename) {
      var fieldPolicies = this.getTypePolicy(typename).fields;
      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));
    }
  };
  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {
    var supertypeSet = this.supertypeMap.get(subtype);
    if (!supertypeSet && createIfMissing) {
      this.supertypeMap.set(subtype, supertypeSet = new Set());
    }
    return supertypeSet;
  };
  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {
    var _this = this;
    if (!fragment.typeCondition) return true;
    if (!typename) return false;
    var supertype = fragment.typeCondition.name.value;
    if (typename === supertype) return true;
    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {
      var typenameSupertypeSet = this.getSupertypeSet(typename, true);
      var workQueue_1 = [typenameSupertypeSet];
      var maybeEnqueue_1 = function (subtype) {
        var supertypeSet = _this.getSupertypeSet(subtype, false);
        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {
          workQueue_1.push(supertypeSet);
        }
      };
      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
      var checkingFuzzySubtypes = false;
      for (var i = 0; i < workQueue_1.length; ++i) {
        var supertypeSet = workQueue_1[i];
        if (supertypeSet.has(supertype)) {
          if (!typenameSupertypeSet.has(supertype)) {
            if (checkingFuzzySubtypes) {
              "development" === "production" || tsInvariant.invariant.warn("Inferring subtype " + typename + " of supertype " + supertype);
            }
            typenameSupertypeSet.add(supertype);
          }
          return true;
        }
        supertypeSet.forEach(maybeEnqueue_1);
        if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {
          needToCheckFuzzySubtypes = false;
          checkingFuzzySubtypes = true;
          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {
            var match = typename.match(regExp);
            if (match && match[0] === typename) {
              maybeEnqueue_1(fuzzyString);
            }
          });
        }
      }
    }
    return false;
  };
  Policies.prototype.hasKeyArgs = function (typename, fieldName) {
    var policy = this.getFieldPolicy(typename, fieldName, false);
    return !!(policy && policy.keyFn);
  };
  Policies.prototype.getStoreFieldName = function (fieldSpec) {
    var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;
    var policy = this.getFieldPolicy(typename, fieldName, false);
    var storeFieldName;
    var keyFn = policy && policy.keyFn;
    if (keyFn && typename) {
      var context = {
        typename: typename,
        fieldName: fieldName,
        field: fieldSpec.field || null,
        variables: fieldSpec.variables
      };
      var args = argsFromFieldSpecifier(fieldSpec);
      while (keyFn) {
        var specifierOrString = keyFn(args, context);
        if (Array.isArray(specifierOrString)) {
          keyFn = keyArgsFnFromSpecifier(specifierOrString);
        } else {
          storeFieldName = specifierOrString || fieldName;
          break;
        }
      }
    }
    if (storeFieldName === void 0) {
      storeFieldName = fieldSpec.field ? utilities.storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : utilities.getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));
    }
    if (storeFieldName === false) {
      return fieldName;
    }
    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + ":" + storeFieldName;
  };
  Policies.prototype.readField = function (options, context) {
    var objectOrReference = options.from;
    if (!objectOrReference) return;
    var nameOrField = options.field || options.fieldName;
    if (!nameOrField) return;
    if (options.typename === void 0) {
      var typename = context.store.getFieldValue(objectOrReference, "__typename");
      if (typename) options.typename = typename;
    }
    var storeFieldName = this.getStoreFieldName(options);
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
    var policy = this.getFieldPolicy(options.typename, fieldName, false);
    var read = policy && policy.read;
    if (read) {
      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(utilities.isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));
      return cacheSlot.withValue(this.cache, read, [existing, readOptions]);
    }
    return existing;
  };
  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {
    var policy = this.getFieldPolicy(parentTypename, fieldName, false);
    var merge = policy && policy.merge;
    if (!merge && childTypename) {
      policy = this.getTypePolicy(childTypename);
      merge = policy && policy.merge;
    }
    return merge;
  };
  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {
    var field = _a.field, typename = _a.typename, merge = _a.merge;
    if (merge === mergeTrueFn) {
      return makeMergeObjectsFunction(context.store.getFieldValue)(existing, incoming);
    }
    if (merge === mergeFalseFn) {
      return incoming;
    }
    return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {
      typename: typename,
      fieldName: field.name.value,
      field: field,
      variables: context.variables
    }, context, storage || Object.create(null)));
  };
  return Policies;
})();
function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
  var storeFieldName = policies.getStoreFieldName(fieldSpec);
  var fieldName = fieldNameFromStoreName(storeFieldName);
  var variables = fieldSpec.variables || context.variables;
  var _a = context.store, getFieldValue = _a.getFieldValue, toReference = _a.toReference, canRead = _a.canRead;
  return {
    args: argsFromFieldSpecifier(fieldSpec),
    field: fieldSpec.field || null,
    fieldName: fieldName,
    storeFieldName: storeFieldName,
    variables: variables,
    isReference: utilities.isReference,
    toReference: toReference,
    storage: storage,
    cache: policies.cache,
    canRead: canRead,
    readField: function (fieldNameOrOptions, from) {
      var options = typeof fieldNameOrOptions === "string" ? {
        fieldName: fieldNameOrOptions,
        from: from
      } : tslib.__assign({}, fieldNameOrOptions);
      if (void 0 === options.from) {
        options.from = objectOrReference;
      }
      if (void 0 === options.variables) {
        options.variables = variables;
      }
      return policies.readField(options, context);
    },
    mergeObjects: makeMergeObjectsFunction(getFieldValue)
  };
}
function makeMergeObjectsFunction(getFieldValue) {
  return function mergeObjects(existing, incoming) {
    if (Array.isArray(existing) || Array.isArray(incoming)) {
      throw "development" === "production" ? new tsInvariant.InvariantError(2) : new tsInvariant.InvariantError("Cannot automatically merge arrays");
    }
    if (existing && typeof existing === "object" && incoming && typeof incoming === "object") {
      var eType = getFieldValue(existing, "__typename");
      var iType = getFieldValue(incoming, "__typename");
      var typesDiffer = eType && iType && eType !== iType;
      if (typesDiffer || !storeValueIsStoreObject(existing) || !storeValueIsStoreObject(incoming)) {
        return incoming;
      }
      return tslib.__assign(tslib.__assign({}, existing), incoming);
    }
    return incoming;
  };
}
function keyArgsFnFromSpecifier(specifier) {
  return function (args, context) {
    return args ? context.fieldName + ":" + JSON.stringify(computeKeyObject(args, specifier, false)) : context.fieldName;
  };
}
function keyFieldsFnFromSpecifier(specifier) {
  var trie = new optimism.KeyTrie(utilities.canUseWeakMap);
  return function (object, context) {
    var aliasMap;
    if (context.selectionSet && context.fragmentMap) {
      var info = trie.lookupArray([context.selectionSet, context.fragmentMap]);
      aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));
    }
    var keyObject = context.keyObject = computeKeyObject(object, specifier, true, aliasMap);
    return context.typename + ":" + JSON.stringify(keyObject);
  };
}
function makeAliasMap(selectionSet, fragmentMap) {
  var map = Object.create(null);
  var workQueue = new Set([selectionSet]);
  workQueue.forEach(function (selectionSet) {
    selectionSet.selections.forEach(function (selection) {
      if (utilities.isField(selection)) {
        if (selection.alias) {
          var responseKey = selection.alias.value;
          var storeKey = selection.name.value;
          if (storeKey !== responseKey) {
            var aliases = map.aliases || (map.aliases = Object.create(null));
            aliases[storeKey] = responseKey;
          }
        }
        if (selection.selectionSet) {
          var subsets = map.subsets || (map.subsets = Object.create(null));
          subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);
        }
      } else {
        var fragment = utilities.getFragmentFromSelection(selection, fragmentMap);
        if (fragment) {
          workQueue.add(fragment.selectionSet);
        }
      }
    });
  });
  return map;
}
function computeKeyObject(response, specifier, strict, aliasMap) {
  var keyObj = Object.create(null);
  var prevKey;
  specifier.forEach(function (s) {
    if (Array.isArray(s)) {
      if (typeof prevKey === "string") {
        var subsets = aliasMap && aliasMap.subsets;
        var subset = subsets && subsets[prevKey];
        keyObj[prevKey] = computeKeyObject(response[prevKey], s, strict, subset);
      }
    } else {
      var aliases = aliasMap && aliasMap.aliases;
      var responseName = aliases && aliases[s] || s;
      if (hasOwn.call(response, responseName)) {
        keyObj[prevKey = s] = response[responseName];
      } else {
        "development" === "production" ? tsInvariant.invariant(!strict, 3) : tsInvariant.invariant(!strict, "Missing field '" + responseName + "' while computing key fields");
        prevKey = void 0;
      }
    }
  });
  return keyObj;
}
var defaultConfig = {
  dataIdFromObject: defaultDataIdFromObject,
  addTypename: true,
  resultCaching: true,
  typePolicies: {}
};
var InMemoryCache = (function (_super) {
  tslib.__extends(InMemoryCache, _super);
  function InMemoryCache(config) {
    if (config === void 0) {
      config = {};
    }
    var _this = _super.call(this) || this;
    _this.watches = new Set();
    _this.typenameDocumentCache = new Map();
    _this.makeVar = makeVar;
    _this.txCount = 0;
    _this.maybeBroadcastWatch = optimism.wrap(function (c, fromOptimisticTransaction) {
      return _this.broadcastWatch.call(_this, c, !!fromOptimisticTransaction);
    }, {
      makeCacheKey: function (c) {
        var store = c.optimistic ? _this.optimisticData : _this.data;
        if (supportsResultCaching(store)) {
          var optimistic = c.optimistic, rootId = c.rootId, variables = c.variables;
          return store.makeCacheKey(c.query, c.callback, JSON.stringify({
            optimistic: optimistic,
            rootId: rootId,
            variables: variables
          }));
        }
      }
    });
    _this.watchDep = optimism.dep();
    _this.config = tslib.__assign(tslib.__assign({}, defaultConfig), config);
    _this.addTypename = !!_this.config.addTypename;
    _this.policies = new Policies({
      cache: _this,
      dataIdFromObject: _this.config.dataIdFromObject,
      possibleTypes: _this.config.possibleTypes,
      typePolicies: _this.config.typePolicies
    });
    _this.data = new EntityStore.Root({
      policies: _this.policies,
      resultCaching: _this.config.resultCaching
    });
    _this.optimisticData = _this.data;
    _this.storeWriter = new StoreWriter(_this, _this.storeReader = new StoreReader({
      cache: _this,
      addTypename: _this.addTypename
    }));
    return _this;
  }
  InMemoryCache.prototype.restore = function (data) {
    if (data) this.data.replace(data);
    return this;
  };
  InMemoryCache.prototype.extract = function (optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return (optimistic ? this.optimisticData : this.data).extract();
  };
  InMemoryCache.prototype.read = function (options) {
    var _a = options.returnPartialData, returnPartialData = _a === void 0 ? false : _a;
    try {
      return this.storeReader.diffQueryAgainstStore({
        store: options.optimistic ? this.optimisticData : this.data,
        query: options.query,
        variables: options.variables,
        rootId: options.rootId,
        config: this.config,
        returnPartialData: returnPartialData
      }).result || null;
    } catch (e) {
      if (e instanceof MissingFieldError) {
        return null;
      }
      throw e;
    }
  };
  InMemoryCache.prototype.write = function (options) {
    try {
      ++this.txCount;
      return this.storeWriter.writeToStore({
        store: this.data,
        query: options.query,
        result: options.result,
        dataId: options.dataId,
        variables: options.variables
      });
    } finally {
      if (!--this.txCount && options.broadcast !== false) {
        this.broadcastWatches();
      }
    }
  };
  InMemoryCache.prototype.modify = function (options) {
    if (hasOwn.call(options, "id") && !options.id) {
      return false;
    }
    var store = options.optimistic ? this.optimisticData : this.data;
    try {
      ++this.txCount;
      return store.modify(options.id || "ROOT_QUERY", options.fields);
    } finally {
      if (!--this.txCount && options.broadcast !== false) {
        this.broadcastWatches();
      }
    }
  };
  InMemoryCache.prototype.diff = function (options) {
    return this.storeReader.diffQueryAgainstStore({
      store: options.optimistic ? this.optimisticData : this.data,
      rootId: options.id || "ROOT_QUERY",
      query: options.query,
      variables: options.variables,
      returnPartialData: options.returnPartialData,
      config: this.config
    });
  };
  InMemoryCache.prototype.watch = function (watch) {
    var _this = this;
    if (!this.watches.size) {
      recallCache(this);
    }
    this.watches.add(watch);
    if (watch.immediate) {
      this.maybeBroadcastWatch(watch);
    }
    return function () {
      if (_this.watches.delete(watch) && !_this.watches.size) {
        forgetCache(_this);
      }
      _this.watchDep.dirty(watch);
      _this.maybeBroadcastWatch.forget(watch);
    };
  };
  InMemoryCache.prototype.gc = function () {
    return this.optimisticData.gc();
  };
  InMemoryCache.prototype.retain = function (rootId, optimistic) {
    return (optimistic ? this.optimisticData : this.data).retain(rootId);
  };
  InMemoryCache.prototype.release = function (rootId, optimistic) {
    return (optimistic ? this.optimisticData : this.data).release(rootId);
  };
  InMemoryCache.prototype.identify = function (object) {
    return utilities.isReference(object) ? object.__ref : this.policies.identify(object)[0];
  };
  InMemoryCache.prototype.evict = function (options) {
    if (!options.id) {
      if (hasOwn.call(options, "id")) {
        return false;
      }
      options = tslib.__assign(tslib.__assign({}, options), {
        id: "ROOT_QUERY"
      });
    }
    try {
      ++this.txCount;
      return this.optimisticData.evict(options);
    } finally {
      if (!--this.txCount && options.broadcast !== false) {
        this.broadcastWatches();
      }
    }
  };
  InMemoryCache.prototype.reset = function () {
    this.data.clear();
    this.optimisticData = this.data;
    this.broadcastWatches();
    return Promise.resolve();
  };
  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {
    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
    if (newOptimisticData !== this.optimisticData) {
      this.optimisticData = newOptimisticData;
      this.broadcastWatches();
    }
  };
  InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {
    var _this = this;
    var perform = function (layer) {
      var _a = _this, data = _a.data, optimisticData = _a.optimisticData;
      ++_this.txCount;
      if (layer) {
        _this.data = _this.optimisticData = layer;
      }
      try {
        transaction(_this);
      } finally {
        --_this.txCount;
        _this.data = data;
        _this.optimisticData = optimisticData;
      }
    };
    var fromOptimisticTransaction = false;
    if (typeof optimisticId === 'string') {
      this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);
      fromOptimisticTransaction = true;
    } else if (optimisticId === null) {
      perform(this.data);
    } else {
      perform();
    }
    this.broadcastWatches(fromOptimisticTransaction);
  };
  InMemoryCache.prototype.transformDocument = function (document) {
    if (this.addTypename) {
      var result = this.typenameDocumentCache.get(document);
      if (!result) {
        result = utilities.addTypenameToDocument(document);
        this.typenameDocumentCache.set(document, result);
        this.typenameDocumentCache.set(result, result);
      }
      return result;
    }
    return document;
  };
  InMemoryCache.prototype.broadcastWatches = function (fromOptimisticTransaction) {
    var _this = this;
    if (!this.txCount) {
      this.watches.forEach(function (c) {
        return _this.maybeBroadcastWatch(c, fromOptimisticTransaction);
      });
    }
  };
  InMemoryCache.prototype.broadcastWatch = function (c, fromOptimisticTransaction) {
    this.watchDep.dirty(c);
    this.watchDep(c);
    var diff = this.diff({
      query: c.query,
      variables: c.variables,
      optimistic: c.optimistic
    });
    if (c.optimistic && fromOptimisticTransaction) {
      diff.fromOptimisticTransaction = true;
    }
    c.callback(diff);
  };
  return InMemoryCache;
})(ApolloCache);
exports.isReference = utilities.isReference;
exports.makeReference = utilities.makeReference;
exports.ApolloCache = ApolloCache;
exports.InMemoryCache = InMemoryCache;
exports.MissingFieldError = MissingFieldError;
exports.cacheSlot = cacheSlot;
exports.defaultDataIdFromObject = defaultDataIdFromObject;
exports.makeVar = makeVar;

},{"optimism":"7lG9N","../utilities":"6w0bE","tslib":"4rd38","ts-invariant":"3uYVD","@wry/equality":"5NdOJ","@wry/context":"52j5a"}],"7lG9N":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var trie = require('@wry/trie');
var context = require('@wry/context');

function defaultDispose() { }
var Cache = /** @class */ (function () {
    function Cache(max, dispose) {
        if (max === void 0) { max = Infinity; }
        if (dispose === void 0) { dispose = defaultDispose; }
        this.max = max;
        this.dispose = dispose;
        this.map = new Map();
        this.newest = null;
        this.oldest = null;
    }
    Cache.prototype.has = function (key) {
        return this.map.has(key);
    };
    Cache.prototype.get = function (key) {
        var node = this.getNode(key);
        return node && node.value;
    };
    Cache.prototype.getNode = function (key) {
        var node = this.map.get(key);
        if (node && node !== this.newest) {
            var older = node.older, newer = node.newer;
            if (newer) {
                newer.older = older;
            }
            if (older) {
                older.newer = newer;
            }
            node.older = this.newest;
            node.older.newer = node;
            node.newer = null;
            this.newest = node;
            if (node === this.oldest) {
                this.oldest = newer;
            }
        }
        return node;
    };
    Cache.prototype.set = function (key, value) {
        var node = this.getNode(key);
        if (node) {
            return node.value = value;
        }
        node = {
            key: key,
            value: value,
            newer: null,
            older: this.newest
        };
        if (this.newest) {
            this.newest.newer = node;
        }
        this.newest = node;
        this.oldest = this.oldest || node;
        this.map.set(key, node);
        return node.value;
    };
    Cache.prototype.clean = function () {
        while (this.oldest && this.map.size > this.max) {
            this.delete(this.oldest.key);
        }
    };
    Cache.prototype.delete = function (key) {
        var node = this.map.get(key);
        if (node) {
            if (node === this.newest) {
                this.newest = node.older;
            }
            if (node === this.oldest) {
                this.oldest = node.newer;
            }
            if (node.newer) {
                node.newer.older = node.older;
            }
            if (node.older) {
                node.older.newer = node.newer;
            }
            this.map.delete(key);
            this.dispose(node.value, key);
            return true;
        }
        return false;
    };
    return Cache;
}());

var parentEntrySlot = new context.Slot();

function maybeUnsubscribe(entryOrDep) {
    var unsubscribe = entryOrDep.unsubscribe;
    if (typeof unsubscribe === "function") {
        entryOrDep.unsubscribe = void 0;
        unsubscribe();
    }
}

var emptySetPool = [];
var POOL_TARGET_SIZE = 100;
// Since this package might be used browsers, we should avoid using the
// Node built-in assert module.
function assert(condition, optionalMessage) {
    if (!condition) {
        throw new Error(optionalMessage || "assertion failure");
    }
}
function valueIs(a, b) {
    var len = a.length;
    return (
    // Unknown values are not equal to each other.
    len > 0 &&
        // Both values must be ordinary (or both exceptional) to be equal.
        len === b.length &&
        // The underlying value or exception must be the same.
        a[len - 1] === b[len - 1]);
}
function valueGet(value) {
    switch (value.length) {
        case 0: throw new Error("unknown value");
        case 1: return value[0];
        case 2: throw value[1];
    }
}
function valueCopy(value) {
    return value.slice(0);
}
var Entry = /** @class */ (function () {
    function Entry(fn) {
        this.fn = fn;
        this.parents = new Set();
        this.childValues = new Map();
        // When this Entry has children that are dirty, this property becomes
        // a Set containing other Entry objects, borrowed from emptySetPool.
        // When the set becomes empty, it gets recycled back to emptySetPool.
        this.dirtyChildren = null;
        this.dirty = true;
        this.recomputing = false;
        this.value = [];
        this.deps = null;
        ++Entry.count;
    }
    Entry.prototype.peek = function () {
        if (this.value.length === 1 && !mightBeDirty(this)) {
            return this.value[0];
        }
    };
    // This is the most important method of the Entry API, because it
    // determines whether the cached this.value can be returned immediately,
    // or must be recomputed. The overall performance of the caching system
    // depends on the truth of the following observations: (1) this.dirty is
    // usually false, (2) this.dirtyChildren is usually null/empty, and thus
    // (3) valueGet(this.value) is usually returned without recomputation.
    Entry.prototype.recompute = function (args) {
        assert(!this.recomputing, "already recomputing");
        rememberParent(this);
        return mightBeDirty(this)
            ? reallyRecompute(this, args)
            : valueGet(this.value);
    };
    Entry.prototype.setDirty = function () {
        if (this.dirty)
            return;
        this.dirty = true;
        this.value.length = 0;
        reportDirty(this);
        forgetChildren(this);
        // We can go ahead and unsubscribe here, since any further dirty
        // notifications we receive will be redundant, and unsubscribing may
        // free up some resources, e.g. file watchers.
        maybeUnsubscribe(this);
    };
    Entry.prototype.dispose = function () {
        var _this = this;
        forgetChildren(this);
        maybeUnsubscribe(this);
        // Because this entry has been kicked out of the cache (in index.js),
        // we've lost the ability to find out if/when this entry becomes dirty,
        // whether that happens through a subscription, because of a direct call
        // to entry.setDirty(), or because one of its children becomes dirty.
        // Because of this loss of future information, we have to assume the
        // worst (that this entry might have become dirty very soon), so we must
        // immediately mark this entry's parents as dirty. Normally we could
        // just call entry.setDirty() rather than calling parent.setDirty() for
        // each parent, but that would leave this entry in parent.childValues
        // and parent.dirtyChildren, which would prevent the child from being
        // truly forgotten.
        this.parents.forEach(function (parent) {
            parent.setDirty();
            forgetChild(parent, _this);
        });
    };
    Entry.prototype.dependOn = function (dep) {
        dep.add(this);
        if (!this.deps) {
            this.deps = emptySetPool.pop() || new Set();
        }
        this.deps.add(dep);
    };
    Entry.prototype.forgetDeps = function () {
        var _this = this;
        if (this.deps) {
            this.deps.forEach(function (dep) { return dep.delete(_this); });
            this.deps.clear();
            emptySetPool.push(this.deps);
            this.deps = null;
        }
    };
    Entry.count = 0;
    return Entry;
}());
function rememberParent(child) {
    var parent = parentEntrySlot.getValue();
    if (parent) {
        child.parents.add(parent);
        if (!parent.childValues.has(child)) {
            parent.childValues.set(child, []);
        }
        if (mightBeDirty(child)) {
            reportDirtyChild(parent, child);
        }
        else {
            reportCleanChild(parent, child);
        }
        return parent;
    }
}
function reallyRecompute(entry, args) {
    forgetChildren(entry);
    // Set entry as the parent entry while calling recomputeNewValue(entry).
    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);
    if (maybeSubscribe(entry, args)) {
        // If we successfully recomputed entry.value and did not fail to
        // (re)subscribe, then this Entry is no longer explicitly dirty.
        setClean(entry);
    }
    return valueGet(entry.value);
}
function recomputeNewValue(entry, args) {
    entry.recomputing = true;
    // Set entry.value as unknown.
    entry.value.length = 0;
    try {
        // If entry.fn succeeds, entry.value will become a normal Value.
        entry.value[0] = entry.fn.apply(null, args);
    }
    catch (e) {
        // If entry.fn throws, entry.value will become exceptional.
        entry.value[1] = e;
    }
    // Either way, this line is always reached.
    entry.recomputing = false;
}
function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) {
        // This Entry may still have dirty children, in which case we can't
        // let our parents know we're clean just yet.
        return;
    }
    reportClean(entry);
}
function reportDirty(child) {
    child.parents.forEach(function (parent) { return reportDirtyChild(parent, child); });
}
function reportClean(child) {
    child.parents.forEach(function (parent) { return reportCleanChild(parent, child); });
}
// Let a parent Entry know that one of its children may be dirty.
function reportDirtyChild(parent, child) {
    // Must have called rememberParent(child) before calling
    // reportDirtyChild(parent, child).
    assert(parent.childValues.has(child));
    assert(mightBeDirty(child));
    if (!parent.dirtyChildren) {
        parent.dirtyChildren = emptySetPool.pop() || new Set;
    }
    else if (parent.dirtyChildren.has(child)) {
        // If we already know this child is dirty, then we must have already
        // informed our own parents that we are dirty, so we can terminate
        // the recursion early.
        return;
    }
    parent.dirtyChildren.add(child);
    reportDirty(parent);
}
// Let a parent Entry know that one of its children is no longer dirty.
function reportCleanChild(parent, child) {
    // Must have called rememberChild(child) before calling
    // reportCleanChild(parent, child).
    assert(parent.childValues.has(child));
    assert(!mightBeDirty(child));
    var childValue = parent.childValues.get(child);
    if (childValue.length === 0) {
        parent.childValues.set(child, valueCopy(child.value));
    }
    else if (!valueIs(childValue, child.value)) {
        parent.setDirty();
    }
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) {
        return;
    }
    reportClean(parent);
}
function removeDirtyChild(parent, child) {
    var dc = parent.dirtyChildren;
    if (dc) {
        dc.delete(child);
        if (dc.size === 0) {
            if (emptySetPool.length < POOL_TARGET_SIZE) {
                emptySetPool.push(dc);
            }
            parent.dirtyChildren = null;
        }
    }
}
// Removes all children from this entry and returns an array of the
// removed children.
function forgetChildren(parent) {
    if (parent.childValues.size > 0) {
        parent.childValues.forEach(function (_value, child) {
            forgetChild(parent, child);
        });
    }
    // Remove this parent Entry from any sets to which it was added by the
    // addToSet method.
    parent.forgetDeps();
    // After we forget all our children, this.dirtyChildren must be empty
    // and therefore must have been reset to null.
    assert(parent.dirtyChildren === null);
}
function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
}
function maybeSubscribe(entry, args) {
    if (typeof entry.subscribe === "function") {
        try {
            maybeUnsubscribe(entry); // Prevent double subscriptions.
            entry.unsubscribe = entry.subscribe.apply(null, args);
        }
        catch (e) {
            // If this Entry has a subscribe function and it threw an exception
            // (or an unsubscribe function it previously returned now throws),
            // return false to indicate that we were not able to subscribe (or
            // unsubscribe), and this Entry should remain dirty.
            entry.setDirty();
            return false;
        }
    }
    // Returning true indicates either that there was no entry.subscribe
    // function or that it succeeded.
    return true;
}

function dep(options) {
    var depsByKey = new Map();
    var subscribe = options && options.subscribe;
    function depend(key) {
        var parent = parentEntrySlot.getValue();
        if (parent) {
            var dep_1 = depsByKey.get(key);
            if (!dep_1) {
                depsByKey.set(key, dep_1 = new Set);
            }
            parent.dependOn(dep_1);
            if (typeof subscribe === "function") {
                maybeUnsubscribe(dep_1);
                dep_1.unsubscribe = subscribe(key);
            }
        }
    }
    depend.dirty = function dirty(key) {
        var dep = depsByKey.get(key);
        if (dep) {
            dep.forEach(function (entry) { return entry.setDirty(); });
            depsByKey.delete(key);
            maybeUnsubscribe(dep);
        }
    };
    return depend;
}

// The defaultMakeCacheKey function is remarkably powerful, because it gives
// a unique object for any shallow-identical list of arguments. If you need
// to implement a custom makeCacheKey function, you may find it helpful to
// delegate the final work to defaultMakeCacheKey, which is why we export it
// here. However, you may want to avoid defaultMakeCacheKey if your runtime
// does not support WeakMap, or you have the ability to return a string key.
// In those cases, just write your own custom makeCacheKey functions.
var keyTrie = new trie.Trie(typeof WeakMap === "function");
function defaultMakeCacheKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return keyTrie.lookupArray(args);
}
var caches = new Set();
function wrap(originalFunction, options) {
    if (options === void 0) { options = Object.create(null); }
    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });
    var keyArgs = options.keyArgs;
    var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;
    function optimistic() {
        var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);
        if (key === void 0) {
            return originalFunction.apply(null, arguments);
        }
        var entry = cache.get(key);
        if (!entry) {
            cache.set(key, entry = new Entry(originalFunction));
            entry.subscribe = options.subscribe;
        }
        var value = entry.recompute(Array.prototype.slice.call(arguments));
        // Move this entry to the front of the least-recently used queue,
        // since we just finished computing its value.
        cache.set(key, entry);
        caches.add(cache);
        // Clean up any excess entries in the cache, but only if there is no
        // active parent entry, meaning we're not in the middle of a larger
        // computation that might be flummoxed by the cleaning.
        if (!parentEntrySlot.hasValue()) {
            caches.forEach(function (cache) { return cache.clean(); });
            caches.clear();
        }
        return value;
    }
    function lookup() {
        var key = makeCacheKey.apply(null, arguments);
        if (key !== void 0) {
            return cache.get(key);
        }
    }
    optimistic.dirty = function () {
        var entry = lookup.apply(null, arguments);
        if (entry) {
            entry.setDirty();
        }
    };
    optimistic.peek = function () {
        var entry = lookup.apply(null, arguments);
        if (entry) {
            return entry.peek();
        }
    };
    optimistic.forget = function () {
        var key = makeCacheKey.apply(null, arguments);
        return key !== void 0 && cache.delete(key);
    };
    return optimistic;
}

Object.defineProperty(exports, 'KeyTrie', {
  enumerable: true,
  get: function () {
    return trie.Trie;
  }
});
Object.defineProperty(exports, 'asyncFromGen', {
  enumerable: true,
  get: function () {
    return context.asyncFromGen;
  }
});
Object.defineProperty(exports, 'bindContext', {
  enumerable: true,
  get: function () {
    return context.bind;
  }
});
Object.defineProperty(exports, 'noContext', {
  enumerable: true,
  get: function () {
    return context.noContext;
  }
});
Object.defineProperty(exports, 'setTimeout', {
  enumerable: true,
  get: function () {
    return context.setTimeout;
  }
});
exports.defaultMakeCacheKey = defaultMakeCacheKey;
exports.dep = dep;
exports.wrap = wrap;

},{"@wry/trie":"2ZgJF","@wry/context":"52j5a"}],"2ZgJF":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
var defaultMakeData = function () { return Object.create(null); };
// Useful for processing arguments objects as well as arrays.
var _a = Array.prototype, forEach = _a.forEach, slice = _a.slice;
var Trie = /** @class */ (function () {
    function Trie(weakness, makeData) {
        if (weakness === void 0) { weakness = true; }
        if (makeData === void 0) { makeData = defaultMakeData; }
        this.weakness = weakness;
        this.makeData = makeData;
    }
    Trie.prototype.lookup = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i] = arguments[_i];
        }
        return this.lookupArray(array);
    };
    Trie.prototype.lookupArray = function (array) {
        var node = this;
        forEach.call(array, function (key) { return node = node.getChildTrie(key); });
        return node.data || (node.data = this.makeData(slice.call(array)));
    };
    Trie.prototype.getChildTrie = function (key) {
        var map = this.weakness && isObjRef(key)
            ? this.weak || (this.weak = new WeakMap())
            : this.strong || (this.strong = new Map());
        var child = map.get(key);
        if (!child)
            map.set(key, child = new Trie(this.weakness, this.makeData));
        return child;
    };
    return Trie;
}());
function isObjRef(value) {
    switch (typeof value) {
        case "object":
            if (value === null)
                break;
        // Fall through to return true...
        case "function":
            return true;
    }
    return false;
}

exports.Trie = Trie;

},{}],"52j5a":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// This currentContext variable will only be used if the makeSlotClass
// function is called, which happens only if this is the first copy of the
// @wry/context package to be imported.
var currentContext = null;
// This unique internal object is used to denote the absence of a value
// for a given Slot, and is never exposed to outside code.
var MISSING_VALUE = {};
var idCounter = 1;
// Although we can't do anything about the cost of duplicated code from
// accidentally bundling multiple copies of the @wry/context package, we can
// avoid creating the Slot class more than once using makeSlotClass.
var makeSlotClass = function () { return /** @class */ (function () {
    function Slot() {
        // If you have a Slot object, you can find out its slot.id, but you cannot
        // guess the slot.id of a Slot you don't have access to, thanks to the
        // randomized suffix.
        this.id = [
            "slot",
            idCounter++,
            Date.now(),
            Math.random().toString(36).slice(2),
        ].join(":");
    }
    Slot.prototype.hasValue = function () {
        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
            // We use the Slot object iself as a key to its value, which means the
            // value cannot be obtained without a reference to the Slot object.
            if (this.id in context_1.slots) {
                var value = context_1.slots[this.id];
                if (value === MISSING_VALUE)
                    break;
                if (context_1 !== currentContext) {
                    // Cache the value in currentContext.slots so the next lookup will
                    // be faster. This caching is safe because the tree of contexts and
                    // the values of the slots are logically immutable.
                    currentContext.slots[this.id] = value;
                }
                return true;
            }
        }
        if (currentContext) {
            // If a value was not found for this Slot, it's never going to be found
            // no matter how many times we look it up, so we might as well cache
            // the absence of the value, too.
            currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
    };
    Slot.prototype.getValue = function () {
        if (this.hasValue()) {
            return currentContext.slots[this.id];
        }
    };
    Slot.prototype.withValue = function (value, callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        var _a;
        var slots = (_a = {
                __proto__: null
            },
            _a[this.id] = value,
            _a);
        var parent = currentContext;
        currentContext = { parent: parent, slots: slots };
        try {
            // Function.prototype.apply allows the arguments array argument to be
            // omitted or undefined, so args! is fine here.
            return callback.apply(thisArg, args);
        }
        finally {
            currentContext = parent;
        }
    };
    // Capture the current context and wrap a callback function so that it
    // reestablishes the captured context when called.
    Slot.bind = function (callback) {
        var context = currentContext;
        return function () {
            var saved = currentContext;
            try {
                currentContext = context;
                return callback.apply(this, arguments);
            }
            finally {
                currentContext = saved;
            }
        };
    };
    // Immediately run a callback function without any captured context.
    Slot.noContext = function (callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        if (currentContext) {
            var saved = currentContext;
            try {
                currentContext = null;
                // Function.prototype.apply allows the arguments array argument to be
                // omitted or undefined, so args! is fine here.
                return callback.apply(thisArg, args);
            }
            finally {
                currentContext = saved;
            }
        }
        else {
            return callback.apply(thisArg, args);
        }
    };
    return Slot;
}()); };
// We store a single global implementation of the Slot class as a permanent
// non-enumerable symbol property of the Array constructor. This obfuscation
// does nothing to prevent access to the Slot class, but at least it ensures
// the implementation (i.e. currentContext) cannot be tampered with, and all
// copies of the @wry/context package (hopefully just one) will share the
// same Slot implementation. Since the first copy of the @wry/context package
// to be imported wins, this technique imposes a very high cost for any
// future breaking changes to the Slot class.
var globalKey = "@wry/context:Slot";
var host = Array;
var Slot = host[globalKey] || function () {
    var Slot = makeSlotClass();
    try {
        Object.defineProperty(host, globalKey, {
            value: host[globalKey] = Slot,
            enumerable: false,
            writable: false,
            configurable: false,
        });
    }
    finally {
        return Slot;
    }
}();

var bind = Slot.bind, noContext = Slot.noContext;
function setTimeoutWithContext(callback, delay) {
    return setTimeout(bind(callback), delay);
}
// Turn any generator function into an async function (using yield instead
// of await), with context automatically preserved across yields.
function asyncFromGen(genFn) {
    return function () {
        var gen = genFn.apply(this, arguments);
        var boundNext = bind(gen.next);
        var boundThrow = bind(gen.throw);
        return new Promise(function (resolve, reject) {
            function invoke(method, argument) {
                try {
                    var result = method.call(gen, argument);
                }
                catch (error) {
                    return reject(error);
                }
                var next = result.done ? resolve : invokeNext;
                if (isPromiseLike(result.value)) {
                    result.value.then(next, result.done ? reject : invokeThrow);
                }
                else {
                    next(result.value);
                }
            }
            var invokeNext = function (value) { return invoke(boundNext, value); };
            var invokeThrow = function (error) { return invoke(boundThrow, error); };
            invokeNext();
        });
    };
}
function isPromiseLike(value) {
    return value && typeof value.then === "function";
}
// If you use the fibers npm package to implement coroutines in Node.js,
// you should call this function at least once to ensure context management
// remains coherent across any yields.
var wrappedFibers = [];
function wrapYieldingFiberMethods(Fiber) {
    // There can be only one implementation of Fiber per process, so this array
    // should never grow longer than one element.
    if (wrappedFibers.indexOf(Fiber) < 0) {
        var wrap = function (obj, method) {
            var fn = obj[method];
            obj[method] = function () {
                return noContext(fn, arguments, this);
            };
        };
        // These methods can yield, according to
        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100
        wrap(Fiber, "yield");
        wrap(Fiber.prototype, "run");
        wrap(Fiber.prototype, "throwInto");
        wrappedFibers.push(Fiber);
    }
    return Fiber;
}

exports.Slot = Slot;
exports.asyncFromGen = asyncFromGen;
exports.bind = bind;
exports.noContext = noContext;
exports.setTimeout = setTimeoutWithContext;
exports.wrapYieldingFiberMethods = wrapYieldingFiberMethods;

},{}],"612cF":[function(require,module,exports) {
// For backwards compatibility, make sure require("graphql-tag") returns
// the gql function, rather than an exports object.
module.exports = require('./lib/graphql-tag.umd.js').gql;

},{"./lib/graphql-tag.umd.js":"3ecS6"}],"3ecS6":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('graphql')) : typeof define === 'function' && define.amd ? define(['exports', 'tslib', 'graphql'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['graphql-tag'] = {}, global.tslib, global.graphql));
})(this, function (exports, tslib, graphql) {
  "use strict";
  var docCache = new Map();
  var fragmentSourceMap = new Map();
  var printFragmentWarnings = true;
  var experimentalFragmentVariables = false;
  function normalize(string) {
    return string.replace(/[\s,]+/g, ' ').trim();
  }
  function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
  }
  function processFragments(ast) {
    var seenKeys = new Set();
    var definitions = [];
    ast.definitions.forEach(function (fragmentDefinition) {
      if (fragmentDefinition.kind === 'FragmentDefinition') {
        var fragmentName = fragmentDefinition.name.value;
        var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
        var sourceKeySet = fragmentSourceMap.get(fragmentName);
        if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
          if (printFragmentWarnings) {
            console.warn("Warning: fragment with name " + fragmentName + " already exists.\n" + "graphql-tag enforces all fragment names across your application to be unique; read more about\n" + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
          }
        } else if (!sourceKeySet) {
          fragmentSourceMap.set(fragmentName, sourceKeySet = new Set());
        }
        sourceKeySet.add(sourceKey);
        if (!seenKeys.has(sourceKey)) {
          seenKeys.add(sourceKey);
          definitions.push(fragmentDefinition);
        }
      } else {
        definitions.push(fragmentDefinition);
      }
    });
    return tslib.__assign(tslib.__assign({}, ast), {
      definitions: definitions
    });
  }
  function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function (node) {
      if (node.loc) delete node.loc;
      Object.keys(node).forEach(function (key) {
        var value = node[key];
        if (value && typeof value === 'object') {
          workSet.add(value);
        }
      });
    });
    var loc = doc.loc;
    if (loc) {
      delete loc.startToken;
      delete loc.endToken;
    }
    return doc;
  }
  function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
      var parsed = graphql.parse(source, {
        experimentalFragmentVariables: experimentalFragmentVariables
      });
      if (!parsed || parsed.kind !== 'Document') {
        throw new Error('Not a valid GraphQL document.');
      }
      docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
  }
  function gql(literals) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (typeof literals === 'string') {
      literals = [literals];
    }
    var result = literals[0];
    args.forEach(function (arg, i) {
      if (arg && arg.kind === 'Document') {
        result += arg.loc.source.body;
      } else {
        result += arg;
      }
      result += literals[i + 1];
    });
    return parseDocument(result);
  }
  function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
  }
  function disableFragmentWarnings() {
    printFragmentWarnings = false;
  }
  function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
  }
  function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
  }
  var extras = {
    gql: gql,
    resetCaches: resetCaches,
    disableFragmentWarnings: disableFragmentWarnings,
    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables
  };
  (function (gql_1) {
    (gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables);
  })(gql || (gql = {}));
  gql["default"] = gql;
  var gql$1 = gql;
  exports.default = gql$1;
  exports.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;
  exports.disableFragmentWarnings = disableFragmentWarnings;
  exports.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
  exports.gql = gql;
  exports.resetCaches = resetCaches;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"tslib":"42DBG","graphql":"5gqTn"}],"42DBG":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"tUArz":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core = require('../core');
var utilities = require('../../utilities');

function setContext(setter) {
    return new core.ApolloLink(function (operation, forward) {
        var request = tslib.__rest(operation, []);
        return new utilities.Observable(function (observer) {
            var handle;
            Promise.resolve(request)
                .then(function (req) { return setter(req, operation.getContext()); })
                .then(operation.setContext)
                .then(function () {
                handle = forward(operation).subscribe({
                    next: observer.next.bind(observer),
                    error: observer.error.bind(observer),
                    complete: observer.complete.bind(observer),
                });
            })
                .catch(observer.error.bind(observer));
            return function () {
                if (handle)
                    handle.unsubscribe();
            };
        });
    });
}

exports.setContext = setContext;

},{"tslib":"4rd38","../core":"5MGqW","../../utilities":"6w0bE"}],"3ZjH3":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var subscriptionsTransportWs = require('subscriptions-transport-ws');
var core = require('../core');

var WebSocketLink = (function (_super) {
    tslib.__extends(WebSocketLink, _super);
    function WebSocketLink(paramsOrClient) {
        var _this = _super.call(this) || this;
        if (paramsOrClient instanceof subscriptionsTransportWs.SubscriptionClient) {
            _this.subscriptionClient = paramsOrClient;
        }
        else {
            _this.subscriptionClient = new subscriptionsTransportWs.SubscriptionClient(paramsOrClient.uri, paramsOrClient.options, paramsOrClient.webSocketImpl);
        }
        return _this;
    }
    WebSocketLink.prototype.request = function (operation) {
        return this.subscriptionClient.request(operation);
    };
    return WebSocketLink;
}(core.ApolloLink));

exports.WebSocketLink = WebSocketLink;

},{"tslib":"4rd38","subscriptions-transport-ws":"3P7DT","../core":"5MGqW"}],"3P7DT":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var __assign = this && this.__assign || (function () {
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  return __assign.apply(this, arguments);
});
var __awaiter = this && this.__awaiter || (function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
});
var __generator = this && this.__generator || (function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return (g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g);
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
      if ((y = 0, t)) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
});
var __spreadArrays = this && this.__spreadArrays || (function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
  return r;
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubscriptionClient = void 0;
var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};
var NativeWebSocket = _global.WebSocket || _global.MozWebSocket;
var Backoff = require("backo2");
var eventemitter3_1 = require("eventemitter3");
var is_string_1 = require("./utils/is-string");
var is_object_1 = require("./utils/is-object");
var printer_1 = require("graphql/language/printer");
var getOperationAST_1 = require("graphql/utilities/getOperationAST");
var symbol_observable_1 = require("symbol-observable");
var protocol_1 = require("./protocol");
var defaults_1 = require("./defaults");
var message_types_1 = require("./message-types");
var SubscriptionClient = (function () {
  function SubscriptionClient(url, options, webSocketImpl, webSocketProtocols) {
    var _a = options || ({}), _b = _a.connectionCallback, connectionCallback = _b === void 0 ? undefined : _b, _c = _a.connectionParams, connectionParams = _c === void 0 ? {} : _c, _d = _a.minTimeout, minTimeout = _d === void 0 ? defaults_1.MIN_WS_TIMEOUT : _d, _e = _a.timeout, timeout = _e === void 0 ? defaults_1.WS_TIMEOUT : _e, _f = _a.reconnect, reconnect = _f === void 0 ? false : _f, _g = _a.reconnectionAttempts, reconnectionAttempts = _g === void 0 ? Infinity : _g, _h = _a.lazy, lazy = _h === void 0 ? false : _h, _j = _a.inactivityTimeout, inactivityTimeout = _j === void 0 ? 0 : _j, _k = _a.wsOptionArguments, wsOptionArguments = _k === void 0 ? [] : _k;
    this.wsImpl = webSocketImpl || NativeWebSocket;
    if (!this.wsImpl) {
      throw new Error('Unable to find native implementation, or alternative implementation for WebSocket!');
    }
    this.wsProtocols = webSocketProtocols || protocol_1.GRAPHQL_WS;
    this.connectionCallback = connectionCallback;
    this.url = url;
    this.operations = {};
    this.nextOperationId = 0;
    this.minWsTimeout = minTimeout;
    this.wsTimeout = timeout;
    this.unsentMessagesQueue = [];
    this.reconnect = reconnect;
    this.reconnecting = false;
    this.reconnectionAttempts = reconnectionAttempts;
    this.lazy = !!lazy;
    this.inactivityTimeout = inactivityTimeout;
    this.closedByUser = false;
    this.backoff = new Backoff({
      jitter: 0.5
    });
    this.eventEmitter = new eventemitter3_1.EventEmitter();
    this.middlewares = [];
    this.client = null;
    this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator();
    this.connectionParams = this.getConnectionParams(connectionParams);
    this.wsOptionArguments = wsOptionArguments;
    if (!this.lazy) {
      this.connect();
    }
  }
  Object.defineProperty(SubscriptionClient.prototype, "status", {
    get: function () {
      if (this.client === null) {
        return this.wsImpl.CLOSED;
      }
      return this.client.readyState;
    },
    enumerable: false,
    configurable: true
  });
  SubscriptionClient.prototype.close = function (isForced, closedByUser) {
    if (isForced === void 0) {
      isForced = true;
    }
    if (closedByUser === void 0) {
      closedByUser = true;
    }
    this.clearInactivityTimeout();
    if (this.client !== null) {
      this.closedByUser = closedByUser;
      if (isForced) {
        this.clearCheckConnectionInterval();
        this.clearMaxConnectTimeout();
        this.clearTryReconnectTimeout();
        this.unsubscribeAll();
        this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_TERMINATE, null);
      }
      this.client.close();
      this.client.onopen = null;
      this.client.onclose = null;
      this.client.onerror = null;
      this.client.onmessage = null;
      this.client = null;
      this.eventEmitter.emit('disconnected');
      if (!isForced) {
        this.tryReconnect();
      }
    }
  };
  SubscriptionClient.prototype.request = function (request) {
    var _a;
    var getObserver = this.getObserver.bind(this);
    var executeOperation = this.executeOperation.bind(this);
    var unsubscribe = this.unsubscribe.bind(this);
    var opId;
    this.clearInactivityTimeout();
    return (_a = {}, _a[symbol_observable_1.default] = function () {
      return this;
    }, _a.subscribe = function (observerOrNext, onError, onComplete) {
      var observer = getObserver(observerOrNext, onError, onComplete);
      opId = executeOperation(request, function (error, result) {
        if (error === null && result === null) {
          if (observer.complete) {
            observer.complete();
          }
        } else if (error) {
          if (observer.error) {
            observer.error(error[0]);
          }
        } else {
          if (observer.next) {
            observer.next(result);
          }
        }
      });
      return {
        unsubscribe: function () {
          if (opId) {
            unsubscribe(opId);
            opId = null;
          }
        }
      };
    }, _a);
  };
  SubscriptionClient.prototype.on = function (eventName, callback, context) {
    var handler = this.eventEmitter.on(eventName, callback, context);
    return function () {
      handler.off(eventName, callback, context);
    };
  };
  SubscriptionClient.prototype.onConnected = function (callback, context) {
    return this.on('connected', callback, context);
  };
  SubscriptionClient.prototype.onConnecting = function (callback, context) {
    return this.on('connecting', callback, context);
  };
  SubscriptionClient.prototype.onDisconnected = function (callback, context) {
    return this.on('disconnected', callback, context);
  };
  SubscriptionClient.prototype.onReconnected = function (callback, context) {
    return this.on('reconnected', callback, context);
  };
  SubscriptionClient.prototype.onReconnecting = function (callback, context) {
    return this.on('reconnecting', callback, context);
  };
  SubscriptionClient.prototype.onError = function (callback, context) {
    return this.on('error', callback, context);
  };
  SubscriptionClient.prototype.unsubscribeAll = function () {
    var _this = this;
    Object.keys(this.operations).forEach(function (subId) {
      _this.unsubscribe(subId);
    });
  };
  SubscriptionClient.prototype.applyMiddlewares = function (options) {
    var _this = this;
    return new Promise(function (resolve, reject) {
      var queue = function (funcs, scope) {
        var next = function (error) {
          if (error) {
            reject(error);
          } else {
            if (funcs.length > 0) {
              var f = funcs.shift();
              if (f) {
                f.applyMiddleware.apply(scope, [options, next]);
              }
            } else {
              resolve(options);
            }
          }
        };
        next();
      };
      queue(__spreadArrays(_this.middlewares), _this);
    });
  };
  SubscriptionClient.prototype.use = function (middlewares) {
    var _this = this;
    middlewares.map(function (middleware) {
      if (typeof middleware.applyMiddleware === 'function') {
        _this.middlewares.push(middleware);
      } else {
        throw new Error('Middleware must implement the applyMiddleware function.');
      }
    });
    return this;
  };
  SubscriptionClient.prototype.getConnectionParams = function (connectionParams) {
    return function () {
      return new Promise(function (resolve, reject) {
        if (typeof connectionParams === 'function') {
          try {
            return resolve(connectionParams.call(null));
          } catch (error) {
            return reject(error);
          }
        }
        resolve(connectionParams);
      });
    };
  };
  SubscriptionClient.prototype.executeOperation = function (options, handler) {
    var _this = this;
    if (this.client === null) {
      this.connect();
    }
    var opId = this.generateOperationId();
    this.operations[opId] = {
      options: options,
      handler: handler
    };
    this.applyMiddlewares(options).then(function (processedOptions) {
      _this.checkOperationOptions(processedOptions, handler);
      if (_this.operations[opId]) {
        _this.operations[opId] = {
          options: processedOptions,
          handler: handler
        };
        _this.sendMessage(opId, message_types_1.default.GQL_START, processedOptions);
      }
    }).catch(function (error) {
      _this.unsubscribe(opId);
      handler(_this.formatErrors(error));
    });
    return opId;
  };
  SubscriptionClient.prototype.getObserver = function (observerOrNext, error, complete) {
    if (typeof observerOrNext === 'function') {
      return {
        next: function (v) {
          return observerOrNext(v);
        },
        error: function (e) {
          return error && error(e);
        },
        complete: function () {
          return complete && complete();
        }
      };
    }
    return observerOrNext;
  };
  SubscriptionClient.prototype.createMaxConnectTimeGenerator = function () {
    var minValue = this.minWsTimeout;
    var maxValue = this.wsTimeout;
    return new Backoff({
      min: minValue,
      max: maxValue,
      factor: 1.2
    });
  };
  SubscriptionClient.prototype.clearCheckConnectionInterval = function () {
    if (this.checkConnectionIntervalId) {
      clearInterval(this.checkConnectionIntervalId);
      this.checkConnectionIntervalId = null;
    }
  };
  SubscriptionClient.prototype.clearMaxConnectTimeout = function () {
    if (this.maxConnectTimeoutId) {
      clearTimeout(this.maxConnectTimeoutId);
      this.maxConnectTimeoutId = null;
    }
  };
  SubscriptionClient.prototype.clearTryReconnectTimeout = function () {
    if (this.tryReconnectTimeoutId) {
      clearTimeout(this.tryReconnectTimeoutId);
      this.tryReconnectTimeoutId = null;
    }
  };
  SubscriptionClient.prototype.clearInactivityTimeout = function () {
    if (this.inactivityTimeoutId) {
      clearTimeout(this.inactivityTimeoutId);
      this.inactivityTimeoutId = null;
    }
  };
  SubscriptionClient.prototype.setInactivityTimeout = function () {
    var _this = this;
    if (this.inactivityTimeout > 0 && Object.keys(this.operations).length === 0) {
      this.inactivityTimeoutId = setTimeout(function () {
        if (Object.keys(_this.operations).length === 0) {
          _this.close();
        }
      }, this.inactivityTimeout);
    }
  };
  SubscriptionClient.prototype.checkOperationOptions = function (options, handler) {
    var query = options.query, variables = options.variables, operationName = options.operationName;
    if (!query) {
      throw new Error('Must provide a query.');
    }
    if (!handler) {
      throw new Error('Must provide an handler.');
    }
    if (!is_string_1.default(query) && !getOperationAST_1.getOperationAST(query, operationName) || operationName && !is_string_1.default(operationName) || variables && !is_object_1.default(variables)) {
      throw new Error('Incorrect option types. query must be a string or a document,' + '`operationName` must be a string, and `variables` must be an object.');
    }
  };
  SubscriptionClient.prototype.buildMessage = function (id, type, payload) {
    var payloadToReturn = payload && payload.query ? __assign(__assign({}, payload), {
      query: typeof payload.query === 'string' ? payload.query : printer_1.print(payload.query)
    }) : payload;
    return {
      id: id,
      type: type,
      payload: payloadToReturn
    };
  };
  SubscriptionClient.prototype.formatErrors = function (errors) {
    if (Array.isArray(errors)) {
      return errors;
    }
    if (errors && errors.errors) {
      return this.formatErrors(errors.errors);
    }
    if (errors && errors.message) {
      return [errors];
    }
    return [{
      name: 'FormatedError',
      message: 'Unknown error',
      originalError: errors
    }];
  };
  SubscriptionClient.prototype.sendMessage = function (id, type, payload) {
    this.sendMessageRaw(this.buildMessage(id, type, payload));
  };
  SubscriptionClient.prototype.sendMessageRaw = function (message) {
    switch (this.status) {
      case this.wsImpl.OPEN:
        var serializedMessage = JSON.stringify(message);
        try {
          JSON.parse(serializedMessage);
        } catch (e) {
          this.eventEmitter.emit('error', new Error("Message must be JSON-serializable. Got: " + message));
        }
        this.client.send(serializedMessage);
        break;
      case this.wsImpl.CONNECTING:
        this.unsentMessagesQueue.push(message);
        break;
      default:
        if (!this.reconnecting) {
          this.eventEmitter.emit('error', new Error('A message was not sent because socket is not connected, is closing or ' + 'is already closed. Message was: ' + JSON.stringify(message)));
        }
    }
  };
  SubscriptionClient.prototype.generateOperationId = function () {
    return String(++this.nextOperationId);
  };
  SubscriptionClient.prototype.tryReconnect = function () {
    var _this = this;
    if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {
      return;
    }
    if (!this.reconnecting) {
      Object.keys(this.operations).forEach(function (key) {
        _this.unsentMessagesQueue.push(_this.buildMessage(key, message_types_1.default.GQL_START, _this.operations[key].options));
      });
      this.reconnecting = true;
    }
    this.clearTryReconnectTimeout();
    var delay = this.backoff.duration();
    this.tryReconnectTimeoutId = setTimeout(function () {
      _this.connect();
    }, delay);
  };
  SubscriptionClient.prototype.flushUnsentMessagesQueue = function () {
    var _this = this;
    this.unsentMessagesQueue.forEach(function (message) {
      _this.sendMessageRaw(message);
    });
    this.unsentMessagesQueue = [];
  };
  SubscriptionClient.prototype.checkConnection = function () {
    if (this.wasKeepAliveReceived) {
      this.wasKeepAliveReceived = false;
      return;
    }
    if (!this.reconnecting) {
      this.close(false, true);
    }
  };
  SubscriptionClient.prototype.checkMaxConnectTimeout = function () {
    var _this = this;
    this.clearMaxConnectTimeout();
    this.maxConnectTimeoutId = setTimeout(function () {
      if (_this.status !== _this.wsImpl.OPEN) {
        _this.reconnecting = true;
        _this.close(false, true);
      }
    }, this.maxConnectTimeGenerator.duration());
  };
  SubscriptionClient.prototype.connect = function () {
    var _a;
    var _this = this;
    this.client = new ((_a = this.wsImpl).bind.apply(_a, __spreadArrays([void 0, this.url, this.wsProtocols], this.wsOptionArguments)))();
    this.checkMaxConnectTimeout();
    this.client.onopen = function () {
      return __awaiter(_this, void 0, void 0, function () {
        var connectionParams, error_1;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(this.status === this.wsImpl.OPEN)) return [3, 4];
              this.clearMaxConnectTimeout();
              this.closedByUser = false;
              this.eventEmitter.emit(this.reconnecting ? 'reconnecting' : 'connecting');
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.connectionParams()];
            case 2:
              connectionParams = _a.sent();
              this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_INIT, connectionParams);
              this.flushUnsentMessagesQueue();
              return [3, 4];
            case 3:
              error_1 = _a.sent();
              this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_ERROR, error_1);
              this.flushUnsentMessagesQueue();
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    };
    this.client.onclose = function () {
      if (!_this.closedByUser) {
        _this.close(false, false);
      }
    };
    this.client.onerror = function (err) {
      _this.eventEmitter.emit('error', err);
    };
    this.client.onmessage = function (_a) {
      var data = _a.data;
      _this.processReceivedData(data);
    };
  };
  SubscriptionClient.prototype.processReceivedData = function (receivedData) {
    var parsedMessage;
    var opId;
    try {
      parsedMessage = JSON.parse(receivedData);
      opId = parsedMessage.id;
    } catch (e) {
      throw new Error("Message must be JSON-parseable. Got: " + receivedData);
    }
    if ([message_types_1.default.GQL_DATA, message_types_1.default.GQL_COMPLETE, message_types_1.default.GQL_ERROR].indexOf(parsedMessage.type) !== -1 && !this.operations[opId]) {
      this.unsubscribe(opId);
      return;
    }
    switch (parsedMessage.type) {
      case message_types_1.default.GQL_CONNECTION_ERROR:
        if (this.connectionCallback) {
          this.connectionCallback(parsedMessage.payload);
        }
        break;
      case message_types_1.default.GQL_CONNECTION_ACK:
        this.eventEmitter.emit(this.reconnecting ? 'reconnected' : 'connected', parsedMessage.payload);
        this.reconnecting = false;
        this.backoff.reset();
        this.maxConnectTimeGenerator.reset();
        if (this.connectionCallback) {
          this.connectionCallback();
        }
        break;
      case message_types_1.default.GQL_COMPLETE:
        var handler = this.operations[opId].handler;
        delete this.operations[opId];
        handler.call(this, null, null);
        break;
      case message_types_1.default.GQL_ERROR:
        this.operations[opId].handler(this.formatErrors(parsedMessage.payload), null);
        delete this.operations[opId];
        break;
      case message_types_1.default.GQL_DATA:
        var parsedPayload = !parsedMessage.payload.errors ? parsedMessage.payload : __assign(__assign({}, parsedMessage.payload), {
          errors: this.formatErrors(parsedMessage.payload.errors)
        });
        this.operations[opId].handler(null, parsedPayload);
        break;
      case message_types_1.default.GQL_CONNECTION_KEEP_ALIVE:
        var firstKA = typeof this.wasKeepAliveReceived === 'undefined';
        this.wasKeepAliveReceived = true;
        if (firstKA) {
          this.checkConnection();
        }
        if (this.checkConnectionIntervalId) {
          clearInterval(this.checkConnectionIntervalId);
          this.checkConnection();
        }
        this.checkConnectionIntervalId = setInterval(this.checkConnection.bind(this), this.wsTimeout);
        break;
      default:
        throw new Error('Invalid message type!');
    }
  };
  SubscriptionClient.prototype.unsubscribe = function (opId) {
    if (this.operations[opId]) {
      delete this.operations[opId];
      this.setInactivityTimeout();
      this.sendMessage(opId, message_types_1.default.GQL_STOP, undefined);
    }
  };
  return SubscriptionClient;
})();
exports.SubscriptionClient = SubscriptionClient;

},{"backo2":"2xVtt","eventemitter3":"4dXNa","./utils/is-string":"3MXjT","./utils/is-object":"7DFx9","graphql/language/printer":"1UYdT","graphql/utilities/getOperationAST":"263ch","symbol-observable":"FI5JF","./protocol":"1uzJD","./defaults":"2ki9i","./message-types":"7z4kY"}],"2xVtt":[function(require,module,exports) {

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],"4dXNa":[function(require,module,exports) {
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],"3MXjT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isString(value) {
    return typeof value === 'string';
}
exports.default = isString;

},{}],"7DFx9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isObject(value) {
    return ((value !== null) && (typeof value === 'object'));
}
exports.default = isObject;

},{}],"FI5JF":[function(require,module,exports) {
"use strict";
var global = arguments[3];
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _ponyfill = require('./ponyfill.js');
var _ponyfill2 = _interopRequireDefault(_ponyfill);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}
var root;
/*global window*/
if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}
var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;

},{"./ponyfill.js":"1iuml"}],"1iuml":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};
},{}],"1uzJD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GRAPHQL_SUBSCRIPTIONS = exports.GRAPHQL_WS = void 0;
var GRAPHQL_WS = 'graphql-ws';
exports.GRAPHQL_WS = GRAPHQL_WS;
var GRAPHQL_SUBSCRIPTIONS = 'graphql-subscriptions';
exports.GRAPHQL_SUBSCRIPTIONS = GRAPHQL_SUBSCRIPTIONS;

},{}],"2ki9i":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WS_TIMEOUT = exports.MIN_WS_TIMEOUT = void 0;
var MIN_WS_TIMEOUT = 1000;
exports.MIN_WS_TIMEOUT = MIN_WS_TIMEOUT;
var WS_TIMEOUT = 30000;
exports.WS_TIMEOUT = WS_TIMEOUT;

},{}],"7z4kY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MessageTypes = (function () {
    function MessageTypes() {
        throw new Error('Static Class');
    }
    MessageTypes.GQL_CONNECTION_INIT = 'connection_init';
    MessageTypes.GQL_CONNECTION_ACK = 'connection_ack';
    MessageTypes.GQL_CONNECTION_ERROR = 'connection_error';
    MessageTypes.GQL_CONNECTION_KEEP_ALIVE = 'ka';
    MessageTypes.GQL_CONNECTION_TERMINATE = 'connection_terminate';
    MessageTypes.GQL_START = 'start';
    MessageTypes.GQL_DATA = 'data';
    MessageTypes.GQL_ERROR = 'error';
    MessageTypes.GQL_COMPLETE = 'complete';
    MessageTypes.GQL_STOP = 'stop';
    MessageTypes.SUBSCRIPTION_START = 'subscription_start';
    MessageTypes.SUBSCRIPTION_DATA = 'subscription_data';
    MessageTypes.SUBSCRIPTION_SUCCESS = 'subscription_success';
    MessageTypes.SUBSCRIPTION_FAIL = 'subscription_fail';
    MessageTypes.SUBSCRIPTION_END = 'subscription_end';
    MessageTypes.INIT = 'init';
    MessageTypes.INIT_SUCCESS = 'init_success';
    MessageTypes.INIT_FAIL = 'init_fail';
    MessageTypes.KEEP_ALIVE = 'keepalive';
    return MessageTypes;
}());
exports.default = MessageTypes;

},{}],"Ntu56":[function(require,module,exports) {
var global = arguments[3];
// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js
var ws = null;
if (typeof WebSocket !== 'undefined') {
  ws = WebSocket;
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket;
} else if (typeof global !== 'undefined') {
  ws = global.WebSocket || global.MozWebSocket;
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket;
} else if (typeof self !== 'undefined') {
  ws = self.WebSocket || self.MozWebSocket;
}
module.exports = ws;

},{}],"6boN9":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Accept = (function () {
    function Accept(value0) {
        this.value0 = value0;
    };
    Accept.create = function (value0) {
        return new Accept(value0);
    };
    return Accept;
})();
var ContentType = (function () {
    function ContentType(value0) {
        this.value0 = value0;
    };
    ContentType.create = function (value0) {
        return new ContentType(value0);
    };
    return ContentType;
})();
var RequestHeader = (function () {
    function RequestHeader(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RequestHeader.create = function (value0) {
        return function (value1) {
            return new RequestHeader(value0, value1);
        };
    };
    return RequestHeader;
})();
var value = function (v) {
    if (v instanceof Accept) {
        return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
    };
    if (v instanceof ContentType) {
        return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
    };
    if (v instanceof RequestHeader) {
        return v.value1;
    };
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
};
var showRequestHeader = new Data_Show.Show(function (v) {
    if (v instanceof Accept) {
        return "(Accept " + (Data_Show.show(Data_MediaType.showMediaType)(v.value0) + ")");
    };
    if (v instanceof ContentType) {
        return "(ContentType " + (Data_Show.show(Data_MediaType.showMediaType)(v.value0) + ")");
    };
    if (v instanceof RequestHeader) {
        return "(RequestHeader " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 16, column 1 - line 19, column 81): " + [ v.constructor.name ]);
});
var name = function (v) {
    if (v instanceof Accept) {
        return "Accept";
    };
    if (v instanceof ContentType) {
        return "Content-Type";
    };
    if (v instanceof RequestHeader) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
};
var eqRequestHeader = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Accept && y instanceof Accept) {
            return Data_Eq.eq(Data_MediaType.eqMediaType)(x.value0)(y.value0);
        };
        if (x instanceof ContentType && y instanceof ContentType) {
            return Data_Eq.eq(Data_MediaType.eqMediaType)(x.value0)(y.value0);
        };
        if (x instanceof RequestHeader && y instanceof RequestHeader) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        return false;
    };
});
var ordRequestHeader = new Data_Ord.Ord(function () {
    return eqRequestHeader;
}, function (x) {
    return function (y) {
        if (x instanceof Accept && y instanceof Accept) {
            return Data_Ord.compare(Data_MediaType.ordMediaType)(x.value0)(y.value0);
        };
        if (x instanceof Accept) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Accept) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ContentType && y instanceof ContentType) {
            return Data_Ord.compare(Data_MediaType.ordMediaType)(x.value0)(y.value0);
        };
        if (x instanceof ContentType) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ContentType) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof RequestHeader && y instanceof RequestHeader) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at Affjax.RequestHeader (line 14, column 1 - line 14, column 54): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Accept: Accept,
    ContentType: ContentType,
    RequestHeader: RequestHeader,
    name: name,
    value: value,
    eqRequestHeader: eqRequestHeader,
    ordRequestHeader: ordRequestHeader,
    showRequestHeader: showRequestHeader
};

},{"../Data.Eq/index.js":"2htS8","../Data.MediaType/index.js":"3pOmo","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c"}],"3rdRX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Encode_Encoders = require("../Data.Argonaut.Encode.Encoders/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var GEncodeJson = function (gEncodeJson) {
    this.gEncodeJson = gEncodeJson;
};
var EncodeJson = function (encodeJson) {
    this.encodeJson = encodeJson;
};
var gEncodeJsonNil = new GEncodeJson(function (v) {
    return function (v1) {
        return Foreign_Object.empty;
    };
});
var gEncodeJson = function (dict) {
    return dict.gEncodeJson;
};
var encodeVoid = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeVoid);
var encodeRecord = function (dictGEncodeJson) {
    return function (dictRowToList) {
        return new EncodeJson(function (rec) {
            return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var encodeJsonUnit = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeUnit);
var encodeJsonJson = new EncodeJson(Control_Category.identity(Control_Category.categoryFn));
var encodeJsonJString = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeString);
var encodeJsonJNumber = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNumber);
var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeBoolean);
var encodeJsonInt = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeInt);
var encodeJsonCodePoint = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeCodePoint);
var encodeJsonChar = new EncodeJson(Data_Argonaut_Encode_Encoders.encodeChar);
var encodeJson = function (dict) {
    return dict.encodeJson;
};
var encodeJsonArray = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeArray(encodeJson(dictEncodeJson)));
};
var encodeJsonEither = function (dictEncodeJson) {
    return function (dictEncodeJson1) {
        return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeEither(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1)));
    };
};
var encodeJsonList = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeList(encodeJson(dictEncodeJson)));
};
var encodeJsonMaybe = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMaybe(encodeJson(dictEncodeJson)));
};
var encodeJsonNonEmptyArray = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmptyArray(encodeJson(dictEncodeJson)));
};
var encodeJsonNonEmptyList = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmptyList(encodeJson(dictEncodeJson)));
};
var encodeJsonNonEmpty_Array = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmpty_Array(encodeJson(dictEncodeJson)));
};
var encodeJsonNonEmpty_List = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeNonEmpty_List(encodeJson(dictEncodeJson)));
};
var encodeJsonTuple = function (dictEncodeJson) {
    return function (dictEncodeJson1) {
        return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeTuple(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1)));
    };
};
var encodeMap = function (dictOrd) {
    return function (dictEncodeJson) {
        return function (dictEncodeJson1) {
            return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeMap(dictOrd)(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1)));
        };
    };
};
var encodeSet = function (dictOrd) {
    return function (dictEncodeJson) {
        return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeSet(dictOrd)(encodeJson(dictEncodeJson)));
    };
};
var gEncodeJsonCons = function (dictEncodeJson) {
    return function (dictGEncodeJson) {
        return function (dictIsSymbol) {
            return function (dictCons) {
                return new GEncodeJson(function (row) {
                    return function (v) {
                        return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                    };
                });
            };
        };
    };
};
var encodeIdentity = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeIdentity(encodeJson(dictEncodeJson)));
};
var encodeForeignObject = function (dictEncodeJson) {
    return new EncodeJson(Data_Argonaut_Encode_Encoders.encodeForeignObject(encodeJson(dictEncodeJson)));
};
module.exports = {
    encodeJson: encodeJson,
    gEncodeJson: gEncodeJson,
    EncodeJson: EncodeJson,
    GEncodeJson: GEncodeJson,
    encodeIdentity: encodeIdentity,
    encodeJsonMaybe: encodeJsonMaybe,
    encodeJsonTuple: encodeJsonTuple,
    encodeJsonEither: encodeJsonEither,
    encodeJsonUnit: encodeJsonUnit,
    encodeJsonJBoolean: encodeJsonJBoolean,
    encodeJsonJNumber: encodeJsonJNumber,
    encodeJsonInt: encodeJsonInt,
    encodeJsonJString: encodeJsonJString,
    encodeJsonJson: encodeJsonJson,
    encodeJsonCodePoint: encodeJsonCodePoint,
    encodeJsonNonEmpty_Array: encodeJsonNonEmpty_Array,
    encodeJsonNonEmptyArray: encodeJsonNonEmptyArray,
    encodeJsonNonEmpty_List: encodeJsonNonEmpty_List,
    encodeJsonNonEmptyList: encodeJsonNonEmptyList,
    encodeJsonChar: encodeJsonChar,
    encodeJsonArray: encodeJsonArray,
    encodeJsonList: encodeJsonList,
    encodeForeignObject: encodeForeignObject,
    encodeSet: encodeSet,
    encodeMap: encodeMap,
    encodeVoid: encodeVoid,
    encodeRecord: encodeRecord,
    gEncodeJsonNil: gEncodeJsonNil,
    gEncodeJsonCons: gEncodeJsonCons
};

},{"../Control.Category/index.js":"6QTyW","../Data.Argonaut.Core/index.js":"2JnJ6","../Data.Argonaut.Encode.Encoders/index.js":"5XVhm","../Data.Symbol/index.js":"3AbLb","../Foreign.Object/index.js":"1QIU3","../Record/index.js":"68VO1","../Type.Data.RowList/index.js":"4e8vB"}],"5XVhm":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Void = require("../Data.Void/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var extend = function (encoder) {
    return function (v) {
        var $32 = Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))((function () {
            var $34 = Foreign_Object.insert(v.value0)(v.value1);
            return function ($35) {
                return Data_Argonaut_Core.fromObject($34($35));
            };
        })());
        return function ($33) {
            return $32(encoder($33));
        };
    };
};
var extendOptional = function (encoder) {
    return function (v) {
        if (v instanceof Data_Maybe.Just) {
            return extend(encoder)(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return encoder;
        };
        throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 116, column 26 - line 118, column 21): " + [ v.constructor.name ]);
    };
};
var encodeVoid = Data_Void.absurd;
var encodeUnit = Data_Function["const"](Data_Argonaut_Core.jsonNull);
var encodeTuple = function (encoderA) {
    return function (encoderB) {
        return function (v) {
            return Data_Argonaut_Core.fromArray([ encoderA(v.value0), encoderB(v.value1) ]);
        };
    };
};
var encodeString = Data_Argonaut_Core.fromString;
var encodeNumber = Data_Argonaut_Core.fromNumber;
var encodeMaybe = function (encoder) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Argonaut_Core.jsonNull;
        };
        if (v instanceof Data_Maybe.Just) {
            return encoder(v.value0);
        };
        throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 29, column 23 - line 31, column 22): " + [ v.constructor.name ]);
    };
};
var encodeList = function (encoder) {
    var $36 = Data_Functor.map(Data_Functor.functorArray)(encoder);
    var $37 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
    return function ($38) {
        return Data_Argonaut_Core.fromArray($36($37($38)));
    };
};
var encodeMap = function (dictOrd) {
    return function (encoderA) {
        return function (encoderB) {
            var $39 = encodeList(encodeTuple(encoderA)(encoderB));
            var $40 = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
            return function ($41) {
                return $39($40($41));
            };
        };
    };
};
var encodeNonEmptyList = function (encoder) {
    var $42 = encodeList(encoder);
    return function ($43) {
        return $42(Data_List_NonEmpty.toList($43));
    };
};
var encodeNonEmpty_List = function (encoder) {
    return function (v) {
        return encodeList(encoder)(new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var encodeSet = function (dictOrd) {
    return function (encoder) {
        var $44 = encodeList(encoder);
        var $45 = Data_Set.toUnfoldable(Data_List_Types.unfoldableList);
        return function ($46) {
            return $44($45($46));
        };
    };
};
var encodeInt = function ($47) {
    return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($47));
};
var encodeIdentity = function (encoder) {
    return function (v) {
        return encoder(v);
    };
};
var encodeForeignObject = function (encoder) {
    var $48 = Data_Functor.map(Foreign_Object.functorObject)(encoder);
    return function ($49) {
        return Data_Argonaut_Core.fromObject($48($49));
    };
};
var encodeEither = function (encoderA) {
    return function (encoderB) {
        var obj = function (encoder) {
            return function (tag) {
                return function (x) {
                    return Data_Argonaut_Core.fromObject(Foreign_Object.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("tag", Data_Argonaut_Core.fromString(tag)), new Data_List_Types.Cons(new Data_Tuple.Tuple("value", encoder(x)), Data_List_Types.Nil.value))));
                };
            };
        };
        return Data_Either.either(obj(encoderA)("Left"))(obj(encoderB)("Right"));
    };
};
var encodeCodePoint = function ($50) {
    return encodeString(Data_String_CodePoints.singleton($50));
};
var encodeChar = function ($51) {
    return encodeString(Data_String_CodeUnits.singleton($51));
};
var encodeBoolean = Data_Argonaut_Core.fromBoolean;
var encodeArray = function (encoder) {
    var $52 = Data_Functor.map(Data_Functor.functorArray)(encoder);
    return function ($53) {
        return Data_Argonaut_Core.fromArray($52($53));
    };
};
var encodeNonEmptyArray = function (encoder) {
    var $54 = encodeArray(encoder);
    return function ($55) {
        return $54(Data_Array_NonEmpty.toArray($55));
    };
};
var encodeNonEmpty_Array = function (encoder) {
    return function (v) {
        return encodeArray(encoder)(Data_Array.cons(v.value0)(v.value1));
    };
};
var assocOptional = function (encoder) {
    return function (k) {
        return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
            var $56 = Data_Tuple.Tuple.create(k);
            return function ($57) {
                return $56(encoder($57));
            };
        })());
    };
};
var assoc = function (encoder) {
    return function (k) {
        var $58 = Data_Tuple.Tuple.create(k);
        return function ($59) {
            return $58(encoder($59));
        };
    };
};
module.exports = {
    encodeIdentity: encodeIdentity,
    encodeMaybe: encodeMaybe,
    encodeTuple: encodeTuple,
    encodeEither: encodeEither,
    encodeUnit: encodeUnit,
    encodeBoolean: encodeBoolean,
    encodeNumber: encodeNumber,
    encodeInt: encodeInt,
    encodeString: encodeString,
    encodeCodePoint: encodeCodePoint,
    encodeNonEmpty_Array: encodeNonEmpty_Array,
    encodeNonEmptyArray: encodeNonEmptyArray,
    encodeNonEmpty_List: encodeNonEmpty_List,
    encodeNonEmptyList: encodeNonEmptyList,
    encodeChar: encodeChar,
    encodeArray: encodeArray,
    encodeList: encodeList,
    encodeForeignObject: encodeForeignObject,
    encodeSet: encodeSet,
    encodeMap: encodeMap,
    encodeVoid: encodeVoid,
    assoc: assoc,
    assocOptional: assocOptional,
    extend: extend,
    extendOptional: extendOptional
};

},{"../Data.Argonaut.Core/index.js":"2JnJ6","../Data.Array/index.js":"6mZxP","../Data.Array.NonEmpty/index.js":"7itzV","../Data.Either/index.js":"5Va79","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Int/index.js":"3HdcH","../Data.List/index.js":"3bKr1","../Data.List.NonEmpty/index.js":"2RvxL","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Set/index.js":"dPwDO","../Data.String.CodePoints/index.js":"7IKxJ","../Data.String.CodeUnits/index.js":"2YsDe","../Data.Tuple/index.js":"43VFo","../Data.Unfoldable/index.js":"6hu5Z","../Data.Void/index.js":"6qLQE","../Foreign.Object/index.js":"1QIU3"}],"D7JZw":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var EffectFnCanceler = function (x) {
    return x;
};
var EffectFnAff = function (x) {
    return x;
};
var fromEffectFnAff = function (v) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var v1 = v(function ($4) {
                return k(Data_Either.Left.create($4))();
            }, function ($5) {
                return k(Data_Either.Right.create($5))();
            });
            return function (e) {
                return Effect_Aff.makeAff(function (k2) {
                    return function __do() {
                        v1(e, function ($6) {
                            return k2(Data_Either.Left.create($6))();
                        }, function ($7) {
                            return k2(Data_Either.Right.create($7))();
                        });
                        return Effect_Aff.nonCanceler;
                    };
                });
            };
        };
    });
};
module.exports = {
    EffectFnAff: EffectFnAff,
    EffectFnCanceler: EffectFnCanceler,
    fromEffectFnAff: fromEffectFnAff
};

},{"../Data.Either/index.js":"5Va79","../Effect.Aff/index.js":"1PqJZ"}],"2Ippr":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Generic_Internal = require("../Foreign.Generic.Internal/index.js");
var Foreign_Index = require("../Foreign.Index/index.js");
var Foreign_NullOrUndefined = require("../Foreign.NullOrUndefined/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var TaggedObject = (function () {
    function TaggedObject(value0) {
        this.value0 = value0;
    };
    TaggedObject.create = function (value0) {
        return new TaggedObject(value0);
    };
    return TaggedObject;
})();
var GenericEncodeArgs = function (encodeArgs) {
    this.encodeArgs = encodeArgs;
};
var GenericEncode = function (encodeOpts) {
    this.encodeOpts = encodeOpts;
};
var GenericDecodeArgs = function (decodeArgs) {
    this.decodeArgs = decodeArgs;
};
var GenericDecode = function (decodeOpts) {
    this.decodeOpts = decodeOpts;
};
var GenericCountArgs = function (countArgs) {
    this.countArgs = countArgs;
};
var EncodeWithOptions = function (encodeWithOptions) {
    this.encodeWithOptions = encodeWithOptions;
};
var EncodeRecord = function (encodeRecordWithOptions) {
    this.encodeRecordWithOptions = encodeRecordWithOptions;
};
var Encode = function (encode) {
    this.encode = encode;
};
var DecodeWithOptions = function (decodeWithOptions) {
    this.decodeWithOptions = decodeWithOptions;
};
var DecodeRecord = function (decodeRecordWithOptions) {
    this.decodeRecordWithOptions = decodeRecordWithOptions;
};
var Decode = function (decode) {
    this.decode = decode;
};
var voidEncode = new Encode(Data_Void.absurd);
var voidDecode = new Decode(function (v) {
    return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(new Data_Either.Left(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Foreign.ForeignError("Decode: void"))));
});
var unitEncode = new Encode(function (v) {
    return Foreign.unsafeToForeign({});
});
var unitDecode = new Decode(function (v) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit);
});
var stringEncode = new Encode(Foreign.unsafeToForeign);
var stringDecode = new Decode(Foreign.readString);
var numberEncode = new Encode(Foreign.unsafeToForeign);
var numberDecode = new Decode(Foreign.readNumber);
var intEncode = new Encode(Foreign.unsafeToForeign);
var intDecode = new Decode(Foreign.readInt);
var genericEncodeArgsNoArguments = new GenericEncodeArgs(function (v) {
    return Data_Monoid.mempty(Data_Monoid.monoidFn(Data_List_Types.monoidList));
});
var genericDecodeNoConstructors = new GenericDecode(function (opts) {
    return function (v) {
        return Foreign.fail(new Foreign.ForeignError("No constructors"));
    };
});
var genericDecodeArgsNoArguments = new GenericDecodeArgs(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                    result: Data_Generic_Rep.NoArguments.value,
                    rest: Data_List_Types.Nil.value,
                    next: v1
                });
            };
            return Foreign.fail(new Foreign.ForeignError("Too many constructor arguments"));
        };
    };
});
var genericCountArgsNoArguments = new GenericCountArgs(function (v) {
    return new Data_Either.Left(Data_Generic_Rep.NoArguments.value);
});
var genericCountArgsArgument = new GenericCountArgs(function (v) {
    return new Data_Either.Right(1);
});
var foreignEncode = new Encode(Control_Category.identity(Control_Category.categoryFn));
var foreignDecode = new Decode(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
var encodeWithOptions = function (dict) {
    return dict.encodeWithOptions;
};
var genericEncodeArgsArgument = function (dictEncodeWithOptions) {
    return new GenericEncodeArgs(function (opts) {
        return function (v) {
            return Data_List.singleton(encodeWithOptions(dictEncodeWithOptions)(opts)(v));
        };
    });
};
var encodeRecordWithOptions = function (dict) {
    return dict.encodeRecordWithOptions;
};
var encodeWithOptionsRecord = function (dictRowToList) {
    return function (dictEncodeRecord) {
        return new EncodeWithOptions(function (opts) {
            var $148 = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts);
            return function ($149) {
                return Foreign.unsafeToForeign($148($149));
            };
        });
    };
};
var encodeRecordNil = new EncodeRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return Foreign_Object.empty;
        };
    };
});
var encodeRecordCons = function (dictCons) {
    return function (dictEncodeRecord) {
        return function (dictIsSymbol) {
            return function (dictEncodeWithOptions) {
                return new EncodeRecord(function (v) {
                    return function (opts) {
                        return function (rec) {
                            var obj = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(rec);
                            var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            return Foreign_Object.insert(opts.fieldTransform(l))(encodeWithOptions(dictEncodeWithOptions)(opts)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(rec)))(obj);
                        };
                    };
                });
            };
        };
    };
};
var encodeOpts = function (dict) {
    return dict.encodeOpts;
};
var genericEncodeNoConstructors = new GenericEncode(function (opts) {
    return function (a) {
        return encodeOpts(genericEncodeNoConstructors)(opts)(a);
    };
});
var genericEncodeSum = function (dictGenericEncode) {
    return function (dictGenericEncode1) {
        return new GenericEncode(function (opts) {
            return function (v) {
                if (v instanceof Data_Generic_Rep.Inl) {
                    return encodeOpts(dictGenericEncode)({
                        sumEncoding: opts.sumEncoding,
                        unwrapSingleConstructors: false,
                        unwrapSingleArguments: opts.unwrapSingleArguments,
                        fieldTransform: opts.fieldTransform
                    })(v.value0);
                };
                if (v instanceof Data_Generic_Rep.Inr) {
                    return encodeOpts(dictGenericEncode1)({
                        sumEncoding: opts.sumEncoding,
                        unwrapSingleConstructors: false,
                        unwrapSingleArguments: opts.unwrapSingleArguments,
                        fieldTransform: opts.fieldTransform
                    })(v.value0);
                };
                throw new Error("Failed pattern match at Foreign.Generic.Class (line 351, column 1 - line 355, column 85): " + [ opts.constructor.name, v.constructor.name ]);
            };
        });
    };
};
var encodeArgs = function (dict) {
    return dict.encodeArgs;
};
var genericEncodeArgsProduct = function (dictGenericEncodeArgs) {
    return function (dictGenericEncodeArgs1) {
        return new GenericEncodeArgs(function (opts) {
            return function (v) {
                return Data_Semigroup.append(Data_List_Types.semigroupList)(encodeArgs(dictGenericEncodeArgs)(opts)(v.value0))(encodeArgs(dictGenericEncodeArgs1)(opts)(v.value1));
            };
        });
    };
};
var genericEncodeConstructor = function (dictIsSymbol) {
    return function (dictGenericEncodeArgs) {
        return new GenericEncode(function (opts) {
            return function (v) {
                var unwrapArguments = function (v1) {
                    if (v1.length === 0) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v1.length === 1 && opts.unwrapSingleArguments) {
                        return new Data_Maybe.Just(v1[0]);
                    };
                    return new Data_Maybe.Just(Foreign.unsafeToForeign(v1));
                };
                var encodeArgsArray = (function () {
                    var $150 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
                    var $151 = encodeArgs(dictGenericEncodeArgs)(opts);
                    return function ($152) {
                        return unwrapArguments($150($151($152)));
                    };
                })();
                var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                if (opts.unwrapSingleConstructors) {
                    return Data_Maybe.maybe(Foreign.unsafeToForeign({}))(Foreign.unsafeToForeign)(encodeArgsArray(v));
                };
                return Foreign.unsafeToForeign(Foreign_Object.union(Foreign_Object.singleton(opts.sumEncoding.value0.tagFieldName)(Foreign.unsafeToForeign(opts.sumEncoding.value0.constructorTagTransform(ctorName))))(Data_Maybe.maybe(Foreign_Object.empty)(Foreign_Object.singleton(opts.sumEncoding.value0.contentsFieldName))(encodeArgsArray(v))));
            };
        });
    };
};
var encode = function (dict) {
    return dict.encode;
};
var encodeWithOptionsOther = function (dictEncode) {
    return new EncodeWithOptions(function (v) {
        return encode(dictEncode);
    });
};
var identityEncode = function (dictEncode) {
    return new Encode((function () {
        var $153 = encode(dictEncode);
        var $154 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($155) {
            return $153($154($155));
        };
    })());
};
var maybeEncode = function (dictEncode) {
    return new Encode(Data_Maybe.maybe(Foreign_NullOrUndefined["null"])(encode(dictEncode)));
};
var objectEncode = function (dictEncode) {
    return new Encode((function () {
        var $156 = Foreign_Object.mapWithKey(function (v) {
            return encode(dictEncode);
        });
        return function ($157) {
            return Foreign.unsafeToForeign($156($157));
        };
    })());
};
var defaultOptions = {
    sumEncoding: new TaggedObject({
        tagFieldName: "tag",
        contentsFieldName: "contents",
        constructorTagTransform: Control_Category.identity(Control_Category.categoryFn)
    }),
    unwrapSingleConstructors: false,
    unwrapSingleArguments: true,
    fieldTransform: Control_Category.identity(Control_Category.categoryFn)
};
var recordEncode = function (dictRowToList) {
    return function (dictEncodeRecord) {
        return new Encode(encodeWithOptions(encodeWithOptionsRecord()(dictEncodeRecord))(defaultOptions));
    };
};
var decodeWithOptions = function (dict) {
    return dict.decodeWithOptions;
};
var genericDecodeArgsArgument = function (dictDecodeWithOptions) {
    return new GenericDecodeArgs(function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(v1))))(decodeWithOptions(dictDecodeWithOptions)(v)(v2.value0)))(function (a) {
                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                            result: a,
                            rest: v2.value1,
                            next: v1 + 1 | 0
                        });
                    });
                };
                return Foreign.fail(new Foreign.ForeignError("Not enough constructor arguments"));
            };
        };
    });
};
var decodeRecordWithOptions = function (dict) {
    return dict.decodeRecordWithOptions;
};
var decodeWithOptionsRecord = function (dictRowToList) {
    return function (dictDecodeRecord) {
        return new DecodeWithOptions(function (opts) {
            return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Function.flip(Record_Builder.build)({})))(decodeRecordWithOptions(dictDecodeRecord)(Type_Data_RowList.RLProxy.value)(opts));
        });
    };
};
var recordDecode = function (dictRowToList) {
    return function (dictDecodeRecord) {
        return new Decode(decodeWithOptions(decodeWithOptionsRecord()(dictDecodeRecord))(defaultOptions));
    };
};
var decodeRecordNil = new DecodeRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.identity(Record_Builder.categoryBuilder));
        };
    };
});
var decodeRecordCons = function (dictCons) {
    return function (dictDecodeRecord) {
        return function (dictIsSymbol) {
            return function (dictDecodeWithOptions) {
                return function (dictLacks) {
                    return new DecodeRecord(function (v) {
                        return function (opts) {
                            return function (f) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeRecordWithOptions(dictDecodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(f))(function (builder) {
                                    var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                    var l_transformed = opts.fieldTransform(l);
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(l_transformed))(function (f_) {
                                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(l_transformed))))(decodeWithOptions(dictDecodeWithOptions)(opts)(f_)))(function (a) {
                                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(builder)(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(a)));
                                        });
                                    });
                                });
                            };
                        };
                    });
                };
            };
        };
    };
};
var decodeOpts = function (dict) {
    return dict.decodeOpts;
};
var genericDecodeSum = function (dictGenericDecode) {
    return function (dictGenericDecode1) {
        return new GenericDecode(function (opts) {
            return function (f) {
                var opts$prime = {
                    unwrapSingleConstructors: false,
                    fieldTransform: opts.fieldTransform,
                    sumEncoding: opts.sumEncoding,
                    unwrapSingleArguments: opts.unwrapSingleArguments
                };
                return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inl.create)(decodeOpts(dictGenericDecode)(opts$prime)(f)))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inr.create)(decodeOpts(dictGenericDecode1)(opts$prime)(f)));
            };
        });
    };
};
var decodeArgs = function (dict) {
    return dict.decodeArgs;
};
var genericDecodeArgsProduct = function (dictGenericDecodeArgs) {
    return function (dictGenericDecodeArgs1) {
        return new GenericDecodeArgs(function (opts) {
            return function (i) {
                return function (xs) {
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(i)(xs))(function (v) {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs1)(opts)(v.next)(v.rest))(function (v1) {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                                result: new Data_Generic_Rep.Product(v.result, v1.result),
                                rest: v1.rest,
                                next: v1.next
                            });
                        });
                    });
                };
            };
        });
    };
};
var decode = function (dict) {
    return dict.decode;
};
var decodeWithOptionsOther = function (dictDecode) {
    return new DecodeWithOptions(function (v) {
        return decode(dictDecode);
    });
};
var identityDecode = function (dictDecode) {
    return new Decode((function () {
        var $158 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Identity.Identity);
        var $159 = decode(dictDecode);
        return function ($160) {
            return $158($159($160));
        };
    })());
};
var maybeDecode = function (dictDecode) {
    return new Decode(Foreign_NullOrUndefined.readNullOrUndefined(decode(dictDecode)));
};
var objectDecode = function (dictDecode) {
    return new Decode(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))((function () {
        var $161 = Data_Traversable.sequence(Foreign_Object.traversableObject)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity));
        var $162 = Foreign_Object.mapWithKey(function (v) {
            return decode(dictDecode);
        });
        return function ($163) {
            return $161($162($163));
        };
    })())(Foreign_Generic_Internal.readObject));
};
var countArgs = function (dict) {
    return dict.countArgs;
};
var genericCountArgsProduct = function (dictGenericCountArgs) {
    return function (dictGenericCountArgs1) {
        return new GenericCountArgs(function (v) {
            var v1 = countArgs(dictGenericCountArgs1)(Type_Proxy["Proxy"].value);
            var v2 = countArgs(dictGenericCountArgs)(Type_Proxy["Proxy"].value);
            if (v2 instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                return new Data_Either.Left(new Data_Generic_Rep.Product(v2.value0, v1.value0));
            };
            if (v2 instanceof Data_Either.Left && v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(v1.value0);
            };
            if (v2 instanceof Data_Either.Right && v1 instanceof Data_Either.Left) {
                return new Data_Either.Right(v2.value0);
            };
            if (v2 instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(v2.value0 + v1.value0 | 0);
            };
            throw new Error("Failed pattern match at Foreign.Generic.Class (line 400, column 5 - line 404, column 40): " + [ v2.constructor.name, v1.constructor.name ]);
        });
    };
};
var genericDecodeConstructor = function (dictIsSymbol) {
    return function (dictGenericDecodeArgs) {
        return function (dictGenericCountArgs) {
            return new GenericDecode(function (opts) {
                return function (f) {
                    var numArgs = countArgs(dictGenericCountArgs)(Type_Proxy["Proxy"].value);
                    var readArguments = function (args) {
                        if (numArgs instanceof Data_Either.Left) {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(numArgs.value0);
                        };
                        if (numArgs instanceof Data_Either.Right && (numArgs.value0 === 1 && opts.unwrapSingleArguments)) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.singleton(args)))(function (v) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v.rest))(Foreign.fail(new Foreign.ForeignError("Expected a single argument"))))(function () {
                                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v.result);
                                });
                            });
                        };
                        if (numArgs instanceof Data_Either.Right) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(args))(function (vals) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.fromFoldable(Data_Foldable.foldableArray)(vals)))(function (v) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v.rest))(Foreign.fail(new Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showInt)(numArgs.value0) + " constructor arguments")))))(function () {
                                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v.result);
                                    });
                                });
                            });
                        };
                        throw new Error("Failed pattern match at Foreign.Generic.Class (line 307, column 9 - line 319, column 24): " + [ numArgs.constructor.name ]);
                    };
                    var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    if (opts.unwrapSingleConstructors) {
                        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Constructor)(readArguments(f));
                    };
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.tagFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(opts.sumEncoding.value0.tagFieldName))(Foreign.readString))(function (tag) {
                        var expected = opts.sumEncoding.value0.constructorTagTransform(ctorName);
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(tag === expected)(Foreign.fail(new Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showString)(expected) + " tag")))))(function () {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(tag);
                        });
                    })))(function (tag) {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.contentsFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(opts.sumEncoding.value0.contentsFieldName))(readArguments)))(function (args) {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(args);
                        });
                    });
                };
            });
        };
    };
};
var charEncode = new Encode(Foreign.unsafeToForeign);
var charDecode = new Decode(Foreign.readChar);
var booleanEncode = new Encode(Foreign.unsafeToForeign);
var booleanDecode = new Decode(Foreign.readBoolean);
var arrayEncode = function (dictEncode) {
    return new Encode((function () {
        var $164 = Data_Functor.map(Data_Functor.functorArray)(encode(dictEncode));
        return function ($165) {
            return Foreign.unsafeToForeign($164($165));
        };
    })());
};
var arrayDecode = function (dictDecode) {
    return new Decode((function () {
        var readElement = function (i) {
            return function (value) {
                return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(i))))(decode(dictDecode)(value));
            };
        };
        var readElements = function (arr) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
        };
        return Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray)(readElements);
    })());
};
module.exports = {
    countArgs: countArgs,
    decode: decode,
    decodeArgs: decodeArgs,
    decodeOpts: decodeOpts,
    decodeRecordWithOptions: decodeRecordWithOptions,
    decodeWithOptions: decodeWithOptions,
    encode: encode,
    encodeArgs: encodeArgs,
    encodeOpts: encodeOpts,
    encodeRecordWithOptions: encodeRecordWithOptions,
    encodeWithOptions: encodeWithOptions,
    TaggedObject: TaggedObject,
    defaultOptions: defaultOptions,
    Decode: Decode,
    Encode: Encode,
    DecodeWithOptions: DecodeWithOptions,
    EncodeWithOptions: EncodeWithOptions,
    DecodeRecord: DecodeRecord,
    EncodeRecord: EncodeRecord,
    GenericDecode: GenericDecode,
    GenericEncode: GenericEncode,
    GenericDecodeArgs: GenericDecodeArgs,
    GenericEncodeArgs: GenericEncodeArgs,
    GenericCountArgs: GenericCountArgs,
    voidDecode: voidDecode,
    unitDecode: unitDecode,
    foreignDecode: foreignDecode,
    stringDecode: stringDecode,
    charDecode: charDecode,
    booleanDecode: booleanDecode,
    numberDecode: numberDecode,
    intDecode: intDecode,
    identityDecode: identityDecode,
    arrayDecode: arrayDecode,
    maybeDecode: maybeDecode,
    objectDecode: objectDecode,
    recordDecode: recordDecode,
    voidEncode: voidEncode,
    unitEncode: unitEncode,
    foreignEncode: foreignEncode,
    stringEncode: stringEncode,
    charEncode: charEncode,
    booleanEncode: booleanEncode,
    numberEncode: numberEncode,
    intEncode: intEncode,
    identityEncode: identityEncode,
    arrayEncode: arrayEncode,
    maybeEncode: maybeEncode,
    objectEncode: objectEncode,
    recordEncode: recordEncode,
    decodeWithOptionsRecord: decodeWithOptionsRecord,
    decodeWithOptionsOther: decodeWithOptionsOther,
    encodeWithOptionsRecord: encodeWithOptionsRecord,
    encodeWithOptionsOther: encodeWithOptionsOther,
    decodeRecordNil: decodeRecordNil,
    encodeRecordNil: encodeRecordNil,
    decodeRecordCons: decodeRecordCons,
    encodeRecordCons: encodeRecordCons,
    genericDecodeNoConstructors: genericDecodeNoConstructors,
    genericEncodeNoConstructors: genericEncodeNoConstructors,
    genericDecodeConstructor: genericDecodeConstructor,
    genericEncodeConstructor: genericEncodeConstructor,
    genericDecodeSum: genericDecodeSum,
    genericEncodeSum: genericEncodeSum,
    genericDecodeArgsNoArguments: genericDecodeArgsNoArguments,
    genericEncodeArgsNoArguments: genericEncodeArgsNoArguments,
    genericDecodeArgsArgument: genericDecodeArgsArgument,
    genericEncodeArgsArgument: genericEncodeArgsArgument,
    genericDecodeArgsProduct: genericDecodeArgsProduct,
    genericEncodeArgsProduct: genericEncodeArgsProduct,
    genericCountArgsNoArguments: genericCountArgsNoArguments,
    genericCountArgsArgument: genericCountArgsArgument,
    genericCountArgsProduct: genericCountArgsProduct
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad.Except/index.js":"7FRiC","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Control.Semigroupoid/index.js":"5fTaI","../Data.Array/index.js":"6mZxP","../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Generic.Rep/index.js":"3mknB","../Data.Identity/index.js":"29odg","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Symbol/index.js":"3AbLb","../Data.Traversable/index.js":"2NLLF","../Data.Unfoldable/index.js":"6hu5Z","../Data.Unit/index.js":"64zbv","../Data.Void/index.js":"6qLQE","../Foreign/index.js":"3iOAH","../Foreign.Generic.Internal/index.js":"6Qraz","../Foreign.Index/index.js":"6AzRZ","../Foreign.NullOrUndefined/index.js":"24vgu","../Foreign.Object/index.js":"1QIU3","../Record/index.js":"68VO1","../Record.Builder/index.js":"B2QGS","../Type.Data.RowList/index.js":"4e8vB","../Type.Proxy/index.js":"2sP8v"}],"6Qraz":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Foreign = require("../Foreign/index.js");
var isObject = function (v) {
    return Foreign.tagOf(v) === "Object";
};
var readObject = function (value) {
    if (isObject(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.unsafeFromForeign(value));
    };
    if (Data_Boolean.otherwise) {
        return Foreign.fail(new Foreign.TypeMismatch("Object", Foreign.tagOf(value)));
    };
    throw new Error("Failed pattern match at Foreign.Generic.Internal (line 13, column 1 - line 13, column 44): " + [ value.constructor.name ]);
};
module.exports = {
    isObject: isObject,
    readObject: readObject
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Data.Boolean/index.js":"4zMHm","../Data.Identity/index.js":"29odg","../Foreign/index.js":"3iOAH"}],"6AzRZ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Foreign = require("../Foreign/index.js");
var Indexable = function (ix) {
    this.ix = ix;
};
var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
    this.errorAt = errorAt;
    this.hasOwnProperty = hasOwnProperty;
    this.hasProperty = hasProperty;
    this.index = index;
};
var unsafeReadProp = function (k) {
    return function (value) {
        return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
    };
};
var readProp = unsafeReadProp;
var readIndex = unsafeReadProp;
var ix = function (dict) {
    return dict.ix;
};
var index = function (dict) {
    return dict.index;
};
var indexableExceptT = new Indexable(function (dictIndex) {
    return function (f) {
        return function (i) {
            return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
        };
    };
});
var indexableForeign = new Indexable(function (dictIndex) {
    return index(dictIndex);
});
var hasPropertyImpl = function (v) {
    return function (value) {
        if (Foreign.isNull(value)) {
            return false;
        };
        if (Foreign.isUndefined(value)) {
            return false;
        };
        if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
            return $foreign.unsafeHasProperty(v, value);
        };
        return false;
    };
};
var hasProperty = function (dict) {
    return dict.hasProperty;
};
var hasOwnPropertyImpl = function (v) {
    return function (value) {
        if (Foreign.isNull(value)) {
            return false;
        };
        if (Foreign.isUndefined(value)) {
            return false;
        };
        if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
            return $foreign.unsafeHasOwnProperty(v, value);
        };
        return false;
    };
};
var indexInt = new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
var hasOwnProperty = function (dict) {
    return dict.hasOwnProperty;
};
var errorAt = function (dict) {
    return dict.errorAt;
};
module.exports = {
    Index: Index,
    Indexable: Indexable,
    readProp: readProp,
    readIndex: readIndex,
    ix: ix,
    index: index,
    hasProperty: hasProperty,
    hasOwnProperty: hasOwnProperty,
    errorAt: errorAt,
    indexString: indexString,
    indexInt: indexInt,
    indexableForeign: indexableForeign,
    indexableExceptT: indexableExceptT
};

},{"./foreign.js":"OHqTB","../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Data.Function/index.js":"tHEWI","../Data.Identity/index.js":"29odg","../Foreign/index.js":"3iOAH"}],"OHqTB":[function(require,module,exports) {
"use strict";

exports.unsafeReadPropImpl = function (f, s, key, value) {
  return value == null ? f : s(value[key]);
};

exports.unsafeHasOwnProperty = function (prop, value) {
  return Object.prototype.hasOwnProperty.call(value, prop);
};

exports.unsafeHasProperty = function (prop, value) {
  return prop in value;
};

},{}],"24vgu":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Foreign = require("../Foreign/index.js");
var readNullOrUndefined = function (v) {
    return function (value) {
        if (Foreign.isNull(value) || Foreign.isUndefined(value)) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
        };
        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
    };
};
module.exports = {
    readNullOrUndefined: readNullOrUndefined,
    "undefined": $foreign["undefined"],
    "null": $foreign["null"]
};

},{"./foreign.js":"5JSjY","../Control.Applicative/index.js":"1ufUD","../Control.Monad.Except.Trans/index.js":"4X0Lb","../Data.Functor/index.js":"5ZkNG","../Data.Identity/index.js":"29odg","../Data.Maybe/index.js":"1Cwwt","../Foreign/index.js":"3iOAH"}],"5JSjY":[function(require,module,exports) {
exports['null'] = null;

exports['undefined'] = undefined;

},{}],"3Q7l8":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Foreign_Generic_Class = require("../Foreign.Generic.Class/index.js");
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Ignore = (function () {
    function Ignore() {

    };
    Ignore.value = new Ignore();
    return Ignore;
})();
var All = (function () {
    function All() {

    };
    All.value = new All();
    return All;
})();
var errorPolicyToForeign = function (v) {
    if (v instanceof None) {
        return "none";
    };
    if (v instanceof Ignore) {
        return "ignore";
    };
    if (v instanceof All) {
        return "all";
    };
    throw new Error("Failed pattern match at GraphQL.Client.BaseClients.Apollo.ErrorPolicy (line 18, column 24 - line 21, column 15): " + [ v.constructor.name ]);
};
var eqErrorPolicy = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof None && y instanceof None) {
            return true;
        };
        if (x instanceof Ignore && y instanceof Ignore) {
            return true;
        };
        if (x instanceof All && y instanceof All) {
            return true;
        };
        return false;
    };
});
var encodeErrorPolicy = new Foreign_Generic_Class.Encode((function () {
    var $6 = Foreign_Generic_Class.encode(Foreign_Generic_Class.stringEncode);
    return function ($7) {
        return $6(errorPolicyToForeign($7));
    };
})());
module.exports = {
    None: None,
    Ignore: Ignore,
    All: All,
    errorPolicyToForeign: errorPolicyToForeign,
    eqErrorPolicy: eqErrorPolicy,
    encodeErrorPolicy: encodeErrorPolicy
};

},{"../Data.Eq/index.js":"2htS8","../Foreign.Generic.Class/index.js":"2Ippr"}],"3oFp7":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Foreign_Generic_Class = require("../Foreign.Generic.Class/index.js");
var CacheFirst = (function () {
    function CacheFirst() {

    };
    CacheFirst.value = new CacheFirst();
    return CacheFirst;
})();
var CacheOnly = (function () {
    function CacheOnly() {

    };
    CacheOnly.value = new CacheOnly();
    return CacheOnly;
})();
var CacheAndNetwork = (function () {
    function CacheAndNetwork() {

    };
    CacheAndNetwork.value = new CacheAndNetwork();
    return CacheAndNetwork;
})();
var NetworkOnly = (function () {
    function NetworkOnly() {

    };
    NetworkOnly.value = new NetworkOnly();
    return NetworkOnly;
})();
var NoCache = (function () {
    function NoCache() {

    };
    NoCache.value = new NoCache();
    return NoCache;
})();
var Standby = (function () {
    function Standby() {

    };
    Standby.value = new Standby();
    return Standby;
})();
var fetchPolicyToForeign = function (v) {
    if (v instanceof CacheFirst) {
        return "cache-first";
    };
    if (v instanceof CacheOnly) {
        return "cache-only";
    };
    if (v instanceof CacheAndNetwork) {
        return "cache-and-network";
    };
    if (v instanceof NetworkOnly) {
        return "network-only";
    };
    if (v instanceof NoCache) {
        return "no-cache";
    };
    if (v instanceof Standby) {
        return "standby";
    };
    throw new Error("Failed pattern match at GraphQL.Client.BaseClients.Apollo.FetchPolicy (line 21, column 24 - line 27, column 23): " + [ v.constructor.name ]);
};
var eqFetchPolicy = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof CacheFirst && y instanceof CacheFirst) {
            return true;
        };
        if (x instanceof CacheOnly && y instanceof CacheOnly) {
            return true;
        };
        if (x instanceof CacheAndNetwork && y instanceof CacheAndNetwork) {
            return true;
        };
        if (x instanceof NetworkOnly && y instanceof NetworkOnly) {
            return true;
        };
        if (x instanceof NoCache && y instanceof NoCache) {
            return true;
        };
        if (x instanceof Standby && y instanceof Standby) {
            return true;
        };
        return false;
    };
});
var encodeFetchPolicy = new Foreign_Generic_Class.Encode((function () {
    var $6 = Foreign_Generic_Class.encode(Foreign_Generic_Class.stringEncode);
    return function ($7) {
        return $6(fetchPolicyToForeign($7));
    };
})());
module.exports = {
    CacheFirst: CacheFirst,
    CacheOnly: CacheOnly,
    CacheAndNetwork: CacheAndNetwork,
    NetworkOnly: NetworkOnly,
    NoCache: NoCache,
    Standby: Standby,
    fetchPolicyToForeign: fetchPolicyToForeign,
    eqFetchPolicy: eqFetchPolicy,
    encodeFetchPolicy: encodeFetchPolicy
};

},{"../Data.Eq/index.js":"2htS8","../Foreign.Generic.Class/index.js":"2Ippr"}],"4g2tQ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var Data_String_Regex_Unsafe = require("../Data.String.Regex.Unsafe/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var GraphQL_Client_Args = require("../GraphQL.Client.Args/index.js");
var Heterogeneous_Folding = require("../Heterogeneous.Folding/index.js");
var PropToGqlString = (function () {
    function PropToGqlString(value0) {
        this.value0 = value0;
    };
    PropToGqlString.create = function (value0) {
        return new PropToGqlString(value0);
    };
    return PropToGqlString;
})();
var PropToGqlArg = (function () {
    function PropToGqlArg() {

    };
    PropToGqlArg.value = new PropToGqlArg();
    return PropToGqlArg;
})();
var IsIgnoreArg = function (isIgnoreArg) {
    this.isIgnoreArg = isIgnoreArg;
};
var GqlQueryString = function (toGqlQueryStringImpl) {
    this.toGqlQueryStringImpl = toGqlQueryStringImpl;
};
var GqlArgString = function (toGqlArgStringImpl) {
    this.toGqlArgStringImpl = toGqlArgStringImpl;
};
var GqlAndArgString = function (toGqlAndArgStringImpl) {
    this.toGqlAndArgStringImpl = toGqlAndArgStringImpl;
};
var toGqlQueryStringImpl = function (dict) {
    return dict.toGqlQueryStringImpl;
};
var toGqlQueryStringFormatted = function (dictGqlQueryString) {
    return toGqlQueryStringImpl(dictGqlQueryString)({
        indentation: new Data_Maybe.Just(2)
    });
};
var toGqlQueryString = function (dictGqlQueryString) {
    return toGqlQueryStringImpl(dictGqlQueryString)({
        indentation: Data_Maybe.Nothing.value
    });
};
var toGqlArgStringImpl = function (dict) {
    return dict.toGqlArgStringImpl;
};
var toGqlArgString = function (dictGqlArgString) {
    return toGqlArgStringImpl(dictGqlArgString);
};
var toGqlAndArgStringImpl = function (dict) {
    return dict.toGqlAndArgStringImpl;
};
var showInt = function (dictBoundedEnum) {
    var $102 = Data_Show.show(Data_Show.showInt);
    var $103 = Data_Enum.fromEnum(dictBoundedEnum);
    return function ($104) {
        return $102($103($104));
    };
};
var removeTrailingZeros = function (v) {
    if (v === "000") {
        return "0";
    };
    return Data_String_CodePoints.fromCodePointArray(Data_Array.reverse(Data_Array.dropWhile(function (v1) {
        return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v1)(Data_String_CodePoints.codePointFromChar("0"));
    })(Data_Array.reverse(Data_String_CodePoints.toCodePointArray(v)))));
};
var propToGqlStringAlias = function (dictGqlQueryString) {
    return function (dictIsSymbol) {
        return function (dictIsSymbol1) {
            return new Heterogeneous_Folding.FoldingWithIndex(function (v) {
                return function (prop) {
                    return function (str) {
                        return function (v1) {
                            var nl = (function () {
                                var $57 = Data_Maybe.isJust(v.value0.indentation);
                                if ($57) {
                                    return "\x0a";
                                };
                                return " ";
                            })();
                            return str + (nl + (Data_Symbol.reflectSymbol(dictIsSymbol)(prop) + (": " + (Data_Symbol.reflectSymbol(dictIsSymbol1)(v1.value0) + toGqlQueryStringImpl(dictGqlQueryString)(v.value0)(v1.value1)))));
                        };
                    };
                };
            });
        };
    };
};
var propToGqlString = function (dictGqlQueryString) {
    return function (dictIsSymbol) {
        return new Heterogeneous_Folding.FoldingWithIndex(function (v) {
            return function (prop) {
                return function (str) {
                    return function (a) {
                        var nl = (function () {
                            var $65 = Data_Maybe.isJust(v.value0.indentation);
                            if ($65) {
                                return "\x0a";
                            };
                            return " ";
                        })();
                        return str + (nl + (Data_Symbol.reflectSymbol(dictIsSymbol)(prop) + toGqlQueryStringImpl(dictGqlQueryString)(v.value0)(a)));
                    };
                };
            };
        });
    };
};
var padl$prime = function ($copy_n) {
    return function ($copy_chr) {
        return function ($copy_chrs) {
            var $tco_var_n = $copy_n;
            var $tco_var_chr = $copy_chr;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(n, chr, chrs) {
                if (n <= 0) {
                    $tco_done = true;
                    return chrs;
                };
                if (Data_Boolean.otherwise) {
                    $tco_var_n = n - 1 | 0;
                    $tco_var_chr = chr;
                    $copy_chrs = Data_Array.cons(chr)(chrs);
                    return;
                };
                throw new Error("Failed pattern match at GraphQL.Client.ToGqlString (line 193, column 1 - line 193, column 49): " + [ n.constructor.name, chr.constructor.name, chrs.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_n, $tco_var_chr, $copy_chrs);
            };
            return $tco_result;
        };
    };
};
var padl = function (n) {
    return function (chr) {
        return function (str) {
            return Data_String_CodeUnits.fromCharArray(padl$prime(n - Data_String_CodeUnits.length(str) | 0)(chr)(Data_String_CodeUnits.toCharArray(str)));
        };
    };
};
var padMilli = (function () {
    var $105 = padl(3)("0");
    var $106 = Data_Show.show(Data_Show.showInt);
    var $107 = Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond);
    return function ($108) {
        return $105($106($107($108)));
    };
})();
var timeString = function (time) {
    return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ padl(2)("0")(showInt(Data_Time_Component.boundedEnumHour)(Data_Time.hour(time))), ":", padl(2)("0")(showInt(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(time))), ":", padl(2)("0")(showInt(Data_Time_Component.boundedEnumSecond)(Data_Time.second(time))), ".", removeTrailingZeros(padMilli(Data_Time.millisecond(time))), "Z" ]);
};
var isIgnoreArgOther = new IsIgnoreArg(function (v) {
    return false;
});
var isIgnoreArgIgnoreArg = new IsIgnoreArg(function (v) {
    return true;
});
var isIgnoreArg = function (dict) {
    return dict.isIgnoreArg;
};
var isIgnoreArgOrArg = function (dictIsIgnoreArg) {
    return function (dictIsIgnoreArg1) {
        return new IsIgnoreArg(function (v) {
            if (v instanceof GraphQL_Client_Args.ArgL) {
                return isIgnoreArg(dictIsIgnoreArg)(v.value0);
            };
            if (v instanceof GraphQL_Client_Args.ArgR) {
                return isIgnoreArg(dictIsIgnoreArg1)(v.value0);
            };
            throw new Error("Failed pattern match at GraphQL.Client.ToGqlString (line 267, column 17 - line 269, column 28): " + [ v.constructor.name ]);
        });
    };
};
var propToGqlArg = function (dictGqlArgString) {
    return function (dictIsSymbol) {
        return function (dictIsIgnoreArg) {
            return new Heterogeneous_Folding.FoldingWithIndex(function (v) {
                return function (prop) {
                    return function (str) {
                        return function (a) {
                            var pre = (function () {
                                var $77 = str === "";
                                if ($77) {
                                    return "";
                                };
                                return str + ", ";
                            })();
                            var $78 = isIgnoreArg(dictIsIgnoreArg)(a);
                            if ($78) {
                                return str;
                            };
                            return pre + (Data_Symbol.reflectSymbol(dictIsSymbol)(prop) + (": " + toGqlArgStringImpl(dictGqlArgString)(a)));
                        };
                    };
                };
            });
        };
    };
};
var gqlQueryStringUnit = new GqlQueryString(function (v) {
    return function (v1) {
        return "";
    };
});
var gqlQueryStringSymbol = function (dictIsSymbol) {
    return new GqlQueryString(function (v) {
        return function (v1) {
            return ": " + Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
        };
    });
};
var gqlQueryStringRecord = function (opts) {
    return function (dictHFoldlWithIndex) {
        return function (r) {
            var toLines = Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("\\n")(Data_String_Regex_Flags.global));
            var multiline = Data_Maybe.isJust(opts.indentation);
            var nl = Data_Monoid.guard(Data_Monoid.monoidString)(multiline)("\x0a");
            var indent = function (str) {
                if (opts.indentation instanceof Data_Maybe.Just) {
                    var lines = toLines(str);
                    return Data_String_Common.joinWith(nl)(Data_Array.mapWithIndex(function (i) {
                        return function (l) {
                            var $80 = i === 0 || i === (Data_Array.length(lines) - 1 | 0);
                            if ($80) {
                                return l;
                            };
                            return Data_Monoid.power(Data_Monoid.monoidString)(" ")(opts.indentation.value0) + l;
                        };
                    })(lines));
                };
                return str;
            };
            return indent(" {" + (Heterogeneous_Folding.hfoldlWithIndex(dictHFoldlWithIndex)(new PropToGqlString(opts))("")(r) + (nl + "}")));
        };
    };
};
var gqlQueryStringEmptyRecord = function (dictHFoldlWithIndex) {
    return new GqlQueryString(function (r) {
        return gqlQueryStringRecord(r)(dictHFoldlWithIndex);
    });
};
var gqlArgStringTime = new GqlArgString((function () {
    var $109 = Data_Show.show(Data_Show.showString);
    return function ($110) {
        return $109(timeString($110));
    };
})());
var gqlArgStringString = new GqlArgString(Data_Show.show(Data_Show.showString));
var gqlArgStringRecordTopLevel = function (dictHFoldlWithIndex) {
    return function (r) {
        return "(" + (Heterogeneous_Folding.hfoldlWithIndex(dictHFoldlWithIndex)(PropToGqlArg.value)("")(r) + ")");
    };
};
var gqlQueryStringArgs = function (dictHFoldlWithIndex) {
    return function (dictGqlQueryString) {
        return new GqlQueryString(function (opts) {
            return function (v) {
                return gqlArgStringRecordTopLevel(dictHFoldlWithIndex)(v.value0) + toGqlQueryStringImpl(dictGqlQueryString)(opts)(v.value1);
            };
        });
    };
};
var gqlQueryStringArgsScalar = function (dictHFoldlWithIndex) {
    return new GqlQueryString(function (opts) {
        return function (v) {
            return gqlArgStringRecordTopLevel(dictHFoldlWithIndex)(v.value0);
        };
    });
};
var gqlArgStringRecord = function (dictHFoldlWithIndex) {
    return function (r) {
        return "{" + (Heterogeneous_Folding.hfoldlWithIndex(dictHFoldlWithIndex)(PropToGqlArg.value)("")(r) + "}");
    };
};
var gqlArgStringRecord_ = function (dictHFoldlWithIndex) {
    return new GqlArgString(function (r) {
        return gqlArgStringRecord(dictHFoldlWithIndex)(r);
    });
};
var gqlArgStringOrArg = function (dictGqlArgString) {
    return function (dictGqlArgString1) {
        return new GqlArgString(function (v) {
            if (v instanceof GraphQL_Client_Args.ArgL) {
                return toGqlArgStringImpl(dictGqlArgString)(v.value0);
            };
            if (v instanceof GraphQL_Client_Args.ArgR) {
                return toGqlArgStringImpl(dictGqlArgString1)(v.value0);
            };
            throw new Error("Failed pattern match at GraphQL.Client.ToGqlString (line 151, column 24 - line 153, column 35): " + [ v.constructor.name ]);
        });
    };
};
var gqlArgStringNumber = new GqlArgString(Data_Show.show(Data_Show.showNumber));
var gqlArgStringMaybe = function (dictGqlArgString) {
    return new GqlArgString(Data_Maybe.maybe("null")(toGqlArgStringImpl(dictGqlArgString)));
};
var gqlArgStringInt = new GqlArgString(Data_Show.show(Data_Show.showInt));
var gqlArgStringIgnoreArg = new GqlArgString(function (v) {
    return "";
});
var gqlArgStringBoolean = new GqlArgString(Data_Show.show(Data_Show.showBoolean));
var gqlArgStringArray = function (dictGqlArgString) {
    return new GqlArgString((function () {
        var $111 = Data_Functor.map(Data_Functor.functorArray)(toGqlArgStringImpl(dictGqlArgString));
        return function ($112) {
            return (function (as) {
                return "[" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(as) + "]");
            })($111($112));
        };
    })());
};
var gqlArgStringAndArgNotEnd = function (dictGqlArgString) {
    return function (dictGqlAndArgString) {
        return new GqlAndArgString(function (v) {
            return toGqlArgStringImpl(dictGqlArgString)(v.value0) + (", " + toGqlAndArgStringImpl(dictGqlAndArgString)(v.value1));
        });
    };
};
var gqlArgStringAndArgEnd = function (dictGqlArgString) {
    return function (dictGqlArgString1) {
        return new GqlAndArgString(function (v) {
            return toGqlArgStringImpl(dictGqlArgString)(v.value0) + (", " + toGqlArgStringImpl(dictGqlArgString1)(v.value1));
        });
    };
};
var gqlArgStringAndArg = function (dictGqlAndArgString) {
    return new GqlArgString(function (andArg) {
        return "[" + (toGqlAndArgStringImpl(dictGqlAndArgString)(andArg) + "]");
    });
};
var dateString = function (date) {
    return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ showInt(Data_Date_Component.boundedEnumYear)(Data_Date.year(date)), "-", padl(2)("0")(showInt(Data_Date_Component.boundedEnumMonth)(Data_Date.month(date))), "-", padl(2)("0")(showInt(Data_Date_Component.boundedEnumDay)(Data_Date.day(date))) ]);
};
var gqlArgStringDate = new GqlArgString((function () {
    var $113 = Data_Show.show(Data_Show.showString);
    return function ($114) {
        return $113(dateString($114));
    };
})());
var gqlArgStringDateTime = new GqlArgString(function (v) {
    return Data_Show.show(Data_Show.showString)(dateString(v.value0) + ("T" + timeString(v.value1)));
});
module.exports = {
    isIgnoreArg: isIgnoreArg,
    toGqlAndArgStringImpl: toGqlAndArgStringImpl,
    toGqlArgStringImpl: toGqlArgStringImpl,
    toGqlQueryStringImpl: toGqlQueryStringImpl,
    toGqlQueryString: toGqlQueryString,
    toGqlQueryStringFormatted: toGqlQueryStringFormatted,
    GqlQueryString: GqlQueryString,
    PropToGqlString: PropToGqlString,
    gqlQueryStringRecord: gqlQueryStringRecord,
    toGqlArgString: toGqlArgString,
    GqlArgString: GqlArgString,
    dateString: dateString,
    timeString: timeString,
    showInt: showInt,
    padl: padl,
    "padl'": padl$prime,
    removeTrailingZeros: removeTrailingZeros,
    padMilli: padMilli,
    GqlAndArgString: GqlAndArgString,
    PropToGqlArg: PropToGqlArg,
    gqlArgStringRecord: gqlArgStringRecord,
    gqlArgStringRecordTopLevel: gqlArgStringRecordTopLevel,
    IsIgnoreArg: IsIgnoreArg,
    gqlQueryStringUnit: gqlQueryStringUnit,
    gqlQueryStringSymbol: gqlQueryStringSymbol,
    gqlQueryStringArgsScalar: gqlQueryStringArgsScalar,
    gqlQueryStringArgs: gqlQueryStringArgs,
    gqlQueryStringEmptyRecord: gqlQueryStringEmptyRecord,
    propToGqlStringAlias: propToGqlStringAlias,
    propToGqlString: propToGqlString,
    gqlArgStringIgnoreArg: gqlArgStringIgnoreArg,
    gqlArgStringString: gqlArgStringString,
    gqlArgStringInt: gqlArgStringInt,
    gqlArgStringNumber: gqlArgStringNumber,
    gqlArgStringBoolean: gqlArgStringBoolean,
    gqlArgStringDate: gqlArgStringDate,
    gqlArgStringTime: gqlArgStringTime,
    gqlArgStringDateTime: gqlArgStringDateTime,
    gqlArgStringMaybe: gqlArgStringMaybe,
    gqlArgStringArray: gqlArgStringArray,
    gqlArgStringOrArg: gqlArgStringOrArg,
    gqlArgStringAndArg: gqlArgStringAndArg,
    gqlArgStringRecord_: gqlArgStringRecord_,
    gqlArgStringAndArgNotEnd: gqlArgStringAndArgNotEnd,
    gqlArgStringAndArgEnd: gqlArgStringAndArgEnd,
    propToGqlArg: propToGqlArg,
    isIgnoreArgIgnoreArg: isIgnoreArgIgnoreArg,
    isIgnoreArgOrArg: isIgnoreArgOrArg,
    isIgnoreArgOther: isIgnoreArgOther
};

},{"../Data.Array/index.js":"6mZxP","../Data.Boolean/index.js":"4zMHm","../Data.Date/index.js":"4hA1n","../Data.Date.Component/index.js":"6Nh6A","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Show/index.js":"6nX0c","../Data.String.CodePoints/index.js":"7IKxJ","../Data.String.CodeUnits/index.js":"2YsDe","../Data.String.Common/index.js":"6Lw5g","../Data.String.Regex/index.js":"3GJB2","../Data.String.Regex.Flags/index.js":"1Yc6M","../Data.String.Regex.Unsafe/index.js":"2TBs2","../Data.Symbol/index.js":"3AbLb","../Data.Time/index.js":"49G5n","../Data.Time.Component/index.js":"4q8F1","../GraphQL.Client.Args/index.js":"3Z7dz","../Heterogeneous.Folding/index.js":"5OD3Q"}],"4hA1n":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var $$Date = (function () {
    function $$Date(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    $$Date.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new $$Date(value0, value1, value2);
            };
        };
    };
    return $$Date;
})();
var year = function (v) {
    return v.value0;
};
var weekday = function (v) {
    var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
    var $41 = n === 0;
    if ($41) {
        return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
    };
    return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
};
var showDate = new Data_Show.Show(function (v) {
    return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
});
var month = function (v) {
    return v.value1;
};
var isLeapYear = function (y) {
    var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
    return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
};
var lastDayOfMonth = function (y) {
    return function (m) {
        var unsafeDay = (function () {
            var $108 = Data_Maybe.fromJust();
            var $109 = Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
            return function ($110) {
                return $108($109($110));
            };
        })();
        if (m instanceof Data_Date_Component.January) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.February) {
            if (isLeapYear(y)) {
                return unsafeDay(29);
            };
            if (Data_Boolean.otherwise) {
                return unsafeDay(28);
            };
        };
        if (m instanceof Data_Date_Component.March) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.April) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.May) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.June) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.July) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.August) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.September) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.October) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.November) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.December) {
            return unsafeDay(31);
        };
        throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 141, column 27): " + [ m.constructor.name ]);
    };
};
var eqDate = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
    };
});
var ordDate = new Data_Ord.Ord(function () {
    return eqDate;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
    };
});
var enumDate = new Data_Enum.Enum(function () {
    return ordDate;
}, function (v) {
    var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
    var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);
    var y$prime = (function () {
        var $73 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);
        if ($73) {
            return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
        };
        return new Data_Maybe.Just(v.value0);
    })();
    var m$prime = (function () {
        var $74 = Data_Maybe.isNothing(pd);
        if ($74) {
            return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
        };
        return v.value1;
    })();
    var l = lastDayOfMonth(v.value0)(m$prime);
    var d$prime = (function () {
        var $75 = Data_Maybe.isNothing(pd);
        if ($75) {
            return new Data_Maybe.Just(l);
        };
        return pd;
    })();
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
}, function (v) {
    var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
    var l = lastDayOfMonth(v.value0)(v.value1);
    var sd = (function () {
        var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
        var $80 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));
        if ($80) {
            return Data_Maybe.Nothing.value;
        };
        return v1;
    })();
    var m$prime = (function () {
        var $81 = Data_Maybe.isNothing(sd);
        if ($81) {
            return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
        };
        return v.value1;
    })();
    var y$prime = (function () {
        var $82 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);
        if ($82) {
            return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
        };
        return new Data_Maybe.Just(v.value0);
    })();
    var d$prime = (function () {
        var $83 = Data_Maybe.isNothing(sd);
        if ($83) {
            return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
        };
        return sd;
    })();
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
});
var diff = function (dictDuration) {
    return function (v) {
        return function (v1) {
            return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
        };
    };
};
var day = function (v) {
    return v.value2;
};
var canonicalDate = function (y) {
    return function (m) {
        return function (d) {
            var mkDate = function (y$prime) {
                return function (m$prime) {
                    return function (d$prime) {
                        return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                    };
                };
            };
            return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
        };
    };
};
var exactDate = function (y) {
    return function (m) {
        return function (d) {
            var dt = new $$Date(y, m, d);
            var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
            if ($99) {
                return new Data_Maybe.Just(dt);
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var boundedDate = new Data_Bounded.Bounded(function () {
    return ordDate;
}, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
var adjust = function (v) {
    return function (date) {
        var adj = function (v1) {
            return function (v2) {
                if (v1 === 0) {
                    return new Data_Maybe.Just(v2);
                };
                var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
                var low = j < 1;
                var l = lastDayOfMonth(v2.value0)((function () {
                    if (low) {
                        return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
                    };
                    return v2.value1;
                })());
                var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);
                var i$prime = (function () {
                    if (low) {
                        return j;
                    };
                    if (hi) {
                        return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
                    };
                    if (Data_Boolean.otherwise) {
                        return 0;
                    };
                    throw new Error("Failed pattern match at Data.Date (line 101, column 9 - line 103, column 28): " + [  ]);
                })();
                var dt$prime = (function () {
                    if (low) {
                        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
                    };
                    if (hi) {
                        return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
                    };
                    if (Data_Boolean.otherwise) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
                    };
                    throw new Error("Failed pattern match at Data.Date (line 104, column 9 - line 106, column 48): " + [  ]);
                })();
                return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
            };
        };
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
    };
};
module.exports = {
    canonicalDate: canonicalDate,
    exactDate: exactDate,
    year: year,
    month: month,
    day: day,
    weekday: weekday,
    diff: diff,
    isLeapYear: isLeapYear,
    lastDayOfMonth: lastDayOfMonth,
    adjust: adjust,
    eqDate: eqDate,
    ordDate: ordDate,
    boundedDate: boundedDate,
    showDate: showDate,
    enumDate: enumDate
};

},{"./foreign.js":"nBm1I","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.Date.Component/index.js":"6Nh6A","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.EuclideanRing/index.js":"4eAMZ","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Int/index.js":"3HdcH","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c","../Data.Time.Duration/index.js":"7Ew6e"}],"nBm1I":[function(require,module,exports) {
"use strict";

var createDate = function (y, m, d) {
  var date = new Date(Date.UTC(y, m, d));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date;
};

exports.canonicalDateImpl = function (ctor, y, m, d) {
  var date = createDate(y, m - 1, d);
  return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
};

exports.calcWeekday = function (y, m, d) {
  return createDate(y, m - 1, d).getUTCDay();
};

exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
  var dt1 = createDate(y1, m1 - 1, d1);
  var dt2 = createDate(y2, m2 - 1, d2);
  return dt1.getTime() - dt2.getTime();
};

},{}],"6Nh6A":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Year = function (x) {
    return x;
};
var Monday = (function () {
    function Monday() {

    };
    Monday.value = new Monday();
    return Monday;
})();
var Tuesday = (function () {
    function Tuesday() {

    };
    Tuesday.value = new Tuesday();
    return Tuesday;
})();
var Wednesday = (function () {
    function Wednesday() {

    };
    Wednesday.value = new Wednesday();
    return Wednesday;
})();
var Thursday = (function () {
    function Thursday() {

    };
    Thursday.value = new Thursday();
    return Thursday;
})();
var Friday = (function () {
    function Friday() {

    };
    Friday.value = new Friday();
    return Friday;
})();
var Saturday = (function () {
    function Saturday() {

    };
    Saturday.value = new Saturday();
    return Saturday;
})();
var Sunday = (function () {
    function Sunday() {

    };
    Sunday.value = new Sunday();
    return Sunday;
})();
var January = (function () {
    function January() {

    };
    January.value = new January();
    return January;
})();
var February = (function () {
    function February() {

    };
    February.value = new February();
    return February;
})();
var March = (function () {
    function March() {

    };
    March.value = new March();
    return March;
})();
var April = (function () {
    function April() {

    };
    April.value = new April();
    return April;
})();
var May = (function () {
    function May() {

    };
    May.value = new May();
    return May;
})();
var June = (function () {
    function June() {

    };
    June.value = new June();
    return June;
})();
var July = (function () {
    function July() {

    };
    July.value = new July();
    return July;
})();
var August = (function () {
    function August() {

    };
    August.value = new August();
    return August;
})();
var September = (function () {
    function September() {

    };
    September.value = new September();
    return September;
})();
var October = (function () {
    function October() {

    };
    October.value = new October();
    return October;
})();
var November = (function () {
    function November() {

    };
    November.value = new November();
    return November;
})();
var December = (function () {
    function December() {

    };
    December.value = new December();
    return December;
})();
var Day = function (x) {
    return x;
};
var showYear = new Data_Show.Show(function (v) {
    return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showWeekday = new Data_Show.Show(function (v) {
    if (v instanceof Monday) {
        return "Monday";
    };
    if (v instanceof Tuesday) {
        return "Tuesday";
    };
    if (v instanceof Wednesday) {
        return "Wednesday";
    };
    if (v instanceof Thursday) {
        return "Thursday";
    };
    if (v instanceof Friday) {
        return "Friday";
    };
    if (v instanceof Saturday) {
        return "Saturday";
    };
    if (v instanceof Sunday) {
        return "Sunday";
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 184, column 1 - line 191, column 25): " + [ v.constructor.name ]);
});
var showMonth = new Data_Show.Show(function (v) {
    if (v instanceof January) {
        return "January";
    };
    if (v instanceof February) {
        return "February";
    };
    if (v instanceof March) {
        return "March";
    };
    if (v instanceof April) {
        return "April";
    };
    if (v instanceof May) {
        return "May";
    };
    if (v instanceof June) {
        return "June";
    };
    if (v instanceof July) {
        return "July";
    };
    if (v instanceof August) {
        return "August";
    };
    if (v instanceof September) {
        return "September";
    };
    if (v instanceof October) {
        return "October";
    };
    if (v instanceof November) {
        return "November";
    };
    if (v instanceof December) {
        return "December";
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [ v.constructor.name ]);
});
var showDay = new Data_Show.Show(function (v) {
    return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordYear = Data_Ord.ordInt;
var ordDay = Data_Ord.ordInt;
var eqYear = Data_Eq.eqInt;
var eqWeekday = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Monday && y instanceof Monday) {
            return true;
        };
        if (x instanceof Tuesday && y instanceof Tuesday) {
            return true;
        };
        if (x instanceof Wednesday && y instanceof Wednesday) {
            return true;
        };
        if (x instanceof Thursday && y instanceof Thursday) {
            return true;
        };
        if (x instanceof Friday && y instanceof Friday) {
            return true;
        };
        if (x instanceof Saturday && y instanceof Saturday) {
            return true;
        };
        if (x instanceof Sunday && y instanceof Sunday) {
            return true;
        };
        return false;
    };
});
var ordWeekday = new Data_Ord.Ord(function () {
    return eqWeekday;
}, function (x) {
    return function (y) {
        if (x instanceof Monday && y instanceof Monday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Monday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Monday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Tuesday && y instanceof Tuesday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Tuesday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Tuesday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Wednesday && y instanceof Wednesday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Wednesday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Wednesday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Thursday && y instanceof Thursday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Thursday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Thursday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Friday && y instanceof Friday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Friday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Friday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Saturday && y instanceof Saturday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Saturday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Saturday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Sunday && y instanceof Sunday) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Date.Component (line 154, column 1 - line 154, column 42): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqMonth = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return true;
        };
        if (x instanceof February && y instanceof February) {
            return true;
        };
        if (x instanceof March && y instanceof March) {
            return true;
        };
        if (x instanceof April && y instanceof April) {
            return true;
        };
        if (x instanceof May && y instanceof May) {
            return true;
        };
        if (x instanceof June && y instanceof June) {
            return true;
        };
        if (x instanceof July && y instanceof July) {
            return true;
        };
        if (x instanceof August && y instanceof August) {
            return true;
        };
        if (x instanceof September && y instanceof September) {
            return true;
        };
        if (x instanceof October && y instanceof October) {
            return true;
        };
        if (x instanceof November && y instanceof November) {
            return true;
        };
        if (x instanceof December && y instanceof December) {
            return true;
        };
        return false;
    };
});
var ordMonth = new Data_Ord.Ord(function () {
    return eqMonth;
}, function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof January) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof January) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof February && y instanceof February) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof February) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof February) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof March && y instanceof March) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof March) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof March) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof April && y instanceof April) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof April) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof April) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof May && y instanceof May) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof May) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof May) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof June && y instanceof June) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof June) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof June) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof July && y instanceof July) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof July) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof July) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof August && y instanceof August) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof August) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof August) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof September && y instanceof September) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof September) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof September) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof October && y instanceof October) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof October) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof October) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof November && y instanceof November) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof November) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof November) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof December && y instanceof December) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqDay = Data_Eq.eqInt;
var boundedYear = new Data_Bounded.Bounded(function () {
    return ordYear;
}, -271820 | 0, 275759);
var boundedWeekday = new Data_Bounded.Bounded(function () {
    return ordWeekday;
}, Monday.value, Sunday.value);
var boundedMonth = new Data_Bounded.Bounded(function () {
    return ordMonth;
}, January.value, December.value);
var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
    return boundedYear;
}, function () {
    return enumYear;
}, 547580, function (v) {
    return v;
}, function (n) {
    if (n >= (-271820 | 0) && n <= 275759) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [ n.constructor.name ]);
});
var enumYear = new Data_Enum.Enum(function () {
    return ordYear;
}, (function () {
    var $46 = Data_Enum.toEnum(boundedEnumYear);
    var $47 = Data_Enum.fromEnum(boundedEnumYear);
    return function ($48) {
        return $46((function (v) {
            return v - 1 | 0;
        })($47($48)));
    };
})(), (function () {
    var $49 = Data_Enum.toEnum(boundedEnumYear);
    var $50 = Data_Enum.fromEnum(boundedEnumYear);
    return function ($51) {
        return $49((function (v) {
            return v + 1 | 0;
        })($50($51)));
    };
})());
var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
    return boundedWeekday;
}, function () {
    return enumWeekday;
}, 7, function (v) {
    if (v instanceof Monday) {
        return 1;
    };
    if (v instanceof Tuesday) {
        return 2;
    };
    if (v instanceof Wednesday) {
        return 3;
    };
    if (v instanceof Thursday) {
        return 4;
    };
    if (v instanceof Friday) {
        return 5;
    };
    if (v instanceof Saturday) {
        return 6;
    };
    if (v instanceof Sunday) {
        return 7;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 182, column 16): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(Monday.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Tuesday.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Wednesday.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(Thursday.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(Friday.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(Saturday.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(Sunday.value);
    };
    return Data_Maybe.Nothing.value;
});
var enumWeekday = new Data_Enum.Enum(function () {
    return ordWeekday;
}, (function () {
    var $52 = Data_Enum.toEnum(boundedEnumWeekday);
    var $53 = Data_Enum.fromEnum(boundedEnumWeekday);
    return function ($54) {
        return $52((function (v) {
            return v - 1 | 0;
        })($53($54)));
    };
})(), (function () {
    var $55 = Data_Enum.toEnum(boundedEnumWeekday);
    var $56 = Data_Enum.fromEnum(boundedEnumWeekday);
    return function ($57) {
        return $55((function (v) {
            return v + 1 | 0;
        })($56($57)));
    };
})());
var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
    return boundedMonth;
}, function () {
    return enumMonth;
}, 12, function (v) {
    if (v instanceof January) {
        return 1;
    };
    if (v instanceof February) {
        return 2;
    };
    if (v instanceof March) {
        return 3;
    };
    if (v instanceof April) {
        return 4;
    };
    if (v instanceof May) {
        return 5;
    };
    if (v instanceof June) {
        return 6;
    };
    if (v instanceof July) {
        return 7;
    };
    if (v instanceof August) {
        return 8;
    };
    if (v instanceof September) {
        return 9;
    };
    if (v instanceof October) {
        return 10;
    };
    if (v instanceof November) {
        return 11;
    };
    if (v instanceof December) {
        return 12;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(January.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(February.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(March.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(April.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(May.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(June.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(July.value);
    };
    if (v === 8) {
        return new Data_Maybe.Just(August.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(September.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(October.value);
    };
    if (v === 11) {
        return new Data_Maybe.Just(November.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(December.value);
    };
    return Data_Maybe.Nothing.value;
});
var enumMonth = new Data_Enum.Enum(function () {
    return ordMonth;
}, (function () {
    var $58 = Data_Enum.toEnum(boundedEnumMonth);
    var $59 = Data_Enum.fromEnum(boundedEnumMonth);
    return function ($60) {
        return $58((function (v) {
            return v - 1 | 0;
        })($59($60)));
    };
})(), (function () {
    var $61 = Data_Enum.toEnum(boundedEnumMonth);
    var $62 = Data_Enum.fromEnum(boundedEnumMonth);
    return function ($63) {
        return $61((function (v) {
            return v + 1 | 0;
        })($62($63)));
    };
})());
var boundedDay = new Data_Bounded.Bounded(function () {
    return ordDay;
}, 1, 31);
var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
    return boundedDay;
}, function () {
    return enumDay;
}, 31, function (v) {
    return v;
}, function (n) {
    if (n >= 1 && n <= 31) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [ n.constructor.name ]);
});
var enumDay = new Data_Enum.Enum(function () {
    return ordDay;
}, (function () {
    var $64 = Data_Enum.toEnum(boundedEnumDay);
    var $65 = Data_Enum.fromEnum(boundedEnumDay);
    return function ($66) {
        return $64((function (v) {
            return v - 1 | 0;
        })($65($66)));
    };
})(), (function () {
    var $67 = Data_Enum.toEnum(boundedEnumDay);
    var $68 = Data_Enum.fromEnum(boundedEnumDay);
    return function ($69) {
        return $67((function (v) {
            return v + 1 | 0;
        })($68($69)));
    };
})());
module.exports = {
    January: January,
    February: February,
    March: March,
    April: April,
    May: May,
    June: June,
    July: July,
    August: August,
    September: September,
    October: October,
    November: November,
    December: December,
    Monday: Monday,
    Tuesday: Tuesday,
    Wednesday: Wednesday,
    Thursday: Thursday,
    Friday: Friday,
    Saturday: Saturday,
    Sunday: Sunday,
    eqYear: eqYear,
    ordYear: ordYear,
    boundedYear: boundedYear,
    enumYear: enumYear,
    boundedEnumYear: boundedEnumYear,
    showYear: showYear,
    eqMonth: eqMonth,
    ordMonth: ordMonth,
    boundedMonth: boundedMonth,
    enumMonth: enumMonth,
    boundedEnumMonth: boundedEnumMonth,
    showMonth: showMonth,
    eqDay: eqDay,
    ordDay: ordDay,
    boundedDay: boundedDay,
    enumDay: enumDay,
    boundedEnumDay: boundedEnumDay,
    showDay: showDay,
    eqWeekday: eqWeekday,
    ordWeekday: ordWeekday,
    boundedWeekday: boundedWeekday,
    enumWeekday: enumWeekday,
    boundedEnumWeekday: boundedEnumWeekday,
    showWeekday: showWeekday
};

},{"../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c"}],"7Ew6e":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Seconds = function (x) {
    return x;
};
var Minutes = function (x) {
    return x;
};
var Milliseconds = function (x) {
    return x;
};
var Hours = function (x) {
    return x;
};
var Days = function (x) {
    return x;
};
var Duration = function (fromDuration, toDuration) {
    this.fromDuration = fromDuration;
    this.toDuration = toDuration;
};
var toDuration = function (dict) {
    return dict.toDuration;
};
var showSeconds = new Data_Show.Show(function (v) {
    return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMinutes = new Data_Show.Show(function (v) {
    return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMilliseconds = new Data_Show.Show(function (v) {
    return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showHours = new Data_Show.Show(function (v) {
    return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showDays = new Data_Show.Show(function (v) {
    return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupMinutes = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupHours = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupDays = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var ordSeconds = Data_Ord.ordNumber;
var ordMinutes = Data_Ord.ordNumber;
var ordMilliseconds = Data_Ord.ordNumber;
var ordHours = Data_Ord.ordNumber;
var ordDays = Data_Ord.ordNumber;
var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
    return n;
}, Seconds);
var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
    return n;
}, Minutes);
var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
    return n;
}, Milliseconds);
var newtypeHours = new Data_Newtype.Newtype(function (n) {
    return n;
}, Hours);
var newtypeDays = new Data_Newtype.Newtype(function (n) {
    return n;
}, Days);
var monoidSeconds = new Data_Monoid.Monoid(function () {
    return semigroupSeconds;
}, 0.0);
var monoidMinutes = new Data_Monoid.Monoid(function () {
    return semigroupMinutes;
}, 0.0);
var monoidMilliseconds = new Data_Monoid.Monoid(function () {
    return semigroupMilliseconds;
}, 0.0);
var monoidHours = new Data_Monoid.Monoid(function () {
    return semigroupHours;
}, 0.0);
var monoidDays = new Data_Monoid.Monoid(function () {
    return semigroupDays;
}, 0.0);
var fromDuration = function (dict) {
    return dict.fromDuration;
};
var negateDuration = function (dictDuration) {
    var $56 = toDuration(dictDuration);
    var $57 = Data_Newtype.over(newtypeMilliseconds)(newtypeMilliseconds)(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
    var $58 = fromDuration(dictDuration);
    return function ($59) {
        return $56($57($58($59)));
    };
};
var eqSeconds = Data_Eq.eqNumber;
var eqMinutes = Data_Eq.eqNumber;
var eqMilliseconds = Data_Eq.eqNumber;
var eqHours = Data_Eq.eqNumber;
var eqDays = Data_Eq.eqNumber;
var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
    return v * 1000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
    return v / 1000.0;
}));
var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
    return v * 60000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
    return v / 60000.0;
}));
var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
var durationHours = new Duration(Data_Newtype.over(newtypeHours)(newtypeMilliseconds)(Hours)(function (v) {
    return v * 3600000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeHours)(Milliseconds)(function (v) {
    return v / 3600000.0;
}));
var durationDays = new Duration(Data_Newtype.over(newtypeDays)(newtypeMilliseconds)(Days)(function (v) {
    return v * 8.64e7;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeDays)(Milliseconds)(function (v) {
    return v / 8.64e7;
}));
var convertDuration = function (dictDuration) {
    return function (dictDuration1) {
        var $60 = toDuration(dictDuration1);
        var $61 = fromDuration(dictDuration);
        return function ($62) {
            return $60($61($62));
        };
    };
};
module.exports = {
    fromDuration: fromDuration,
    toDuration: toDuration,
    Milliseconds: Milliseconds,
    Seconds: Seconds,
    Minutes: Minutes,
    Hours: Hours,
    Days: Days,
    Duration: Duration,
    convertDuration: convertDuration,
    negateDuration: negateDuration,
    newtypeMilliseconds: newtypeMilliseconds,
    eqMilliseconds: eqMilliseconds,
    ordMilliseconds: ordMilliseconds,
    semigroupMilliseconds: semigroupMilliseconds,
    monoidMilliseconds: monoidMilliseconds,
    showMilliseconds: showMilliseconds,
    newtypeSeconds: newtypeSeconds,
    eqSeconds: eqSeconds,
    ordSeconds: ordSeconds,
    semigroupSeconds: semigroupSeconds,
    monoidSeconds: monoidSeconds,
    showSeconds: showSeconds,
    newtypeMinutes: newtypeMinutes,
    eqMinutes: eqMinutes,
    ordMinutes: ordMinutes,
    semigroupMinutes: semigroupMinutes,
    monoidMinutes: monoidMinutes,
    showMinutes: showMinutes,
    newtypeHours: newtypeHours,
    eqHours: eqHours,
    ordHours: ordHours,
    semigroupHours: semigroupHours,
    monoidHours: monoidHours,
    showHours: showHours,
    newtypeDays: newtypeDays,
    eqDays: eqDays,
    ordDays: ordDays,
    semigroupDays: semigroupDays,
    monoidDays: monoidDays,
    showDays: showDays,
    durationMilliseconds: durationMilliseconds,
    durationSeconds: durationSeconds,
    durationMinutes: durationMinutes,
    durationHours: durationHours,
    durationDays: durationDays
};

},{"../Control.Category/index.js":"6QTyW","../Data.Eq/index.js":"2htS8","../Data.Monoid/index.js":"2Wlmd","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Ring/index.js":"3ezk6","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c"}],"3GJB2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var showRegex = new Data_Show.Show($foreign.showRegexImpl);
var search = $foreign["_search"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var replace$prime = $foreign.replaceBy;
var renderFlags = function (v) {
    return (function () {
        if (v.value0.global) {
            return "g";
        };
        return "";
    })() + ((function () {
        if (v.value0.ignoreCase) {
            return "i";
        };
        return "";
    })() + ((function () {
        if (v.value0.multiline) {
            return "m";
        };
        return "";
    })() + ((function () {
        if (v.value0.sticky) {
            return "y";
        };
        return "";
    })() + (function () {
        if (v.value0.unicode) {
            return "u";
        };
        return "";
    })())));
};
var regex = function (s) {
    return function (f) {
        return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
    };
};
var parseFlags = function (s) {
    return new Data_String_Regex_Flags.RegexFlags({
        global: Data_String_CodeUnits.contains("g")(s),
        ignoreCase: Data_String_CodeUnits.contains("i")(s),
        multiline: Data_String_CodeUnits.contains("m")(s),
        sticky: Data_String_CodeUnits.contains("y")(s),
        unicode: Data_String_CodeUnits.contains("u")(s)
    });
};
var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var flags = function ($8) {
    return Data_String_Regex_Flags.RegexFlags.create($foreign.flagsImpl($8));
};
module.exports = {
    regex: regex,
    flags: flags,
    renderFlags: renderFlags,
    parseFlags: parseFlags,
    match: match,
    "replace'": replace$prime,
    search: search,
    showRegex: showRegex,
    source: $foreign.source,
    test: $foreign.test,
    replace: $foreign.replace,
    split: $foreign.split
};

},{"./foreign.js":"3oc7J","../Data.Either/index.js":"5Va79","../Data.Maybe/index.js":"1Cwwt","../Data.Show/index.js":"6nX0c","../Data.String.CodeUnits/index.js":"2YsDe","../Data.String.Regex.Flags/index.js":"1Yc6M"}],"3oc7J":[function(require,module,exports) {
"use strict";

exports.showRegexImpl = function (r) {
  return "" + r;
};

exports.regexImpl = function (left) {
  return function (right) {
    return function (s1) {
      return function (s2) {
        try {
          return right(new RegExp(s1, s2));
        } catch (e) {
          return left(e.message);
        }
      };
    };
  };
};

exports.source = function (r) {
  return r.source;
};

exports.flagsImpl = function (r) {
  return {
    multiline: r.multiline,
    ignoreCase: r.ignoreCase,
    global: r.global,
    sticky: !!r.sticky,
    unicode: !!r.unicode
  };
};

exports.test = function (r) {
  return function (s) {
    var lastIndex = r.lastIndex;
    var result = r.test(s);
    r.lastIndex = lastIndex;
    return result;
  };
};

exports._match = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var m = s.match(r);
        if (m == null || m.length === 0) {
          return nothing;
        } else {
          for (var i = 0; i < m.length; i++) {
            m[i] = m[i] == null ? nothing : just(m[i]);
          }
          return just(m);
        }
      };
    };
  };
};

exports.replace = function (r) {
  return function (s1) {
    return function (s2) {
      return s2.replace(r, s1);
    };
  };
};

exports.replaceBy = function (r) {
  return function (f) {
    return function (s2) {
      return s2.replace(r, function (match) {
        return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
      });
    };
  };
};

exports._search = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var result = s.search(r);
        return result === -1 ? nothing : just(result);
      };
    };
  };
};

exports.split = function (r) {
  return function (s) {
    return s.split(r);
  };
};

},{}],"1Yc6M":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var RegexFlags = (function () {
  function RegexFlags(value0) {
    this.value0 = value0;
  }
  ;
  RegexFlags.create = function (value0) {
    return new RegexFlags(value0);
  };
  return RegexFlags;
})();
var unicode = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: false,
  sticky: false,
  unicode: true
});
var sticky = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: false,
  sticky: true,
  unicode: false
});
var showRegexFlags = new Data_Show.Show(function (v) {
  var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
  var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([]);
  if ($6) {
    return "noFlags";
  }
  ;
  return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
});
var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return new RegexFlags({
      global: v.value0.global || v1.value0.global,
      ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
      multiline: v.value0.multiline || v1.value0.multiline,
      sticky: v.value0.sticky || v1.value0.sticky,
      unicode: v.value0.unicode || v1.value0.unicode
    });
  };
});
var noFlags = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: false,
  sticky: false,
  unicode: false
});
var multiline = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: true,
  sticky: false,
  unicode: false
});
var monoidRegexFlags = new Data_Monoid.Monoid(function () {
  return semigroupRegexFlags;
}, noFlags);
var ignoreCase = new RegexFlags({
  global: false,
  ignoreCase: true,
  multiline: false,
  sticky: false,
  unicode: false
});
var global = new RegexFlags({
  global: true,
  ignoreCase: false,
  multiline: false,
  sticky: false,
  unicode: false
});
var eqRegexFlags = new Data_Eq.Eq(function (v) {
  return function (v1) {
    return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode)));
  };
});
module.exports = {
  RegexFlags: RegexFlags,
  noFlags: noFlags,
  global: global,
  ignoreCase: ignoreCase,
  multiline: multiline,
  sticky: sticky,
  unicode: unicode,
  semigroupRegexFlags: semigroupRegexFlags,
  monoidRegexFlags: monoidRegexFlags,
  eqRegexFlags: eqRegexFlags,
  showRegexFlags: showRegexFlags
};

},{"../Control.MonadZero/index.js":"5ZMCc","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.String.Common/index.js":"6Lw5g"}],"2TBs2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var unsafeRegex = function (s) {
    return function (f) {
        return Data_Either.fromRight()(Data_String_Regex.regex(s)(f));
    };
};
module.exports = {
    unsafeRegex: unsafeRegex
};

},{"../Data.Either/index.js":"5Va79","../Data.String.Regex/index.js":"3GJB2"}],"49G5n":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var $$Math = require("../Math/index.js");
var Time = (function () {
    function Time(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Time.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Time(value0, value1, value2, value3);
                };
            };
        };
    };
    return Time;
})();
var showTime = new Data_Show.Show(function (v) {
    return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
});
var setSecond = function (s) {
    return function (v) {
        return new Time(v.value0, v.value1, s, v.value3);
    };
};
var setMinute = function (m) {
    return function (v) {
        return new Time(v.value0, m, v.value2, v.value3);
    };
};
var setMillisecond = function (ms) {
    return function (v) {
        return new Time(v.value0, v.value1, v.value2, ms);
    };
};
var setHour = function (h) {
    return function (v) {
        return new Time(h, v.value1, v.value2, v.value3);
    };
};
var second = function (v) {
    return v.value2;
};
var minute = function (v) {
    return v.value1;
};
var millisecond = function (v) {
    return v.value3;
};
var millisToTime = function (v) {
    var hours = $$Math.floor(v / 3600000.0);
    var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
    var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
    var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
    return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
};
var hour = function (v) {
    return v.value0;
};
var timeToMillis = function (t) {
    return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
};
var eqTime = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
    };
});
var ordTime = new Data_Ord.Ord(function () {
    return eqTime;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
        if (v2 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v2 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
    };
});
var diff = function (dictDuration) {
    return function (t1) {
        return function (t2) {
            return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
        };
    };
};
var boundedTime = new Data_Bounded.Bounded(function () {
    return ordTime;
}, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));
var adjust = function (dictDuration) {
    return function (d) {
        return function (t) {
            var tLength = timeToMillis(t);
            var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
            var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(d$prime) / 8.64e7));
            var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
            var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);
            var wrap = (function () {
                var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
                if ($112) {
                    return 1.0;
                };
                var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);
                if ($113) {
                    return -1.0;
                };
                return 0.0;
            })();
            return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(8.64e7 * -wrap)));
        };
    };
};
module.exports = {
    Time: Time,
    hour: hour,
    setHour: setHour,
    minute: minute,
    setMinute: setMinute,
    second: second,
    setSecond: setSecond,
    millisecond: millisecond,
    setMillisecond: setMillisecond,
    adjust: adjust,
    diff: diff,
    eqTime: eqTime,
    ordTime: ordTime,
    boundedTime: boundedTime,
    showTime: showTime
};

},{"../Control.Apply/index.js":"TgfZ1","../Data.Bounded/index.js":"4LlpW","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Int/index.js":"3HdcH","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Ordering/index.js":"5YcVa","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Time.Component/index.js":"4q8F1","../Data.Time.Duration/index.js":"7Ew6e","../Data.Tuple/index.js":"43VFo","../Math/index.js":"4eXlw"}],"4q8F1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Second = function (x) {
    return x;
};
var Minute = function (x) {
    return x;
};
var Millisecond = function (x) {
    return x;
};
var Hour = function (x) {
    return x;
};
var showSecond = new Data_Show.Show(function (v) {
    return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMinute = new Data_Show.Show(function (v) {
    return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMillisecond = new Data_Show.Show(function (v) {
    return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showHour = new Data_Show.Show(function (v) {
    return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordSecond = Data_Ord.ordInt;
var ordMinute = Data_Ord.ordInt;
var ordMillisecond = Data_Ord.ordInt;
var ordHour = Data_Ord.ordInt;
var eqSecond = Data_Eq.eqInt;
var eqMinute = Data_Eq.eqInt;
var eqMillisecond = Data_Eq.eqInt;
var eqHour = Data_Eq.eqInt;
var boundedSecond = new Data_Bounded.Bounded(function () {
    return ordSecond;
}, 0, 59);
var boundedMinute = new Data_Bounded.Bounded(function () {
    return ordMinute;
}, 0, 59);
var boundedMillisecond = new Data_Bounded.Bounded(function () {
    return ordMillisecond;
}, 0, 999);
var boundedHour = new Data_Bounded.Bounded(function () {
    return ordHour;
}, 0, 23);
var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
    return boundedSecond;
}, function () {
    return enumSecond;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [ n.constructor.name ]);
});
var enumSecond = new Data_Enum.Enum(function () {
    return ordSecond;
}, (function () {
    var $28 = Data_Enum.toEnum(boundedEnumSecond);
    var $29 = Data_Enum.fromEnum(boundedEnumSecond);
    return function ($30) {
        return $28((function (v) {
            return v - 1 | 0;
        })($29($30)));
    };
})(), (function () {
    var $31 = Data_Enum.toEnum(boundedEnumSecond);
    var $32 = Data_Enum.fromEnum(boundedEnumSecond);
    return function ($33) {
        return $31((function (v) {
            return v + 1 | 0;
        })($32($33)));
    };
})());
var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
    return boundedMinute;
}, function () {
    return enumMinute;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [ n.constructor.name ]);
});
var enumMinute = new Data_Enum.Enum(function () {
    return ordMinute;
}, (function () {
    var $34 = Data_Enum.toEnum(boundedEnumMinute);
    var $35 = Data_Enum.fromEnum(boundedEnumMinute);
    return function ($36) {
        return $34((function (v) {
            return v - 1 | 0;
        })($35($36)));
    };
})(), (function () {
    var $37 = Data_Enum.toEnum(boundedEnumMinute);
    var $38 = Data_Enum.fromEnum(boundedEnumMinute);
    return function ($39) {
        return $37((function (v) {
            return v + 1 | 0;
        })($38($39)));
    };
})());
var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
    return boundedMillisecond;
}, function () {
    return enumMillisecond;
}, 1000, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 999) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [ n.constructor.name ]);
});
var enumMillisecond = new Data_Enum.Enum(function () {
    return ordMillisecond;
}, (function () {
    var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
    var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
    return function ($42) {
        return $40((function (v) {
            return v - 1 | 0;
        })($41($42)));
    };
})(), (function () {
    var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
    var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
    return function ($45) {
        return $43((function (v) {
            return v + 1 | 0;
        })($44($45)));
    };
})());
var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
    return boundedHour;
}, function () {
    return enumHour;
}, 24, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 23) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [ n.constructor.name ]);
});
var enumHour = new Data_Enum.Enum(function () {
    return ordHour;
}, (function () {
    var $46 = Data_Enum.toEnum(boundedEnumHour);
    var $47 = Data_Enum.fromEnum(boundedEnumHour);
    return function ($48) {
        return $46((function (v) {
            return v - 1 | 0;
        })($47($48)));
    };
})(), (function () {
    var $49 = Data_Enum.toEnum(boundedEnumHour);
    var $50 = Data_Enum.fromEnum(boundedEnumHour);
    return function ($51) {
        return $49((function (v) {
            return v + 1 | 0;
        })($50($51)));
    };
})());
module.exports = {
    eqHour: eqHour,
    ordHour: ordHour,
    boundedHour: boundedHour,
    enumHour: enumHour,
    boundedEnumHour: boundedEnumHour,
    showHour: showHour,
    eqMinute: eqMinute,
    ordMinute: ordMinute,
    boundedMinute: boundedMinute,
    enumMinute: enumMinute,
    boundedEnumMinute: boundedEnumMinute,
    showMinute: showMinute,
    eqSecond: eqSecond,
    ordSecond: ordSecond,
    boundedSecond: boundedSecond,
    enumSecond: enumSecond,
    boundedEnumSecond: boundedEnumSecond,
    showSecond: showSecond,
    eqMillisecond: eqMillisecond,
    ordMillisecond: ordMillisecond,
    boundedMillisecond: boundedMillisecond,
    enumMillisecond: enumMillisecond,
    boundedEnumMillisecond: boundedEnumMillisecond,
    showMillisecond: showMillisecond
};

},{"../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.Enum/index.js":"6tFfO","../Data.Eq/index.js":"2htS8","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c"}],"MVda1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var FRP_Event = require("../FRP.Event/index.js");
var Client = function (x) {
    return x;
};
var WatchQueryClient = function (clientWatchQuery, defWatchOpts) {
    this.clientWatchQuery = clientWatchQuery;
    this.defWatchOpts = defWatchOpts;
};
var SubscriptionClient = function (clientSubscription, defSubOpts) {
    this.clientSubscription = clientSubscription;
    this.defSubOpts = defSubOpts;
};
var QueryClient = function (clientMutation, clientQuery, defMutationOpts, defQueryOpts) {
    this.clientMutation = clientMutation;
    this.clientQuery = clientQuery;
    this.defMutationOpts = defMutationOpts;
    this.defQueryOpts = defQueryOpts;
};
var GqlQuery = function (GqlQueryString1, QueryReturns0) {
    this.GqlQueryString1 = GqlQueryString1;
    this.QueryReturns0 = QueryReturns0;
};
var queriable = function (dictQueryReturns) {
    return function (dictGqlQueryString) {
        return new GqlQuery(function () {
            return dictGqlQueryString;
        }, function () {
            return dictQueryReturns;
        });
    };
};
var defWatchOpts = function (dict) {
    return dict.defWatchOpts;
};
var defSubOpts = function (dict) {
    return dict.defSubOpts;
};
var defQueryOpts = function (dict) {
    return dict.defQueryOpts;
};
var defMutationOpts = function (dict) {
    return dict.defMutationOpts;
};
var clientWatchQuery = function (dict) {
    return dict.clientWatchQuery;
};
var watchQueryEventOpts = function (dictWatchQueryClient) {
    return function (optsF) {
        return function (client) {
            return function (query) {
                return FRP_Event.makeEvent(clientWatchQuery(dictWatchQueryClient)(optsF(defWatchOpts(dictWatchQueryClient)(client)))(client)(query));
            };
        };
    };
};
var watchQueryEvent = function (dictWatchQueryClient) {
    return watchQueryEventOpts(dictWatchQueryClient)(Control_Category.identity(Control_Category.categoryFn));
};
var clientSubscription = function (dict) {
    return dict.clientSubscription;
};
var subscriptionEventOpts = function (dictSubscriptionClient) {
    return function (optsF) {
        return function (client) {
            return function (query) {
                return FRP_Event.makeEvent(clientSubscription(dictSubscriptionClient)(optsF(defSubOpts(dictSubscriptionClient)(client)))(client)(query));
            };
        };
    };
};
var subscriptionEvent = function (dictSubscriptionClient) {
    return subscriptionEventOpts(dictSubscriptionClient)(Control_Category.identity(Control_Category.categoryFn));
};
var clientQuery = function (dict) {
    return dict.clientQuery;
};
var clientMutation = function (dict) {
    return dict.clientMutation;
};
module.exports = {
    clientMutation: clientMutation,
    clientQuery: clientQuery,
    clientSubscription: clientSubscription,
    clientWatchQuery: clientWatchQuery,
    defMutationOpts: defMutationOpts,
    defQueryOpts: defQueryOpts,
    defSubOpts: defSubOpts,
    defWatchOpts: defWatchOpts,
    GqlQuery: GqlQuery,
    Client: Client,
    QueryClient: QueryClient,
    SubscriptionClient: SubscriptionClient,
    subscriptionEventOpts: subscriptionEventOpts,
    subscriptionEvent: subscriptionEvent,
    WatchQueryClient: WatchQueryClient,
    watchQueryEventOpts: watchQueryEventOpts,
    watchQueryEvent: watchQueryEvent,
    queriable: queriable
};

},{"../Control.Category/index.js":"6QTyW","../FRP.Event/index.js":"2lgzX"}],"2lgzX":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Compactable = require("../Data.Compactable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Filterable = require("../Data.Filterable/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var FRP_Event_Class = require("../FRP.Event.Class/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var Event = function (x) {
    return x;
};
var subscribe = function (v) {
    return function (k) {
        return v((function () {
            var $45 = Data_Functor["void"](Effect.functorEffect);
            return function ($46) {
                return $45(k($46));
            };
        })());
    };
};
var sampleOn = function (v) {
    return function (v1) {
        return function (k) {
            return function __do() {
                var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var c1 = v(function (a) {
                    return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                })();
                var c2 = v1(function (f) {
                    return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($47) {
                        return k(f($47));
                    }));
                })();
                return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
            };
        };
    };
};
var makeEvent = Event;
var keepLatest = function (v) {
    return function (k) {
        return function __do() {
            var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
            var cancelOuter = v(function (inner) {
                return function __do() {
                    Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                    var c = subscribe(inner)(k)();
                    return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                };
            })();
            return function __do() {
                Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                return cancelOuter();
            };
        };
    };
};
var functorEvent = new Data_Functor.Functor(function (f) {
    return function (v) {
        return function (k) {
            return v(function ($48) {
                return k(f($48));
            });
        };
    };
});
var fold = function (f) {
    return function (v) {
        return function (b) {
            return function (k) {
                return function __do() {
                    var result = Effect_Ref["new"](b)();
                    return v(function (a) {
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                    })();
                };
            };
        };
    };
};
var filter = function (p) {
    return function (v) {
        return function (k) {
            return v(function (a) {
                var $34 = p(a);
                if ($34) {
                    return k(a);
                };
                return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
            });
        };
    };
};
var create = function __do() {
    var subscribers = Effect_Ref["new"]([  ])();
    return {
        event: function (k) {
            return function __do() {
                Effect_Ref.modify(function (v) {
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                })(subscribers)();
                return function __do() {
                    Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                    return Data_Unit.unit;
                };
            };
        },
        push: function (a) {
            return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                return k(a);
            }));
        }
    };
};
var fix = function (f) {
    var v = Effect_Unsafe.unsafePerformEffect(create);
    var v1 = f(v.event);
    return function (k) {
        return function __do() {
            var c1 = subscribe(v1.input)(v.push)();
            var c2 = subscribe(v1.output)(k)();
            return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
        };
    };
};
var compactableEvent = new Data_Compactable.Compactable(function (xs) {
    return Data_Functor.map(functorEvent)(function (x) {
        return Data_Maybe.fromJust()(x);
    })(filter(Data_Maybe.isJust)(xs));
}, function (xs) {
    return {
        left: Data_Functor.map(functorEvent)(Data_Either.fromLeft())(filter(Data_Either.isLeft)(xs)),
        right: Data_Functor.map(functorEvent)(Data_Either.fromRight())(filter(Data_Either.isRight)(xs))
    };
});
var filterableEvent = new Data_Filterable.Filterable(function () {
    return compactableEvent;
}, function () {
    return functorEvent;
}, filter, function (f) {
    var $49 = Data_Functor.map(functorEvent)(function (x) {
        return Data_Maybe.fromJust()(x);
    });
    var $50 = filter(Data_Maybe.isJust);
    var $51 = Data_Functor.map(functorEvent)(f);
    return function ($52) {
        return $49($50($51($52)));
    };
}, function (p) {
    return function (xs) {
        return {
            yes: filter(p)(xs),
            no: filter((function () {
                var $53 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                return function ($54) {
                    return $53(p($54));
                };
            })())(xs)
        };
    };
}, function (f) {
    return function (xs) {
        return {
            left: Data_Filterable.filterMap(filterableEvent)((function () {
                var $55 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                return function ($56) {
                    return $55(f($56));
                };
            })())(xs),
            right: Data_Filterable.filterMap(filterableEvent)(function ($57) {
                return Data_Either.hush(f($57));
            })(xs)
        };
    };
});
var applyEvent = new Control_Apply.Apply(function () {
    return functorEvent;
}, function (v) {
    return function (v1) {
        return function (k) {
            return function __do() {
                var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                var c1 = v(function (a) {
                    return function __do() {
                        Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($58) {
                            return k(a($58));
                        }))();
                    };
                })();
                var c2 = v1(function (b) {
                    return function __do() {
                        Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($59) {
                            return k((function (v2) {
                                return v2(b);
                            })($59));
                        }))();
                    };
                })();
                return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
            };
        };
    };
});
var semigroupEvent = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEvent)(Data_Semigroup.append(dictSemigroup)));
};
var applicativeEvent = new Control_Applicative.Applicative(function () {
    return applyEvent;
}, function (a) {
    return function (k) {
        return function __do() {
            k(a)();
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
    };
});
var monoidEvent = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEvent(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeEvent)(Data_Monoid.mempty(dictMonoid)));
};
var altEvent = new Control_Alt.Alt(function () {
    return functorEvent;
}, function (v) {
    return function (v1) {
        return function (k) {
            return function __do() {
                var c1 = v(k)();
                var c2 = v1(k)();
                return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
            };
        };
    };
});
var plusEvent = new Control_Plus.Plus(function () {
    return altEvent;
}, function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
});
var alternativeEvent = new Control_Alternative.Alternative(function () {
    return applicativeEvent;
}, function () {
    return plusEvent;
});
var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
    return alternativeEvent;
}, function () {
    return filterableEvent;
}, fix, fold, keepLatest, sampleOn);
module.exports = {
    create: create,
    makeEvent: makeEvent,
    subscribe: subscribe,
    functorEvent: functorEvent,
    compactableEvent: compactableEvent,
    filterableEvent: filterableEvent,
    applyEvent: applyEvent,
    applicativeEvent: applicativeEvent,
    altEvent: altEvent,
    plusEvent: plusEvent,
    alternativeEvent: alternativeEvent,
    semigroupEvent: semigroupEvent,
    monoidEvent: monoidEvent,
    eventIsEvent: eventIsEvent
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Alternative/index.js":"1KL8w","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Plus/index.js":"2CmD1","../Data.Array/index.js":"6mZxP","../Data.Compactable/index.js":"3luI1","../Data.Either/index.js":"5Va79","../Data.Filterable/index.js":"7yn1m","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Ref/index.js":"3qwJS","../Effect.Unsafe/index.js":"3YDNn","../FRP.Event.Class/index.js":"40SAn","../Unsafe.Reference/index.js":"7Fr2e"}],"3luI1":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Compactable = function (compact, separate) {
    this.compact = compact;
    this.separate = separate;
};
var separate = function (dict) {
    return dict.separate;
};
var mapToList = function (dictOrd) {
    return Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
};
var compactableMaybe = new Compactable(Control_Bind.join(Data_Maybe.bindMaybe), function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return {
            left: Data_Maybe.Nothing.value,
            right: Data_Maybe.Nothing.value
        };
    };
    if (v instanceof Data_Maybe.Just) {
        if (v.value0 instanceof Data_Either.Left) {
            return {
                left: new Data_Maybe.Just(v.value0.value0),
                right: Data_Maybe.Nothing.value
            };
        };
        if (v.value0 instanceof Data_Either.Right) {
            return {
                left: Data_Maybe.Nothing.value,
                right: new Data_Maybe.Just(v.value0.value0)
            };
        };
        throw new Error("Failed pattern match at Data.Compactable (line 91, column 23 - line 93, column 48): " + [ v.value0.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.Compactable (line 87, column 1 - line 93, column 48): " + [ v.constructor.name ]);
});
var compactableMap = function (dictOrd) {
    return new Compactable((function () {
        var select = function (v) {
            return function (m) {
                return Data_Map_Internal.alter(dictOrd)(Data_Function["const"](v.value1))(v.value0)(m);
            };
        };
        var $71 = Data_Foldable.foldr(Data_List_Types.foldableList)(select)(Data_Map_Internal.empty);
        var $72 = mapToList(dictOrd);
        return function ($73) {
            return $71($72($73));
        };
    })(), (function () {
        var select = function (v) {
            return function (v1) {
                if (v.value1 instanceof Data_Either.Left) {
                    return {
                        left: Data_Map_Internal.insert(dictOrd)(v.value0)(v.value1.value0)(v1.left),
                        right: v1.right
                    };
                };
                if (v.value1 instanceof Data_Either.Right) {
                    return {
                        left: v1.left,
                        right: Data_Map_Internal.insert(dictOrd)(v.value0)(v.value1.value0)(v1.right)
                    };
                };
                throw new Error("Failed pattern match at Data.Compactable (line 142, column 44 - line 144, column 63): " + [ v.value1.constructor.name ]);
            };
        };
        var $74 = Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            left: Data_Map_Internal.empty,
            right: Data_Map_Internal.empty
        });
        var $75 = mapToList(dictOrd);
        return function ($76) {
            return $74($75($76));
        };
    })());
};
var compactableList = new Compactable(Data_List.catMaybes, (function () {
    var go = function (acc) {
        return function (v) {
            if (v instanceof Data_Either.Left) {
                return {
                    left: Control_Alt.alt(Data_List_Types.altList)(acc.left)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
                    right: acc.right
                };
            };
            if (v instanceof Data_Either.Right) {
                return {
                    right: Control_Alt.alt(Data_List_Types.altList)(acc.right)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
                    left: acc.left
                };
            };
            throw new Error("Failed pattern match at Data.Compactable (line 131, column 14 - line 133, column 54): " + [ v.constructor.name ]);
        };
    };
    return Data_Foldable.foldl(Data_List_Types.foldableList)(go)({
        left: Control_Plus.empty(Data_List_Types.plusList),
        right: Control_Plus.empty(Data_List_Types.plusList)
    });
})());
var compactableEither = function (dictMonoid) {
    return new Compactable(function (v) {
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            if (v.value0 instanceof Data_Maybe.Just) {
                return new Data_Either.Right(v.value0.value0);
            };
            if (v.value0 instanceof Data_Maybe.Nothing) {
                return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
            };
            throw new Error("Failed pattern match at Data.Compactable (line 97, column 23 - line 99, column 27): " + [ v.value0.constructor.name ]);
        };
        throw new Error("Failed pattern match at Data.Compactable (line 95, column 1 - line 104, column 53): " + [ v.constructor.name ]);
    }, function (v) {
        if (v instanceof Data_Either.Left) {
            return {
                left: new Data_Either.Left(v.value0),
                right: new Data_Either.Left(v.value0)
            };
        };
        if (v instanceof Data_Either.Right) {
            if (v.value0 instanceof Data_Either.Left) {
                return {
                    left: new Data_Either.Right(v.value0.value0),
                    right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
                };
            };
            if (v.value0 instanceof Data_Either.Right) {
                return {
                    left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
                    right: new Data_Either.Right(v.value0.value0)
                };
            };
            throw new Error("Failed pattern match at Data.Compactable (line 102, column 24 - line 104, column 53): " + [ v.value0.constructor.name ]);
        };
        throw new Error("Failed pattern match at Data.Compactable (line 95, column 1 - line 104, column 53): " + [ v.constructor.name ]);
    });
};
var compactableArray = new Compactable(function (xs) {
    return (function __do() {
        var result = Data_Array_ST.empty();
        var iter = Data_Array_ST_Iterator.iterator(function (v) {
            return Data_Array.index(xs)(v);
        })();
        Data_Array_ST_Iterator.iterate(iter)((function () {
            var $77 = Data_Functor["void"](Control_Monad_ST_Internal.functorST);
            return function ($78) {
                return $77((function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(0);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Data_Array_ST.push(v.value0)(result);
                    };
                    throw new Error("Failed pattern match at Data.Compactable (line 111, column 34 - line 113, column 35): " + [ v.constructor.name ]);
                })($78));
            };
        })())();
        return Data_Array_ST.unsafeFreeze(result)();
    })();
}, function (xs) {
    return (function __do() {
        var ls = Data_Array_ST.empty();
        var rs = Data_Array_ST.empty();
        var iter = Data_Array_ST_Iterator.iterator(function (v) {
            return Data_Array.index(xs)(v);
        })();
        Data_Array_ST_Iterator.iterate(iter)((function () {
            var $79 = Data_Functor["void"](Control_Monad_ST_Internal.functorST);
            return function ($80) {
                return $79((function (v) {
                    if (v instanceof Data_Either.Left) {
                        return Data_Array_ST.push(v.value0)(ls);
                    };
                    if (v instanceof Data_Either.Right) {
                        return Data_Array_ST.push(v.value0)(rs);
                    };
                    throw new Error("Failed pattern match at Data.Compactable (line 122, column 34 - line 124, column 31): " + [ v.constructor.name ]);
                })($80));
            };
        })())();
        return Control_Apply.apply(Control_Monad_ST_Internal.applyST)(Data_Functor.map(Control_Monad_ST_Internal.functorST)(function (v) {
            return function (v1) {
                return {
                    left: v,
                    right: v1
                };
            };
        })(Data_Array_ST.unsafeFreeze(ls)))(Data_Array_ST.unsafeFreeze(rs))();
    })();
});
var compactDefault = function (dictFunctor) {
    return function (dictCompactable) {
        var $81 = separate(dictCompactable);
        var $82 = Data_Functor.map(dictFunctor)(Data_Either.note(Data_Unit.unit));
        return function ($83) {
            return (function (v) {
                return v.right;
            })($81($82($83)));
        };
    };
};
var compact = function (dict) {
    return dict.compact;
};
var separateDefault = function (dictFunctor) {
    return function (dictCompactable) {
        return function (xs) {
            var swapEither = function (e) {
                if (e instanceof Data_Either.Left) {
                    return new Data_Either.Right(e.value0);
                };
                if (e instanceof Data_Either.Right) {
                    return new Data_Either.Left(e.value0);
                };
                throw new Error("Failed pattern match at Data.Compactable (line 83, column 20 - line 85, column 24): " + [ e.constructor.name ]);
            };
            return {
                left: compact(dictCompactable)(Data_Functor.map(dictFunctor)(function ($84) {
                    return Data_Either.hush(swapEither($84));
                })(xs)),
                right: compact(dictCompactable)(Data_Functor.map(dictFunctor)(Data_Either.hush)(xs))
            };
        };
    };
};
var bindMaybe = function (dictBind) {
    return function (dictCompactable) {
        return function (x) {
            var $85 = compact(dictCompactable);
            var $86 = Control_Bind.bind(dictBind)(x);
            return function ($87) {
                return $85($86($87));
            };
        };
    };
};
var bindEither = function (dictBind) {
    return function (dictCompactable) {
        return function (x) {
            var $88 = separate(dictCompactable);
            var $89 = Control_Bind.bind(dictBind)(x);
            return function ($90) {
                return $88($89($90));
            };
        };
    };
};
var applyMaybe = function (dictApply) {
    return function (dictCompactable) {
        return function (p) {
            var $91 = compact(dictCompactable);
            var $92 = Control_Apply.apply(dictApply)(p);
            return function ($93) {
                return $91($92($93));
            };
        };
    };
};
var applyEither = function (dictApply) {
    return function (dictCompactable) {
        return function (p) {
            var $94 = separate(dictCompactable);
            var $95 = Control_Apply.apply(dictApply)(p);
            return function ($96) {
                return $94($95($96));
            };
        };
    };
};
module.exports = {
    Compactable: Compactable,
    compact: compact,
    separate: separate,
    compactDefault: compactDefault,
    separateDefault: separateDefault,
    applyMaybe: applyMaybe,
    applyEither: applyEither,
    bindMaybe: bindMaybe,
    bindEither: bindEither,
    compactableMaybe: compactableMaybe,
    compactableEither: compactableEither,
    compactableArray: compactableArray,
    compactableList: compactableList,
    compactableMap: compactableMap
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Monad.ST.Internal/index.js":"7aLBJ","../Control.Plus/index.js":"2CmD1","../Data.Array/index.js":"6mZxP","../Data.Array.ST/index.js":"5rpgZ","../Data.Array.ST.Iterator/index.js":"42iII","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Unit/index.js":"64zbv"}],"7yn1m":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Compactable = require("../Data.Compactable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Filterable = function (Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
    this.Compactable0 = Compactable0;
    this.Functor1 = Functor1;
    this.filter = filter;
    this.filterMap = filterMap;
    this.partition = partition;
    this.partitionMap = partitionMap;
};
var partitionMapDefault = function (dictFilterable) {
    return function (p) {
        var $82 = Data_Compactable.separate(dictFilterable.Compactable0());
        var $83 = Data_Functor.map(dictFilterable.Functor1())(p);
        return function ($84) {
            return $82($83($84));
        };
    };
};
var partitionMap = function (dict) {
    return dict.partitionMap;
};
var partition = function (dict) {
    return dict.partition;
};
var maybeBool = function (p) {
    return function (x) {
        var $33 = p(x);
        if ($33) {
            return new Data_Maybe.Just(x);
        };
        return Data_Maybe.Nothing.value;
    };
};
var filterableList = new Filterable(function () {
    return Data_Compactable.compactableList;
}, function () {
    return Data_List_Types.functorList;
}, Data_List.filter, function (p) {
    return Data_List.mapMaybe(p);
}, function (p) {
    return function (xs) {
        var select = function (x) {
            return function (v) {
                var $36 = p(x);
                if ($36) {
                    return {
                        no: v.no,
                        yes: new Data_List_Types.Cons(x, v.yes)
                    };
                };
                return {
                    no: new Data_List_Types.Cons(x, v.no),
                    yes: v.yes
                };
            };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            no: Data_List_Types.Nil.value,
            yes: Data_List_Types.Nil.value
        })(xs);
    };
}, function (p) {
    return function (xs) {
        var select = function (x) {
            return function (v) {
                var v1 = p(x);
                if (v1 instanceof Data_Either.Left) {
                    return {
                        left: new Data_List_Types.Cons(v1.value0, v.left),
                        right: v.right
                    };
                };
                if (v1 instanceof Data_Either.Right) {
                    return {
                        left: v.left,
                        right: new Data_List_Types.Cons(v1.value0, v.right)
                    };
                };
                throw new Error("Failed pattern match at Data.Filterable (line 190, column 36 - line 192, column 83): " + [ v1.constructor.name ]);
            };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            left: Data_List_Types.Nil.value,
            right: Data_List_Types.Nil.value
        })(xs);
    };
});
var filterableArray = new Filterable(function () {
    return Data_Compactable.compactableArray;
}, function () {
    return Data_Functor.functorArray;
}, Data_Array.filter, Data_Array.mapMaybe, Data_Array.partition, function (p) {
    var go = function (acc) {
        return function (x) {
            var v = p(x);
            if (v instanceof Data_Either.Left) {
                return {
                    left: Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc.left)([ v.value0 ]),
                    right: acc.right
                };
            };
            if (v instanceof Data_Either.Right) {
                return {
                    right: Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc.right)([ v.value0 ]),
                    left: acc.left
                };
            };
            throw new Error("Failed pattern match at Data.Filterable (line 149, column 16 - line 151, column 50): " + [ v.constructor.name ]);
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
        left: [  ],
        right: [  ]
    });
});
var filterMapDefault = function (dictFilterable) {
    return function (p) {
        var $85 = Data_Compactable.compact(dictFilterable.Compactable0());
        var $86 = Data_Functor.map(dictFilterable.Functor1())(p);
        return function ($87) {
            return $85($86($87));
        };
    };
};
var filterMap = function (dict) {
    return dict.filterMap;
};
var partitionDefaultFilterMap = function (dictFilterable) {
    return function (p) {
        return function (xs) {
            return {
                yes: filterMap(dictFilterable)(maybeBool(p))(xs),
                no: filterMap(dictFilterable)(maybeBool(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p)))(xs)
            };
        };
    };
};
var filterDefaultPartition = function (dictFilterable) {
    return function (p) {
        return function (xs) {
            return (partition(dictFilterable)(p)(xs)).yes;
        };
    };
};
var filterDefault = function (dictFilterable) {
    var $88 = filterMap(dictFilterable);
    return function ($89) {
        return $88(maybeBool($89));
    };
};
var filter = function (dict) {
    return dict.filter;
};
var partitionDefaultFilter = function (dictFilterable) {
    return function (p) {
        return function (xs) {
            return {
                yes: filter(dictFilterable)(p)(xs),
                no: filter(dictFilterable)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p))(xs)
            };
        };
    };
};
var eitherBool = function (p) {
    return function (x) {
        var $49 = p(x);
        if ($49) {
            return new Data_Either.Right(x);
        };
        return new Data_Either.Left(x);
    };
};
var filterDefaultPartitionMap = function (dictFilterable) {
    return function (p) {
        return function (xs) {
            return (partitionMap(dictFilterable)(eitherBool(p))(xs)).right;
        };
    };
};
var partitionDefault = function (dictFilterable) {
    return function (p) {
        return function (xs) {
            var o = partitionMap(dictFilterable)(eitherBool(p))(xs);
            return {
                no: o.left,
                yes: o.right
            };
        };
    };
};
var filterableEither = function (dictMonoid) {
    return new Filterable(function () {
        return Data_Compactable.compactableEither(dictMonoid);
    }, function () {
        return Data_Either.functorEither;
    }, function (p) {
        return filterDefault(filterableEither(dictMonoid))(p);
    }, function (p) {
        return function (v) {
            if (v instanceof Data_Either.Left) {
                return new Data_Either.Left(v.value0);
            };
            if (v instanceof Data_Either.Right) {
                var v1 = p(v.value0);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new Data_Either.Right(v1.value0);
                };
                throw new Error("Failed pattern match at Data.Filterable (line 180, column 27 - line 182, column 22): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Filterable (line 171, column 1 - line 184, column 29): " + [ p.constructor.name, v.constructor.name ]);
        };
    }, function (p) {
        return partitionDefault(filterableEither(dictMonoid))(p);
    }, function (p) {
        return function (v) {
            if (v instanceof Data_Either.Left) {
                return {
                    left: new Data_Either.Left(v.value0),
                    right: new Data_Either.Left(v.value0)
                };
            };
            if (v instanceof Data_Either.Right) {
                var v1 = p(v.value0);
                if (v1 instanceof Data_Either.Left) {
                    return {
                        left: new Data_Either.Right(v1.value0),
                        right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
                    };
                };
                if (v1 instanceof Data_Either.Right) {
                    return {
                        left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
                        right: new Data_Either.Right(v1.value0)
                    };
                };
                throw new Error("Failed pattern match at Data.Filterable (line 173, column 30 - line 175, column 53): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Filterable (line 171, column 1 - line 184, column 29): " + [ p.constructor.name, v.constructor.name ]);
        };
    });
};
var filterableMap = function (dictOrd) {
    return new Filterable(function () {
        return Data_Compactable.compactableMap(dictOrd);
    }, function () {
        return Data_Map_Internal.functorMap;
    }, function (p) {
        return filterDefault(filterableMap(dictOrd))(p);
    }, function (p) {
        return function (xs) {
            var toList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
            var select = function (v) {
                return function (m) {
                    return Data_Map_Internal.alter(dictOrd)(Data_Function["const"](p(v.value1)))(v.value0)(m);
                };
            };
            return Data_Foldable.foldr(Data_List_Types.foldableList)(select)(Data_Map_Internal.empty)(toList(xs));
        };
    }, function (p) {
        return partitionDefault(filterableMap(dictOrd))(p);
    }, function (p) {
        return function (xs) {
            var toList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
            var select = function (v) {
                return function (v1) {
                    var v2 = p(v.value1);
                    if (v2 instanceof Data_Either.Left) {
                        return {
                            left: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.left),
                            right: v1.right
                        };
                    };
                    if (v2 instanceof Data_Either.Right) {
                        return {
                            left: v1.left,
                            right: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.right)
                        };
                    };
                    throw new Error("Failed pattern match at Data.Filterable (line 215, column 44 - line 217, column 57): " + [ v2.constructor.name ]);
                };
            };
            return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
                left: Data_Map_Internal.empty,
                right: Data_Map_Internal.empty
            })(toList(xs));
        };
    });
};
var filterableMaybe = new Filterable(function () {
    return Data_Compactable.compactableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (p) {
    return filterDefault(filterableMaybe)(p);
}, Control_Bind.bindFlipped(Data_Maybe.bindMaybe), function (p) {
    return partitionDefault(filterableMaybe)(p);
}, function (p) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return {
                left: Data_Maybe.Nothing.value,
                right: Data_Maybe.Nothing.value
            };
        };
        if (v instanceof Data_Maybe.Just) {
            var v1 = p(v.value0);
            if (v1 instanceof Data_Either.Left) {
                return {
                    left: new Data_Maybe.Just(v1.value0),
                    right: Data_Maybe.Nothing.value
                };
            };
            if (v1 instanceof Data_Either.Right) {
                return {
                    left: Data_Maybe.Nothing.value,
                    right: new Data_Maybe.Just(v1.value0)
                };
            };
            throw new Error("Failed pattern match at Data.Filterable (line 161, column 29 - line 163, column 48): " + [ v1.constructor.name ]);
        };
        throw new Error("Failed pattern match at Data.Filterable (line 159, column 1 - line 169, column 29): " + [ p.constructor.name, v.constructor.name ]);
    };
});
var cleared = function (dictFilterable) {
    return filterMap(dictFilterable)(Data_Function["const"](Data_Maybe.Nothing.value));
};
module.exports = {
    Filterable: Filterable,
    partitionMap: partitionMap,
    partition: partition,
    filterMap: filterMap,
    filter: filter,
    eitherBool: eitherBool,
    partitionDefault: partitionDefault,
    partitionDefaultFilter: partitionDefaultFilter,
    partitionDefaultFilterMap: partitionDefaultFilterMap,
    partitionMapDefault: partitionMapDefault,
    maybeBool: maybeBool,
    filterDefault: filterDefault,
    filterDefaultPartition: filterDefaultPartition,
    filterDefaultPartitionMap: filterDefaultPartitionMap,
    filterMapDefault: filterMapDefault,
    cleared: cleared,
    filterableArray: filterableArray,
    filterableMaybe: filterableMaybe,
    filterableEither: filterableEither,
    filterableList: filterableList,
    filterableMap: filterableMap
};

},{"../Control.Bind/index.js":"1hm9k","../Data.Array/index.js":"6mZxP","../Data.Compactable/index.js":"3luI1","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.List/index.js":"3bKr1","../Data.List.Types/index.js":"6KoCK","../Data.Map.Internal/index.js":"3xtL7","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP"}],"40SAn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Compactable = require("../Data.Compactable/index.js");
var Data_Filterable = require("../Data.Filterable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var IsEvent = function (Alternative0, Filterable1, fix, fold, keepLatest, sampleOn) {
    this.Alternative0 = Alternative0;
    this.Filterable1 = Filterable1;
    this.fix = fix;
    this.fold = fold;
    this.keepLatest = keepLatest;
    this.sampleOn = sampleOn;
};
var sampleOn = function (dict) {
    return dict.sampleOn;
};
var sampleOn_ = function (dictIsEvent) {
    return function (a) {
        return function (b) {
            return sampleOn(dictIsEvent)(a)(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor1())(b)(Control_Category.identity(Control_Category.categoryFn)));
        };
    };
};
var keepLatest = function (dict) {
    return dict.keepLatest;
};
var gateBy = function (dictIsEvent) {
    return function (f) {
        return function (sampled) {
            var $20 = Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0());
            var $21 = sampleOn(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Maybe.Nothing.value))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Maybe.Just.create)(sampled)));
            var $22 = Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (x) {
                return function (p) {
                    var $12 = f(p)(x);
                    if ($12) {
                        return new Data_Maybe.Just(x);
                    };
                    return Data_Maybe.Nothing.value;
                };
            });
            return function ($23) {
                return $20($21($22($23)));
            };
        };
    };
};
var gate = function (dictIsEvent) {
    return gateBy(dictIsEvent)(function (x) {
        return function (v) {
            return Data_Maybe.fromMaybe(false)(x);
        };
    });
};
var fold = function (dict) {
    return dict.fold;
};
var folded = function (dictIsEvent) {
    return function (dictMonoid) {
        return function (s) {
            return fold(dictIsEvent)(Data_Semigroup.append(dictMonoid.Semigroup0()))(s)(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var mapAccum = function (dictIsEvent) {
    return function (f) {
        return function (xs) {
            return function (acc) {
                return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Data_Tuple.snd)(fold(dictIsEvent)(function (a) {
                    return function (v) {
                        return Data_Functor.map(Data_Tuple.functorTuple)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(f(a)(v.value0));
                    };
                })(xs)(new Data_Tuple.Tuple(acc, Data_Maybe.Nothing.value)));
            };
        };
    };
};
var withLast = function (dictIsEvent) {
    return function (e) {
        var step = function (a) {
            return function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just({
                        now: a,
                        last: Data_Maybe.Nothing.value
                    });
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just({
                        now: a,
                        last: new Data_Maybe.Just(v.value0.now)
                    });
                };
                throw new Error("Failed pattern match at FRP.Event.Class (line 51, column 3 - line 51, column 60): " + [ a.constructor.name, v.constructor.name ]);
            };
        };
        return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Control_Category.identity(Control_Category.categoryFn))(fold(dictIsEvent)(step)(e)(Data_Maybe.Nothing.value));
    };
};
var fix = function (dict) {
    return dict.fix;
};
var count = function (dictIsEvent) {
    return function (s) {
        return fold(dictIsEvent)(function (v) {
            return function (n) {
                return n + 1 | 0;
            };
        })(s)(0);
    };
};
module.exports = {
    IsEvent: IsEvent,
    fold: fold,
    folded: folded,
    count: count,
    mapAccum: mapAccum,
    withLast: withLast,
    sampleOn: sampleOn,
    sampleOn_: sampleOn_,
    keepLatest: keepLatest,
    fix: fix,
    gate: gate,
    gateBy: gateBy
};

},{"../Control.Alt/index.js":"wxs4v","../Control.Applicative/index.js":"1ufUD","../Control.Category/index.js":"6QTyW","../Data.Compactable/index.js":"3luI1","../Data.Filterable/index.js":"7yn1m","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Tuple/index.js":"43VFo"}],"5qehG":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var Record = require("../Record/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var PropToSchemaType = function (x) {
    return x;
};
var QueryReturns = function (queryReturnsImpl) {
    this.queryReturnsImpl = queryReturnsImpl;
};
var queryReturnsImpl = function (dict) {
    return dict.queryReturnsImpl;
};
var queryReturnsMaybe = function (dictQueryReturns) {
    return new QueryReturns(function (v) {
        return function (q) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(queryReturnsImpl(dictQueryReturns)(Data_Typelevel_Undefined["undefined"])(q));
        };
    });
};
var queryReturnsNewtype = function (dictNewtype) {
    return function (dictQueryReturns) {
        return new QueryReturns(function (sch) {
            return function (query) {
                return queryReturnsImpl(dictQueryReturns)(Data_Newtype.unwrap(dictNewtype)(sch))(query);
            };
        });
    };
};
var queryReturnsParamsArgs = function (dictQueryReturns) {
    return function (dictHMapWithIndex) {
        return function (dictSatisifyNotNullParam) {
            return new QueryReturns(function (v) {
                return function (v1) {
                    return queryReturnsImpl(dictQueryReturns)(Data_Typelevel_Undefined["undefined"])(v1.value1);
                };
            });
        };
    };
};
var queryReturnsParamsNoArgs = function (dictQueryReturns) {
    return function (dictSatisifyNotNullParam) {
        return new QueryReturns(function (v) {
            return function (q) {
                return queryReturnsImpl(dictQueryReturns)(Data_Typelevel_Undefined["undefined"])(q);
            };
        });
    };
};
var queryReturnsArray = function (dictQueryReturns) {
    return new QueryReturns(function (v) {
        return function (q) {
            return Control_Applicative.pure(Control_Applicative.applicativeArray)(queryReturnsImpl(dictQueryReturns)(Data_Typelevel_Undefined["undefined"])(q));
        };
    });
};
var queryReturnsAll = new QueryReturns(function (a) {
    return function (q) {
        return a;
    };
});
var queryReturns = function (dictQueryReturns) {
    return function (schemaProxy) {
        return function (query) {
            return Type_Proxy["Proxy"].value;
        };
    };
};
var propToSchemaType_ = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictQueryReturns) {
            return new Heterogeneous_Mapping.MappingWithIndex(function (v) {
                return function (sym) {
                    return function (val) {
                        var subSchema = Record.get(dictIsSymbol)()(sym)(v);
                        return queryReturnsImpl(dictQueryReturns)(subSchema)(val);
                    };
                };
            });
        };
    };
};
var propToSchemaTypeProxyAlias = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictQueryReturns) {
                return new Heterogeneous_Mapping.MappingWithIndex(function (v) {
                    return function (sym) {
                        return function (val) {
                            var subSchema = Record.get(dictIsSymbol1)()(val)(v);
                            return queryReturnsImpl(dictQueryReturns)(subSchema)(val);
                        };
                    };
                });
            };
        };
    };
};
var propToSchemaTypeAlias = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictQueryReturns) {
                return new Heterogeneous_Mapping.MappingWithIndex(function (v) {
                    return function (sym) {
                        return function (v1) {
                            var subSchema = Record.get(dictIsSymbol1)()(v1.value0)(v);
                            return queryReturnsImpl(dictQueryReturns)(subSchema)(v1.value1);
                        };
                    };
                });
            };
        };
    };
};
var propToSchemaType = function (dictHMapWithIndex) {
    return function (schema) {
        return function (query_) {
            return Heterogeneous_Mapping.hmapWithIndex(dictHMapWithIndex)(schema)(query_);
        };
    };
};
var queryReturnsRecord = function (dictHMapWithIndex) {
    return new QueryReturns(propToSchemaType(dictHMapWithIndex));
};
module.exports = {
    queryReturns: queryReturns,
    QueryReturns: QueryReturns,
    queryReturnsImpl: queryReturnsImpl,
    queryReturnsArray: queryReturnsArray,
    queryReturnsMaybe: queryReturnsMaybe,
    queryReturnsParamsArgs: queryReturnsParamsArgs,
    queryReturnsParamsNoArgs: queryReturnsParamsNoArgs,
    queryReturnsRecord: queryReturnsRecord,
    queryReturnsNewtype: queryReturnsNewtype,
    queryReturnsAll: queryReturnsAll,
    propToSchemaTypeAlias: propToSchemaTypeAlias,
    propToSchemaTypeProxyAlias: propToSchemaTypeProxyAlias,
    propToSchemaType_: propToSchemaType_
};

},{"../Control.Applicative/index.js":"1ufUD","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Typelevel.Undefined/index.js":"7E44w","../Heterogeneous.Mapping/index.js":"7kbdv","../Record/index.js":"68VO1","../Type.Proxy/index.js":"2sP8v"}],"7E44w":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Unit = require("../Data.Unit/index.js");
var $$undefined = Data_Unit.unit;
module.exports = {
    "undefined": $$undefined
};

},{"../Data.Unit/index.js":"64zbv"}],"7kyWr":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var GraphQL_Client_Query = require("../GraphQL.Client.Query/index.js");
var GraphQL_Client_SafeQueryName = require("../GraphQL.Client.SafeQueryName/index.js");
var GraphQL_Client_ToGqlString = require("../GraphQL.Client.ToGqlString/index.js");
var GraphQL_Client_Types = require("../GraphQL.Client.Types/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_GraphQL_Error = require("../Halogen.GraphQL.Error/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Network_RemoteData = require("../Network.RemoteData/index.js");
var Record = require("../Record/index.js");
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var Finalize = (function () {
    function Finalize() {

    };
    Finalize.value = new Finalize();
    return Finalize;
})();
var QueryUpdate = (function () {
    function QueryUpdate(value0) {
        this.value0 = value0;
    };
    QueryUpdate.create = function (value0) {
        return new QueryUpdate(value0);
    };
    return QueryUpdate;
})();
var Receive = (function () {
    function Receive(value0) {
        this.value0 = value0;
    };
    Receive.create = function (value0) {
        return new Receive(value0);
    };
    return Receive;
})();
var Emit = (function () {
    function Emit(value0) {
        this.value0 = value0;
    };
    Emit.create = function (value0) {
        return new Emit(value0);
    };
    return Emit;
})();
var watchQueryEventSource = function (dictGqlQueryString) {
    return function (dictApplicative) {
        return function (dictMonadAff) {
            return function (dictWatchQueryClient) {
                return function (dictQueryClient) {
                    return function (decoder) {
                        return function (optsF) {
                            return function (queryNameUnsafe) {
                                return function (q) {
                                    return function (v) {
                                        var queryName = GraphQL_Client_SafeQueryName.safeQueryName(queryNameUnsafe);
                                        var query = "query " + (queryName + (" " + GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQueryString)(q)));
                                        return Control_Applicative.pure(dictApplicative)(Halogen_Query_EventSource.effectEventSource(dictMonadAff)(function (emitter) {
                                            return function __do() {
                                                var cancel = GraphQL_Client_Types.clientWatchQuery(dictWatchQueryClient)(optsF(GraphQL_Client_Types.defQueryOpts(dictQueryClient)(v)))(v)(query)((function () {
                                                    var $76 = Halogen_Query_EventSource.emit(emitter);
                                                    return function ($77) {
                                                        return $76(decoder($77));
                                                    };
                                                })())();
                                                return cancel;
                                            };
                                        }));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var _inner = Data_Symbol.SProxy.value;
var queryConnectInternal = function (dictMonadAff) {
    return function (dictGqlQuery) {
        return function (dictLacks) {
            return function (dictIsSymbol) {
                return function (dictCons) {
                    return function (dictQueryClient) {
                        return function (dictWatchQueryClient) {
                            return function (sym) {
                                return function (decoder) {
                                    return function (optsF) {
                                        return function (queryName) {
                                            return function (query) {
                                                return function (client) {
                                                    return function (innerComponent) {
                                                        var render = function (state) {
                                                            return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                                                                return "inner";
                                                            }))(Data_Ord.ordUnit)(_inner)(Data_Unit.unit)(innerComponent)(state.pass)(function ($78) {
                                                                return Data_Maybe.Just.create(Emit.create($78));
                                                            });
                                                        };
                                                        var handleQuery = Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                                                            return "inner";
                                                        }))(Data_Ord.ordUnit)(_inner)(Data_Unit.unit);
                                                        var handleAction = function (v) {
                                                            if (v instanceof Initialize) {
                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                                                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)((dictMonadAff.MonadEffect0()).Monad0())(query(Record["delete"](dictIsSymbol)()()(sym)(v1.pass))))(function (q) {
                                                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)((dictMonadAff.MonadEffect0()).Monad0())(watchQueryEventSource(dictGqlQuery.GqlQueryString1())(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(dictMonadAff)(dictWatchQueryClient)(dictQueryClient)(decoder)(optsF)(queryName)(q)(client)))(function (sub) {
                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.subscribe(Data_Functor.map(Halogen_Query_EventSource.functorEventSource(((((dictMonadAff.MonadEffect0()).Monad0()).Bind1()).Apply0()).Functor0()))(QueryUpdate.create)(sub)))(function (subId) {
                                                                                return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                                                                    var $53 = {};
                                                                                    for (var $54 in v2) {
                                                                                        if ({}.hasOwnProperty.call(v2, $54)) {
                                                                                            $53[$54] = v2[$54];
                                                                                        };
                                                                                    };
                                                                                    $53.subId = new Data_Maybe.Just(subId);
                                                                                    return $53;
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            };
                                                            if (v instanceof QueryUpdate && v.value0 instanceof Data_Either.Right) {
                                                                return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                    var $57 = {};
                                                                    for (var $58 in st) {
                                                                        if ({}.hasOwnProperty.call(st, $58)) {
                                                                            $57[$58] = st[$58];
                                                                        };
                                                                    };
                                                                    $57.pass = Record.set(dictIsSymbol)()()(sym)(new Network_RemoteData.Success(v.value0.value0))(st.pass);
                                                                    return $57;
                                                                });
                                                            };
                                                            if (v instanceof QueryUpdate && v.value0 instanceof Data_Either.Left) {
                                                                return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                    var $62 = {};
                                                                    for (var $63 in st) {
                                                                        if ({}.hasOwnProperty.call(st, $63)) {
                                                                            $62[$63] = st[$63];
                                                                        };
                                                                    };
                                                                    $62.pass = Record.set(dictIsSymbol)()()(sym)(Network_RemoteData.Failure.create(new Halogen_GraphQL_Error.DecodeError(v.value0.value0)))(st.pass);
                                                                    return $62;
                                                                });
                                                            };
                                                            if (v instanceof Receive) {
                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                                                                    var gqlProp = Record.get(dictIsSymbol)()(sym)(v1.pass);
                                                                    return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                                                        var $68 = {};
                                                                        for (var $69 in v2) {
                                                                            if ({}.hasOwnProperty.call(v2, $69)) {
                                                                                $68[$69] = v2[$69];
                                                                            };
                                                                        };
                                                                        $68.pass = Record.insert(dictIsSymbol)()()(sym)(gqlProp)(v.value0);
                                                                        return $68;
                                                                    });
                                                                });
                                                            };
                                                            if (v instanceof Emit) {
                                                                return Halogen_Query_HalogenM.raise(v.value0);
                                                            };
                                                            if (v instanceof Finalize) {
                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                                                                    return Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(Halogen_Query_HalogenM.unsubscribe)(v1.subId);
                                                                });
                                                            };
                                                            throw new Error("Failed pattern match at Halogen.GraphQL.Query (line 149, column 18 - line 166, column 36): " + [ v.constructor.name ]);
                                                        };
                                                        return Halogen_Component.mkComponent({
                                                            initialState: function (pass) {
                                                                return {
                                                                    pass: Record.insert(dictIsSymbol)()()(sym)(Network_RemoteData.Loading.value)(pass),
                                                                    subId: Data_Maybe.Nothing.value
                                                                };
                                                            },
                                                            render: render,
                                                            "eval": Halogen_Component.mkEval({
                                                                handleAction: handleAction,
                                                                handleQuery: handleQuery,
                                                                receive: function ($79) {
                                                                    return Data_Maybe.Just.create(Receive.create($79));
                                                                },
                                                                initialize: new Data_Maybe.Just(Initialize.value),
                                                                finalize: new Data_Maybe.Just(Finalize.value)
                                                            })
                                                        });
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryConnect = function (dictMonadAff) {
    return function (dictGqlQuery) {
        return function (dictLacks) {
            return function (dictQueryClient) {
                return function (dictWatchQueryClient) {
                    return function (decoder) {
                        return queryConnectInternal(dictMonadAff)(dictGqlQuery)()(new Data_Symbol.IsSymbol(function () {
                            return "gql";
                        }))()(dictQueryClient)(dictWatchQueryClient)(Data_Symbol.SProxy.value)(GraphQL_Client_Query.decodeGqlRes(decoder));
                    };
                };
            };
        };
    };
};
var queryConnectFullRes = function (dictMonadAff) {
    return function (dictGqlQuery) {
        return function (dictLacks) {
            return function (dictQueryClient) {
                return function (dictWatchQueryClient) {
                    return function (decoder) {
                        return queryConnectInternal(dictMonadAff)(dictGqlQuery)()(new Data_Symbol.IsSymbol(function () {
                            return "gql";
                        }))()(dictQueryClient)(dictWatchQueryClient)(Data_Symbol.SProxy.value)(GraphQL_Client_Query.getFullRes(Data_Either.applicativeEither)(decoder));
                    };
                };
            };
        };
    };
};
var queryConnectFullRes_ = function (dictMonadAff) {
    return function (dictGqlQuery) {
        return function (dictLacks) {
            return function (dictIsSymbol) {
                return function (dictQueryClient) {
                    return function (dictWatchQueryClient) {
                        return function (dictCons) {
                            return function (sym) {
                                return function (decoder) {
                                    return queryConnectInternal(dictMonadAff)(dictGqlQuery)()(dictIsSymbol)()(dictQueryClient)(dictWatchQueryClient)(sym)(GraphQL_Client_Query.getFullRes(Data_Either.applicativeEither)(decoder));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryConnect_ = function (dictMonadAff) {
    return function (dictGqlQuery) {
        return function (dictLacks) {
            return function (dictIsSymbol) {
                return function (dictCons) {
                    return function (dictQueryClient) {
                        return function (dictWatchQueryClient) {
                            return function (sym) {
                                return function (decoder) {
                                    return queryConnectInternal(dictMonadAff)(dictGqlQuery)()(dictIsSymbol)()(dictQueryClient)(dictWatchQueryClient)(sym)(GraphQL_Client_Query.decodeGqlRes(decoder));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    queryConnect: queryConnect,
    queryConnect_: queryConnect_,
    queryConnectFullRes: queryConnectFullRes,
    queryConnectFullRes_: queryConnectFullRes_
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Monad.State.Class/index.js":"7hc9n","../Control.Monad.Trans.Class/index.js":"1Hdn6","../Data.Either/index.js":"5Va79","../Data.Foldable/index.js":"6ATDN","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Symbol/index.js":"3AbLb","../Data.Unit/index.js":"64zbv","../GraphQL.Client.Query/index.js":"3DhdP","../GraphQL.Client.SafeQueryName/index.js":"LbjU3","../GraphQL.Client.ToGqlString/index.js":"4g2tQ","../GraphQL.Client.Types/index.js":"MVda1","../Halogen.Component/index.js":"5H60K","../Halogen.GraphQL.Error/index.js":"6rrmJ","../Halogen.HTML/index.js":"7lUu2","../Halogen.Query.EventSource/index.js":"3Fogs","../Halogen.Query.HalogenM/index.js":"5kldW","../Network.RemoteData/index.js":"6FIOI","../Record/index.js":"68VO1"}],"3DhdP":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Combinators = require("../Data.Argonaut.Decode.Combinators/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Filterable = require("../Data.Filterable/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Global_Unsafe = require("../Global.Unsafe/index.js");
var GraphQL_Client_BaseClients_Urql = require("../GraphQL.Client.BaseClients.Urql/index.js");
var GraphQL_Client_SafeQueryName = require("../GraphQL.Client.SafeQueryName/index.js");
var GraphQL_Client_ToGqlString = require("../GraphQL.Client.ToGqlString/index.js");
var GraphQL_Client_Types = require("../GraphQL.Client.Types/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var getExtensions = function (json) {
    var v = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
        return "extensions";
    }))()())())(json);
    if (v instanceof Data_Either.Right) {
        return new Data_Maybe.Just(v.value0.extensions);
    };
    return Data_Maybe.Nothing.value;
};
var getErrors = function (json) {
    var v = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
        return "errors";
    }))()())())(json);
    if (v instanceof Data_Either.Right) {
        return new Data_Maybe.Just(v.value0.errors);
    };
    return Data_Maybe.Nothing.value;
};
var decodeGqlRes = function (decodeFn) {
    return function (json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (jsonObj) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(jsonObj)("data"))(function (data_) {
                return decodeFn(data_);
            });
        });
    };
};
var decodeJsonData = function (dictMonadThrow) {
    return function (decodeFn) {
        return function (json) {
            var v = decodeGqlRes(decodeFn)(json);
            if (v instanceof Data_Either.Left) {
                return Control_Monad_Error_Class.throwError(dictMonadThrow)(Effect_Exception.error((function () {
                    var v1 = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonString)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                        return "message";
                    }))()())()))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                        return "errors";
                    }))()())())(json);
                    if (v1 instanceof Data_Either.Right) {
                        return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", \x0a")(Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                            return v2.message;
                        })(v1.value0.errors));
                    };
                    return " Response failed to decode from JSON: " + (Data_Argonaut_Decode_Error.printJsonDecodeError(v.value0) + ("\x0a Full response: " + Global_Unsafe.unsafeStringify(json)));
                })()));
            };
            if (v instanceof Data_Either.Right) {
                return Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0())(v.value0);
            };
            throw new Error("Failed pattern match at GraphQL.Client.Query (line 199, column 32 - line 209, column 30): " + [ v.constructor.name ]);
        };
    };
};
var decodeError = function (json) {
    return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (v) {
        return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(v)("message")))(function (message) {
            return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonInt)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonInt)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
                return "line";
            }))()())(new Data_Symbol.IsSymbol(function () {
                return "column";
            }))()())()))))(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonJson)(v)("locations")))(function (locations) {
                return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonEither(Data_Argonaut_Decode_Class.decodeJsonInt)(Data_Argonaut_Decode_Class.decodeJsonString)))))(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonJson)(v)("path")))(function (path) {
                    return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))))(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonJson)(v)("extensions")))(function (extensions) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)({
                            message: message,
                            locations: locations,
                            path: path,
                            extensions: extensions
                        });
                    });
                });
            });
        });
    });
};
var getFullRes = function (dictApplicative) {
    return function (decodeFn) {
        return function (json) {
            var extensions = getExtensions(json);
            var errors = getErrors(json);
            var data_ = decodeGqlRes(decodeFn)(json);
            return Control_Applicative.pure(dictApplicative)({
                data_: data_,
                errors_json: errors,
                errors: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Filterable.filterMap(Data_Filterable.filterableArray)(function ($85) {
                    return Data_Either.hush(decodeError($85));
                }))(errors),
                extensions: extensions
            });
        };
    };
};
var addErrorInfo = function (dictMonadError) {
    return function (dictGqlQueryString) {
        return function (queryName) {
            return function (q) {
                return Data_Function.flip(Control_Monad_Error_Class.catchError(dictMonadError))(function (err) {
                    return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(Effect_Exception.error("GraphQL " + (".\x0aname: " + (Data_Show.show(Data_Show.showString)(queryName) + (".\x0aerror: " + (Effect_Exception.message(err) + (".\x0aquery: " + GraphQL_Client_ToGqlString.toGqlQueryStringFormatted(dictGqlQueryString)(q))))))));
                });
            };
        };
    };
};
var mutationFullRes = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (dictDecodeJson) {
            return function (decodeFn) {
                return function (optsF) {
                    return function (v) {
                        return function (queryNameUnsafe) {
                            return function (q) {
                                var queryName = GraphQL_Client_SafeQueryName.safeQueryName(queryNameUnsafe);
                                var opts = optsF(GraphQL_Client_Types.defMutationOpts(dictQueryClient)(v));
                                return addErrorInfo(Effect_Aff.monadErrorAff)(dictGqlQuery.GqlQueryString1())(queryName)(q)(Control_Bind.bind(Effect_Aff.bindAff)(GraphQL_Client_Types.clientMutation(dictQueryClient)(opts)(v)(queryName)(GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQuery.GqlQueryString1())(q)))(function (json) {
                                    return getFullRes(Effect_Aff.applicativeAff)(decodeFn)(json);
                                }));
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryFullRes = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (dictDecodeJson) {
            return function (decodeFn) {
                return function (optsF) {
                    return function (v) {
                        return function (queryNameUnsafe) {
                            return function (q) {
                                var queryName = GraphQL_Client_SafeQueryName.safeQueryName(queryNameUnsafe);
                                var opts = optsF(GraphQL_Client_Types.defQueryOpts(dictQueryClient)(v));
                                return addErrorInfo(Effect_Aff.monadErrorAff)(dictGqlQuery.GqlQueryString1())(queryName)(q)(Control_Bind.bind(Effect_Aff.bindAff)(GraphQL_Client_Types.clientQuery(dictQueryClient)(opts)(v)(queryName)(GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQuery.GqlQueryString1())(q)))(function (json) {
                                    return getFullRes(Effect_Aff.applicativeAff)(decodeFn)(json);
                                }));
                            };
                        };
                    };
                };
            };
        };
    };
};
var runMutation = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (decodeFn) {
            return function (opts) {
                return function (client) {
                    return function (v) {
                        return function (queryNameUnsafe) {
                            return function (q) {
                                var queryName = GraphQL_Client_SafeQueryName.safeQueryName(queryNameUnsafe);
                                return addErrorInfo(Effect_Aff.monadErrorAff)(dictGqlQuery.GqlQueryString1())(queryName)(q)(Control_Bind.bind(Effect_Aff.bindAff)(GraphQL_Client_Types.clientMutation(dictQueryClient)(opts)(client)(queryName)(GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQuery.GqlQueryString1())(q)))(function (json) {
                                    return decodeJsonData(Effect_Aff.monadThrowAff)(decodeFn)(json);
                                }));
                            };
                        };
                    };
                };
            };
        };
    };
};
var mutationOptsWithDecoder = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (d) {
            return function (optsF) {
                return function (v) {
                    var opts = optsF(GraphQL_Client_Types.defMutationOpts(dictQueryClient)(v));
                    return runMutation(dictQueryClient)(dictGqlQuery)(d)(opts)(v)(Type_Proxy["Proxy"].value);
                };
            };
        };
    };
};
var mutationOpts = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (dictDecodeJson) {
            return mutationOptsWithDecoder(dictQueryClient)(dictGqlQuery)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
        };
    };
};
var mutationWithDecoder = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (d) {
            return function (v) {
                return runMutation(dictQueryClient)(dictGqlQuery)(d)(GraphQL_Client_Types.defMutationOpts(dictQueryClient)(v))(v)(Type_Proxy["Proxy"].value);
            };
        };
    };
};
var mutation = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (dictDecodeJson) {
            return mutationWithDecoder(dictQueryClient)(dictGqlQuery)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
        };
    };
};
var mutation_ = function (dictGqlQuery) {
    return function (dictDecodeJson) {
        return function (url) {
            return function (schema) {
                return function (name) {
                    return function (q) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(GraphQL_Client_BaseClients_Urql.createGlobalClientUnsafe({
                            url: url,
                            headers: [  ]
                        })))(function (client) {
                            return mutation(GraphQL_Client_BaseClients_Urql.queryClient)(dictGqlQuery)(dictDecodeJson)(client)(name)(q);
                        });
                    };
                };
            };
        };
    };
};
var runQuery = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (decodeFn) {
            return function (opts) {
                return function (client) {
                    return function (v) {
                        return function (queryNameUnsafe) {
                            return function (q) {
                                var queryName = GraphQL_Client_SafeQueryName.safeQueryName(queryNameUnsafe);
                                return addErrorInfo(Effect_Aff.monadErrorAff)(dictGqlQuery.GqlQueryString1())(queryName)(q)(Control_Bind.bind(Effect_Aff.bindAff)(GraphQL_Client_Types.clientQuery(dictQueryClient)(opts)(client)(queryName)(GraphQL_Client_ToGqlString.toGqlQueryString(dictGqlQuery.GqlQueryString1())(q)))(function (json) {
                                    return decodeJsonData(Effect_Aff.monadThrowAff)(decodeFn)(json);
                                }));
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryOptsWithDecoder = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (d) {
            return function (optsF) {
                return function (v) {
                    var opts = optsF(GraphQL_Client_Types.defQueryOpts(dictQueryClient)(v));
                    return runQuery(dictQueryClient)(dictGqlQuery)(d)(opts)(v)(Type_Proxy["Proxy"].value);
                };
            };
        };
    };
};
var queryOpts = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (dictDecodeJson) {
            return queryOptsWithDecoder(dictQueryClient)(dictGqlQuery)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
        };
    };
};
var queryWithDecoder = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (d) {
            return function (v) {
                return runQuery(dictQueryClient)(dictGqlQuery)(d)(GraphQL_Client_Types.defQueryOpts(dictQueryClient)(v))(v)(Type_Proxy["Proxy"].value);
            };
        };
    };
};
var query = function (dictQueryClient) {
    return function (dictGqlQuery) {
        return function (dictDecodeJson) {
            return queryWithDecoder(dictQueryClient)(dictGqlQuery)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
        };
    };
};
var query_ = function (dictGqlQuery) {
    return function (dictDecodeJson) {
        return function (url) {
            return function (schema) {
                return function (name) {
                    return function (q) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(GraphQL_Client_BaseClients_Urql.createGlobalClientUnsafe({
                            url: url,
                            headers: [  ]
                        })))(function (client) {
                            return query(GraphQL_Client_BaseClients_Urql.queryClient)(dictGqlQuery)(dictDecodeJson)(client)(name)(q);
                        });
                    };
                };
            };
        };
    };
};
module.exports = {
    query: query,
    queryWithDecoder: queryWithDecoder,
    queryOptsWithDecoder: queryOptsWithDecoder,
    queryOpts: queryOpts,
    query_: query_,
    mutation: mutation,
    mutationWithDecoder: mutationWithDecoder,
    mutationOptsWithDecoder: mutationOptsWithDecoder,
    mutationOpts: mutationOpts,
    mutation_: mutation_,
    decodeGqlRes: decodeGqlRes,
    queryFullRes: queryFullRes,
    mutationFullRes: mutationFullRes,
    getFullRes: getFullRes,
    addErrorInfo: addErrorInfo
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Bind/index.js":"1hm9k","../Control.Monad.Error.Class/index.js":"6mmaT","../Data.Argonaut.Decode.Class/index.js":"1oRcX","../Data.Argonaut.Decode.Combinators/index.js":"4y1KJ","../Data.Argonaut.Decode.Error/index.js":"1Njs1","../Data.Either/index.js":"5Va79","../Data.Filterable/index.js":"7yn1m","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Show/index.js":"6nX0c","../Data.Symbol/index.js":"3AbLb","../Data.Traversable/index.js":"2NLLF","../Effect.Aff/index.js":"1PqJZ","../Effect.Class/index.js":"70nM9","../Effect.Exception/index.js":"neabt","../Global.Unsafe/index.js":"7puTd","../GraphQL.Client.BaseClients.Urql/index.js":"69PyV","../GraphQL.Client.SafeQueryName/index.js":"LbjU3","../GraphQL.Client.ToGqlString/index.js":"4g2tQ","../GraphQL.Client.Types/index.js":"MVda1","../Type.Proxy/index.js":"2sP8v"}],"4y1KJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Decoders = require("../Data.Argonaut.Decode.Decoders/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var getFieldOptional$prime = function (dictDecodeJson) {
    return Data_Argonaut_Decode_Decoders["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
};
var getFieldOptional = function (dictDecodeJson) {
    return Data_Argonaut_Decode_Decoders.getFieldOptional(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
};
var getField = function (dictDecodeJson) {
    return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
};
var defaultField = function (parser) {
    return function ($$default) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe($$default))(parser);
    };
};
module.exports = {
    getField: getField,
    getFieldOptional: getFieldOptional,
    "getFieldOptional'": getFieldOptional$prime,
    defaultField: defaultField
};

},{"../Data.Argonaut.Decode.Class/index.js":"1oRcX","../Data.Argonaut.Decode.Decoders/index.js":"7eUW5","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt"}],"7puTd":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeStringify: $foreign.unsafeStringify,
    unsafeToFixed: $foreign.unsafeToFixed,
    unsafeToExponential: $foreign.unsafeToExponential,
    unsafeToPrecision: $foreign.unsafeToPrecision,
    unsafeDecodeURI: $foreign.unsafeDecodeURI,
    unsafeEncodeURI: $foreign.unsafeEncodeURI,
    unsafeDecodeURIComponent: $foreign.unsafeDecodeURIComponent,
    unsafeEncodeURIComponent: $foreign.unsafeEncodeURIComponent
};

},{"./foreign.js":"2Wiab"}],"2Wiab":[function(require,module,exports) {
/* globals exports, JSON */
"use strict";

exports.unsafeStringify = function (x) {
  return JSON.stringify(x);
};

exports.unsafeToFixed = function (digits) {
  return function (n) {
    return n.toFixed(digits);
  };
};

exports.unsafeToExponential = function (digits) {
  return function (n) {
    return n.toExponential(digits);
  };
};

exports.unsafeToPrecision  = function (digits) {
  return function (n) {
    return n.toPrecision(digits);
  };
};

exports.unsafeDecodeURI = decodeURI;
exports.unsafeEncodeURI = encodeURI;
exports.unsafeDecodeURIComponent = decodeURIComponent;
exports.unsafeEncodeURIComponent = encodeURIComponent;

},{}],"69PyV":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff_Compat = require("../Effect.Aff.Compat/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var GraphQL_Client_Types = require("../GraphQL.Client.Types/index.js");
var subcriptionClient = new GraphQL_Client_Types.SubscriptionClient(function (v) {
    return $foreign.subscriptionImpl;
}, function (v) {
    return Data_Unit.unit;
});
var queryForeign = function (dictQueryClient) {
    return function (isMutation) {
        return function (client) {
            return function (name) {
                return function (q_) {
                    var opStr = (function () {
                        if (isMutation) {
                            return "mutation";
                        };
                        return "query";
                    })();
                    var q = opStr + (" " + (name + (" " + q_)));
                    var fn = (function () {
                        if (isMutation) {
                            return $foreign.mutationImpl;
                        };
                        return $foreign.queryImpl;
                    })();
                    return Effect_Aff_Compat.fromEffectFnAff(fn(client)(q));
                };
            };
        };
    };
};
var queryClientSubscription = new GraphQL_Client_Types.QueryClient(function (v) {
    return function (c) {
        return queryForeign(queryClientSubscription)(true)(c);
    };
}, function (v) {
    return function (c) {
        return queryForeign(queryClientSubscription)(false)(c);
    };
}, Data_Function["const"](Data_Unit.unit), Data_Function["const"](Data_Unit.unit));
var queryClient = new GraphQL_Client_Types.QueryClient(function (v) {
    return function (c) {
        return queryForeign(queryClient)(true)(c);
    };
}, function (v) {
    return function (c) {
        return queryForeign(queryClient)(false)(c);
    };
}, Data_Function["const"](Data_Unit.unit), Data_Function["const"](Data_Unit.unit));
var clientOptsToForeign = function (opts) {
    var toTup = function (header) {
        return new Data_Tuple.Tuple(Affjax_RequestHeader.name(header), Affjax_RequestHeader.value(header));
    };
    var $10 = {};
    for (var $11 in opts) {
        if ({}.hasOwnProperty.call(opts, $11)) {
            $10[$11] = opts[$11];
        };
    };
    $10.headers = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(toTup)(opts.headers));
    return $10;
};
var createClient = (function () {
    var $13 = Data_Functor.map(Effect.functorEffect)(GraphQL_Client_Types.Client);
    return function ($14) {
        return $13($foreign.createClientImpl(clientOptsToForeign($14)));
    };
})();
var createGlobalClientUnsafe = (function () {
    var $15 = Data_Functor.map(Effect.functorEffect)(GraphQL_Client_Types.Client);
    return function ($16) {
        return $15($foreign.createGlobalClientUnsafeImpl(clientOptsToForeign($16)));
    };
})();
var createSubscriptionClient = (function () {
    var $17 = Data_Functor.map(Effect.functorEffect)(GraphQL_Client_Types.Client);
    return function ($18) {
        return $17($foreign.createSubscriptionClientImpl(clientOptsToForeign($18)));
    };
})();
module.exports = {
    createClient: createClient,
    createGlobalClientUnsafe: createGlobalClientUnsafe,
    createSubscriptionClient: createSubscriptionClient,
    queryClient: queryClient,
    queryClientSubscription: queryClientSubscription,
    subcriptionClient: subcriptionClient
};

},{"./foreign.js":"2AWws","../Affjax.RequestHeader/index.js":"6boN9","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Tuple/index.js":"43VFo","../Data.Unit/index.js":"64zbv","../Effect/index.js":"32R8a","../Effect.Aff.Compat/index.js":"D7JZw","../Foreign.Object/index.js":"1QIU3","../GraphQL.Client.Types/index.js":"MVda1"}],"2AWws":[function(require,module,exports) {
require('isomorphic-unfetch')

const createClient_ = function (opts) {
  const { createClient, defaultExchanges, subscriptionExchange } = require('@urql/core')
  const { createClient: createWSClient } = require('graphql-ws')

  let wsClient = null

  if (opts.websocketUrl) {
    wsClient = createWSClient({
      url: opts.websocketUrl
    })
  }

  const otherExchanges = opts.websocketUrl ? [
    subscriptionExchange({
      forwardSubscription (operation) {
        return {
          subscribe: function (sink) {
            const dispose = wsClient.subscribe(operation, sink)
            return {
              unsubscribe: dispose
            }
          }
        }
      }
    })
  ] : []

  return createClient({
    url: opts.url,
    fetchOptions: { headers: opts.headers },
    exchanges: defaultExchanges.concat(otherExchanges)
  })
}
let globalClient

exports.createGlobalClientUnsafeImpl = function (opts) {
  return function () {
    if (globalClient) {
      return globalClient
    }
    globalClient = createClient_(opts)

    return globalClient
  }
}

exports.createClientImpl = function (opts) {
  return function () {
    return createClient_(opts)
  }
}

exports.createSubscriptionClientImpl = function (opts) {
  return function () {
    return createClient_(opts)
  }
}

exports.queryImpl = function (client) {
  return function (query) {
    return function (onError, onSuccess) {
      try {
        client
          .query(query)
          .toPromise()
          .then(onSuccess)
          .catch(onError)
      } catch (err) {
        onError(err)
      }
      return function (cancelError, onCancelerError, onCancelerSuccess) {
        onCancelerSuccess()
      }
    }
  }
}

exports.mutationImpl = function (client) {
  return function (mutation) {
    return function (onError, onSuccess) {
      try {
        client
          .mutation(mutation)
          .toPromise()
          .then(onSuccess)
          .catch(onError)
      } catch (err) {
        onError(err)
      }
      return function (cancelError, onCancelerError, onCancelerSuccess) {
        onCancelerSuccess()
      }
    }
  }
}

exports.subscriptionImpl = function (client) {
  const { subscribe, pipe } = require('wonka')

  return function (query) {
    return function (callback) {
      return function () {
        const { unsubscribe } = pipe(
          client.subscription(query),
          subscribe(function (value) {
            callback(value)()
          })
        )
        return unsubscribe
      }
    }
  }
}

},{"isomorphic-unfetch":"5hM4e","@urql/core":"4mipl","graphql-ws":"vBrbg","wonka":"79i4f"}],"4mipl":[function(require,module,exports) {
"use strict";
function _ref(a) {
  return a.kind === graphql.Kind.FIELD && "__typename" === a.name.value && !a.alias;
}
function withPromise(a) {
  a.toPromise = function () {
    return wonka.toPromise(wonka.take(1)(a));
  };
  return a;
}
function makeOperation(a, b, c) {
  c || (c = b.context);
  return {
    key: b.key,
    query: b.query,
    variables: b.variables,
    kind: a,
    context: c
  };
}
function _ref$1(a) {
  return a.path || a.extensions ? {
    message: a.message,
    path: a.path,
    extensions: a.extensions
  } : a.message;
}
function _ref$2(a) {
  var b = makeOperation(a.kind, a);
  b.query = formatDocument(a.query);
  return b;
}
function _ref7(a) {
  return "query" !== a.kind || "cache-only" !== a.context.requestPolicy;
}
function _ref8(a) {
  return addMetadata(a, {
    cacheOutcome: "miss"
  });
}
function _ref10(a) {
  return shouldSkip$1(a);
}
function _ref2(a) {
  return console.log("[Exchange debug]: Completed operation: ", a);
}
function _ref3(a) {
  return console.log("[Exchange debug]: Incoming operation: ", a);
}
function _ref$3(a) {
  return "query" === a.kind || "mutation" === a.kind;
}
function _ref2$1(a) {
  return "query" !== a.kind && "mutation" !== a.kind;
}
function _ref$4() {
  return !1;
}
function _ref2$2(a) {
  a.data = maskTypename(a.data);
  return a;
}
var graphql = require("graphql"), fetchSource = require("./408a05a6.js"), wonka = require("wonka"), collectTypes = function (a, b) {
  if (Array.isArray(a)) {
    for (var c = 0; c < a.length; c++) {
      collectTypes(a[c], b);
    }
  } else if ("object" == typeof a && null !== a) {
    for (c in a) {
      "__typename" === c && "string" == typeof a[c] ? b[a[c]] = 0 : collectTypes(a[c], b);
    }
  }
  return b;
}, collectTypesFromResponse = function (a) {
  return Object.keys(collectTypes(a, {}));
}, formatNode = function (a) {
  if (a.selectionSet && !a.selectionSet.selections.some(_ref)) {
    return fetchSource._extends({}, a, {
      selectionSet: fetchSource._extends({}, a.selectionSet, {
        selections: a.selectionSet.selections.concat([{
          kind: graphql.Kind.FIELD,
          name: {
            kind: graphql.Kind.NAME,
            value: "__typename"
          }
        }])
      })
    });
  }
}, formattedDocs = new Map(), formatDocument = function (a) {
  a = fetchSource.keyDocument(a);
  var b = formattedDocs.get(a.__key);
  b || ((b = graphql.visit(a, {
    Field: formatNode,
    InlineFragment: formatNode
  })).__key = a.__key, formattedDocs.set(a.__key, b));
  return b;
}, maskTypename = function (a) {
  return a && "object" == typeof a ? Object.keys(a).reduce(function (b, c) {
    var d = a[c];
    "__typename" === c ? Object.defineProperty(b, "__typename", {
      enumerable: !1,
      value: d
    }) : Array.isArray(d) ? b[c] = d.map(maskTypename) : b[c] = d && "object" == typeof d && ("__typename" in d) ? maskTypename(d) : d;
    return b;
  }, {}) : a;
}, addMetadata = function (a, b) {
  return makeOperation(a.kind, a, fetchSource._extends({}, a.context, {
    meta: fetchSource._extends({}, a.context.meta, b)
  }));
}, noop = function () {}, applyDefinitions = function (a, b, c) {
  var d, f, g;
  for (d = 0; d < c.length; d++) {
    if (c[d].kind === graphql.Kind.FRAGMENT_DEFINITION) {
      (f = c[d].name.value, g = fetchSource.stringifyDocument(c[d]));
      a.has(f) ? "production" !== "development" && a.get(f) !== g && console.warn("[WARNING: Duplicate Fragment] A fragment with name `" + f + "` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document.") : (a.set(f, g), b.push(c[d]));
    } else {
      b.push(c[d]);
    }
  }
}, shouldSkip = function (a) {
  return "subscription" !== (a = a.kind) && "query" !== a;
}, serializeResult = function (a) {
  var c, b = a.data;
  a = a.error;
  c = {};
  void 0 !== b && (c.data = JSON.stringify(b));
  a && (c.error = {
    graphQLErrors: a.graphQLErrors.map(_ref$1)
  }, a.networkError && (c.error.networkError = "" + a.networkError));
  return c;
}, deserializeResult = function (a, b) {
  var c = b.error;
  return {
    operation: a,
    data: (b = b.data) ? JSON.parse(b) : void 0,
    extensions: void 0,
    error: c ? new fetchSource.CombinedError({
      networkError: c.networkError ? Error(c.networkError) : void 0,
      graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0
    }) : void 0
  };
}, ssrExchange = function (a) {
  function b() {
    for (var a; a = k.shift(); ) {
      delete e[a];
    }
  }
  function c(a) {
    return !l(a);
  }
  function d(a) {
    return deserializeResult(a, e[a.key]);
  }
  function f(a) {
    return l(a);
  }
  function g(a) {
    var c = a.operation;
    shouldSkip(c) || (a = serializeResult(a), e[c.key] = a);
  }
  var e = {}, k = [], m = function (a) {
    k.push(a.operation.key);
    1 === k.length && Promise.resolve().then(b);
  }, l = function (a) {
    return !shouldSkip(a) && void 0 !== e[a.key];
  }, h = function (b) {
    var e = b.client, h = b.forward;
    return function (b) {
      var q = a && "boolean" == typeof a.isClient ? !!a.isClient : !e.suspense, p = wonka.share(b);
      b = h(wonka.filter(c)(p));
      p = wonka.map(d)(wonka.filter(f)(p));
      q ? p = wonka.tap(m)(p) : b = wonka.tap(g)(b);
      return wonka.merge([b, p]);
    };
  };
  h.restoreData = function (a) {
    return fetchSource._extends(e, a);
  };
  h.extractData = function () {
    return fetchSource._extends({}, e);
  };
  a && a.initialState && h.restoreData(a.initialState);
  return h;
}, shouldSkip$1 = function (a) {
  return "mutation" !== (a = a.kind) && "query" !== a;
}, cacheExchange = function (a) {
  function b(a) {
    var c = m.get(a.key);
    "production" !== "development" && k(fetchSource._extends({}, {
      operation: a
    }, c ? {
      type: "cacheHit",
      message: "The result was successfully retried from the cache"
    } : {
      type: "cacheMiss",
      message: "The result could not be retrieved from the cache"
    }));
    c = fetchSource._extends({}, c, {
      operation: addMetadata(a, {
        cacheOutcome: c ? "hit" : "miss"
      })
    });
    "cache-and-network" === a.context.requestPolicy && (c.stale = !0, reexecuteOperation(e, a));
    return c;
  }
  function c(a) {
    return !shouldSkip$1(a) && n(a);
  }
  function d(a) {
    function c(a) {
      h.add(a);
    }
    var f, h, g, d = a.operation;
    if (d) {
      f = collectTypesFromResponse(a.data).concat(d.context.additionalTypenames || []);
      if ("mutation" === a.operation.kind) {
        h = new Set();
        "production" !== "development" && k({
          type: "cacheInvalidation",
          message: "The following typenames have been invalidated: " + f,
          operation: d,
          data: {
            typenames: f,
            response: a
          },
          source: "cacheExchange"
        });
        for (a = 0; a < f.length; a++) {
          (g = l[g = f[a]] || (l[g] = new Set())).forEach(c);
          g.clear();
        }
        h.forEach(function b(a) {
          m.has(a) && (d = m.get(a).operation, m.delete(a), reexecuteOperation(e, d));
        });
      } else if ("query" === d.kind && a.data) {
        for ((m.set(d.key, a), a = 0); a < f.length; a++) {
          (l[g = f[a]] || (l[g] = new Set())).add(d.key);
        }
      }
    }
  }
  function f(a) {
    return !shouldSkip$1(a) && !n(a);
  }
  var g = a.forward, e = a.client, k = a.dispatchDebug, m = new Map(), l = Object.create(null), h = _ref$2, n = function (a) {
    var b = a.context.requestPolicy;
    return "query" === a.kind && "network-only" !== b && ("cache-only" === b || m.has(a.key));
  };
  return function (a) {
    var e = wonka.share(a);
    a = wonka.map(b)(wonka.filter(c)(e));
    e = wonka.tap(d)(g(wonka.filter(_ref7)(wonka.map(_ref8)(wonka.merge([wonka.map(h)(wonka.filter(f)(e)), wonka.filter(_ref10)(e)])))));
    return wonka.merge([a, e]);
  };
}, reexecuteOperation = function (a, b) {
  return a.reexecuteOperation(makeOperation(b.kind, b, fetchSource._extends({}, b.context, {
    requestPolicy: "network-only"
  })));
}, subscriptionExchange = function (a) {
  function b(a) {
    return "subscription" === (a = a.kind) || !!d && ("query" === a || "mutation" === a);
  }
  var c = a.forwardSubscription, d = a.enableAllOperations;
  return function (a) {
    function d(a) {
      return !l(a);
    }
    var e = a.client, f = a.forward, m = function (a) {
      var b = c({
        key: a.key.toString(36),
        query: graphql.print(a.query),
        variables: a.variables,
        context: fetchSource._extends({}, a.context)
      });
      return wonka.make(function (c) {
        function d(c) {
          return g(fetchSource.makeResult(a, c));
        }
        function m(c) {
          return g(fetchSource.makeErrorResult(a, c));
        }
        function f() {
          h || (h = !0, "subscription" === a.kind && e.reexecuteOperation(makeOperation("teardown", a, a.context)), l());
        }
        var k, g = c.next, l = c.complete, h = !1;
        Promise.resolve().then(function () {
          h || (k = b.subscribe({
            next: d,
            error: m,
            complete: f
          }));
        });
        return function () {
          h = !0;
          k && k.unsubscribe();
        };
      });
    }, l = b;
    return function (a) {
      var b, c = wonka.share(a);
      a = wonka.mergeMap(function (a) {
        var b = a.key, d = wonka.filter(function (a) {
          return "teardown" === a.kind && a.key === b;
        })(c);
        return wonka.takeUntil(d)(m(a));
      })(wonka.filter(l)(c));
      b = f(wonka.filter(d)(c));
      return wonka.merge([a, b]);
    };
  };
}, debugExchange = function (a) {
  var d = a.forward;
  return "production" === "development" ? function b(a) {
    return d(a);
  } : function c(a) {
    return wonka.tap(_ref2)(d(wonka.tap(_ref3)(a)));
  };
}, dedupExchange = function (a) {
  var b = a.forward, c = a.dispatchDebug, d = new Set(), f = function (a) {
    var b = a.key, e = a.kind;
    if ("teardown" === e) {
      return (d.delete(b), !0);
    }
    if ("query" !== e && "subscription" !== e) {
      return !0;
    }
    e = d.has(b);
    d.add(b);
    e && "production" !== "development" && c({
      type: "dedup",
      message: "An operation has been deduped.",
      operation: a,
      source: "dedupExchange"
    });
    return !e;
  }, g = function (a) {
    d.delete(a.operation.key);
  };
  return function (a) {
    a = wonka.filter(f)(a);
    return wonka.tap(g)(b(a));
  };
}, fetchExchange = function (a) {
  var b = a.forward, c = a.dispatchDebug;
  return function (a) {
    var g, d = wonka.share(a);
    a = wonka.mergeMap(function (a) {
      var b = a.key, e = wonka.filter(function (a) {
        return "teardown" === a.kind && a.key === b;
      })(d), f = fetchSource.makeFetchBody(a), g = fetchSource.makeFetchURL(a, f), n = fetchSource.makeFetchOptions(a, f);
      "production" !== "development" && c({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: a,
        data: {
          url: g,
          fetchOptions: n
        },
        source: "fetchExchange"
      });
      return wonka.onPush(function (b) {
        var d = b.data ? void 0 : b.error;
        "production" !== "development" && c({
          type: d ? "fetchError" : "fetchSuccess",
          message: "A " + (d ? "failed" : "successful") + " fetch response has been returned.",
          operation: a,
          data: {
            url: g,
            fetchOptions: n,
            value: d || b
          },
          source: "fetchExchange"
        });
      })(wonka.takeUntil(e)(fetchSource.makeFetchSource(a, g, n)));
    })(wonka.filter(_ref$3)(d));
    g = b(wonka.filter(_ref2$1)(d));
    return wonka.merge([a, g]);
  };
}, fallbackExchange = function (a) {
  function b(a) {
    if ("teardown" !== a.kind && "production" !== "development") {
      var b = 'No exchange has handled operations of kind "' + a.kind + "\". Check whether you've added an exchange responsible for these operations.";
      "production" !== "development" && c({
        type: "fallbackCatch",
        message: b,
        operation: a,
        source: "fallbackExchange"
      });
      console.warn(b);
    }
  }
  var c = a.dispatchDebug;
  return function (a) {
    return wonka.filter(_ref$4)(wonka.tap(b)(a));
  };
}, fallbackExchangeIO = fallbackExchange({
  dispatchDebug: noop
}), composeExchanges = function (a) {
  return function (b) {
    var c = b.client, d = b.dispatchDebug;
    return a.reduceRight(function (a, b) {
      return b({
        client: c,
        forward: a,
        dispatchDebug: function (a) {
          "production" !== "development" && d(fetchSource._extends({}, {
            timestamp: Date.now(),
            source: b.name
          }, a));
        }
      });
    }, b.forward);
  };
}, errorExchange = function (a) {
  function b(a) {
    var b = a.error;
    a = a.operation;
    b && c(b, a);
  }
  var c = a.onError;
  return function (a) {
    var c = a.forward;
    return function (a) {
      return wonka.tap(b)(c(a));
    };
  };
}, defaultExchanges = [dedupExchange, cacheExchange, fetchExchange], createClient = function (a) {
  return new Client(a);
}, Client = function (a) {
  var d, f, g, e, k, c = this;
  this.activeOperations = Object.create(null);
  this.queue = [];
  this.createOperationContext = function (a) {
    a || (a = {});
    return fetchSource._extends({}, {
      url: c.url,
      fetchOptions: c.fetchOptions,
      fetch: c.fetch,
      preferGetMethod: c.preferGetMethod
    }, a, {
      suspense: a.suspense || !1 !== a.suspense && c.suspense,
      requestPolicy: a.requestPolicy || c.requestPolicy
    });
  };
  this.createRequestOperation = function (a, b, d) {
    return makeOperation(a, b, c.createOperationContext(d));
  };
  this.executeQuery = function (a, b) {
    a = c.createRequestOperation("query", a, b);
    return c.executeRequestOperation(a);
  };
  this.executeSubscription = function (a, b) {
    a = c.createRequestOperation("subscription", a, b);
    return c.executeRequestOperation(a);
  };
  this.executeMutation = function (a, b) {
    a = c.createRequestOperation("mutation", a, b);
    return c.executeRequestOperation(a);
  };
  if ("production" !== "development" && !a.url) {
    throw Error("You are creating an urql-client without a url.");
  }
  d = noop;
  if ("production" !== "development") {
    (f = (d = wonka.makeSubject()).next, g = d.source);
    this.subscribeToDebugTarget = function b(a) {
      return wonka.subscribe(a)(g);
    };
    d = f;
  }
  this.url = a.url;
  this.fetchOptions = a.fetchOptions;
  this.fetch = a.fetch;
  this.suspense = !!a.suspense;
  this.requestPolicy = a.requestPolicy || "cache-first";
  this.preferGetMethod = !!a.preferGetMethod;
  this.maskTypename = !!a.maskTypename;
  f = wonka.makeSubject();
  e = f.next;
  this.operations$ = f.source;
  k = !1;
  this.dispatchOperation = function (a) {
    k = !0;
    for (a && e(a); a = c.queue.shift(); ) {
      e(a);
    }
    k = !1;
  };
  this.reexecuteOperation = function (a) {
    if ("mutation" === a.kind || 0 < (c.activeOperations[a.key] || 0)) {
      (c.queue.push(a), k || Promise.resolve().then(c.dispatchOperation));
    }
  };
  a = composeExchanges(void 0 !== a.exchanges ? a.exchanges : defaultExchanges);
  this.results$ = wonka.share(a({
    client: this,
    dispatchDebug: d,
    forward: fallbackExchange({
      dispatchDebug: d
    })
  })(this.operations$));
  wonka.publish(this.results$);
};
Client.prototype.onOperationStart = function (a) {
  var b = a.key;
  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;
  this.dispatchOperation(a);
};
Client.prototype.onOperationEnd = function (a) {
  var b = a.key, c = this.activeOperations[b] || 0;
  if (0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1)) {
    for (b = this.queue.length - 1; 0 <= b; b--) {
      this.queue[b].key === a.key && this.queue.splice(b, 1);
    }
    this.dispatchOperation(makeOperation("teardown", a, a.context));
  }
};
Client.prototype.executeRequestOperation = function (a) {
  var f, g, c = this, d = wonka.filter(function (b) {
    return b.operation.key === a.key;
  })(this.results$);
  this.maskTypename && (d = wonka.map(_ref2$2)(d));
  if ("mutation" === a.kind) {
    return wonka.take(1)(wonka.onStart(function b() {
      return c.dispatchOperation(a);
    })(d));
  }
  (f = wonka.filter(function (b) {
    return "teardown" === b.kind && b.key === a.key;
  })(this.operations$), g = wonka.filter(function (b) {
    return b.kind === a.kind && b.key === a.key && "cache-only" !== b.context.requestPolicy;
  })(this.operations$));
  return wonka.onEnd(function () {
    c.onOperationEnd(a);
  })(wonka.onStart(function () {
    c.onOperationStart(a);
  })(wonka.switchMap(function (a) {
    return a.stale ? wonka.fromValue(a) : wonka.merge([wonka.fromValue(a), wonka.map(function () {
      return fetchSource._extends({}, a, {
        stale: !0
      });
    })(wonka.take(1)(g))]);
  })(wonka.takeUntil(f)(d))));
};
Client.prototype.query = function (a, b, c) {
  c && "boolean" == typeof c.suspense || (c = fetchSource._extends({}, c, {
    suspense: !1
  }));
  return withPromise(this.executeQuery(fetchSource.createRequest(a, b), c));
};
Client.prototype.readQuery = function (a, b, c) {
  var d = null;
  wonka.subscribe(function (a) {
    d = a;
  })(this.executeQuery(fetchSource.createRequest(a, b), c)).unsubscribe();
  return d;
};
Client.prototype.subscription = function (a, b, c) {
  return this.executeSubscription(fetchSource.createRequest(a, b), c);
};
Client.prototype.mutation = function (a, b, c) {
  return withPromise(this.executeMutation(fetchSource.createRequest(a, b), c));
};
exports.CombinedError = fetchSource.CombinedError;
exports.createRequest = fetchSource.createRequest;
exports.getOperationName = fetchSource.getOperationName;
exports.makeErrorResult = fetchSource.makeErrorResult;
exports.makeResult = fetchSource.makeResult;
exports.stringifyVariables = fetchSource.stringifyVariables;
exports.Client = Client;
exports.cacheExchange = cacheExchange;
exports.composeExchanges = composeExchanges;
exports.createClient = createClient;
exports.debugExchange = debugExchange;
exports.dedupExchange = dedupExchange;
exports.defaultExchanges = defaultExchanges;
exports.errorExchange = errorExchange;
exports.fallbackExchangeIO = fallbackExchangeIO;
exports.fetchExchange = fetchExchange;
exports.formatDocument = formatDocument;
exports.gql = function gql() {
  var a, b, c, d, f, g, e;
  for ((a = arguments, b = new Map(), c = [], d = [], f = Array.isArray(arguments[0]) ? arguments[0][0] : arguments[0] || "", g = 1); g < arguments.length; g++) {
    (e = a[g]) && e.definitions ? d.push.apply(d, e.definitions) : f += e;
    f += a[0][g];
  }
  applyDefinitions(b, c, fetchSource.keyDocument(f).definitions);
  applyDefinitions(b, c, d);
  return fetchSource.keyDocument({
    kind: graphql.Kind.DOCUMENT,
    definitions: c
  });
};
exports.makeOperation = makeOperation;
exports.maskTypename = maskTypename;
exports.ssrExchange = ssrExchange;
exports.subscriptionExchange = subscriptionExchange;

},{"graphql":"5gqTn","./408a05a6.js":"5WqIV","wonka":"79i4f"}],"5WqIV":[function(require,module,exports) {
"use strict";

function _toString() {
  return this.message;
}

function _extends() {
  return (_extends = Object.assign || function(a) {
    var b, c, d;
    for (b = 1; b < arguments.length; b++) {
      c = arguments[b];
      for (d in c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }).apply(this, arguments);
}

var graphql = require("graphql"), wonka = require("wonka"), generateErrorMessage = function(a, b) {
  var d = "";
  if (void 0 !== a) {
    return d = "[Network] " + a.message;
  }
  void 0 !== b && b.forEach((function c(a) {
    d += "[GraphQL] " + a.message + "\n";
  }));
  return d.trim();
}, rehydrateGraphQlError = function(a) {
  return "string" == typeof a ? new graphql.GraphQLError(a) : "object" == typeof a && a.message ? new graphql.GraphQLError(a.message, a.nodes, a.source, a.positions, a.path, a, a.extensions || {}) : a;
}, CombinedError = function(a) {
  function b(b) {
    var f, c = b.networkError, e = b.response;
    b = (b.graphQLErrors || []).map(rehydrateGraphQlError);
    f = generateErrorMessage(c, b);
    a.call(this, f);
    this.name = "CombinedError";
    this.message = f;
    this.graphQLErrors = b;
    this.networkError = c;
    this.response = e;
  }
  a && (b.__proto__ = a);
  (b.prototype = Object.create(a && a.prototype)).constructor = b;
  b.prototype.toString = _toString;
  return b;
}(Error), phash = function(a, b) {
  a |= 0;
  for (var c = 0, d = 0 | b.length; c < d; c++) {
    a = (a << 5) + a + b.charCodeAt(c);
  }
  return a;
}, hash = function(a) {
  return phash(5381, a) >>> 0;
}, seen = new Set, cache = new WeakMap, stringify = function(a) {
  var b, c, d, e, f, g;
  if (null === a || seen.has(a)) {
    return "null";
  }
  if ("object" != typeof a) {
    return JSON.stringify(a) || "";
  }
  if (a.toJSON) {
    return stringify(a.toJSON());
  }
  if (Array.isArray(a)) {
    for (b = "[", c = 0, d = a.length; c < d; c++) {
      0 < c && (b += ",");
      b += 0 < (e = stringify(a[c])).length ? e : "null";
    }
    return b + "]";
  }
  if (!(b = Object.keys(a).sort()).length && a.constructor && a.constructor !== Object) {
    return b = cache.get(a) || Math.random().toString(36).slice(2), cache.set(a, b), 
    '{"__key":"' + b + '"}';
  }
  seen.add(a);
  c = "{";
  d = 0;
  for (e = b.length; d < e; d++) {
    (g = stringify(a[f = b[d]])) && (1 < c.length && (c += ","), c += stringify(f) + ":" + g);
  }
  seen.delete(a);
  return c + "}";
}, stringifyVariables = function(a) {
  seen.clear();
  return stringify(a);
}, stringifyDocument = function(a) {
  var b = ("string" != typeof a ? a.loc && a.loc.source.body || graphql.print(a) : a).replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
  "string" != typeof a && (a.loc ? (a = "definitions" in a && getOperationName(a)) && (b = "# " + a + "\n" + b) : a.loc = {
    start: 0,
    end: b.length,
    source: {
      body: b,
      name: "gql",
      locationOffset: {
        line: 1,
        column: 1
      }
    }
  });
  return b;
}, docs = new Map, keyDocument = function(a) {
  if ("string" == typeof a) {
    var b = hash(stringifyDocument(a));
    a = docs.get(b) || graphql.parse(a, {
      noLocation: !0
    });
  } else {
    b = a.__key || hash(stringifyDocument(a)), a = docs.get(b) || a;
  }
  a.loc || stringifyDocument(a);
  a.__key = b;
  docs.set(b, a);
  return a;
}, createRequest = function(a, b) {
  a = keyDocument(a);
  return {
    key: b ? phash(a.__key, stringifyVariables(b)) >>> 0 : a.__key,
    query: a,
    variables: b || {}
  };
}, getOperationName = function(a) {
  var b, c, d;
  for (b = 0, c = a.definitions.length; b < c; b++) {
    if ((d = a.definitions[b]).kind === graphql.Kind.OPERATION_DEFINITION && d.name) {
      return d.name.value;
    }
  }
}, makeResult = function(a, b, c) {
  return {
    operation: a,
    data: b.data,
    error: Array.isArray(b.errors) ? new CombinedError({
      graphQLErrors: b.errors,
      response: c
    }) : void 0,
    extensions: "object" == typeof b.extensions && b.extensions || void 0
  };
}, makeErrorResult = function(a, b, c) {
  return {
    operation: a,
    data: void 0,
    error: new CombinedError({
      networkError: b,
      response: c
    }),
    extensions: void 0
  };
}, shouldUseGet = function(a) {
  return "query" === a.kind && !!a.context.preferGetMethod;
}, makeFetchBody = function(a) {
  return {
    query: graphql.print(a.query),
    operationName: getOperationName(a.query),
    variables: a.variables || void 0,
    extensions: void 0
  };
}, makeFetchURL = function(a, b) {
  var c = shouldUseGet(a);
  a = a.context.url;
  if (!c || !b) {
    return a;
  }
  c = [];
  b.operationName && c.push("operationName=" + encodeURIComponent(b.operationName));
  b.query && c.push("query=" + encodeURIComponent(b.query.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim()));
  b.variables && c.push("variables=" + encodeURIComponent(stringifyVariables(b.variables)));
  b.extensions && c.push("extensions=" + encodeURIComponent(stringifyVariables(b.extensions)));
  return a + "?" + c.join("&");
}, makeFetchOptions = function(a, b) {
  var c = shouldUseGet(a);
  return _extends({}, a = "function" == typeof a.context.fetchOptions ? a.context.fetchOptions() : a.context.fetchOptions || {}, {
    body: !c && b ? JSON.stringify(b) : void 0,
    method: c ? "GET" : "POST",
    headers: c ? a.headers : _extends({}, {
      "content-type": "application/json"
    }, a.headers)
  });
}, executeFetch = function(a, b, c) {
  var e, d = !1;
  return (a.context.fetch || fetch)(b, c).then((function(a) {
    e = a;
    d = 200 > a.status || a.status >= ("manual" === c.redirect ? 400 : 300);
    return a.json();
  })).then((function(b) {
    if (!("data" in b) && !("errors" in b)) {
      throw Error("No Content");
    }
    return makeResult(a, b, e);
  })).catch((function(b) {
    if ("AbortError" !== b.name) {
      return makeErrorResult(a, d ? Error(e.statusText) : b, e);
    }
  }));
}, makeFetchSource = function(a, b, c) {
  return wonka.make((function(d) {
    var e = d.next, f = d.complete, g = "undefined" != typeof AbortController ? new AbortController : null, h = !1;
    Promise.resolve().then((function() {
      if (!h) {
        return g && (c.signal = g.signal), executeFetch(a, b, c);
      }
    })).then((function(a) {
      h || (h = !0, a && e(a), f());
    }));
    return function() {
      h = !0;
      g && g.abort();
    };
  }));
};

exports.CombinedError = CombinedError;

exports._extends = _extends;

exports.createRequest = createRequest;

exports.getOperationName = getOperationName;

exports.keyDocument = keyDocument;

exports.makeErrorResult = makeErrorResult;

exports.makeFetchBody = makeFetchBody;

exports.makeFetchOptions = makeFetchOptions;

exports.makeFetchSource = makeFetchSource;

exports.makeFetchURL = makeFetchURL;

exports.makeResult = makeResult;

exports.stringifyDocument = stringifyDocument;

exports.stringifyVariables = stringifyVariables;

},{"graphql":"5gqTn","wonka":"79i4f"}],"79i4f":[function(require,module,exports) {
'use strict';

function __(a, b) {
  b.tag = a;
  return b;
}

function talkbackPlaceholder(a) {}

function fromArray(a) {
  return function (b) {
    var c = a.length;
    let e = !1,
      d = !1,
      f = !1,
      g = 0;
    b(
      __(0, [
        function (h) {
          if (h) {
            e = !0;
          } else if (d) {
            f = !0;
          } else {
            for (d = f = !0; f && !e; ) {
              g < c ? ((h = a[g]), (g = (g + 1) | 0), (f = !1), b(__(1, [h]))) : ((e = !0), b(0));
            }
            d = !1;
          }
        },
      ])
    );
  };
}

function _ref() {}

function _ref4(a) {
  a(0);
}

function empty(a) {
  let b = !1;
  a(
    __(0, [
      function (c) {
        c ? (b = !0) : b || a(0);
      },
    ])
  );
}

function some(a) {
  if (void 0 === a) {
    return ((a = [undefinedHeader, 0]).tag = 256), a;
  }
  if (null === a || a[0] !== undefinedHeader) {
    return a;
  }
  (a = [undefinedHeader, (a[1] + 1) | 0]).tag = 256;
  return a;
}

function valFromOption(a) {
  if (null === a || a[0] !== undefinedHeader) {
    return a;
  }
  if (0 !== (a = a[1])) {
    return [undefinedHeader, (a - 1) | 0];
  }
}

function concatMap(a) {
  return function (b) {
    return function (c) {
      function e(b) {
        'number' == typeof b
          ? k &&
            ((k = !1),
            void 0 !== (b = d.shift())
              ? ((b = a(valFromOption(b))), (k = !0), b(e))
              : m
              ? c(0)
              : g || ((g = !0), f(0)))
          : b.tag
          ? k && (c(b), l ? (l = !1) : h(0))
          : ((h = b = b[0]), (l = !1), b(0));
      }
      let d = [],
        f = talkbackPlaceholder,
        g = !1,
        h = talkbackPlaceholder,
        k = !1,
        l = !1,
        m = !1;
      b(function (b) {
        'number' == typeof b
          ? m ||
            ((m = !0),
            !k &&
              (function (a) {
                return 0 === a.length;
              })(d) &&
              c(0))
          : b.tag
          ? m || ((b = b[0]), (g = !1), k ? d.push(b) : ((b = a(b)), (k = !0), b(e)))
          : (f = b[0]);
      });
      c(
        __(0, [
          function (a) {
            if (a) {
              if ((m || ((m = !0), f(1)), k)) {
                return (k = !1), h(1);
              }
            } else {
              m || g || ((g = !0), f(0)), k && !l && ((l = !0), h(0));
            }
          },
        ])
      );
    };
  };
}

function _ref3(a) {
  return a;
}

function _ref4$1(a) {
  return a;
}

function _ref7(a) {
  return a(0);
}

function mergeMap(a) {
  return function (b) {
    return function (c) {
      let e = talkbackPlaceholder,
        d = !1,
        f = [],
        g = !1;
      b(function (b) {
        'number' == typeof b
          ? g || ((g = !0), 0 === f.length && c(0))
          : b.tag
          ? g ||
            ((d = !1),
            (function (a) {
              function b(a) {
                return a !== k;
              }
              var h = function (a) {
                'number' == typeof a
                  ? 0 !== f.length &&
                    ((f = f.filter(b)),
                    (a = 0 === f.length),
                    g && a ? c(0) : !d && a && ((d = !0), e(0)))
                  : a.tag
                  ? 0 !== f.length && (c(__(1, [a[0]])), k(0))
                  : ((k = a = a[0]), (f = f.concat(a)), a(0));
              };
              let k = talkbackPlaceholder;
              1 === a.length ? a(h) : a.bind(null, h);
            })(a(b[0])),
            d || ((d = !0), e(0)))
          : (e = b[0]);
      });
      c(
        __(0, [
          function (a) {
            a
              ? (g || ((g = !0), e(a)),
                f.forEach(function (c) {
                  return c(a);
                }),
                (f = []))
              : (d || g ? (d = !1) : ((d = !0), e(0)), f.forEach(_ref7));
          },
        ])
      );
    };
  };
}

function _ref8(a) {
  return a;
}

function _ref9(a) {
  return a;
}

function mergeAll(a) {
  return mergeMap(_ref9)(a);
}

function onPush(a) {
  return function (b) {
    return function (c) {
      let e = !1;
      return b(function (d) {
        if ('number' == typeof d) {
          e || ((e = !0), c(d));
        } else if (d.tag) {
          e || (a(d[0]), c(d));
        } else {
          var g = d[0];
          c(
            __(0, [
              function (a) {
                if (!e) {
                  return a && (e = !0), g(a);
                }
              },
            ])
          );
        }
      });
    };
  };
}

function _ref11(a) {
  a(0);
}

function switchMap(a) {
  return function (b) {
    return function (c) {
      function e(a) {
        h &&
          ('number' == typeof a
            ? ((h = !1), l ? c(a) : f || ((f = !0), d(0)))
            : a.tag
            ? (c(a), k ? (k = !1) : g(0))
            : ((g = a = a[0]), (k = !1), a(0)));
      }
      let d = talkbackPlaceholder,
        f = !1,
        g = talkbackPlaceholder,
        h = !1,
        k = !1,
        l = !1;
      b(function (b) {
        'number' == typeof b
          ? l || ((l = !0), h || c(0))
          : b.tag
          ? l ||
            (h && (g(1), (g = talkbackPlaceholder)),
            f ? (f = !1) : ((f = !0), d(0)),
            (b = a(b[0])),
            (h = !0),
            b(e))
          : (d = b[0]);
      });
      c(
        __(0, [
          function (a) {
            if (a) {
              if ((l || ((l = !0), d(1)), h)) {
                return (h = !1), g(1);
              }
            } else {
              l || f || ((f = !0), d(0)), h && !k && ((k = !0), g(0));
            }
          },
        ])
      );
    };
  };
}

function _ref16(a) {
  return a;
}

function takeLast(a) {
  return function (b) {
    return function (c) {
      let e = [],
        d = talkbackPlaceholder;
      return b(function (b) {
        'number' == typeof b
          ? fromArray(e)(c)
          : b.tag
          ? (e.length >= a && 0 < a && e.shift(), e.push(b[0]), d(0))
          : ((b = b[0]), 0 >= a ? (b(1), empty(c)) : ((d = b), b(0)));
      });
    };
  };
}

function subscribe(a) {
  return function (b) {
    let c = talkbackPlaceholder,
      e = !1;
    b(function (b) {
      'number' == typeof b ? (e = !0) : b.tag ? e || (a(b[0]), c(0)) : ((c = b = b[0]), b(0));
    });
    return {
      unsubscribe: function (a) {
        if (!e) {
          return (e = !0), c(1);
        }
      },
    };
  };
}

function _ref$1(a) {}

function _ref$2(a) {}

function _ref2() {}

function _ref3$1() {}

function _ref3$2(a, b, c) {
  a.addEventListener(b, c);
}

function _ref4$2(a, b, c) {
  a.removeEventListener(b, c);
}

var undefinedHeader,
  buffer$1,
  combine$1,
  concatMap$1,
  concatAll$1,
  concat$1,
  filter$1,
  map$1,
  mergeMap$1,
  merge$1,
  mergeAll$1,
  flatten$1,
  onEnd$1,
  onPush$1,
  tap$1,
  onStart$1,
  sample$1,
  scan$1,
  share$1,
  skip$1,
  skipUntil$1,
  skipWhile$1,
  switchMap$1,
  switchAll$1,
  take$1,
  takeLast$1,
  takeUntil$1,
  takeWhile$1,
  subscribe$1,
  forEach$1,
  publish$1,
  toArray$1,
  observableSymbol,
  fromObservable$2,
  toObservable$2,
  fromCallbag$2,
  toCallbag$2,
  debounce$1,
  delay$1,
  throttle$1,
  toPromise$1,
  interval$1,
  fromDomEvent$1,
  fromPromise$1,
  fromArray$1 = fromArray,
  empty$1 = empty;

undefinedHeader = [];

(buffer$1 = function (a) {
  return function (b) {
    return function (c) {
      function e(a) {
        'number' == typeof a
          ? k || ((k = !0), f(1), 0 < d.length && c(__(1, [d])), c(0))
          : a.tag
          ? !k && 0 < d.length && ((a = d), (d = []), c(__(1, [a])))
          : (g = a[0]);
      }
      let d = [],
        f = talkbackPlaceholder,
        g = talkbackPlaceholder,
        h = !1,
        k = !1;
      b(function (b) {
        'number' == typeof b
          ? k || ((k = !0), g(1), 0 < d.length && c(__(1, [d])), c(0))
          : b.tag
          ? k || (d.push(b[0]), h ? (h = !1) : ((h = !0), f(0), g(0)))
          : ((f = b[0]), a(e));
      });
      c(
        __(0, [
          function (c) {
            if (!k) {
              if (c) {
                return (k = !0), f(1), g(1);
              }
              if (!h) {
                return (h = !0), f(0), g(0);
              }
            }
          },
        ])
      );
    };
  };
}),
  (combine$1 = function (a, b) {
    return (function (a, b) {
      return function (c) {
        let e = talkbackPlaceholder,
          d = talkbackPlaceholder,
          f = void 0,
          g = void 0,
          h = !1,
          k = 0,
          l = !1;
        a(function (a) {
          var b = g;
          'number' == typeof a
            ? 1 > k
              ? (k = (k + 1) | 0)
              : l || ((l = !0), c(0))
            : a.tag
            ? ((a = a[0]),
              void 0 !== b
                ? l || ((f = some(a)), (h = !1), c(__(1, [[a, valFromOption(b)]])))
                : ((f = some(a)), h ? (h = !1) : d(0)))
            : (e = a[0]);
        });
        b(function (a) {
          var b = f;
          'number' == typeof a
            ? 1 > k
              ? (k = (k + 1) | 0)
              : l || ((l = !0), c(0))
            : a.tag
            ? ((a = a[0]),
              void 0 !== b
                ? l || ((g = some(a)), (h = !1), c(__(1, [[valFromOption(b), a]])))
                : ((g = some(a)), h ? (h = !1) : e(0)))
            : (d = a[0]);
        });
        c(
          __(0, [
            function (a) {
              if (!l) {
                if (a) {
                  return (l = !0), e(1), d(1);
                }
                if (!h) {
                  return (h = !0), e(a), d(a);
                }
              }
            },
          ])
        );
      };
    })(a, b);
  }),
  (concatMap$1 = concatMap),
  (concatAll$1 = function (a) {
    return concatMap(_ref3)(a);
  }),
  (concat$1 = function (a) {
    return concatMap(_ref4$1)(fromArray(a));
  }),
  (filter$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = talkbackPlaceholder;
        return b(function (d) {
          'number' == typeof d ? c(d) : d.tag ? (a(d[0]) ? c(d) : e(0)) : ((e = d[0]), c(d));
        });
      };
    };
  }),
  (map$1 = function (a) {
    return function (b) {
      return function (c) {
        return b(function (b) {
          b = 'number' == typeof b ? 0 : b.tag ? __(1, [a(b[0])]) : __(0, [b[0]]);
          c(b);
        });
      };
    };
  }),
  (mergeMap$1 = mergeMap),
  (merge$1 = function (a) {
    return mergeMap(_ref8)(fromArray(a));
  }),
  (mergeAll$1 = mergeAll),
  (flatten$1 = mergeAll),
  (onEnd$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = !1;
        return b(function (d) {
          if ('number' == typeof d) {
            if (e) {
              return;
            }
            e = !0;
            c(d);
            return a();
          }
          if (d.tag) {
            e || c(d);
          } else {
            var b = d[0];
            c(
              __(0, [
                function (c) {
                  if (!e) {
                    return c ? ((e = !0), b(c), a()) : b(c);
                  }
                },
              ])
            );
          }
        });
      };
    };
  }),
  (onPush$1 = onPush),
  (tap$1 = onPush),
  (onStart$1 = function (a) {
    return function (b) {
      return function (c) {
        return b(function (b) {
          'number' == typeof b ? c(b) : b.tag ? c(b) : (c(b), a());
        });
      };
    };
  }),
  (sample$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = talkbackPlaceholder,
          d = talkbackPlaceholder,
          f = void 0,
          g = !1,
          h = !1;
        b(function (a) {
          'number' == typeof a
            ? h || ((h = !0), d(1), c(0))
            : a.tag
            ? ((f = some(a[0])), g ? (g = !1) : ((g = !0), d(0), e(0)))
            : (e = a[0]);
        });
        a(function (a) {
          var b = f;
          'number' == typeof a
            ? h || ((h = !0), e(1), c(0))
            : a.tag
            ? void 0 === b || h || ((f = void 0), c(__(1, [valFromOption(b)])))
            : (d = a[0]);
        });
        c(
          __(0, [
            function (a) {
              if (!h) {
                if (a) {
                  return (h = !0), e(1), d(1);
                }
                if (!g) {
                  return (g = !0), e(0), d(0);
                }
              }
            },
          ])
        );
      };
    };
  }),
  (scan$1 = function (a, b) {
    return (function (a, b) {
      return function (c) {
        return function (e) {
          let d = b;
          return c(function (c) {
            'number' == typeof c
              ? (c = 0)
              : c.tag
              ? ((d = a(d, c[0])), (c = __(1, [d])))
              : (c = __(0, [c[0]]));
            e(c);
          });
        };
      };
    })(a, b);
  }),
  (share$1 = function (a) {
    function b(a) {
      'number' == typeof a
        ? (c.forEach(_ref11), (c = []))
        : a.tag
        ? ((d = !1),
          c.forEach(function (c) {
            c(a);
          }))
        : (e = a[0]);
    }
    let c = [],
      e = talkbackPlaceholder,
      d = !1;
    return function (f) {
      function g(a) {
        return a !== f;
      }
      c = c.concat(f);
      1 === c.length && a(b);
      f(
        __(0, [
          function (a) {
            if (a) {
              if (((c = c.filter(g)), 0 === c.length)) {
                return e(1);
              }
            } else {
              d || ((d = !0), e(a));
            }
          },
        ])
      );
    };
  }),
  (skip$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = talkbackPlaceholder,
          d = a;
        return b(function (a) {
          'number' == typeof a
            ? c(a)
            : a.tag
            ? 0 < d
              ? ((d = (d - 1) | 0), e(0))
              : c(a)
            : ((e = a[0]), c(a));
        });
      };
    };
  }),
  (skipUntil$1 = function (a) {
    return function (b) {
      return function (c) {
        function e(a) {
          'number' == typeof a
            ? g && ((k = !0), d(1))
            : a.tag
            ? ((g = !1), f(1))
            : ((f = a = a[0]), a(0));
        }
        let d = talkbackPlaceholder,
          f = talkbackPlaceholder,
          g = !0,
          h = !1,
          k = !1;
        b(function (b) {
          'number' == typeof b
            ? (g && f(1), (k = !0), c(0))
            : b.tag
            ? g || k
              ? h
                ? (h = !1)
                : ((h = !0), d(0), f(0))
              : ((h = !1), c(b))
            : ((d = b[0]), a(e));
        });
        c(
          __(0, [
            function (a) {
              if (!k) {
                if (a) {
                  if (((k = !0), d(1), g)) {
                    return f(1);
                  }
                } else {
                  h || ((h = !0), g && f(0), d(0));
                }
              }
            },
          ])
        );
      };
    };
  }),
  (skipWhile$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = talkbackPlaceholder,
          d = !0;
        return b(function (b) {
          'number' == typeof b
            ? c(b)
            : b.tag
            ? d
              ? a(b[0])
                ? e(0)
                : ((d = !1), c(b))
              : c(b)
            : ((e = b[0]), c(b));
        });
      };
    };
  }),
  (switchMap$1 = switchMap),
  (switchAll$1 = function (a) {
    return switchMap(_ref16)(a);
  }),
  (take$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = !1,
          d = 0,
          f = talkbackPlaceholder;
        b(function (b) {
          'number' == typeof b
            ? e || ((e = !0), c(0))
            : b.tag
            ? d < a && !e && ((d = (d + 1) | 0), c(b), !e && d >= a && ((e = !0), c(0), f(1)))
            : ((b = b[0]), 0 >= a ? ((e = !0), c(0), b(1)) : (f = b));
        });
        c(
          __(0, [
            function (b) {
              if (!e) {
                if (b) {
                  return (e = !0), f(1);
                }
                if (d < a) {
                  return f(0);
                }
              }
            },
          ])
        );
      };
    };
  }),
  (takeLast$1 = takeLast),
  (takeUntil$1 = function (a) {
    return function (b) {
      return function (c) {
        function e(a) {
          'number' != typeof a && (a.tag ? ((d = !0), f(1), c(0)) : ((g = a = a[0]), a(0)));
        }
        let d = !1,
          f = talkbackPlaceholder,
          g = talkbackPlaceholder;
        b(function (b) {
          'number' == typeof b
            ? d || ((d = !0), g(1), c(0))
            : b.tag
            ? d || c(b)
            : ((f = b[0]), a(e));
        });
        c(
          __(0, [
            function (a) {
              if (!d) {
                return a ? ((d = !0), f(1), g(1)) : f(0);
              }
            },
          ])
        );
      };
    };
  }),
  (takeWhile$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = talkbackPlaceholder,
          d = !1;
        return b(function (b) {
          'number' == typeof b
            ? d || ((d = !0), c(0))
            : b.tag
            ? d || (a(b[0]) ? c(b) : ((d = !0), c(0), e(1)))
            : ((e = b[0]), c(b));
        });
      };
    };
  });

(subscribe$1 = subscribe),
  (forEach$1 = function (a) {
    return function (b) {
      subscribe(a)(b);
    };
  }),
  (publish$1 = function (a) {
    return subscribe(_ref$1)(a);
  }),
  (toArray$1 = function (a) {
    let b = [],
      c = talkbackPlaceholder,
      e = !1;
    a(function (a) {
      'number' == typeof a ? (e = !0) : a.tag ? (b.push(a[0]), c(0)) : ((c = a = a[0]), a(0));
    });
    e || c(1);
    return b;
  });

observableSymbol =
  'function' == typeof Symbol
    ? Symbol.observable || (Symbol.observable = Symbol('observable'))
    : '@@observable';

(fromObservable$2 = function (a) {
  var b = void 0 !== a[observableSymbol] ? a[observableSymbol]() : a;
  return function (a) {
    var c = b.subscribe({
      next: function (b) {
        a(__(1, [b]));
      },
      complete: function () {
        a(0);
      },
      error: _ref$2,
    });
    a(
      __(0, [
        function (a) {
          if (a) {
            return c.unsubscribe();
          }
        },
      ])
    );
  };
}),
  (toObservable$2 = function (a) {
    var b = {
      subscribe: function (b, e, d) {
        var c = ('object' == typeof b ? b.next.bind(b) : b) || _ref2,
          g = ('object' == typeof b ? b.complete.bind(b) : d) || _ref3$1;
        let h = talkbackPlaceholder,
          k = !1;
        a(function (a) {
          if ('number' == typeof a) {
            return (k = !0), g();
          }
          if (a.tag) {
            if (k) {
              return;
            }
            c(a[0]);
            return h(0);
          }
          h = a = a[0];
          a(0);
        });
        return {
          unsubscribe: function () {
            if (!k) {
              return (this.closed = !1), (k = !0), h(1);
            }
          },
          closed: !1,
        };
      },
    };
    b[observableSymbol] = function (a) {
      return b;
    };
    return b;
  }),
  (fromCallbag$2 = function (a) {
    return function (b) {
      var c = function (a, c) {
        switch (a) {
          case 0:
            b(
              __(0, [
                function (a) {
                  return a ? c(2) : c(1);
                },
              ])
            );
            break;

          case 1:
            b(__(1, [c]));
            break;

          case 2:
            b(0);
        }
      };
      return 2 === a.length ? a(0, c) : a.bind(null, 0, c);
    };
  }),
  (toCallbag$2 = function (a) {
    return function (b, c) {
      if (0 === b) {
        return a(function (a) {
          if ('number' == typeof a) {
            return 2 === c.length ? c(2, void 0) : c.bind(null, 2, void 0);
          }
          if (a.tag) {
            return (a = a[0]), 2 === c.length ? c(1, a) : c.bind(null, 1, a);
          }
          var b = a[0];
          a = function (a) {
            switch (a) {
              case 1:
                b(0);
                break;

              case 2:
                b(1);
            }
          };
          return 2 === c.length ? c(0, a) : c.bind(null, 0, a);
        });
      }
    };
  }),
  (debounce$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = void 0,
          d = !1,
          f = !1;
        var g = function (a) {
          void 0 !== (a = e) && ((e = void 0), clearTimeout(valFromOption(a)));
        };
        return b(function (b) {
          if ('number' == typeof b) {
            f || ((f = !0), void 0 !== e ? (d = !0) : c(0));
          } else if (b.tag) {
            f ||
              (g(),
              (e = some(
                setTimeout(function (a) {
                  e = void 0;
                  c(b);
                  d && c(0);
                }, a(b[0]))
              )));
          } else {
            var l = b[0];
            c(
              __(0, [
                function (a) {
                  if (!f) {
                    return a ? ((f = !0), (d = !1), g(), l(1)) : l(0);
                  }
                },
              ])
            );
          }
        });
      };
    };
  }),
  (delay$1 = function (a) {
    return function (b) {
      return function (c) {
        let e = 0;
        return b(function (b) {
          'number' == typeof b || b.tag
            ? ((e = (e + 1) | 0),
              setTimeout(function (a) {
                0 !== e && ((e = (e - 1) | 0), c(b));
              }, a))
            : c(b);
        });
      };
    };
  }),
  (throttle$1 = function (a) {
    return function (b) {
      return function (c) {
        function e(a) {
          f = void 0;
          d = !1;
        }
        let d = !1,
          f = void 0;
        var g = function (a) {
          void 0 !== (a = f) && clearTimeout(valFromOption(a));
        };
        return b(function (b) {
          if ('number' == typeof b) {
            g(), c(0);
          } else if (b.tag) {
            d || ((d = !0), g(), (f = some(setTimeout(e, a(b[0])))), c(b));
          } else {
            var h = b[0];
            c(
              __(0, [
                function (a) {
                  return a ? (g(), h(1)) : h(a);
                },
              ])
            );
          }
        });
      };
    };
  }),
  (toPromise$1 = function (a) {
    return new Promise(function (b, c) {
      takeLast(1)(a)(function (a) {
        if ('number' != typeof a) {
          if (a.tag) {
            b(a[0]);
          } else {
            a[0](0);
          }
        }
      });
    });
  }),
  (interval$1 = function (a) {
    return function (b) {
      let c = 0;
      var e = setInterval(function (a) {
        a = c;
        c = (c + 1) | 0;
        b(__(1, [a]));
      }, a);
      b(
        __(0, [
          function (a) {
            a && clearInterval(e);
          },
        ])
      );
    };
  }),
  (fromDomEvent$1 = function (a, b) {
    return (function (a, b) {
      return function (c) {
        var e = _ref3$2,
          d = _ref4$2,
          f = function (a) {
            c(__(1, [a]));
          };
        c(
          __(0, [
            function (c) {
              if (c) {
                return d(a, b, f);
              }
            },
          ])
        );
        return e(a, b, f);
      };
    })(a, b);
  }),
  (fromPromise$1 = function (a) {
    return function (b) {
      let c = !1;
      a.then(function (a) {
        c || (b(__(1, [a])), b(0));
        return Promise.resolve(void 0);
      });
      b(
        __(0, [
          function (a) {
            a && (c = !0);
          },
        ])
      );
    };
  });

exports.buffer = buffer$1;

exports.combine = combine$1;

exports.concat = concat$1;

exports.concatAll = concatAll$1;

exports.concatMap = concatMap$1;

exports.debounce = debounce$1;

exports.delay = delay$1;

exports.empty = empty$1;

exports.filter = filter$1;

exports.flatten = flatten$1;

exports.forEach = forEach$1;

exports.fromArray = fromArray$1;

exports.fromCallbag = fromCallbag$2;

exports.fromDomEvent = fromDomEvent$1;

exports.fromList = function (a) {
  return function (b) {
    let c = !1,
      e = !1,
      d = !1,
      f = a;
    b(
      __(0, [
        function (a) {
          if (a) {
            c = !0;
          } else if (e) {
            d = !0;
          } else {
            for (e = d = !0; d && !c; ) {
              (a = f) ? ((f = a[1]), (d = !1), b(__(1, [a[0]]))) : ((c = !0), b(0));
            }
            e = !1;
          }
        },
      ])
    );
  };
};

exports.fromObservable = fromObservable$2;

exports.fromPromise = fromPromise$1;

exports.fromValue = function (a) {
  return function (b) {
    let c = !1;
    b(
      __(0, [
        function (e) {
          e ? (c = !0) : c || ((c = !0), b(__(1, [a])), b(0));
        },
      ])
    );
  };
};

exports.interval = interval$1;

exports.make = function (a) {
  return function (b) {
    let c = _ref,
      e = !1;
    c = a({
      next: function (d) {
        e || b(__(1, [d]));
      },
      complete: function (d) {
        e || ((e = !0), b(0));
      },
    });
    b(
      __(0, [
        function (d) {
          if (d && !e) {
            return (e = !0), c();
          }
        },
      ])
    );
  };
};

exports.makeSubject = function (a) {
  let b = [],
    c = !1;
  return {
    source: function (c) {
      function d(d) {
        return d !== c;
      }
      b = b.concat(c);
      c(
        __(0, [
          function (c) {
            c && (b = b.filter(d));
          },
        ])
      );
    },
    next: function (a) {
      c ||
        b.forEach(function (c) {
          c(__(1, [a]));
        });
    },
    complete: function (a) {
      c || ((c = !0), b.forEach(_ref4));
    },
  };
};

exports.map = map$1;

exports.merge = merge$1;

exports.mergeAll = mergeAll$1;

exports.mergeMap = mergeMap$1;

exports.never = function (a) {
  a(__(0, [talkbackPlaceholder]));
};

exports.onEnd = onEnd$1;

exports.onPush = onPush$1;

exports.onStart = onStart$1;

exports.pipe = function () {
  for (var a = arguments, b = arguments[0], c = 1, e = arguments.length; c < e; c++) {
    b = a[c](b);
  }
  return b;
};

exports.publish = publish$1;

exports.sample = sample$1;

exports.scan = scan$1;

exports.share = share$1;

exports.skip = skip$1;

exports.skipUntil = skipUntil$1;

exports.skipWhile = skipWhile$1;

exports.subscribe = subscribe$1;

exports.switchAll = switchAll$1;

exports.switchMap = switchMap$1;

exports.take = take$1;

exports.takeLast = takeLast$1;

exports.takeUntil = takeUntil$1;

exports.takeWhile = takeWhile$1;

exports.tap = tap$1;

exports.throttle = throttle$1;

exports.toArray = toArray$1;

exports.toCallbag = toCallbag$2;

exports.toObservable = toObservable$2;

exports.toPromise = toPromise$1;

},{}],"vBrbg":[function(require,module,exports) {
var define;
var global = arguments[3];
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.graphqlWs = {}));
})(this, function (exports) {
  "use strict";
  /**
  *
  * protocol
  *
  */
  /** The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](/PROTOCOL.md).*/
  const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';
  // Extremely small optimisation, reduces runtime prototype traversal
  const baseHasOwnProperty = Object.prototype.hasOwnProperty;
  function isObject(val) {
    return typeof val === 'object' && val !== null;
  }
  function areGraphQLErrors(obj) {
    return Array.isArray(obj) && // must be at least one error
    obj.length > 0 && // error has at least a message
    obj.every(ob => ('message' in ob));
  }
  function hasOwnProperty(obj, prop) {
    return baseHasOwnProperty.call(obj, prop);
  }
  function hasOwnObjectProperty(obj, prop) {
    return baseHasOwnProperty.call(obj, prop) && isObject(obj[prop]);
  }
  function hasOwnStringProperty(obj, prop) {
    return baseHasOwnProperty.call(obj, prop) && typeof obj[prop] === 'string';
  }
  /**
  *
  * message
  *
  */
  /** Types of messages allowed to be sent by the client/server over the WS protocol.*/
  exports.MessageType = void 0;
  (function (MessageType) {
    MessageType["ConnectionInit"] = "connection_init";
    MessageType["ConnectionAck"] = "connection_ack";
    MessageType["Subscribe"] = "subscribe";
    MessageType["Next"] = "next";
    MessageType["Error"] = "error";
    MessageType["Complete"] = "complete";
  })(exports.MessageType || (exports.MessageType = {}));
  /** Checks if the provided value is a message.*/
  function isMessage(val) {
    if (isObject(val)) {
      // all messages must have the `type` prop
      if (!hasOwnStringProperty(val, 'type')) {
        return false;
      }
      // validate other properties depending on the `type`
      switch (val.type) {
        case exports.MessageType.ConnectionInit:
          // the connection init message can have optional payload object
          return !hasOwnProperty(val, 'payload') || val.payload === undefined || isObject(val.payload);
        case exports.MessageType.ConnectionAck:
          // the connection ack message can have optional payload object too
          return !hasOwnProperty(val, 'payload') || val.payload === undefined || isObject(val.payload);
        case exports.MessageType.Subscribe:
          return hasOwnStringProperty(val, 'id') && hasOwnObjectProperty(val, 'payload') && (!hasOwnProperty(val.payload, 'operationName') || val.payload.operationName === undefined || val.payload.operationName === null || typeof val.payload.operationName === 'string') && hasOwnStringProperty(val.payload, 'query') && (!hasOwnProperty(val.payload, 'variables') || val.payload.variables === undefined || val.payload.variables === null || hasOwnObjectProperty(val.payload, 'variables'));
        case exports.MessageType.Next:
          return hasOwnStringProperty(val, 'id') && hasOwnObjectProperty(val, 'payload');
        case exports.MessageType.Error:
          return hasOwnStringProperty(val, 'id') && areGraphQLErrors(val.payload);
        case exports.MessageType.Complete:
          return hasOwnStringProperty(val, 'id');
        default:
          return false;
      }
    }
    return false;
  }
  /** Parses the raw websocket message data to a valid message.*/
  function parseMessage(data) {
    if (isMessage(data)) {
      return data;
    }
    if (typeof data !== 'string') {
      throw new Error('Message not parsable');
    }
    const message = JSON.parse(data);
    if (!isMessage(message)) {
      throw new Error('Invalid message');
    }
    return message;
  }
  /** Stringifies a valid message ready to be sent through the socket.*/
  function stringifyMessage(msg) {
    if (!isMessage(msg)) {
      throw new Error('Cannot stringify invalid message');
    }
    return JSON.stringify(msg);
  }
  /**
  *
  * client
  *
  */
  /** Creates a disposable GraphQL over WebSocket client.*/
  function createClient(options) {
    const {url, connectionParams, lazy = true, onNonLazyError = console.error, keepAlive = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {
      let retryDelay = 1000;
      // start with 1s delay
      for (let i = 0; i < retries; i++) {
        retryDelay *= 2;
      }
      await new Promise(resolve => setTimeout(resolve, retryDelay + // add random timeout from 300ms to 3s
      Math.floor(Math.random() * (3000 - 300) + 300)));
    }, isFatalConnectionProblem = errOrCloseEvent => // non `CloseEvent`s are fatal by default
    !isLikeCloseEvent(errOrCloseEvent), on, webSocketImpl, /**
    * Generates a v4 UUID to be used as the ID using `Math`
    * as the random number generator. Supply your own generator
    * in case you need more uniqueness.
    *
    * Reference: https://gist.github.com/jed/982883
    */
    generateID = function generateUUID() {
      return ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx').replace(/[xy]/g, c => {
        const r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    }} = options;
    let ws;
    if (webSocketImpl) {
      if (!isWebSocket(webSocketImpl)) {
        throw new Error('Invalid WebSocket implementation provided');
      }
      ws = webSocketImpl;
    } else if (typeof WebSocket !== 'undefined') {
      ws = WebSocket;
    } else if (typeof global !== 'undefined') {
      ws = global.WebSocket || // @ts-expect-error: Support more browsers
      global.MozWebSocket;
    } else if (typeof window !== 'undefined') {
      ws = window.WebSocket || // @ts-expect-error: Support more browsers
      window.MozWebSocket;
    }
    if (!ws) throw new Error('WebSocket implementation missing');
    const WebSocketImpl = ws;
    // websocket status emitter, subscriptions are handled differently
    const emitter = (() => {
      const message = (() => {
        const listeners = {};
        return {
          on(id, listener) {
            listeners[id] = listener;
            return () => {
              delete listeners[id];
            };
          },
          emit(message) {
            var _a;
            if (('id' in message)) (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);
          }
        };
      })();
      const listeners = {
        connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],
        connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],
        message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],
        closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],
        error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : []
      };
      return {
        onMessage: message.on,
        on(event, listener) {
          const l = listeners[event];
          l.push(listener);
          return () => {
            l.splice(l.indexOf(listener), 1);
          };
        },
        emit(event, ...args) {
          for (const listener of listeners[event]) {
            // @ts-expect-error: The args should fit
            listener(...args);
          }
        }
      };
    })();
    let connecting, locks = 0, retrying = false, retries = 0, disposed = false;
    async function connect() {
      // locks increment only when not retrying because
      // the same lock retries connect on abrupt closures
      if (!retrying) locks++;
      const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : connecting = new Promise((connected, denied) => (async () => {
        if (retrying) {
          await retryWait(retries);
          retries++;
        }
        emitter.emit('connecting');
        const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);
        socket.onerror = err => {
          // we let the onclose reject the promise for correct retry handling
          emitter.emit('error', err);
        };
        socket.onclose = event => {
          connecting = undefined;
          emitter.emit('closed', event);
          denied(event);
        };
        socket.onopen = async () => {
          try {
            socket.send(stringifyMessage({
              type: exports.MessageType.ConnectionInit,
              payload: typeof connectionParams === 'function' ? await connectionParams() : connectionParams
            }));
          } catch (err) {
            socket.close(4400, err instanceof Error ? err.message : new Error(err).message);
          }
        };
        let acknowledged = false;
        socket.onmessage = ({data}) => {
          try {
            const message = parseMessage(data);
            emitter.emit('message', message);
            if (acknowledged) return;
            // already connected and acknowledged
            if (message.type !== exports.MessageType.ConnectionAck) throw new Error(`First message cannot be of type ${message.type}`);
            acknowledged = true;
            emitter.emit('connected', socket, message.payload);
            // connected = socket opened + acknowledged
            retries = 0;
            // reset the retries on connect
            connected([socket, new Promise((_, closed) => socket.addEventListener('close', closed))]);
          } catch (err) {
            socket.close(4400, err instanceof Error ? err.message : new Error(err).message);
          }
        };
      })()));
      let release = () => {};
      const released = new Promise(resolve => release = resolve);
      return [socket, release, Promise.race([// wait for
      released.then(() => {
        if (!--locks) {
          // if no more connection locks are present, complete the connection
          const complete = () => socket.close(1000, 'Normal Closure');
          if (isFinite(keepAlive) && keepAlive > 0) {
            // if the keepalive is set, allow for the specified calmdown time and
            // then complete. but only if no lock got created in the meantime and
            // if the socket is still open
            setTimeout(() => {
              if (!locks && socket.readyState === WebSocketImpl.OPEN) complete();
            }, keepAlive);
          } else {
            // otherwise complete immediately
            complete();
          }
        }
      }), // or
      throwOnClose])];
    }
    /**
    * Checks the `connect` problem and evaluates if the client should retry.
    */
    function shouldRetryConnectOrThrow(errOrCloseEvent) {
      // some close codes are worth reporting immediately
      if (isLikeCloseEvent(errOrCloseEvent) && [1002, 1011, 4400, 4401, 4409, 4429].includes(errOrCloseEvent.code)) throw errOrCloseEvent;
      // disposed or normal closure (completed), shouldnt try again
      if (disposed || isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000) return false;
      // retries are not allowed or we tried to many times, report error
      if (!retryAttempts || retries >= retryAttempts) throw errOrCloseEvent;
      // throw fatal connection problems immediately
      if (isFatalConnectionProblem(errOrCloseEvent)) throw errOrCloseEvent;
      // looks good, start retrying
      return retrying = true;
    }
    // in non-lazy (hot?) mode always hold one connection lock to persist the socket
    if (!lazy) {
      (async () => {
        for (; ; ) {
          try {
            const [, , throwOnClose] = await connect();
            await throwOnClose;
          } catch (errOrCloseEvent) {
            try {
              if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;
            } catch (errOrCloseEvent) {
              // report thrown error, no further retries
              return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);
            }
          }
        }
      })();
    }
    return {
      on: emitter.on,
      subscribe(payload, sink) {
        const id = generateID();
        let completed = false, releaser = () => {
          // for handling completions before connect
          completed = true;
        };
        (async () => {
          for (; ; ) {
            try {
              const [socket, release, waitForReleaseOrThrowOnClose] = await connect();
              // if completed while waiting for connect, release the connection lock right away
              if (completed) return release();
              const unlisten = emitter.onMessage(id, message => {
                switch (message.type) {
                  case exports.MessageType.Next:
                    {
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      sink.next(message.payload);
                      return;
                    }
                  case exports.MessageType.Error:
                    {
                      completed = true;
                      sink.error(message.payload);
                      releaser();
                      // TODO-db-201025 calling releaser will complete the sink, meaning that both the `error` and `complete` will be
                      // called. neither promises or observables care; once they settle, additional calls to the resolvers will be ignored
                      return;
                    }
                  case exports.MessageType.Complete:
                    {
                      completed = true;
                      releaser();
                      // release completes the sink
                      return;
                    }
                }
              });
              socket.send(stringifyMessage({
                id,
                type: exports.MessageType.Subscribe,
                payload
              }));
              releaser = () => {
                if (!completed && socket.readyState === WebSocketImpl.OPEN) // if not completed already and socket is open, send complete message to server on release
                socket.send(stringifyMessage({
                  id,
                  type: exports.MessageType.Complete
                }));
                release();
              };
              // either the releaser will be called, connection completed and
              // the promise resolved or the socket closed and the promise rejected.
              // whatever happens though, we want to stop listening for messages
              await waitForReleaseOrThrowOnClose.finally(unlisten);
              return;
            } catch (errOrCloseEvent) {
              if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;
            }
          }
        })().catch(sink.error).// rejects on close events and errors
        then(sink.complete);
        // resolves on release or normal closure
        return () => releaser();
      },
      async dispose() {
        disposed = true;
        if (connecting) {
          // if there is a connection, close it
          const [socket] = await connecting;
          socket.close(1000, 'Normal Closure');
        }
      }
    };
  }
  function isLikeCloseEvent(val) {
    return isObject(val) && ('code' in val) && ('reason' in val);
  }
  function isWebSocket(val) {
    return typeof val === 'function' && ('constructor' in val) && ('CLOSED' in val) && ('CLOSING' in val) && ('CONNECTING' in val) && ('OPEN' in val);
  }
  exports.GRAPHQL_TRANSPORT_WS_PROTOCOL = GRAPHQL_TRANSPORT_WS_PROTOCOL;
  exports.createClient = createClient;
  exports.isMessage = isMessage;
  exports.parseMessage = parseMessage;
  exports.stringifyMessage = stringifyMessage;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"LbjU3":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var safeQueryName = function (name) {
    return (function (s) {
        var $1 = s === "";
        if ($1) {
            return "unnamed_query";
        };
        return s;
    })(Data_String_CodeUnits.fromCharArray(Data_Array.filter(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Char_Unicode.isAlphaNum)(Data_Eq.eq(Data_Eq.eqChar)("_")))(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_String_CodeUnits.toCharArray(name))(function (ch) {
        var $0 = ch === " ";
        if ($0) {
            return "_";
        };
        return ch;
    }))));
};
module.exports = {
    safeQueryName: safeQueryName
};

},{"../Data.Array/index.js":"6mZxP","../Data.Char.Unicode/index.js":"suaXP","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.String.CodeUnits/index.js":"2YsDe"}],"suaXP":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Char_Unicode_Internal = require("../Data.Char.Unicode.Internal/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var UppercaseLetter = (function () {
    function UppercaseLetter() {

    };
    UppercaseLetter.value = new UppercaseLetter();
    return UppercaseLetter;
})();
var LowercaseLetter = (function () {
    function LowercaseLetter() {

    };
    LowercaseLetter.value = new LowercaseLetter();
    return LowercaseLetter;
})();
var TitlecaseLetter = (function () {
    function TitlecaseLetter() {

    };
    TitlecaseLetter.value = new TitlecaseLetter();
    return TitlecaseLetter;
})();
var ModifierLetter = (function () {
    function ModifierLetter() {

    };
    ModifierLetter.value = new ModifierLetter();
    return ModifierLetter;
})();
var OtherLetter = (function () {
    function OtherLetter() {

    };
    OtherLetter.value = new OtherLetter();
    return OtherLetter;
})();
var NonSpacingMark = (function () {
    function NonSpacingMark() {

    };
    NonSpacingMark.value = new NonSpacingMark();
    return NonSpacingMark;
})();
var SpacingCombiningMark = (function () {
    function SpacingCombiningMark() {

    };
    SpacingCombiningMark.value = new SpacingCombiningMark();
    return SpacingCombiningMark;
})();
var EnclosingMark = (function () {
    function EnclosingMark() {

    };
    EnclosingMark.value = new EnclosingMark();
    return EnclosingMark;
})();
var DecimalNumber = (function () {
    function DecimalNumber() {

    };
    DecimalNumber.value = new DecimalNumber();
    return DecimalNumber;
})();
var LetterNumber = (function () {
    function LetterNumber() {

    };
    LetterNumber.value = new LetterNumber();
    return LetterNumber;
})();
var OtherNumber = (function () {
    function OtherNumber() {

    };
    OtherNumber.value = new OtherNumber();
    return OtherNumber;
})();
var ConnectorPunctuation = (function () {
    function ConnectorPunctuation() {

    };
    ConnectorPunctuation.value = new ConnectorPunctuation();
    return ConnectorPunctuation;
})();
var DashPunctuation = (function () {
    function DashPunctuation() {

    };
    DashPunctuation.value = new DashPunctuation();
    return DashPunctuation;
})();
var OpenPunctuation = (function () {
    function OpenPunctuation() {

    };
    OpenPunctuation.value = new OpenPunctuation();
    return OpenPunctuation;
})();
var ClosePunctuation = (function () {
    function ClosePunctuation() {

    };
    ClosePunctuation.value = new ClosePunctuation();
    return ClosePunctuation;
})();
var InitialQuote = (function () {
    function InitialQuote() {

    };
    InitialQuote.value = new InitialQuote();
    return InitialQuote;
})();
var FinalQuote = (function () {
    function FinalQuote() {

    };
    FinalQuote.value = new FinalQuote();
    return FinalQuote;
})();
var OtherPunctuation = (function () {
    function OtherPunctuation() {

    };
    OtherPunctuation.value = new OtherPunctuation();
    return OtherPunctuation;
})();
var MathSymbol = (function () {
    function MathSymbol() {

    };
    MathSymbol.value = new MathSymbol();
    return MathSymbol;
})();
var CurrencySymbol = (function () {
    function CurrencySymbol() {

    };
    CurrencySymbol.value = new CurrencySymbol();
    return CurrencySymbol;
})();
var ModifierSymbol = (function () {
    function ModifierSymbol() {

    };
    ModifierSymbol.value = new ModifierSymbol();
    return ModifierSymbol;
})();
var OtherSymbol = (function () {
    function OtherSymbol() {

    };
    OtherSymbol.value = new OtherSymbol();
    return OtherSymbol;
})();
var Space = (function () {
    function Space() {

    };
    Space.value = new Space();
    return Space;
})();
var LineSeparator = (function () {
    function LineSeparator() {

    };
    LineSeparator.value = new LineSeparator();
    return LineSeparator;
})();
var ParagraphSeparator = (function () {
    function ParagraphSeparator() {

    };
    ParagraphSeparator.value = new ParagraphSeparator();
    return ParagraphSeparator;
})();
var Control = (function () {
    function Control() {

    };
    Control.value = new Control();
    return Control;
})();
var Format = (function () {
    function Format() {

    };
    Format.value = new Format();
    return Format;
})();
var Surrogate = (function () {
    function Surrogate() {

    };
    Surrogate.value = new Surrogate();
    return Surrogate;
})();
var PrivateUse = (function () {
    function PrivateUse() {

    };
    PrivateUse.value = new PrivateUse();
    return PrivateUse;
})();
var NotAssigned = (function () {
    function NotAssigned() {

    };
    NotAssigned.value = new NotAssigned();
    return NotAssigned;
})();
var unicodeCatToGeneralCat = function (v) {
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LU) {
        return UppercaseLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LL) {
        return LowercaseLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LT) {
        return TitlecaseLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LM) {
        return ModifierLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LO) {
        return OtherLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MN) {
        return NonSpacingMark.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MC) {
        return SpacingCombiningMark.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ME) {
        return EnclosingMark.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ND) {
        return DecimalNumber.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NL) {
        return LetterNumber.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NO) {
        return OtherNumber.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PC) {
        return ConnectorPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PD) {
        return DashPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PS) {
        return OpenPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PE) {
        return ClosePunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PI) {
        return InitialQuote.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PF) {
        return FinalQuote.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PO) {
        return OtherPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SM) {
        return MathSymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SC) {
        return CurrencySymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SK) {
        return ModifierSymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SO) {
        return OtherSymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZS) {
        return Space.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZL) {
        return LineSeparator.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZP) {
        return ParagraphSeparator.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CC) {
        return Control.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CF) {
        return Format.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CS) {
        return Surrogate.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CO) {
        return PrivateUse.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CN) {
        return NotAssigned.value;
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 192, column 1 - line 192, column 61): " + [ v.constructor.name ]);
};
var toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
var toTitle = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowtitle);
var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
var showGeneralCategory = new Data_Show.Show(function (v) {
    if (v instanceof UppercaseLetter) {
        return "UppercaseLetter";
    };
    if (v instanceof LowercaseLetter) {
        return "LowercaseLetter";
    };
    if (v instanceof TitlecaseLetter) {
        return "TitlecaseLetter";
    };
    if (v instanceof ModifierLetter) {
        return "ModifierLetter";
    };
    if (v instanceof OtherLetter) {
        return "OtherLetter";
    };
    if (v instanceof NonSpacingMark) {
        return "NonSpacingMark";
    };
    if (v instanceof SpacingCombiningMark) {
        return "SpacingCombiningMark";
    };
    if (v instanceof EnclosingMark) {
        return "EnclosingMark";
    };
    if (v instanceof DecimalNumber) {
        return "DecimalNumber";
    };
    if (v instanceof LetterNumber) {
        return "LetterNumber";
    };
    if (v instanceof OtherNumber) {
        return "OtherNumber";
    };
    if (v instanceof ConnectorPunctuation) {
        return "ConnectorPunctuation";
    };
    if (v instanceof DashPunctuation) {
        return "DashPunctuation";
    };
    if (v instanceof OpenPunctuation) {
        return "OpenPunctuation";
    };
    if (v instanceof ClosePunctuation) {
        return "ClosePunctuation";
    };
    if (v instanceof InitialQuote) {
        return "InitialQuote";
    };
    if (v instanceof FinalQuote) {
        return "FinalQuote";
    };
    if (v instanceof OtherPunctuation) {
        return "OtherPunctuation";
    };
    if (v instanceof MathSymbol) {
        return "MathSymbol";
    };
    if (v instanceof CurrencySymbol) {
        return "CurrencySymbol";
    };
    if (v instanceof ModifierSymbol) {
        return "ModifierSymbol";
    };
    if (v instanceof OtherSymbol) {
        return "OtherSymbol";
    };
    if (v instanceof Space) {
        return "Space";
    };
    if (v instanceof LineSeparator) {
        return "LineSeparator";
    };
    if (v instanceof ParagraphSeparator) {
        return "ParagraphSeparator";
    };
    if (v instanceof Control) {
        return "Control";
    };
    if (v instanceof Format) {
        return "Format";
    };
    if (v instanceof Surrogate) {
        return "Surrogate";
    };
    if (v instanceof PrivateUse) {
        return "PrivateUse";
    };
    if (v instanceof NotAssigned) {
        return "NotAssigned";
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 224, column 1 - line 254, column 37): " + [ v.constructor.name ]);
});
var isUpper = function ($50) {
    return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
};
var isSpace = function (c) {
    var uc = Data_Char.toCharCode(c);
    var $14 = uc <= 823;
    if ($14) {
        return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
    };
    return Data_Char_Unicode_Internal.uIswspace(Data_Char.toCharCode(c));
};
var isPrint = function ($51) {
    return Data_Char_Unicode_Internal.uIswprint(Data_Char.toCharCode($51));
};
var isOctDigit = function (c) {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    return diff <= 7 && diff >= 0;
};
var isLower = function ($52) {
    return Data_Char_Unicode_Internal.uIswlower(Data_Char.toCharCode($52));
};
var isLatin1 = function (c) {
    return c <= "\xff";
};
var isDigit = function (c) {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    return diff <= 9 && diff >= 0;
};
var isHexDigit = function (c) {
    return isDigit(c) || ((function () {
        var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
        return diff <= 5 && diff >= 0;
    })() || (function () {
        var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
        return diff <= 5 && diff >= 0;
    })());
};
var isControl = function ($53) {
    return Data_Char_Unicode_Internal.uIswcntrl(Data_Char.toCharCode($53));
};
var isAsciiUpper = function (c) {
    return c >= "A" && c <= "Z";
};
var isAsciiLower = function (c) {
    return c >= "a" && c <= "z";
};
var isAscii = function (c) {
    return c < "\x80";
};
var isAlphaNum = function ($54) {
    return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($54));
};
var isAlpha = function ($55) {
    return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($55));
};
var generalCategory = (function () {
    var $56 = Data_Functor.map(Data_Maybe.functorMaybe)(unicodeCatToGeneralCat);
    return function ($57) {
        return $56(Data_Char_Unicode_Internal.uGencat(Data_Char.toCharCode($57)));
    };
})();
var isLetter = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof UppercaseLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LowercaseLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof TitlecaseLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherLetter) {
        return true;
    };
    return false;
};
var isMark = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof NonSpacingMark) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof SpacingCombiningMark) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof EnclosingMark) {
        return true;
    };
    return false;
};
var isNumber = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof DecimalNumber) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LetterNumber) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherNumber) {
        return true;
    };
    return false;
};
var isPunctuation = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ConnectorPunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof DashPunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OpenPunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ClosePunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof InitialQuote) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof FinalQuote) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherPunctuation) {
        return true;
    };
    return false;
};
var isSeparator = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof Space) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LineSeparator) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ParagraphSeparator) {
        return true;
    };
    return false;
};
var isSymbol = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof MathSymbol) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof CurrencySymbol) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierSymbol) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherSymbol) {
        return true;
    };
    return false;
};
var generalCatToUnicodeCat = function (v) {
    if (v instanceof UppercaseLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LU.value;
    };
    if (v instanceof LowercaseLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LL.value;
    };
    if (v instanceof TitlecaseLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LT.value;
    };
    if (v instanceof ModifierLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LM.value;
    };
    if (v instanceof OtherLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LO.value;
    };
    if (v instanceof NonSpacingMark) {
        return Data_Char_Unicode_Internal.NUMCAT_MN.value;
    };
    if (v instanceof SpacingCombiningMark) {
        return Data_Char_Unicode_Internal.NUMCAT_MC.value;
    };
    if (v instanceof EnclosingMark) {
        return Data_Char_Unicode_Internal.NUMCAT_ME.value;
    };
    if (v instanceof DecimalNumber) {
        return Data_Char_Unicode_Internal.NUMCAT_ND.value;
    };
    if (v instanceof LetterNumber) {
        return Data_Char_Unicode_Internal.NUMCAT_NL.value;
    };
    if (v instanceof OtherNumber) {
        return Data_Char_Unicode_Internal.NUMCAT_NO.value;
    };
    if (v instanceof ConnectorPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PC.value;
    };
    if (v instanceof DashPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PD.value;
    };
    if (v instanceof OpenPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PS.value;
    };
    if (v instanceof ClosePunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PE.value;
    };
    if (v instanceof InitialQuote) {
        return Data_Char_Unicode_Internal.NUMCAT_PI.value;
    };
    if (v instanceof FinalQuote) {
        return Data_Char_Unicode_Internal.NUMCAT_PF.value;
    };
    if (v instanceof OtherPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PO.value;
    };
    if (v instanceof MathSymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SM.value;
    };
    if (v instanceof CurrencySymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SC.value;
    };
    if (v instanceof ModifierSymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SK.value;
    };
    if (v instanceof OtherSymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SO.value;
    };
    if (v instanceof Space) {
        return Data_Char_Unicode_Internal.NUMCAT_ZS.value;
    };
    if (v instanceof LineSeparator) {
        return Data_Char_Unicode_Internal.NUMCAT_ZL.value;
    };
    if (v instanceof ParagraphSeparator) {
        return Data_Char_Unicode_Internal.NUMCAT_ZP.value;
    };
    if (v instanceof Control) {
        return Data_Char_Unicode_Internal.NUMCAT_CC.value;
    };
    if (v instanceof Format) {
        return Data_Char_Unicode_Internal.NUMCAT_CF.value;
    };
    if (v instanceof Surrogate) {
        return Data_Char_Unicode_Internal.NUMCAT_CS.value;
    };
    if (v instanceof PrivateUse) {
        return Data_Char_Unicode_Internal.NUMCAT_CO.value;
    };
    if (v instanceof NotAssigned) {
        return Data_Char_Unicode_Internal.NUMCAT_CN.value;
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 160, column 1 - line 160, column 61): " + [ v.constructor.name ]);
};
var generalCatToInt = function (v) {
    if (v instanceof UppercaseLetter) {
        return 1;
    };
    if (v instanceof LowercaseLetter) {
        return 2;
    };
    if (v instanceof TitlecaseLetter) {
        return 3;
    };
    if (v instanceof ModifierLetter) {
        return 4;
    };
    if (v instanceof OtherLetter) {
        return 5;
    };
    if (v instanceof NonSpacingMark) {
        return 6;
    };
    if (v instanceof SpacingCombiningMark) {
        return 7;
    };
    if (v instanceof EnclosingMark) {
        return 8;
    };
    if (v instanceof DecimalNumber) {
        return 9;
    };
    if (v instanceof LetterNumber) {
        return 10;
    };
    if (v instanceof OtherNumber) {
        return 11;
    };
    if (v instanceof ConnectorPunctuation) {
        return 12;
    };
    if (v instanceof DashPunctuation) {
        return 13;
    };
    if (v instanceof OpenPunctuation) {
        return 14;
    };
    if (v instanceof ClosePunctuation) {
        return 15;
    };
    if (v instanceof InitialQuote) {
        return 16;
    };
    if (v instanceof FinalQuote) {
        return 17;
    };
    if (v instanceof OtherPunctuation) {
        return 18;
    };
    if (v instanceof MathSymbol) {
        return 19;
    };
    if (v instanceof CurrencySymbol) {
        return 20;
    };
    if (v instanceof ModifierSymbol) {
        return 21;
    };
    if (v instanceof OtherSymbol) {
        return 22;
    };
    if (v instanceof Space) {
        return 23;
    };
    if (v instanceof LineSeparator) {
        return 24;
    };
    if (v instanceof ParagraphSeparator) {
        return 25;
    };
    if (v instanceof Control) {
        return 26;
    };
    if (v instanceof Format) {
        return 27;
    };
    if (v instanceof Surrogate) {
        return 28;
    };
    if (v instanceof PrivateUse) {
        return 29;
    };
    if (v instanceof NotAssigned) {
        return 30;
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 128, column 1 - line 128, column 42): " + [ v.constructor.name ]);
};
var eqGeneralCategory = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof UppercaseLetter && v1 instanceof UppercaseLetter) {
            return true;
        };
        if (v instanceof LowercaseLetter && v1 instanceof LowercaseLetter) {
            return true;
        };
        if (v instanceof TitlecaseLetter && v1 instanceof TitlecaseLetter) {
            return true;
        };
        if (v instanceof ModifierLetter && v1 instanceof ModifierLetter) {
            return true;
        };
        if (v instanceof OtherLetter && v1 instanceof OtherLetter) {
            return true;
        };
        if (v instanceof NonSpacingMark && v1 instanceof NonSpacingMark) {
            return true;
        };
        if (v instanceof SpacingCombiningMark && v1 instanceof SpacingCombiningMark) {
            return true;
        };
        if (v instanceof EnclosingMark && v1 instanceof EnclosingMark) {
            return true;
        };
        if (v instanceof DecimalNumber && v1 instanceof DecimalNumber) {
            return true;
        };
        if (v instanceof LetterNumber && v1 instanceof LetterNumber) {
            return true;
        };
        if (v instanceof OtherNumber && v1 instanceof OtherNumber) {
            return true;
        };
        if (v instanceof ConnectorPunctuation && v1 instanceof ConnectorPunctuation) {
            return true;
        };
        if (v instanceof DashPunctuation && v1 instanceof DashPunctuation) {
            return true;
        };
        if (v instanceof OpenPunctuation && v1 instanceof OpenPunctuation) {
            return true;
        };
        if (v instanceof ClosePunctuation && v1 instanceof ClosePunctuation) {
            return true;
        };
        if (v instanceof InitialQuote && v1 instanceof InitialQuote) {
            return true;
        };
        if (v instanceof FinalQuote && v1 instanceof FinalQuote) {
            return true;
        };
        if (v instanceof OtherPunctuation && v1 instanceof OtherPunctuation) {
            return true;
        };
        if (v instanceof MathSymbol && v1 instanceof MathSymbol) {
            return true;
        };
        if (v instanceof CurrencySymbol && v1 instanceof CurrencySymbol) {
            return true;
        };
        if (v instanceof ModifierSymbol && v1 instanceof ModifierSymbol) {
            return true;
        };
        if (v instanceof OtherSymbol && v1 instanceof OtherSymbol) {
            return true;
        };
        if (v instanceof Space && v1 instanceof Space) {
            return true;
        };
        if (v instanceof LineSeparator && v1 instanceof LineSeparator) {
            return true;
        };
        if (v instanceof ParagraphSeparator && v1 instanceof ParagraphSeparator) {
            return true;
        };
        if (v instanceof Control && v1 instanceof Control) {
            return true;
        };
        if (v instanceof Format && v1 instanceof Format) {
            return true;
        };
        if (v instanceof Surrogate && v1 instanceof Surrogate) {
            return true;
        };
        if (v instanceof PrivateUse && v1 instanceof PrivateUse) {
            return true;
        };
        if (v instanceof NotAssigned && v1 instanceof NotAssigned) {
            return true;
        };
        return false;
    };
});
var ordGeneralCategory = new Data_Ord.Ord(function () {
    return eqGeneralCategory;
}, function (catA) {
    return function (catB) {
        return Data_Ord.compare(Data_Ord.ordInt)(generalCatToInt(catA))(generalCatToInt(catB));
    };
});
var digitToInt = function (c) {
    var hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
    var hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
    var dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    var result = (function () {
        if (dec <= 9 && dec >= 0) {
            return new Data_Maybe.Just(dec);
        };
        if (hexLower <= 5 && hexLower >= 0) {
            return Data_Maybe.Just.create(hexLower + 10 | 0);
        };
        if (hexUpper <= 5 && hexUpper >= 0) {
            return Data_Maybe.Just.create(hexUpper + 10 | 0);
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Char.Unicode (line 547, column 5 - line 547, column 24): " + [  ]);
    })();
    return result;
};
var boundedGeneralCategory = new Data_Bounded.Bounded(function () {
    return ordGeneralCategory;
}, UppercaseLetter.value, NotAssigned.value);
module.exports = {
    isAscii: isAscii,
    isAsciiLower: isAsciiLower,
    isAsciiUpper: isAsciiUpper,
    isLatin1: isLatin1,
    isLower: isLower,
    isUpper: isUpper,
    isAlpha: isAlpha,
    isAlphaNum: isAlphaNum,
    isLetter: isLetter,
    isDigit: isDigit,
    isOctDigit: isOctDigit,
    isHexDigit: isHexDigit,
    isControl: isControl,
    isPrint: isPrint,
    isSpace: isSpace,
    isSymbol: isSymbol,
    isSeparator: isSeparator,
    isPunctuation: isPunctuation,
    isMark: isMark,
    isNumber: isNumber,
    digitToInt: digitToInt,
    toLower: toLower,
    toUpper: toUpper,
    toTitle: toTitle,
    UppercaseLetter: UppercaseLetter,
    LowercaseLetter: LowercaseLetter,
    TitlecaseLetter: TitlecaseLetter,
    ModifierLetter: ModifierLetter,
    OtherLetter: OtherLetter,
    NonSpacingMark: NonSpacingMark,
    SpacingCombiningMark: SpacingCombiningMark,
    EnclosingMark: EnclosingMark,
    DecimalNumber: DecimalNumber,
    LetterNumber: LetterNumber,
    OtherNumber: OtherNumber,
    ConnectorPunctuation: ConnectorPunctuation,
    DashPunctuation: DashPunctuation,
    OpenPunctuation: OpenPunctuation,
    ClosePunctuation: ClosePunctuation,
    InitialQuote: InitialQuote,
    FinalQuote: FinalQuote,
    OtherPunctuation: OtherPunctuation,
    MathSymbol: MathSymbol,
    CurrencySymbol: CurrencySymbol,
    ModifierSymbol: ModifierSymbol,
    OtherSymbol: OtherSymbol,
    Space: Space,
    LineSeparator: LineSeparator,
    ParagraphSeparator: ParagraphSeparator,
    Control: Control,
    Format: Format,
    Surrogate: Surrogate,
    PrivateUse: PrivateUse,
    NotAssigned: NotAssigned,
    unicodeCatToGeneralCat: unicodeCatToGeneralCat,
    generalCatToInt: generalCatToInt,
    generalCatToUnicodeCat: generalCatToUnicodeCat,
    generalCategory: generalCategory,
    showGeneralCategory: showGeneralCategory,
    eqGeneralCategory: eqGeneralCategory,
    ordGeneralCategory: ordGeneralCategory,
    boundedGeneralCategory: boundedGeneralCategory
};

},{"./foreign.js":"58YP4","../Data.Boolean/index.js":"4zMHm","../Data.Bounded/index.js":"4LlpW","../Data.Char/index.js":"4eQiB","../Data.Char.Unicode.Internal/index.js":"7FYpb","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Maybe/index.js":"1Cwwt","../Data.Ord/index.js":"4OchK","../Data.Show/index.js":"6nX0c"}],"58YP4":[function(require,module,exports) {
exports.withCharCode = function(f) {
    return function (c) {
        return String.fromCharCode(f(c.charCodeAt()));
    }
}

},{}],"4eQiB":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Enum = require("../Data.Enum/index.js");
var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
module.exports = {
    toCharCode: toCharCode,
    fromCharCode: fromCharCode
};

},{"../Data.Enum/index.js":"6tFfO"}],"7FYpb":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var NUMCAT_LU = (function () {
    function NUMCAT_LU() {

    };
    NUMCAT_LU.value = new NUMCAT_LU();
    return NUMCAT_LU;
})();
var NUMCAT_LL = (function () {
    function NUMCAT_LL() {

    };
    NUMCAT_LL.value = new NUMCAT_LL();
    return NUMCAT_LL;
})();
var NUMCAT_LT = (function () {
    function NUMCAT_LT() {

    };
    NUMCAT_LT.value = new NUMCAT_LT();
    return NUMCAT_LT;
})();
var NUMCAT_LM = (function () {
    function NUMCAT_LM() {

    };
    NUMCAT_LM.value = new NUMCAT_LM();
    return NUMCAT_LM;
})();
var NUMCAT_LO = (function () {
    function NUMCAT_LO() {

    };
    NUMCAT_LO.value = new NUMCAT_LO();
    return NUMCAT_LO;
})();
var NUMCAT_MN = (function () {
    function NUMCAT_MN() {

    };
    NUMCAT_MN.value = new NUMCAT_MN();
    return NUMCAT_MN;
})();
var NUMCAT_MC = (function () {
    function NUMCAT_MC() {

    };
    NUMCAT_MC.value = new NUMCAT_MC();
    return NUMCAT_MC;
})();
var NUMCAT_ME = (function () {
    function NUMCAT_ME() {

    };
    NUMCAT_ME.value = new NUMCAT_ME();
    return NUMCAT_ME;
})();
var NUMCAT_ND = (function () {
    function NUMCAT_ND() {

    };
    NUMCAT_ND.value = new NUMCAT_ND();
    return NUMCAT_ND;
})();
var NUMCAT_NL = (function () {
    function NUMCAT_NL() {

    };
    NUMCAT_NL.value = new NUMCAT_NL();
    return NUMCAT_NL;
})();
var NUMCAT_NO = (function () {
    function NUMCAT_NO() {

    };
    NUMCAT_NO.value = new NUMCAT_NO();
    return NUMCAT_NO;
})();
var NUMCAT_PC = (function () {
    function NUMCAT_PC() {

    };
    NUMCAT_PC.value = new NUMCAT_PC();
    return NUMCAT_PC;
})();
var NUMCAT_PD = (function () {
    function NUMCAT_PD() {

    };
    NUMCAT_PD.value = new NUMCAT_PD();
    return NUMCAT_PD;
})();
var NUMCAT_PS = (function () {
    function NUMCAT_PS() {

    };
    NUMCAT_PS.value = new NUMCAT_PS();
    return NUMCAT_PS;
})();
var NUMCAT_PE = (function () {
    function NUMCAT_PE() {

    };
    NUMCAT_PE.value = new NUMCAT_PE();
    return NUMCAT_PE;
})();
var NUMCAT_PI = (function () {
    function NUMCAT_PI() {

    };
    NUMCAT_PI.value = new NUMCAT_PI();
    return NUMCAT_PI;
})();
var NUMCAT_PF = (function () {
    function NUMCAT_PF() {

    };
    NUMCAT_PF.value = new NUMCAT_PF();
    return NUMCAT_PF;
})();
var NUMCAT_PO = (function () {
    function NUMCAT_PO() {

    };
    NUMCAT_PO.value = new NUMCAT_PO();
    return NUMCAT_PO;
})();
var NUMCAT_SM = (function () {
    function NUMCAT_SM() {

    };
    NUMCAT_SM.value = new NUMCAT_SM();
    return NUMCAT_SM;
})();
var NUMCAT_SC = (function () {
    function NUMCAT_SC() {

    };
    NUMCAT_SC.value = new NUMCAT_SC();
    return NUMCAT_SC;
})();
var NUMCAT_SK = (function () {
    function NUMCAT_SK() {

    };
    NUMCAT_SK.value = new NUMCAT_SK();
    return NUMCAT_SK;
})();
var NUMCAT_SO = (function () {
    function NUMCAT_SO() {

    };
    NUMCAT_SO.value = new NUMCAT_SO();
    return NUMCAT_SO;
})();
var NUMCAT_ZS = (function () {
    function NUMCAT_ZS() {

    };
    NUMCAT_ZS.value = new NUMCAT_ZS();
    return NUMCAT_ZS;
})();
var NUMCAT_ZL = (function () {
    function NUMCAT_ZL() {

    };
    NUMCAT_ZL.value = new NUMCAT_ZL();
    return NUMCAT_ZL;
})();
var NUMCAT_ZP = (function () {
    function NUMCAT_ZP() {

    };
    NUMCAT_ZP.value = new NUMCAT_ZP();
    return NUMCAT_ZP;
})();
var NUMCAT_CC = (function () {
    function NUMCAT_CC() {

    };
    NUMCAT_CC.value = new NUMCAT_CC();
    return NUMCAT_CC;
})();
var NUMCAT_CF = (function () {
    function NUMCAT_CF() {

    };
    NUMCAT_CF.value = new NUMCAT_CF();
    return NUMCAT_CF;
})();
var NUMCAT_CS = (function () {
    function NUMCAT_CS() {

    };
    NUMCAT_CS.value = new NUMCAT_CS();
    return NUMCAT_CS;
})();
var NUMCAT_CO = (function () {
    function NUMCAT_CO() {

    };
    NUMCAT_CO.value = new NUMCAT_CO();
    return NUMCAT_CO;
})();
var NUMCAT_CN = (function () {
    function NUMCAT_CN() {

    };
    NUMCAT_CN.value = new NUMCAT_CN();
    return NUMCAT_CN;
})();
var ConversionRule = function (x) {
    return x;
};
var CharBlock = function (x) {
    return x;
};
var showUnicodeCategory = new Data_Show.Show(function (v) {
    if (v instanceof NUMCAT_LU) {
        return "NUMCAT_LU";
    };
    if (v instanceof NUMCAT_LL) {
        return "NUMCAT_LL";
    };
    if (v instanceof NUMCAT_LT) {
        return "NUMCAT_LT";
    };
    if (v instanceof NUMCAT_LM) {
        return "NUMCAT_LM";
    };
    if (v instanceof NUMCAT_LO) {
        return "NUMCAT_LO";
    };
    if (v instanceof NUMCAT_MN) {
        return "NUMCAT_MN";
    };
    if (v instanceof NUMCAT_MC) {
        return "NUMCAT_MC";
    };
    if (v instanceof NUMCAT_ME) {
        return "NUMCAT_ME";
    };
    if (v instanceof NUMCAT_ND) {
        return "NUMCAT_ND";
    };
    if (v instanceof NUMCAT_NL) {
        return "NUMCAT_NL";
    };
    if (v instanceof NUMCAT_NO) {
        return "NUMCAT_NO";
    };
    if (v instanceof NUMCAT_PC) {
        return "NUMCAT_PC";
    };
    if (v instanceof NUMCAT_PD) {
        return "NUMCAT_PD";
    };
    if (v instanceof NUMCAT_PS) {
        return "NUMCAT_PS";
    };
    if (v instanceof NUMCAT_PE) {
        return "NUMCAT_PE";
    };
    if (v instanceof NUMCAT_PI) {
        return "NUMCAT_PI";
    };
    if (v instanceof NUMCAT_PF) {
        return "NUMCAT_PF";
    };
    if (v instanceof NUMCAT_PO) {
        return "NUMCAT_PO";
    };
    if (v instanceof NUMCAT_SM) {
        return "NUMCAT_SM";
    };
    if (v instanceof NUMCAT_SC) {
        return "NUMCAT_SC";
    };
    if (v instanceof NUMCAT_SK) {
        return "NUMCAT_SK";
    };
    if (v instanceof NUMCAT_SO) {
        return "NUMCAT_SO";
    };
    if (v instanceof NUMCAT_ZS) {
        return "NUMCAT_ZS";
    };
    if (v instanceof NUMCAT_ZL) {
        return "NUMCAT_ZL";
    };
    if (v instanceof NUMCAT_ZP) {
        return "NUMCAT_ZP";
    };
    if (v instanceof NUMCAT_CC) {
        return "NUMCAT_CC";
    };
    if (v instanceof NUMCAT_CF) {
        return "NUMCAT_CF";
    };
    if (v instanceof NUMCAT_CS) {
        return "NUMCAT_CS";
    };
    if (v instanceof NUMCAT_CO) {
        return "NUMCAT_CO";
    };
    if (v instanceof NUMCAT_CN) {
        return "NUMCAT_CN";
    };
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 49, column 1 - line 79, column 33): " + [ v.constructor.name ]);
});
var showConversionRule = new Data_Show.Show(function (v) {
    return "ConversionRule { category: " + (Data_Show.show(Data_Show.showInt)(v.category) + (", unicodeCat: " + (Data_Show.show(showUnicodeCategory)(v.unicodeCat) + (", possible: " + (Data_Show.show(Data_Show.showInt)(v.possible) + (", updist: " + (Data_Show.show(Data_Show.showInt)(v.updist) + (", lowdist: " + (Data_Show.show(Data_Show.showInt)(v.lowdist) + (", titledist: " + (Data_Show.show(Data_Show.showInt)(v.titledist) + " }")))))))))));
});
var showCharBlock = new Data_Show.Show(function (v) {
    return "CharBlock { start: " + (Data_Show.show(Data_Show.showInt)(v.start) + (", length: " + (Data_Show.show(Data_Show.showInt)(v.length) + (", convRule: " + (Data_Show.show(showConversionRule)(v.convRule) + " }")))));
});
var numSpaceBlocks = 8;
var numRules = 167;
var numLat1Blocks = 63;
var numConvBlocks = 1230;
var numBlocks = 2783;
var maxUniChar = 1114109;
var gencatZS = 2;
var rule1 = {
    category: gencatZS,
    unicodeCat: NUMCAT_ZS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var spacechars = [ {
    start: 32,
    length: 1,
    convRule: rule1
}, {
    start: 160,
    length: 1,
    convRule: rule1
}, {
    start: 5760,
    length: 1,
    convRule: rule1
}, {
    start: 6158,
    length: 1,
    convRule: rule1
}, {
    start: 8192,
    length: 11,
    convRule: rule1
}, {
    start: 8239,
    length: 1,
    convRule: rule1
}, {
    start: 8287,
    length: 1,
    convRule: rule1
}, {
    start: 12288,
    length: 1,
    convRule: rule1
} ];
var gencatZP = 67108864;
var rule140 = {
    category: gencatZP,
    unicodeCat: NUMCAT_ZP.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatZL = 33554432;
var rule139 = {
    category: gencatZL,
    unicodeCat: NUMCAT_ZL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSO = 8192;
var rule13 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule148 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: 0,
    lowdist: 26,
    titledist: 0
};
var rule149 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: -26 | 0,
    lowdist: 0,
    titledist: -26 | 0
};
var gencatSM = 64;
var rule6 = {
    category: gencatSM,
    unicodeCat: NUMCAT_SM.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSK = 1024;
var rule10 = {
    category: gencatSK,
    unicodeCat: NUMCAT_SK.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSC = 8;
var rule3 = {
    category: gencatSC,
    unicodeCat: NUMCAT_SC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPS = 16;
var rule4 = {
    category: gencatPS,
    unicodeCat: NUMCAT_PS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPO = 4;
var rule2 = {
    category: gencatPO,
    unicodeCat: NUMCAT_PO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPI = 16384;
var rule15 = {
    category: gencatPI,
    unicodeCat: NUMCAT_PI.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPF = 131072;
var rule19 = {
    category: gencatPF,
    unicodeCat: NUMCAT_PF.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPE = 32;
var rule5 = {
    category: gencatPE,
    unicodeCat: NUMCAT_PE.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPD = 128;
var rule7 = {
    category: gencatPD,
    unicodeCat: NUMCAT_PD.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPC = 2048;
var rule11 = {
    category: gencatPC,
    unicodeCat: NUMCAT_PC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatNO = 65536;
var rule17 = {
    category: gencatNO,
    unicodeCat: NUMCAT_NO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatNL = 16777216;
var rule116 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule146 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: 0,
    lowdist: 16,
    titledist: 0
};
var rule147 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: -16 | 0,
    lowdist: 0,
    titledist: -16 | 0
};
var gencatND = 256;
var rule8 = {
    category: gencatND,
    unicodeCat: NUMCAT_ND.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatMN = 2097152;
var rule84 = {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule85 = {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 1,
    updist: 84,
    lowdist: 0,
    titledist: 84
};
var gencatME = 4194304;
var rule109 = {
    category: gencatME,
    unicodeCat: NUMCAT_ME.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatMC = 8388608;
var rule114 = {
    category: gencatMC,
    unicodeCat: NUMCAT_MC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLU = 512;
var nullrule = {
    category: gencatLU,
    unicodeCat: NUMCAT_CN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule105 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -60 | 0,
    titledist: 0
};
var rule107 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7 | 0,
    titledist: 0
};
var rule108 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 80,
    titledist: 0
};
var rule110 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 15,
    titledist: 0
};
var rule112 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 48,
    titledist: 0
};
var rule115 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 7264,
    titledist: 0
};
var rule120 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7615 | 0,
    titledist: 0
};
var rule122 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8 | 0,
    titledist: 0
};
var rule131 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -74 | 0,
    titledist: 0
};
var rule134 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -86 | 0,
    titledist: 0
};
var rule135 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -100 | 0,
    titledist: 0
};
var rule136 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -112 | 0,
    titledist: 0
};
var rule137 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -128 | 0,
    titledist: 0
};
var rule138 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -126 | 0,
    titledist: 0
};
var rule141 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7517 | 0,
    titledist: 0
};
var rule142 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8383 | 0,
    titledist: 0
};
var rule143 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8262 | 0,
    titledist: 0
};
var rule144 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 28,
    titledist: 0
};
var rule150 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10743 | 0,
    titledist: 0
};
var rule151 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -3814 | 0,
    titledist: 0
};
var rule152 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10727 | 0,
    titledist: 0
};
var rule155 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10780 | 0,
    titledist: 0
};
var rule156 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10749 | 0,
    titledist: 0
};
var rule157 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10783 | 0,
    titledist: 0
};
var rule158 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10782 | 0,
    titledist: 0
};
var rule159 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10815 | 0,
    titledist: 0
};
var rule161 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -35332 | 0,
    titledist: 0
};
var rule162 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42280 | 0,
    titledist: 0
};
var rule165 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 40,
    titledist: 0
};
var rule21 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 1,
    titledist: 0
};
var rule23 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -199 | 0,
    titledist: 0
};
var rule25 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -121 | 0,
    titledist: 0
};
var rule28 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 210,
    titledist: 0
};
var rule29 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 206,
    titledist: 0
};
var rule30 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 205,
    titledist: 0
};
var rule31 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 79,
    titledist: 0
};
var rule32 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 202,
    titledist: 0
};
var rule33 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 203,
    titledist: 0
};
var rule34 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 207,
    titledist: 0
};
var rule36 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 211,
    titledist: 0
};
var rule37 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 209,
    titledist: 0
};
var rule39 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 213,
    titledist: 0
};
var rule41 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 214,
    titledist: 0
};
var rule42 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 218,
    titledist: 0
};
var rule43 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 217,
    titledist: 0
};
var rule44 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 219,
    titledist: 0
};
var rule47 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 2,
    titledist: 1
};
var rule51 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -97 | 0,
    titledist: 0
};
var rule52 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -56 | 0,
    titledist: 0
};
var rule53 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -130 | 0,
    titledist: 0
};
var rule54 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10795,
    titledist: 0
};
var rule55 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -163 | 0,
    titledist: 0
};
var rule56 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10792,
    titledist: 0
};
var rule58 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -195 | 0,
    titledist: 0
};
var rule59 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 69,
    titledist: 0
};
var rule60 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 71,
    titledist: 0
};
var rule86 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 38,
    titledist: 0
};
var rule87 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 37,
    titledist: 0
};
var rule88 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 64,
    titledist: 0
};
var rule89 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 63,
    titledist: 0
};
var rule9 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 32,
    titledist: 0
};
var rule95 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 8,
    titledist: 0
};
var rule98 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLT = 524288;
var rule129 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -8 | 0,
    titledist: 0
};
var rule132 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -9 | 0,
    titledist: 0
};
var rule48 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: -1 | 0,
    lowdist: 1,
    titledist: 0
};
var gencatLO = 262144;
var rule45 = {
    category: gencatLO,
    unicodeCat: NUMCAT_LO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLM = 1048576;
var rule83 = {
    category: gencatLM,
    unicodeCat: NUMCAT_LM.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLL = 4096;
var rule100 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -54 | 0,
    lowdist: 0,
    titledist: -54 | 0
};
var rule101 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -8 | 0,
    lowdist: 0,
    titledist: -8 | 0
};
var rule102 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -86 | 0,
    lowdist: 0,
    titledist: -86 | 0
};
var rule103 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -80 | 0,
    lowdist: 0,
    titledist: -80 | 0
};
var rule104 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 7,
    lowdist: 0,
    titledist: 7
};
var rule106 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -96 | 0,
    lowdist: 0,
    titledist: -96 | 0
};
var rule111 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -15 | 0,
    lowdist: 0,
    titledist: -15 | 0
};
var rule113 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -48 | 0,
    lowdist: 0,
    titledist: -48 | 0
};
var rule117 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 35332,
    lowdist: 0,
    titledist: 35332
};
var rule118 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 3814,
    lowdist: 0,
    titledist: 3814
};
var rule119 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -59 | 0,
    lowdist: 0,
    titledist: -59 | 0
};
var rule12 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -32 | 0,
    lowdist: 0,
    titledist: -32 | 0
};
var rule121 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 8,
    lowdist: 0,
    titledist: 8
};
var rule123 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 74,
    lowdist: 0,
    titledist: 74
};
var rule124 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 86,
    lowdist: 0,
    titledist: 86
};
var rule125 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 100,
    lowdist: 0,
    titledist: 100
};
var rule126 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 128,
    lowdist: 0,
    titledist: 128
};
var rule127 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 112,
    lowdist: 0,
    titledist: 112
};
var rule128 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 126,
    lowdist: 0,
    titledist: 126
};
var rule130 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 9,
    lowdist: 0,
    titledist: 9
};
var rule133 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7205 | 0,
    lowdist: 0,
    titledist: -7205 | 0
};
var rule14 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule145 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -28 | 0,
    lowdist: 0,
    titledist: -28 | 0
};
var rule153 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10795 | 0,
    lowdist: 0,
    titledist: -10795 | 0
};
var rule154 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10792 | 0,
    lowdist: 0,
    titledist: -10792 | 0
};
var rule160 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7264 | 0,
    lowdist: 0,
    titledist: -7264 | 0
};
var rule166 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -40 | 0,
    lowdist: 0,
    titledist: -40 | 0
};
var rule18 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 743,
    lowdist: 0,
    titledist: 743
};
var rule20 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 121,
    lowdist: 0,
    titledist: 121
};
var rule22 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -1 | 0,
    lowdist: 0,
    titledist: -1 | 0
};
var rule24 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -232 | 0,
    lowdist: 0,
    titledist: -232 | 0
};
var rule26 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -300 | 0,
    lowdist: 0,
    titledist: -300 | 0
};
var rule27 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 195,
    lowdist: 0,
    titledist: 195
};
var rule35 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 97,
    lowdist: 0,
    titledist: 97
};
var rule38 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 163,
    lowdist: 0,
    titledist: 163
};
var rule40 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 130,
    lowdist: 0,
    titledist: 130
};
var rule46 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 56,
    lowdist: 0,
    titledist: 56
};
var rule49 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -2 | 0,
    lowdist: 0,
    titledist: -1 | 0
};
var rule50 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -79 | 0,
    lowdist: 0,
    titledist: -79 | 0
};
var rule57 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10815,
    lowdist: 0,
    titledist: 10815
};
var rule61 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10783,
    lowdist: 0,
    titledist: 10783
};
var rule62 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10780,
    lowdist: 0,
    titledist: 10780
};
var rule63 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10782,
    lowdist: 0,
    titledist: 10782
};
var rule64 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -210 | 0,
    lowdist: 0,
    titledist: -210 | 0
};
var rule65 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -206 | 0,
    lowdist: 0,
    titledist: -206 | 0
};
var rule66 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -205 | 0,
    lowdist: 0,
    titledist: -205 | 0
};
var rule67 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -202 | 0,
    lowdist: 0,
    titledist: -202 | 0
};
var rule68 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -203 | 0,
    lowdist: 0,
    titledist: -203 | 0
};
var rule69 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -207 | 0,
    lowdist: 0,
    titledist: -207 | 0
};
var rule70 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42280,
    lowdist: 0,
    titledist: 42280
};
var rule71 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -209 | 0,
    lowdist: 0,
    titledist: -209 | 0
};
var rule72 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -211 | 0,
    lowdist: 0,
    titledist: -211 | 0
};
var rule73 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10743,
    lowdist: 0,
    titledist: 10743
};
var rule74 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10749,
    lowdist: 0,
    titledist: 10749
};
var rule75 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -213 | 0,
    lowdist: 0,
    titledist: -213 | 0
};
var rule76 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -214 | 0,
    lowdist: 0,
    titledist: -214 | 0
};
var rule77 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10727,
    lowdist: 0,
    titledist: 10727
};
var rule78 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -218 | 0,
    lowdist: 0,
    titledist: -218 | 0
};
var rule79 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -69 | 0,
    lowdist: 0,
    titledist: -69 | 0
};
var rule80 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -217 | 0,
    lowdist: 0,
    titledist: -217 | 0
};
var rule81 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -71 | 0,
    lowdist: 0,
    titledist: -71 | 0
};
var rule82 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -219 | 0,
    lowdist: 0,
    titledist: -219 | 0
};
var rule90 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -38 | 0,
    lowdist: 0,
    titledist: -38 | 0
};
var rule91 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -37 | 0,
    lowdist: 0,
    titledist: -37 | 0
};
var rule92 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -31 | 0,
    lowdist: 0,
    titledist: -31 | 0
};
var rule93 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -64 | 0,
    lowdist: 0,
    titledist: -64 | 0
};
var rule94 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -63 | 0,
    lowdist: 0,
    titledist: -63 | 0
};
var rule96 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -62 | 0,
    lowdist: 0,
    titledist: -62 | 0
};
var rule97 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -57 | 0,
    lowdist: 0,
    titledist: -57 | 0
};
var rule99 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -47 | 0,
    lowdist: 0,
    titledist: -47 | 0
};
var gencatCS = 134217728;
var rule163 = {
    category: gencatCS,
    unicodeCat: NUMCAT_CS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCO = 268435456;
var rule164 = {
    category: gencatCO,
    unicodeCat: NUMCAT_CO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCF = 32768;
var rule16 = {
    category: gencatCF,
    unicodeCat: NUMCAT_CF.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCC = 1;
var rule0 = {
    category: gencatCC,
    unicodeCat: NUMCAT_CC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var convchars = [ {
    start: 65,
    length: 26,
    convRule: rule9
}, {
    start: 97,
    length: 26,
    convRule: rule12
}, {
    start: 181,
    length: 1,
    convRule: rule18
}, {
    start: 192,
    length: 23,
    convRule: rule9
}, {
    start: 216,
    length: 7,
    convRule: rule9
}, {
    start: 224,
    length: 23,
    convRule: rule12
}, {
    start: 248,
    length: 7,
    convRule: rule12
}, {
    start: 255,
    length: 1,
    convRule: rule20
}, {
    start: 256,
    length: 1,
    convRule: rule21
}, {
    start: 257,
    length: 1,
    convRule: rule22
}, {
    start: 258,
    length: 1,
    convRule: rule21
}, {
    start: 259,
    length: 1,
    convRule: rule22
}, {
    start: 260,
    length: 1,
    convRule: rule21
}, {
    start: 261,
    length: 1,
    convRule: rule22
}, {
    start: 262,
    length: 1,
    convRule: rule21
}, {
    start: 263,
    length: 1,
    convRule: rule22
}, {
    start: 264,
    length: 1,
    convRule: rule21
}, {
    start: 265,
    length: 1,
    convRule: rule22
}, {
    start: 266,
    length: 1,
    convRule: rule21
}, {
    start: 267,
    length: 1,
    convRule: rule22
}, {
    start: 268,
    length: 1,
    convRule: rule21
}, {
    start: 269,
    length: 1,
    convRule: rule22
}, {
    start: 270,
    length: 1,
    convRule: rule21
}, {
    start: 271,
    length: 1,
    convRule: rule22
}, {
    start: 272,
    length: 1,
    convRule: rule21
}, {
    start: 273,
    length: 1,
    convRule: rule22
}, {
    start: 274,
    length: 1,
    convRule: rule21
}, {
    start: 275,
    length: 1,
    convRule: rule22
}, {
    start: 276,
    length: 1,
    convRule: rule21
}, {
    start: 277,
    length: 1,
    convRule: rule22
}, {
    start: 278,
    length: 1,
    convRule: rule21
}, {
    start: 279,
    length: 1,
    convRule: rule22
}, {
    start: 280,
    length: 1,
    convRule: rule21
}, {
    start: 281,
    length: 1,
    convRule: rule22
}, {
    start: 282,
    length: 1,
    convRule: rule21
}, {
    start: 283,
    length: 1,
    convRule: rule22
}, {
    start: 284,
    length: 1,
    convRule: rule21
}, {
    start: 285,
    length: 1,
    convRule: rule22
}, {
    start: 286,
    length: 1,
    convRule: rule21
}, {
    start: 287,
    length: 1,
    convRule: rule22
}, {
    start: 288,
    length: 1,
    convRule: rule21
}, {
    start: 289,
    length: 1,
    convRule: rule22
}, {
    start: 290,
    length: 1,
    convRule: rule21
}, {
    start: 291,
    length: 1,
    convRule: rule22
}, {
    start: 292,
    length: 1,
    convRule: rule21
}, {
    start: 293,
    length: 1,
    convRule: rule22
}, {
    start: 294,
    length: 1,
    convRule: rule21
}, {
    start: 295,
    length: 1,
    convRule: rule22
}, {
    start: 296,
    length: 1,
    convRule: rule21
}, {
    start: 297,
    length: 1,
    convRule: rule22
}, {
    start: 298,
    length: 1,
    convRule: rule21
}, {
    start: 299,
    length: 1,
    convRule: rule22
}, {
    start: 300,
    length: 1,
    convRule: rule21
}, {
    start: 301,
    length: 1,
    convRule: rule22
}, {
    start: 302,
    length: 1,
    convRule: rule21
}, {
    start: 303,
    length: 1,
    convRule: rule22
}, {
    start: 304,
    length: 1,
    convRule: rule23
}, {
    start: 305,
    length: 1,
    convRule: rule24
}, {
    start: 306,
    length: 1,
    convRule: rule21
}, {
    start: 307,
    length: 1,
    convRule: rule22
}, {
    start: 308,
    length: 1,
    convRule: rule21
}, {
    start: 309,
    length: 1,
    convRule: rule22
}, {
    start: 310,
    length: 1,
    convRule: rule21
}, {
    start: 311,
    length: 1,
    convRule: rule22
}, {
    start: 313,
    length: 1,
    convRule: rule21
}, {
    start: 314,
    length: 1,
    convRule: rule22
}, {
    start: 315,
    length: 1,
    convRule: rule21
}, {
    start: 316,
    length: 1,
    convRule: rule22
}, {
    start: 317,
    length: 1,
    convRule: rule21
}, {
    start: 318,
    length: 1,
    convRule: rule22
}, {
    start: 319,
    length: 1,
    convRule: rule21
}, {
    start: 320,
    length: 1,
    convRule: rule22
}, {
    start: 321,
    length: 1,
    convRule: rule21
}, {
    start: 322,
    length: 1,
    convRule: rule22
}, {
    start: 323,
    length: 1,
    convRule: rule21
}, {
    start: 324,
    length: 1,
    convRule: rule22
}, {
    start: 325,
    length: 1,
    convRule: rule21
}, {
    start: 326,
    length: 1,
    convRule: rule22
}, {
    start: 327,
    length: 1,
    convRule: rule21
}, {
    start: 328,
    length: 1,
    convRule: rule22
}, {
    start: 330,
    length: 1,
    convRule: rule21
}, {
    start: 331,
    length: 1,
    convRule: rule22
}, {
    start: 332,
    length: 1,
    convRule: rule21
}, {
    start: 333,
    length: 1,
    convRule: rule22
}, {
    start: 334,
    length: 1,
    convRule: rule21
}, {
    start: 335,
    length: 1,
    convRule: rule22
}, {
    start: 336,
    length: 1,
    convRule: rule21
}, {
    start: 337,
    length: 1,
    convRule: rule22
}, {
    start: 338,
    length: 1,
    convRule: rule21
}, {
    start: 339,
    length: 1,
    convRule: rule22
}, {
    start: 340,
    length: 1,
    convRule: rule21
}, {
    start: 341,
    length: 1,
    convRule: rule22
}, {
    start: 342,
    length: 1,
    convRule: rule21
}, {
    start: 343,
    length: 1,
    convRule: rule22
}, {
    start: 344,
    length: 1,
    convRule: rule21
}, {
    start: 345,
    length: 1,
    convRule: rule22
}, {
    start: 346,
    length: 1,
    convRule: rule21
}, {
    start: 347,
    length: 1,
    convRule: rule22
}, {
    start: 348,
    length: 1,
    convRule: rule21
}, {
    start: 349,
    length: 1,
    convRule: rule22
}, {
    start: 350,
    length: 1,
    convRule: rule21
}, {
    start: 351,
    length: 1,
    convRule: rule22
}, {
    start: 352,
    length: 1,
    convRule: rule21
}, {
    start: 353,
    length: 1,
    convRule: rule22
}, {
    start: 354,
    length: 1,
    convRule: rule21
}, {
    start: 355,
    length: 1,
    convRule: rule22
}, {
    start: 356,
    length: 1,
    convRule: rule21
}, {
    start: 357,
    length: 1,
    convRule: rule22
}, {
    start: 358,
    length: 1,
    convRule: rule21
}, {
    start: 359,
    length: 1,
    convRule: rule22
}, {
    start: 360,
    length: 1,
    convRule: rule21
}, {
    start: 361,
    length: 1,
    convRule: rule22
}, {
    start: 362,
    length: 1,
    convRule: rule21
}, {
    start: 363,
    length: 1,
    convRule: rule22
}, {
    start: 364,
    length: 1,
    convRule: rule21
}, {
    start: 365,
    length: 1,
    convRule: rule22
}, {
    start: 366,
    length: 1,
    convRule: rule21
}, {
    start: 367,
    length: 1,
    convRule: rule22
}, {
    start: 368,
    length: 1,
    convRule: rule21
}, {
    start: 369,
    length: 1,
    convRule: rule22
}, {
    start: 370,
    length: 1,
    convRule: rule21
}, {
    start: 371,
    length: 1,
    convRule: rule22
}, {
    start: 372,
    length: 1,
    convRule: rule21
}, {
    start: 373,
    length: 1,
    convRule: rule22
}, {
    start: 374,
    length: 1,
    convRule: rule21
}, {
    start: 375,
    length: 1,
    convRule: rule22
}, {
    start: 376,
    length: 1,
    convRule: rule25
}, {
    start: 377,
    length: 1,
    convRule: rule21
}, {
    start: 378,
    length: 1,
    convRule: rule22
}, {
    start: 379,
    length: 1,
    convRule: rule21
}, {
    start: 380,
    length: 1,
    convRule: rule22
}, {
    start: 381,
    length: 1,
    convRule: rule21
}, {
    start: 382,
    length: 1,
    convRule: rule22
}, {
    start: 383,
    length: 1,
    convRule: rule26
}, {
    start: 384,
    length: 1,
    convRule: rule27
}, {
    start: 385,
    length: 1,
    convRule: rule28
}, {
    start: 386,
    length: 1,
    convRule: rule21
}, {
    start: 387,
    length: 1,
    convRule: rule22
}, {
    start: 388,
    length: 1,
    convRule: rule21
}, {
    start: 389,
    length: 1,
    convRule: rule22
}, {
    start: 390,
    length: 1,
    convRule: rule29
}, {
    start: 391,
    length: 1,
    convRule: rule21
}, {
    start: 392,
    length: 1,
    convRule: rule22
}, {
    start: 393,
    length: 2,
    convRule: rule30
}, {
    start: 395,
    length: 1,
    convRule: rule21
}, {
    start: 396,
    length: 1,
    convRule: rule22
}, {
    start: 398,
    length: 1,
    convRule: rule31
}, {
    start: 399,
    length: 1,
    convRule: rule32
}, {
    start: 400,
    length: 1,
    convRule: rule33
}, {
    start: 401,
    length: 1,
    convRule: rule21
}, {
    start: 402,
    length: 1,
    convRule: rule22
}, {
    start: 403,
    length: 1,
    convRule: rule30
}, {
    start: 404,
    length: 1,
    convRule: rule34
}, {
    start: 405,
    length: 1,
    convRule: rule35
}, {
    start: 406,
    length: 1,
    convRule: rule36
}, {
    start: 407,
    length: 1,
    convRule: rule37
}, {
    start: 408,
    length: 1,
    convRule: rule21
}, {
    start: 409,
    length: 1,
    convRule: rule22
}, {
    start: 410,
    length: 1,
    convRule: rule38
}, {
    start: 412,
    length: 1,
    convRule: rule36
}, {
    start: 413,
    length: 1,
    convRule: rule39
}, {
    start: 414,
    length: 1,
    convRule: rule40
}, {
    start: 415,
    length: 1,
    convRule: rule41
}, {
    start: 416,
    length: 1,
    convRule: rule21
}, {
    start: 417,
    length: 1,
    convRule: rule22
}, {
    start: 418,
    length: 1,
    convRule: rule21
}, {
    start: 419,
    length: 1,
    convRule: rule22
}, {
    start: 420,
    length: 1,
    convRule: rule21
}, {
    start: 421,
    length: 1,
    convRule: rule22
}, {
    start: 422,
    length: 1,
    convRule: rule42
}, {
    start: 423,
    length: 1,
    convRule: rule21
}, {
    start: 424,
    length: 1,
    convRule: rule22
}, {
    start: 425,
    length: 1,
    convRule: rule42
}, {
    start: 428,
    length: 1,
    convRule: rule21
}, {
    start: 429,
    length: 1,
    convRule: rule22
}, {
    start: 430,
    length: 1,
    convRule: rule42
}, {
    start: 431,
    length: 1,
    convRule: rule21
}, {
    start: 432,
    length: 1,
    convRule: rule22
}, {
    start: 433,
    length: 2,
    convRule: rule43
}, {
    start: 435,
    length: 1,
    convRule: rule21
}, {
    start: 436,
    length: 1,
    convRule: rule22
}, {
    start: 437,
    length: 1,
    convRule: rule21
}, {
    start: 438,
    length: 1,
    convRule: rule22
}, {
    start: 439,
    length: 1,
    convRule: rule44
}, {
    start: 440,
    length: 1,
    convRule: rule21
}, {
    start: 441,
    length: 1,
    convRule: rule22
}, {
    start: 444,
    length: 1,
    convRule: rule21
}, {
    start: 445,
    length: 1,
    convRule: rule22
}, {
    start: 447,
    length: 1,
    convRule: rule46
}, {
    start: 452,
    length: 1,
    convRule: rule47
}, {
    start: 453,
    length: 1,
    convRule: rule48
}, {
    start: 454,
    length: 1,
    convRule: rule49
}, {
    start: 455,
    length: 1,
    convRule: rule47
}, {
    start: 456,
    length: 1,
    convRule: rule48
}, {
    start: 457,
    length: 1,
    convRule: rule49
}, {
    start: 458,
    length: 1,
    convRule: rule47
}, {
    start: 459,
    length: 1,
    convRule: rule48
}, {
    start: 460,
    length: 1,
    convRule: rule49
}, {
    start: 461,
    length: 1,
    convRule: rule21
}, {
    start: 462,
    length: 1,
    convRule: rule22
}, {
    start: 463,
    length: 1,
    convRule: rule21
}, {
    start: 464,
    length: 1,
    convRule: rule22
}, {
    start: 465,
    length: 1,
    convRule: rule21
}, {
    start: 466,
    length: 1,
    convRule: rule22
}, {
    start: 467,
    length: 1,
    convRule: rule21
}, {
    start: 468,
    length: 1,
    convRule: rule22
}, {
    start: 469,
    length: 1,
    convRule: rule21
}, {
    start: 470,
    length: 1,
    convRule: rule22
}, {
    start: 471,
    length: 1,
    convRule: rule21
}, {
    start: 472,
    length: 1,
    convRule: rule22
}, {
    start: 473,
    length: 1,
    convRule: rule21
}, {
    start: 474,
    length: 1,
    convRule: rule22
}, {
    start: 475,
    length: 1,
    convRule: rule21
}, {
    start: 476,
    length: 1,
    convRule: rule22
}, {
    start: 477,
    length: 1,
    convRule: rule50
}, {
    start: 478,
    length: 1,
    convRule: rule21
}, {
    start: 479,
    length: 1,
    convRule: rule22
}, {
    start: 480,
    length: 1,
    convRule: rule21
}, {
    start: 481,
    length: 1,
    convRule: rule22
}, {
    start: 482,
    length: 1,
    convRule: rule21
}, {
    start: 483,
    length: 1,
    convRule: rule22
}, {
    start: 484,
    length: 1,
    convRule: rule21
}, {
    start: 485,
    length: 1,
    convRule: rule22
}, {
    start: 486,
    length: 1,
    convRule: rule21
}, {
    start: 487,
    length: 1,
    convRule: rule22
}, {
    start: 488,
    length: 1,
    convRule: rule21
}, {
    start: 489,
    length: 1,
    convRule: rule22
}, {
    start: 490,
    length: 1,
    convRule: rule21
}, {
    start: 491,
    length: 1,
    convRule: rule22
}, {
    start: 492,
    length: 1,
    convRule: rule21
}, {
    start: 493,
    length: 1,
    convRule: rule22
}, {
    start: 494,
    length: 1,
    convRule: rule21
}, {
    start: 495,
    length: 1,
    convRule: rule22
}, {
    start: 497,
    length: 1,
    convRule: rule47
}, {
    start: 498,
    length: 1,
    convRule: rule48
}, {
    start: 499,
    length: 1,
    convRule: rule49
}, {
    start: 500,
    length: 1,
    convRule: rule21
}, {
    start: 501,
    length: 1,
    convRule: rule22
}, {
    start: 502,
    length: 1,
    convRule: rule51
}, {
    start: 503,
    length: 1,
    convRule: rule52
}, {
    start: 504,
    length: 1,
    convRule: rule21
}, {
    start: 505,
    length: 1,
    convRule: rule22
}, {
    start: 506,
    length: 1,
    convRule: rule21
}, {
    start: 507,
    length: 1,
    convRule: rule22
}, {
    start: 508,
    length: 1,
    convRule: rule21
}, {
    start: 509,
    length: 1,
    convRule: rule22
}, {
    start: 510,
    length: 1,
    convRule: rule21
}, {
    start: 511,
    length: 1,
    convRule: rule22
}, {
    start: 512,
    length: 1,
    convRule: rule21
}, {
    start: 513,
    length: 1,
    convRule: rule22
}, {
    start: 514,
    length: 1,
    convRule: rule21
}, {
    start: 515,
    length: 1,
    convRule: rule22
}, {
    start: 516,
    length: 1,
    convRule: rule21
}, {
    start: 517,
    length: 1,
    convRule: rule22
}, {
    start: 518,
    length: 1,
    convRule: rule21
}, {
    start: 519,
    length: 1,
    convRule: rule22
}, {
    start: 520,
    length: 1,
    convRule: rule21
}, {
    start: 521,
    length: 1,
    convRule: rule22
}, {
    start: 522,
    length: 1,
    convRule: rule21
}, {
    start: 523,
    length: 1,
    convRule: rule22
}, {
    start: 524,
    length: 1,
    convRule: rule21
}, {
    start: 525,
    length: 1,
    convRule: rule22
}, {
    start: 526,
    length: 1,
    convRule: rule21
}, {
    start: 527,
    length: 1,
    convRule: rule22
}, {
    start: 528,
    length: 1,
    convRule: rule21
}, {
    start: 529,
    length: 1,
    convRule: rule22
}, {
    start: 530,
    length: 1,
    convRule: rule21
}, {
    start: 531,
    length: 1,
    convRule: rule22
}, {
    start: 532,
    length: 1,
    convRule: rule21
}, {
    start: 533,
    length: 1,
    convRule: rule22
}, {
    start: 534,
    length: 1,
    convRule: rule21
}, {
    start: 535,
    length: 1,
    convRule: rule22
}, {
    start: 536,
    length: 1,
    convRule: rule21
}, {
    start: 537,
    length: 1,
    convRule: rule22
}, {
    start: 538,
    length: 1,
    convRule: rule21
}, {
    start: 539,
    length: 1,
    convRule: rule22
}, {
    start: 540,
    length: 1,
    convRule: rule21
}, {
    start: 541,
    length: 1,
    convRule: rule22
}, {
    start: 542,
    length: 1,
    convRule: rule21
}, {
    start: 543,
    length: 1,
    convRule: rule22
}, {
    start: 544,
    length: 1,
    convRule: rule53
}, {
    start: 546,
    length: 1,
    convRule: rule21
}, {
    start: 547,
    length: 1,
    convRule: rule22
}, {
    start: 548,
    length: 1,
    convRule: rule21
}, {
    start: 549,
    length: 1,
    convRule: rule22
}, {
    start: 550,
    length: 1,
    convRule: rule21
}, {
    start: 551,
    length: 1,
    convRule: rule22
}, {
    start: 552,
    length: 1,
    convRule: rule21
}, {
    start: 553,
    length: 1,
    convRule: rule22
}, {
    start: 554,
    length: 1,
    convRule: rule21
}, {
    start: 555,
    length: 1,
    convRule: rule22
}, {
    start: 556,
    length: 1,
    convRule: rule21
}, {
    start: 557,
    length: 1,
    convRule: rule22
}, {
    start: 558,
    length: 1,
    convRule: rule21
}, {
    start: 559,
    length: 1,
    convRule: rule22
}, {
    start: 560,
    length: 1,
    convRule: rule21
}, {
    start: 561,
    length: 1,
    convRule: rule22
}, {
    start: 562,
    length: 1,
    convRule: rule21
}, {
    start: 563,
    length: 1,
    convRule: rule22
}, {
    start: 570,
    length: 1,
    convRule: rule54
}, {
    start: 571,
    length: 1,
    convRule: rule21
}, {
    start: 572,
    length: 1,
    convRule: rule22
}, {
    start: 573,
    length: 1,
    convRule: rule55
}, {
    start: 574,
    length: 1,
    convRule: rule56
}, {
    start: 575,
    length: 2,
    convRule: rule57
}, {
    start: 577,
    length: 1,
    convRule: rule21
}, {
    start: 578,
    length: 1,
    convRule: rule22
}, {
    start: 579,
    length: 1,
    convRule: rule58
}, {
    start: 580,
    length: 1,
    convRule: rule59
}, {
    start: 581,
    length: 1,
    convRule: rule60
}, {
    start: 582,
    length: 1,
    convRule: rule21
}, {
    start: 583,
    length: 1,
    convRule: rule22
}, {
    start: 584,
    length: 1,
    convRule: rule21
}, {
    start: 585,
    length: 1,
    convRule: rule22
}, {
    start: 586,
    length: 1,
    convRule: rule21
}, {
    start: 587,
    length: 1,
    convRule: rule22
}, {
    start: 588,
    length: 1,
    convRule: rule21
}, {
    start: 589,
    length: 1,
    convRule: rule22
}, {
    start: 590,
    length: 1,
    convRule: rule21
}, {
    start: 591,
    length: 1,
    convRule: rule22
}, {
    start: 592,
    length: 1,
    convRule: rule61
}, {
    start: 593,
    length: 1,
    convRule: rule62
}, {
    start: 594,
    length: 1,
    convRule: rule63
}, {
    start: 595,
    length: 1,
    convRule: rule64
}, {
    start: 596,
    length: 1,
    convRule: rule65
}, {
    start: 598,
    length: 2,
    convRule: rule66
}, {
    start: 601,
    length: 1,
    convRule: rule67
}, {
    start: 603,
    length: 1,
    convRule: rule68
}, {
    start: 608,
    length: 1,
    convRule: rule66
}, {
    start: 611,
    length: 1,
    convRule: rule69
}, {
    start: 613,
    length: 1,
    convRule: rule70
}, {
    start: 616,
    length: 1,
    convRule: rule71
}, {
    start: 617,
    length: 1,
    convRule: rule72
}, {
    start: 619,
    length: 1,
    convRule: rule73
}, {
    start: 623,
    length: 1,
    convRule: rule72
}, {
    start: 625,
    length: 1,
    convRule: rule74
}, {
    start: 626,
    length: 1,
    convRule: rule75
}, {
    start: 629,
    length: 1,
    convRule: rule76
}, {
    start: 637,
    length: 1,
    convRule: rule77
}, {
    start: 640,
    length: 1,
    convRule: rule78
}, {
    start: 643,
    length: 1,
    convRule: rule78
}, {
    start: 648,
    length: 1,
    convRule: rule78
}, {
    start: 649,
    length: 1,
    convRule: rule79
}, {
    start: 650,
    length: 2,
    convRule: rule80
}, {
    start: 652,
    length: 1,
    convRule: rule81
}, {
    start: 658,
    length: 1,
    convRule: rule82
}, {
    start: 837,
    length: 1,
    convRule: rule85
}, {
    start: 880,
    length: 1,
    convRule: rule21
}, {
    start: 881,
    length: 1,
    convRule: rule22
}, {
    start: 882,
    length: 1,
    convRule: rule21
}, {
    start: 883,
    length: 1,
    convRule: rule22
}, {
    start: 886,
    length: 1,
    convRule: rule21
}, {
    start: 887,
    length: 1,
    convRule: rule22
}, {
    start: 891,
    length: 3,
    convRule: rule40
}, {
    start: 902,
    length: 1,
    convRule: rule86
}, {
    start: 904,
    length: 3,
    convRule: rule87
}, {
    start: 908,
    length: 1,
    convRule: rule88
}, {
    start: 910,
    length: 2,
    convRule: rule89
}, {
    start: 913,
    length: 17,
    convRule: rule9
}, {
    start: 931,
    length: 9,
    convRule: rule9
}, {
    start: 940,
    length: 1,
    convRule: rule90
}, {
    start: 941,
    length: 3,
    convRule: rule91
}, {
    start: 945,
    length: 17,
    convRule: rule12
}, {
    start: 962,
    length: 1,
    convRule: rule92
}, {
    start: 963,
    length: 9,
    convRule: rule12
}, {
    start: 972,
    length: 1,
    convRule: rule93
}, {
    start: 973,
    length: 2,
    convRule: rule94
}, {
    start: 975,
    length: 1,
    convRule: rule95
}, {
    start: 976,
    length: 1,
    convRule: rule96
}, {
    start: 977,
    length: 1,
    convRule: rule97
}, {
    start: 981,
    length: 1,
    convRule: rule99
}, {
    start: 982,
    length: 1,
    convRule: rule100
}, {
    start: 983,
    length: 1,
    convRule: rule101
}, {
    start: 984,
    length: 1,
    convRule: rule21
}, {
    start: 985,
    length: 1,
    convRule: rule22
}, {
    start: 986,
    length: 1,
    convRule: rule21
}, {
    start: 987,
    length: 1,
    convRule: rule22
}, {
    start: 988,
    length: 1,
    convRule: rule21
}, {
    start: 989,
    length: 1,
    convRule: rule22
}, {
    start: 990,
    length: 1,
    convRule: rule21
}, {
    start: 991,
    length: 1,
    convRule: rule22
}, {
    start: 992,
    length: 1,
    convRule: rule21
}, {
    start: 993,
    length: 1,
    convRule: rule22
}, {
    start: 994,
    length: 1,
    convRule: rule21
}, {
    start: 995,
    length: 1,
    convRule: rule22
}, {
    start: 996,
    length: 1,
    convRule: rule21
}, {
    start: 997,
    length: 1,
    convRule: rule22
}, {
    start: 998,
    length: 1,
    convRule: rule21
}, {
    start: 999,
    length: 1,
    convRule: rule22
}, {
    start: 1000,
    length: 1,
    convRule: rule21
}, {
    start: 1001,
    length: 1,
    convRule: rule22
}, {
    start: 1002,
    length: 1,
    convRule: rule21
}, {
    start: 1003,
    length: 1,
    convRule: rule22
}, {
    start: 1004,
    length: 1,
    convRule: rule21
}, {
    start: 1005,
    length: 1,
    convRule: rule22
}, {
    start: 1006,
    length: 1,
    convRule: rule21
}, {
    start: 1007,
    length: 1,
    convRule: rule22
}, {
    start: 1008,
    length: 1,
    convRule: rule102
}, {
    start: 1009,
    length: 1,
    convRule: rule103
}, {
    start: 1010,
    length: 1,
    convRule: rule104
}, {
    start: 1012,
    length: 1,
    convRule: rule105
}, {
    start: 1013,
    length: 1,
    convRule: rule106
}, {
    start: 1015,
    length: 1,
    convRule: rule21
}, {
    start: 1016,
    length: 1,
    convRule: rule22
}, {
    start: 1017,
    length: 1,
    convRule: rule107
}, {
    start: 1018,
    length: 1,
    convRule: rule21
}, {
    start: 1019,
    length: 1,
    convRule: rule22
}, {
    start: 1021,
    length: 3,
    convRule: rule53
}, {
    start: 1024,
    length: 16,
    convRule: rule108
}, {
    start: 1040,
    length: 32,
    convRule: rule9
}, {
    start: 1072,
    length: 32,
    convRule: rule12
}, {
    start: 1104,
    length: 16,
    convRule: rule103
}, {
    start: 1120,
    length: 1,
    convRule: rule21
}, {
    start: 1121,
    length: 1,
    convRule: rule22
}, {
    start: 1122,
    length: 1,
    convRule: rule21
}, {
    start: 1123,
    length: 1,
    convRule: rule22
}, {
    start: 1124,
    length: 1,
    convRule: rule21
}, {
    start: 1125,
    length: 1,
    convRule: rule22
}, {
    start: 1126,
    length: 1,
    convRule: rule21
}, {
    start: 1127,
    length: 1,
    convRule: rule22
}, {
    start: 1128,
    length: 1,
    convRule: rule21
}, {
    start: 1129,
    length: 1,
    convRule: rule22
}, {
    start: 1130,
    length: 1,
    convRule: rule21
}, {
    start: 1131,
    length: 1,
    convRule: rule22
}, {
    start: 1132,
    length: 1,
    convRule: rule21
}, {
    start: 1133,
    length: 1,
    convRule: rule22
}, {
    start: 1134,
    length: 1,
    convRule: rule21
}, {
    start: 1135,
    length: 1,
    convRule: rule22
}, {
    start: 1136,
    length: 1,
    convRule: rule21
}, {
    start: 1137,
    length: 1,
    convRule: rule22
}, {
    start: 1138,
    length: 1,
    convRule: rule21
}, {
    start: 1139,
    length: 1,
    convRule: rule22
}, {
    start: 1140,
    length: 1,
    convRule: rule21
}, {
    start: 1141,
    length: 1,
    convRule: rule22
}, {
    start: 1142,
    length: 1,
    convRule: rule21
}, {
    start: 1143,
    length: 1,
    convRule: rule22
}, {
    start: 1144,
    length: 1,
    convRule: rule21
}, {
    start: 1145,
    length: 1,
    convRule: rule22
}, {
    start: 1146,
    length: 1,
    convRule: rule21
}, {
    start: 1147,
    length: 1,
    convRule: rule22
}, {
    start: 1148,
    length: 1,
    convRule: rule21
}, {
    start: 1149,
    length: 1,
    convRule: rule22
}, {
    start: 1150,
    length: 1,
    convRule: rule21
}, {
    start: 1151,
    length: 1,
    convRule: rule22
}, {
    start: 1152,
    length: 1,
    convRule: rule21
}, {
    start: 1153,
    length: 1,
    convRule: rule22
}, {
    start: 1162,
    length: 1,
    convRule: rule21
}, {
    start: 1163,
    length: 1,
    convRule: rule22
}, {
    start: 1164,
    length: 1,
    convRule: rule21
}, {
    start: 1165,
    length: 1,
    convRule: rule22
}, {
    start: 1166,
    length: 1,
    convRule: rule21
}, {
    start: 1167,
    length: 1,
    convRule: rule22
}, {
    start: 1168,
    length: 1,
    convRule: rule21
}, {
    start: 1169,
    length: 1,
    convRule: rule22
}, {
    start: 1170,
    length: 1,
    convRule: rule21
}, {
    start: 1171,
    length: 1,
    convRule: rule22
}, {
    start: 1172,
    length: 1,
    convRule: rule21
}, {
    start: 1173,
    length: 1,
    convRule: rule22
}, {
    start: 1174,
    length: 1,
    convRule: rule21
}, {
    start: 1175,
    length: 1,
    convRule: rule22
}, {
    start: 1176,
    length: 1,
    convRule: rule21
}, {
    start: 1177,
    length: 1,
    convRule: rule22
}, {
    start: 1178,
    length: 1,
    convRule: rule21
}, {
    start: 1179,
    length: 1,
    convRule: rule22
}, {
    start: 1180,
    length: 1,
    convRule: rule21
}, {
    start: 1181,
    length: 1,
    convRule: rule22
}, {
    start: 1182,
    length: 1,
    convRule: rule21
}, {
    start: 1183,
    length: 1,
    convRule: rule22
}, {
    start: 1184,
    length: 1,
    convRule: rule21
}, {
    start: 1185,
    length: 1,
    convRule: rule22
}, {
    start: 1186,
    length: 1,
    convRule: rule21
}, {
    start: 1187,
    length: 1,
    convRule: rule22
}, {
    start: 1188,
    length: 1,
    convRule: rule21
}, {
    start: 1189,
    length: 1,
    convRule: rule22
}, {
    start: 1190,
    length: 1,
    convRule: rule21
}, {
    start: 1191,
    length: 1,
    convRule: rule22
}, {
    start: 1192,
    length: 1,
    convRule: rule21
}, {
    start: 1193,
    length: 1,
    convRule: rule22
}, {
    start: 1194,
    length: 1,
    convRule: rule21
}, {
    start: 1195,
    length: 1,
    convRule: rule22
}, {
    start: 1196,
    length: 1,
    convRule: rule21
}, {
    start: 1197,
    length: 1,
    convRule: rule22
}, {
    start: 1198,
    length: 1,
    convRule: rule21
}, {
    start: 1199,
    length: 1,
    convRule: rule22
}, {
    start: 1200,
    length: 1,
    convRule: rule21
}, {
    start: 1201,
    length: 1,
    convRule: rule22
}, {
    start: 1202,
    length: 1,
    convRule: rule21
}, {
    start: 1203,
    length: 1,
    convRule: rule22
}, {
    start: 1204,
    length: 1,
    convRule: rule21
}, {
    start: 1205,
    length: 1,
    convRule: rule22
}, {
    start: 1206,
    length: 1,
    convRule: rule21
}, {
    start: 1207,
    length: 1,
    convRule: rule22
}, {
    start: 1208,
    length: 1,
    convRule: rule21
}, {
    start: 1209,
    length: 1,
    convRule: rule22
}, {
    start: 1210,
    length: 1,
    convRule: rule21
}, {
    start: 1211,
    length: 1,
    convRule: rule22
}, {
    start: 1212,
    length: 1,
    convRule: rule21
}, {
    start: 1213,
    length: 1,
    convRule: rule22
}, {
    start: 1214,
    length: 1,
    convRule: rule21
}, {
    start: 1215,
    length: 1,
    convRule: rule22
}, {
    start: 1216,
    length: 1,
    convRule: rule110
}, {
    start: 1217,
    length: 1,
    convRule: rule21
}, {
    start: 1218,
    length: 1,
    convRule: rule22
}, {
    start: 1219,
    length: 1,
    convRule: rule21
}, {
    start: 1220,
    length: 1,
    convRule: rule22
}, {
    start: 1221,
    length: 1,
    convRule: rule21
}, {
    start: 1222,
    length: 1,
    convRule: rule22
}, {
    start: 1223,
    length: 1,
    convRule: rule21
}, {
    start: 1224,
    length: 1,
    convRule: rule22
}, {
    start: 1225,
    length: 1,
    convRule: rule21
}, {
    start: 1226,
    length: 1,
    convRule: rule22
}, {
    start: 1227,
    length: 1,
    convRule: rule21
}, {
    start: 1228,
    length: 1,
    convRule: rule22
}, {
    start: 1229,
    length: 1,
    convRule: rule21
}, {
    start: 1230,
    length: 1,
    convRule: rule22
}, {
    start: 1231,
    length: 1,
    convRule: rule111
}, {
    start: 1232,
    length: 1,
    convRule: rule21
}, {
    start: 1233,
    length: 1,
    convRule: rule22
}, {
    start: 1234,
    length: 1,
    convRule: rule21
}, {
    start: 1235,
    length: 1,
    convRule: rule22
}, {
    start: 1236,
    length: 1,
    convRule: rule21
}, {
    start: 1237,
    length: 1,
    convRule: rule22
}, {
    start: 1238,
    length: 1,
    convRule: rule21
}, {
    start: 1239,
    length: 1,
    convRule: rule22
}, {
    start: 1240,
    length: 1,
    convRule: rule21
}, {
    start: 1241,
    length: 1,
    convRule: rule22
}, {
    start: 1242,
    length: 1,
    convRule: rule21
}, {
    start: 1243,
    length: 1,
    convRule: rule22
}, {
    start: 1244,
    length: 1,
    convRule: rule21
}, {
    start: 1245,
    length: 1,
    convRule: rule22
}, {
    start: 1246,
    length: 1,
    convRule: rule21
}, {
    start: 1247,
    length: 1,
    convRule: rule22
}, {
    start: 1248,
    length: 1,
    convRule: rule21
}, {
    start: 1249,
    length: 1,
    convRule: rule22
}, {
    start: 1250,
    length: 1,
    convRule: rule21
}, {
    start: 1251,
    length: 1,
    convRule: rule22
}, {
    start: 1252,
    length: 1,
    convRule: rule21
}, {
    start: 1253,
    length: 1,
    convRule: rule22
}, {
    start: 1254,
    length: 1,
    convRule: rule21
}, {
    start: 1255,
    length: 1,
    convRule: rule22
}, {
    start: 1256,
    length: 1,
    convRule: rule21
}, {
    start: 1257,
    length: 1,
    convRule: rule22
}, {
    start: 1258,
    length: 1,
    convRule: rule21
}, {
    start: 1259,
    length: 1,
    convRule: rule22
}, {
    start: 1260,
    length: 1,
    convRule: rule21
}, {
    start: 1261,
    length: 1,
    convRule: rule22
}, {
    start: 1262,
    length: 1,
    convRule: rule21
}, {
    start: 1263,
    length: 1,
    convRule: rule22
}, {
    start: 1264,
    length: 1,
    convRule: rule21
}, {
    start: 1265,
    length: 1,
    convRule: rule22
}, {
    start: 1266,
    length: 1,
    convRule: rule21
}, {
    start: 1267,
    length: 1,
    convRule: rule22
}, {
    start: 1268,
    length: 1,
    convRule: rule21
}, {
    start: 1269,
    length: 1,
    convRule: rule22
}, {
    start: 1270,
    length: 1,
    convRule: rule21
}, {
    start: 1271,
    length: 1,
    convRule: rule22
}, {
    start: 1272,
    length: 1,
    convRule: rule21
}, {
    start: 1273,
    length: 1,
    convRule: rule22
}, {
    start: 1274,
    length: 1,
    convRule: rule21
}, {
    start: 1275,
    length: 1,
    convRule: rule22
}, {
    start: 1276,
    length: 1,
    convRule: rule21
}, {
    start: 1277,
    length: 1,
    convRule: rule22
}, {
    start: 1278,
    length: 1,
    convRule: rule21
}, {
    start: 1279,
    length: 1,
    convRule: rule22
}, {
    start: 1280,
    length: 1,
    convRule: rule21
}, {
    start: 1281,
    length: 1,
    convRule: rule22
}, {
    start: 1282,
    length: 1,
    convRule: rule21
}, {
    start: 1283,
    length: 1,
    convRule: rule22
}, {
    start: 1284,
    length: 1,
    convRule: rule21
}, {
    start: 1285,
    length: 1,
    convRule: rule22
}, {
    start: 1286,
    length: 1,
    convRule: rule21
}, {
    start: 1287,
    length: 1,
    convRule: rule22
}, {
    start: 1288,
    length: 1,
    convRule: rule21
}, {
    start: 1289,
    length: 1,
    convRule: rule22
}, {
    start: 1290,
    length: 1,
    convRule: rule21
}, {
    start: 1291,
    length: 1,
    convRule: rule22
}, {
    start: 1292,
    length: 1,
    convRule: rule21
}, {
    start: 1293,
    length: 1,
    convRule: rule22
}, {
    start: 1294,
    length: 1,
    convRule: rule21
}, {
    start: 1295,
    length: 1,
    convRule: rule22
}, {
    start: 1296,
    length: 1,
    convRule: rule21
}, {
    start: 1297,
    length: 1,
    convRule: rule22
}, {
    start: 1298,
    length: 1,
    convRule: rule21
}, {
    start: 1299,
    length: 1,
    convRule: rule22
}, {
    start: 1300,
    length: 1,
    convRule: rule21
}, {
    start: 1301,
    length: 1,
    convRule: rule22
}, {
    start: 1302,
    length: 1,
    convRule: rule21
}, {
    start: 1303,
    length: 1,
    convRule: rule22
}, {
    start: 1304,
    length: 1,
    convRule: rule21
}, {
    start: 1305,
    length: 1,
    convRule: rule22
}, {
    start: 1306,
    length: 1,
    convRule: rule21
}, {
    start: 1307,
    length: 1,
    convRule: rule22
}, {
    start: 1308,
    length: 1,
    convRule: rule21
}, {
    start: 1309,
    length: 1,
    convRule: rule22
}, {
    start: 1310,
    length: 1,
    convRule: rule21
}, {
    start: 1311,
    length: 1,
    convRule: rule22
}, {
    start: 1312,
    length: 1,
    convRule: rule21
}, {
    start: 1313,
    length: 1,
    convRule: rule22
}, {
    start: 1314,
    length: 1,
    convRule: rule21
}, {
    start: 1315,
    length: 1,
    convRule: rule22
}, {
    start: 1316,
    length: 1,
    convRule: rule21
}, {
    start: 1317,
    length: 1,
    convRule: rule22
}, {
    start: 1318,
    length: 1,
    convRule: rule21
}, {
    start: 1319,
    length: 1,
    convRule: rule22
}, {
    start: 1329,
    length: 38,
    convRule: rule112
}, {
    start: 1377,
    length: 38,
    convRule: rule113
}, {
    start: 4256,
    length: 38,
    convRule: rule115
}, {
    start: 7545,
    length: 1,
    convRule: rule117
}, {
    start: 7549,
    length: 1,
    convRule: rule118
}, {
    start: 7680,
    length: 1,
    convRule: rule21
}, {
    start: 7681,
    length: 1,
    convRule: rule22
}, {
    start: 7682,
    length: 1,
    convRule: rule21
}, {
    start: 7683,
    length: 1,
    convRule: rule22
}, {
    start: 7684,
    length: 1,
    convRule: rule21
}, {
    start: 7685,
    length: 1,
    convRule: rule22
}, {
    start: 7686,
    length: 1,
    convRule: rule21
}, {
    start: 7687,
    length: 1,
    convRule: rule22
}, {
    start: 7688,
    length: 1,
    convRule: rule21
}, {
    start: 7689,
    length: 1,
    convRule: rule22
}, {
    start: 7690,
    length: 1,
    convRule: rule21
}, {
    start: 7691,
    length: 1,
    convRule: rule22
}, {
    start: 7692,
    length: 1,
    convRule: rule21
}, {
    start: 7693,
    length: 1,
    convRule: rule22
}, {
    start: 7694,
    length: 1,
    convRule: rule21
}, {
    start: 7695,
    length: 1,
    convRule: rule22
}, {
    start: 7696,
    length: 1,
    convRule: rule21
}, {
    start: 7697,
    length: 1,
    convRule: rule22
}, {
    start: 7698,
    length: 1,
    convRule: rule21
}, {
    start: 7699,
    length: 1,
    convRule: rule22
}, {
    start: 7700,
    length: 1,
    convRule: rule21
}, {
    start: 7701,
    length: 1,
    convRule: rule22
}, {
    start: 7702,
    length: 1,
    convRule: rule21
}, {
    start: 7703,
    length: 1,
    convRule: rule22
}, {
    start: 7704,
    length: 1,
    convRule: rule21
}, {
    start: 7705,
    length: 1,
    convRule: rule22
}, {
    start: 7706,
    length: 1,
    convRule: rule21
}, {
    start: 7707,
    length: 1,
    convRule: rule22
}, {
    start: 7708,
    length: 1,
    convRule: rule21
}, {
    start: 7709,
    length: 1,
    convRule: rule22
}, {
    start: 7710,
    length: 1,
    convRule: rule21
}, {
    start: 7711,
    length: 1,
    convRule: rule22
}, {
    start: 7712,
    length: 1,
    convRule: rule21
}, {
    start: 7713,
    length: 1,
    convRule: rule22
}, {
    start: 7714,
    length: 1,
    convRule: rule21
}, {
    start: 7715,
    length: 1,
    convRule: rule22
}, {
    start: 7716,
    length: 1,
    convRule: rule21
}, {
    start: 7717,
    length: 1,
    convRule: rule22
}, {
    start: 7718,
    length: 1,
    convRule: rule21
}, {
    start: 7719,
    length: 1,
    convRule: rule22
}, {
    start: 7720,
    length: 1,
    convRule: rule21
}, {
    start: 7721,
    length: 1,
    convRule: rule22
}, {
    start: 7722,
    length: 1,
    convRule: rule21
}, {
    start: 7723,
    length: 1,
    convRule: rule22
}, {
    start: 7724,
    length: 1,
    convRule: rule21
}, {
    start: 7725,
    length: 1,
    convRule: rule22
}, {
    start: 7726,
    length: 1,
    convRule: rule21
}, {
    start: 7727,
    length: 1,
    convRule: rule22
}, {
    start: 7728,
    length: 1,
    convRule: rule21
}, {
    start: 7729,
    length: 1,
    convRule: rule22
}, {
    start: 7730,
    length: 1,
    convRule: rule21
}, {
    start: 7731,
    length: 1,
    convRule: rule22
}, {
    start: 7732,
    length: 1,
    convRule: rule21
}, {
    start: 7733,
    length: 1,
    convRule: rule22
}, {
    start: 7734,
    length: 1,
    convRule: rule21
}, {
    start: 7735,
    length: 1,
    convRule: rule22
}, {
    start: 7736,
    length: 1,
    convRule: rule21
}, {
    start: 7737,
    length: 1,
    convRule: rule22
}, {
    start: 7738,
    length: 1,
    convRule: rule21
}, {
    start: 7739,
    length: 1,
    convRule: rule22
}, {
    start: 7740,
    length: 1,
    convRule: rule21
}, {
    start: 7741,
    length: 1,
    convRule: rule22
}, {
    start: 7742,
    length: 1,
    convRule: rule21
}, {
    start: 7743,
    length: 1,
    convRule: rule22
}, {
    start: 7744,
    length: 1,
    convRule: rule21
}, {
    start: 7745,
    length: 1,
    convRule: rule22
}, {
    start: 7746,
    length: 1,
    convRule: rule21
}, {
    start: 7747,
    length: 1,
    convRule: rule22
}, {
    start: 7748,
    length: 1,
    convRule: rule21
}, {
    start: 7749,
    length: 1,
    convRule: rule22
}, {
    start: 7750,
    length: 1,
    convRule: rule21
}, {
    start: 7751,
    length: 1,
    convRule: rule22
}, {
    start: 7752,
    length: 1,
    convRule: rule21
}, {
    start: 7753,
    length: 1,
    convRule: rule22
}, {
    start: 7754,
    length: 1,
    convRule: rule21
}, {
    start: 7755,
    length: 1,
    convRule: rule22
}, {
    start: 7756,
    length: 1,
    convRule: rule21
}, {
    start: 7757,
    length: 1,
    convRule: rule22
}, {
    start: 7758,
    length: 1,
    convRule: rule21
}, {
    start: 7759,
    length: 1,
    convRule: rule22
}, {
    start: 7760,
    length: 1,
    convRule: rule21
}, {
    start: 7761,
    length: 1,
    convRule: rule22
}, {
    start: 7762,
    length: 1,
    convRule: rule21
}, {
    start: 7763,
    length: 1,
    convRule: rule22
}, {
    start: 7764,
    length: 1,
    convRule: rule21
}, {
    start: 7765,
    length: 1,
    convRule: rule22
}, {
    start: 7766,
    length: 1,
    convRule: rule21
}, {
    start: 7767,
    length: 1,
    convRule: rule22
}, {
    start: 7768,
    length: 1,
    convRule: rule21
}, {
    start: 7769,
    length: 1,
    convRule: rule22
}, {
    start: 7770,
    length: 1,
    convRule: rule21
}, {
    start: 7771,
    length: 1,
    convRule: rule22
}, {
    start: 7772,
    length: 1,
    convRule: rule21
}, {
    start: 7773,
    length: 1,
    convRule: rule22
}, {
    start: 7774,
    length: 1,
    convRule: rule21
}, {
    start: 7775,
    length: 1,
    convRule: rule22
}, {
    start: 7776,
    length: 1,
    convRule: rule21
}, {
    start: 7777,
    length: 1,
    convRule: rule22
}, {
    start: 7778,
    length: 1,
    convRule: rule21
}, {
    start: 7779,
    length: 1,
    convRule: rule22
}, {
    start: 7780,
    length: 1,
    convRule: rule21
}, {
    start: 7781,
    length: 1,
    convRule: rule22
}, {
    start: 7782,
    length: 1,
    convRule: rule21
}, {
    start: 7783,
    length: 1,
    convRule: rule22
}, {
    start: 7784,
    length: 1,
    convRule: rule21
}, {
    start: 7785,
    length: 1,
    convRule: rule22
}, {
    start: 7786,
    length: 1,
    convRule: rule21
}, {
    start: 7787,
    length: 1,
    convRule: rule22
}, {
    start: 7788,
    length: 1,
    convRule: rule21
}, {
    start: 7789,
    length: 1,
    convRule: rule22
}, {
    start: 7790,
    length: 1,
    convRule: rule21
}, {
    start: 7791,
    length: 1,
    convRule: rule22
}, {
    start: 7792,
    length: 1,
    convRule: rule21
}, {
    start: 7793,
    length: 1,
    convRule: rule22
}, {
    start: 7794,
    length: 1,
    convRule: rule21
}, {
    start: 7795,
    length: 1,
    convRule: rule22
}, {
    start: 7796,
    length: 1,
    convRule: rule21
}, {
    start: 7797,
    length: 1,
    convRule: rule22
}, {
    start: 7798,
    length: 1,
    convRule: rule21
}, {
    start: 7799,
    length: 1,
    convRule: rule22
}, {
    start: 7800,
    length: 1,
    convRule: rule21
}, {
    start: 7801,
    length: 1,
    convRule: rule22
}, {
    start: 7802,
    length: 1,
    convRule: rule21
}, {
    start: 7803,
    length: 1,
    convRule: rule22
}, {
    start: 7804,
    length: 1,
    convRule: rule21
}, {
    start: 7805,
    length: 1,
    convRule: rule22
}, {
    start: 7806,
    length: 1,
    convRule: rule21
}, {
    start: 7807,
    length: 1,
    convRule: rule22
}, {
    start: 7808,
    length: 1,
    convRule: rule21
}, {
    start: 7809,
    length: 1,
    convRule: rule22
}, {
    start: 7810,
    length: 1,
    convRule: rule21
}, {
    start: 7811,
    length: 1,
    convRule: rule22
}, {
    start: 7812,
    length: 1,
    convRule: rule21
}, {
    start: 7813,
    length: 1,
    convRule: rule22
}, {
    start: 7814,
    length: 1,
    convRule: rule21
}, {
    start: 7815,
    length: 1,
    convRule: rule22
}, {
    start: 7816,
    length: 1,
    convRule: rule21
}, {
    start: 7817,
    length: 1,
    convRule: rule22
}, {
    start: 7818,
    length: 1,
    convRule: rule21
}, {
    start: 7819,
    length: 1,
    convRule: rule22
}, {
    start: 7820,
    length: 1,
    convRule: rule21
}, {
    start: 7821,
    length: 1,
    convRule: rule22
}, {
    start: 7822,
    length: 1,
    convRule: rule21
}, {
    start: 7823,
    length: 1,
    convRule: rule22
}, {
    start: 7824,
    length: 1,
    convRule: rule21
}, {
    start: 7825,
    length: 1,
    convRule: rule22
}, {
    start: 7826,
    length: 1,
    convRule: rule21
}, {
    start: 7827,
    length: 1,
    convRule: rule22
}, {
    start: 7828,
    length: 1,
    convRule: rule21
}, {
    start: 7829,
    length: 1,
    convRule: rule22
}, {
    start: 7835,
    length: 1,
    convRule: rule119
}, {
    start: 7838,
    length: 1,
    convRule: rule120
}, {
    start: 7840,
    length: 1,
    convRule: rule21
}, {
    start: 7841,
    length: 1,
    convRule: rule22
}, {
    start: 7842,
    length: 1,
    convRule: rule21
}, {
    start: 7843,
    length: 1,
    convRule: rule22
}, {
    start: 7844,
    length: 1,
    convRule: rule21
}, {
    start: 7845,
    length: 1,
    convRule: rule22
}, {
    start: 7846,
    length: 1,
    convRule: rule21
}, {
    start: 7847,
    length: 1,
    convRule: rule22
}, {
    start: 7848,
    length: 1,
    convRule: rule21
}, {
    start: 7849,
    length: 1,
    convRule: rule22
}, {
    start: 7850,
    length: 1,
    convRule: rule21
}, {
    start: 7851,
    length: 1,
    convRule: rule22
}, {
    start: 7852,
    length: 1,
    convRule: rule21
}, {
    start: 7853,
    length: 1,
    convRule: rule22
}, {
    start: 7854,
    length: 1,
    convRule: rule21
}, {
    start: 7855,
    length: 1,
    convRule: rule22
}, {
    start: 7856,
    length: 1,
    convRule: rule21
}, {
    start: 7857,
    length: 1,
    convRule: rule22
}, {
    start: 7858,
    length: 1,
    convRule: rule21
}, {
    start: 7859,
    length: 1,
    convRule: rule22
}, {
    start: 7860,
    length: 1,
    convRule: rule21
}, {
    start: 7861,
    length: 1,
    convRule: rule22
}, {
    start: 7862,
    length: 1,
    convRule: rule21
}, {
    start: 7863,
    length: 1,
    convRule: rule22
}, {
    start: 7864,
    length: 1,
    convRule: rule21
}, {
    start: 7865,
    length: 1,
    convRule: rule22
}, {
    start: 7866,
    length: 1,
    convRule: rule21
}, {
    start: 7867,
    length: 1,
    convRule: rule22
}, {
    start: 7868,
    length: 1,
    convRule: rule21
}, {
    start: 7869,
    length: 1,
    convRule: rule22
}, {
    start: 7870,
    length: 1,
    convRule: rule21
}, {
    start: 7871,
    length: 1,
    convRule: rule22
}, {
    start: 7872,
    length: 1,
    convRule: rule21
}, {
    start: 7873,
    length: 1,
    convRule: rule22
}, {
    start: 7874,
    length: 1,
    convRule: rule21
}, {
    start: 7875,
    length: 1,
    convRule: rule22
}, {
    start: 7876,
    length: 1,
    convRule: rule21
}, {
    start: 7877,
    length: 1,
    convRule: rule22
}, {
    start: 7878,
    length: 1,
    convRule: rule21
}, {
    start: 7879,
    length: 1,
    convRule: rule22
}, {
    start: 7880,
    length: 1,
    convRule: rule21
}, {
    start: 7881,
    length: 1,
    convRule: rule22
}, {
    start: 7882,
    length: 1,
    convRule: rule21
}, {
    start: 7883,
    length: 1,
    convRule: rule22
}, {
    start: 7884,
    length: 1,
    convRule: rule21
}, {
    start: 7885,
    length: 1,
    convRule: rule22
}, {
    start: 7886,
    length: 1,
    convRule: rule21
}, {
    start: 7887,
    length: 1,
    convRule: rule22
}, {
    start: 7888,
    length: 1,
    convRule: rule21
}, {
    start: 7889,
    length: 1,
    convRule: rule22
}, {
    start: 7890,
    length: 1,
    convRule: rule21
}, {
    start: 7891,
    length: 1,
    convRule: rule22
}, {
    start: 7892,
    length: 1,
    convRule: rule21
}, {
    start: 7893,
    length: 1,
    convRule: rule22
}, {
    start: 7894,
    length: 1,
    convRule: rule21
}, {
    start: 7895,
    length: 1,
    convRule: rule22
}, {
    start: 7896,
    length: 1,
    convRule: rule21
}, {
    start: 7897,
    length: 1,
    convRule: rule22
}, {
    start: 7898,
    length: 1,
    convRule: rule21
}, {
    start: 7899,
    length: 1,
    convRule: rule22
}, {
    start: 7900,
    length: 1,
    convRule: rule21
}, {
    start: 7901,
    length: 1,
    convRule: rule22
}, {
    start: 7902,
    length: 1,
    convRule: rule21
}, {
    start: 7903,
    length: 1,
    convRule: rule22
}, {
    start: 7904,
    length: 1,
    convRule: rule21
}, {
    start: 7905,
    length: 1,
    convRule: rule22
}, {
    start: 7906,
    length: 1,
    convRule: rule21
}, {
    start: 7907,
    length: 1,
    convRule: rule22
}, {
    start: 7908,
    length: 1,
    convRule: rule21
}, {
    start: 7909,
    length: 1,
    convRule: rule22
}, {
    start: 7910,
    length: 1,
    convRule: rule21
}, {
    start: 7911,
    length: 1,
    convRule: rule22
}, {
    start: 7912,
    length: 1,
    convRule: rule21
}, {
    start: 7913,
    length: 1,
    convRule: rule22
}, {
    start: 7914,
    length: 1,
    convRule: rule21
}, {
    start: 7915,
    length: 1,
    convRule: rule22
}, {
    start: 7916,
    length: 1,
    convRule: rule21
}, {
    start: 7917,
    length: 1,
    convRule: rule22
}, {
    start: 7918,
    length: 1,
    convRule: rule21
}, {
    start: 7919,
    length: 1,
    convRule: rule22
}, {
    start: 7920,
    length: 1,
    convRule: rule21
}, {
    start: 7921,
    length: 1,
    convRule: rule22
}, {
    start: 7922,
    length: 1,
    convRule: rule21
}, {
    start: 7923,
    length: 1,
    convRule: rule22
}, {
    start: 7924,
    length: 1,
    convRule: rule21
}, {
    start: 7925,
    length: 1,
    convRule: rule22
}, {
    start: 7926,
    length: 1,
    convRule: rule21
}, {
    start: 7927,
    length: 1,
    convRule: rule22
}, {
    start: 7928,
    length: 1,
    convRule: rule21
}, {
    start: 7929,
    length: 1,
    convRule: rule22
}, {
    start: 7930,
    length: 1,
    convRule: rule21
}, {
    start: 7931,
    length: 1,
    convRule: rule22
}, {
    start: 7932,
    length: 1,
    convRule: rule21
}, {
    start: 7933,
    length: 1,
    convRule: rule22
}, {
    start: 7934,
    length: 1,
    convRule: rule21
}, {
    start: 7935,
    length: 1,
    convRule: rule22
}, {
    start: 7936,
    length: 8,
    convRule: rule121
}, {
    start: 7944,
    length: 8,
    convRule: rule122
}, {
    start: 7952,
    length: 6,
    convRule: rule121
}, {
    start: 7960,
    length: 6,
    convRule: rule122
}, {
    start: 7968,
    length: 8,
    convRule: rule121
}, {
    start: 7976,
    length: 8,
    convRule: rule122
}, {
    start: 7984,
    length: 8,
    convRule: rule121
}, {
    start: 7992,
    length: 8,
    convRule: rule122
}, {
    start: 8000,
    length: 6,
    convRule: rule121
}, {
    start: 8008,
    length: 6,
    convRule: rule122
}, {
    start: 8017,
    length: 1,
    convRule: rule121
}, {
    start: 8019,
    length: 1,
    convRule: rule121
}, {
    start: 8021,
    length: 1,
    convRule: rule121
}, {
    start: 8023,
    length: 1,
    convRule: rule121
}, {
    start: 8025,
    length: 1,
    convRule: rule122
}, {
    start: 8027,
    length: 1,
    convRule: rule122
}, {
    start: 8029,
    length: 1,
    convRule: rule122
}, {
    start: 8031,
    length: 1,
    convRule: rule122
}, {
    start: 8032,
    length: 8,
    convRule: rule121
}, {
    start: 8040,
    length: 8,
    convRule: rule122
}, {
    start: 8048,
    length: 2,
    convRule: rule123
}, {
    start: 8050,
    length: 4,
    convRule: rule124
}, {
    start: 8054,
    length: 2,
    convRule: rule125
}, {
    start: 8056,
    length: 2,
    convRule: rule126
}, {
    start: 8058,
    length: 2,
    convRule: rule127
}, {
    start: 8060,
    length: 2,
    convRule: rule128
}, {
    start: 8064,
    length: 8,
    convRule: rule121
}, {
    start: 8072,
    length: 8,
    convRule: rule129
}, {
    start: 8080,
    length: 8,
    convRule: rule121
}, {
    start: 8088,
    length: 8,
    convRule: rule129
}, {
    start: 8096,
    length: 8,
    convRule: rule121
}, {
    start: 8104,
    length: 8,
    convRule: rule129
}, {
    start: 8112,
    length: 2,
    convRule: rule121
}, {
    start: 8115,
    length: 1,
    convRule: rule130
}, {
    start: 8120,
    length: 2,
    convRule: rule122
}, {
    start: 8122,
    length: 2,
    convRule: rule131
}, {
    start: 8124,
    length: 1,
    convRule: rule132
}, {
    start: 8126,
    length: 1,
    convRule: rule133
}, {
    start: 8131,
    length: 1,
    convRule: rule130
}, {
    start: 8136,
    length: 4,
    convRule: rule134
}, {
    start: 8140,
    length: 1,
    convRule: rule132
}, {
    start: 8144,
    length: 2,
    convRule: rule121
}, {
    start: 8152,
    length: 2,
    convRule: rule122
}, {
    start: 8154,
    length: 2,
    convRule: rule135
}, {
    start: 8160,
    length: 2,
    convRule: rule121
}, {
    start: 8165,
    length: 1,
    convRule: rule104
}, {
    start: 8168,
    length: 2,
    convRule: rule122
}, {
    start: 8170,
    length: 2,
    convRule: rule136
}, {
    start: 8172,
    length: 1,
    convRule: rule107
}, {
    start: 8179,
    length: 1,
    convRule: rule130
}, {
    start: 8184,
    length: 2,
    convRule: rule137
}, {
    start: 8186,
    length: 2,
    convRule: rule138
}, {
    start: 8188,
    length: 1,
    convRule: rule132
}, {
    start: 8486,
    length: 1,
    convRule: rule141
}, {
    start: 8490,
    length: 1,
    convRule: rule142
}, {
    start: 8491,
    length: 1,
    convRule: rule143
}, {
    start: 8498,
    length: 1,
    convRule: rule144
}, {
    start: 8526,
    length: 1,
    convRule: rule145
}, {
    start: 8544,
    length: 16,
    convRule: rule146
}, {
    start: 8560,
    length: 16,
    convRule: rule147
}, {
    start: 8579,
    length: 1,
    convRule: rule21
}, {
    start: 8580,
    length: 1,
    convRule: rule22
}, {
    start: 9398,
    length: 26,
    convRule: rule148
}, {
    start: 9424,
    length: 26,
    convRule: rule149
}, {
    start: 11264,
    length: 47,
    convRule: rule112
}, {
    start: 11312,
    length: 47,
    convRule: rule113
}, {
    start: 11360,
    length: 1,
    convRule: rule21
}, {
    start: 11361,
    length: 1,
    convRule: rule22
}, {
    start: 11362,
    length: 1,
    convRule: rule150
}, {
    start: 11363,
    length: 1,
    convRule: rule151
}, {
    start: 11364,
    length: 1,
    convRule: rule152
}, {
    start: 11365,
    length: 1,
    convRule: rule153
}, {
    start: 11366,
    length: 1,
    convRule: rule154
}, {
    start: 11367,
    length: 1,
    convRule: rule21
}, {
    start: 11368,
    length: 1,
    convRule: rule22
}, {
    start: 11369,
    length: 1,
    convRule: rule21
}, {
    start: 11370,
    length: 1,
    convRule: rule22
}, {
    start: 11371,
    length: 1,
    convRule: rule21
}, {
    start: 11372,
    length: 1,
    convRule: rule22
}, {
    start: 11373,
    length: 1,
    convRule: rule155
}, {
    start: 11374,
    length: 1,
    convRule: rule156
}, {
    start: 11375,
    length: 1,
    convRule: rule157
}, {
    start: 11376,
    length: 1,
    convRule: rule158
}, {
    start: 11378,
    length: 1,
    convRule: rule21
}, {
    start: 11379,
    length: 1,
    convRule: rule22
}, {
    start: 11381,
    length: 1,
    convRule: rule21
}, {
    start: 11382,
    length: 1,
    convRule: rule22
}, {
    start: 11390,
    length: 2,
    convRule: rule159
}, {
    start: 11392,
    length: 1,
    convRule: rule21
}, {
    start: 11393,
    length: 1,
    convRule: rule22
}, {
    start: 11394,
    length: 1,
    convRule: rule21
}, {
    start: 11395,
    length: 1,
    convRule: rule22
}, {
    start: 11396,
    length: 1,
    convRule: rule21
}, {
    start: 11397,
    length: 1,
    convRule: rule22
}, {
    start: 11398,
    length: 1,
    convRule: rule21
}, {
    start: 11399,
    length: 1,
    convRule: rule22
}, {
    start: 11400,
    length: 1,
    convRule: rule21
}, {
    start: 11401,
    length: 1,
    convRule: rule22
}, {
    start: 11402,
    length: 1,
    convRule: rule21
}, {
    start: 11403,
    length: 1,
    convRule: rule22
}, {
    start: 11404,
    length: 1,
    convRule: rule21
}, {
    start: 11405,
    length: 1,
    convRule: rule22
}, {
    start: 11406,
    length: 1,
    convRule: rule21
}, {
    start: 11407,
    length: 1,
    convRule: rule22
}, {
    start: 11408,
    length: 1,
    convRule: rule21
}, {
    start: 11409,
    length: 1,
    convRule: rule22
}, {
    start: 11410,
    length: 1,
    convRule: rule21
}, {
    start: 11411,
    length: 1,
    convRule: rule22
}, {
    start: 11412,
    length: 1,
    convRule: rule21
}, {
    start: 11413,
    length: 1,
    convRule: rule22
}, {
    start: 11414,
    length: 1,
    convRule: rule21
}, {
    start: 11415,
    length: 1,
    convRule: rule22
}, {
    start: 11416,
    length: 1,
    convRule: rule21
}, {
    start: 11417,
    length: 1,
    convRule: rule22
}, {
    start: 11418,
    length: 1,
    convRule: rule21
}, {
    start: 11419,
    length: 1,
    convRule: rule22
}, {
    start: 11420,
    length: 1,
    convRule: rule21
}, {
    start: 11421,
    length: 1,
    convRule: rule22
}, {
    start: 11422,
    length: 1,
    convRule: rule21
}, {
    start: 11423,
    length: 1,
    convRule: rule22
}, {
    start: 11424,
    length: 1,
    convRule: rule21
}, {
    start: 11425,
    length: 1,
    convRule: rule22
}, {
    start: 11426,
    length: 1,
    convRule: rule21
}, {
    start: 11427,
    length: 1,
    convRule: rule22
}, {
    start: 11428,
    length: 1,
    convRule: rule21
}, {
    start: 11429,
    length: 1,
    convRule: rule22
}, {
    start: 11430,
    length: 1,
    convRule: rule21
}, {
    start: 11431,
    length: 1,
    convRule: rule22
}, {
    start: 11432,
    length: 1,
    convRule: rule21
}, {
    start: 11433,
    length: 1,
    convRule: rule22
}, {
    start: 11434,
    length: 1,
    convRule: rule21
}, {
    start: 11435,
    length: 1,
    convRule: rule22
}, {
    start: 11436,
    length: 1,
    convRule: rule21
}, {
    start: 11437,
    length: 1,
    convRule: rule22
}, {
    start: 11438,
    length: 1,
    convRule: rule21
}, {
    start: 11439,
    length: 1,
    convRule: rule22
}, {
    start: 11440,
    length: 1,
    convRule: rule21
}, {
    start: 11441,
    length: 1,
    convRule: rule22
}, {
    start: 11442,
    length: 1,
    convRule: rule21
}, {
    start: 11443,
    length: 1,
    convRule: rule22
}, {
    start: 11444,
    length: 1,
    convRule: rule21
}, {
    start: 11445,
    length: 1,
    convRule: rule22
}, {
    start: 11446,
    length: 1,
    convRule: rule21
}, {
    start: 11447,
    length: 1,
    convRule: rule22
}, {
    start: 11448,
    length: 1,
    convRule: rule21
}, {
    start: 11449,
    length: 1,
    convRule: rule22
}, {
    start: 11450,
    length: 1,
    convRule: rule21
}, {
    start: 11451,
    length: 1,
    convRule: rule22
}, {
    start: 11452,
    length: 1,
    convRule: rule21
}, {
    start: 11453,
    length: 1,
    convRule: rule22
}, {
    start: 11454,
    length: 1,
    convRule: rule21
}, {
    start: 11455,
    length: 1,
    convRule: rule22
}, {
    start: 11456,
    length: 1,
    convRule: rule21
}, {
    start: 11457,
    length: 1,
    convRule: rule22
}, {
    start: 11458,
    length: 1,
    convRule: rule21
}, {
    start: 11459,
    length: 1,
    convRule: rule22
}, {
    start: 11460,
    length: 1,
    convRule: rule21
}, {
    start: 11461,
    length: 1,
    convRule: rule22
}, {
    start: 11462,
    length: 1,
    convRule: rule21
}, {
    start: 11463,
    length: 1,
    convRule: rule22
}, {
    start: 11464,
    length: 1,
    convRule: rule21
}, {
    start: 11465,
    length: 1,
    convRule: rule22
}, {
    start: 11466,
    length: 1,
    convRule: rule21
}, {
    start: 11467,
    length: 1,
    convRule: rule22
}, {
    start: 11468,
    length: 1,
    convRule: rule21
}, {
    start: 11469,
    length: 1,
    convRule: rule22
}, {
    start: 11470,
    length: 1,
    convRule: rule21
}, {
    start: 11471,
    length: 1,
    convRule: rule22
}, {
    start: 11472,
    length: 1,
    convRule: rule21
}, {
    start: 11473,
    length: 1,
    convRule: rule22
}, {
    start: 11474,
    length: 1,
    convRule: rule21
}, {
    start: 11475,
    length: 1,
    convRule: rule22
}, {
    start: 11476,
    length: 1,
    convRule: rule21
}, {
    start: 11477,
    length: 1,
    convRule: rule22
}, {
    start: 11478,
    length: 1,
    convRule: rule21
}, {
    start: 11479,
    length: 1,
    convRule: rule22
}, {
    start: 11480,
    length: 1,
    convRule: rule21
}, {
    start: 11481,
    length: 1,
    convRule: rule22
}, {
    start: 11482,
    length: 1,
    convRule: rule21
}, {
    start: 11483,
    length: 1,
    convRule: rule22
}, {
    start: 11484,
    length: 1,
    convRule: rule21
}, {
    start: 11485,
    length: 1,
    convRule: rule22
}, {
    start: 11486,
    length: 1,
    convRule: rule21
}, {
    start: 11487,
    length: 1,
    convRule: rule22
}, {
    start: 11488,
    length: 1,
    convRule: rule21
}, {
    start: 11489,
    length: 1,
    convRule: rule22
}, {
    start: 11490,
    length: 1,
    convRule: rule21
}, {
    start: 11491,
    length: 1,
    convRule: rule22
}, {
    start: 11499,
    length: 1,
    convRule: rule21
}, {
    start: 11500,
    length: 1,
    convRule: rule22
}, {
    start: 11501,
    length: 1,
    convRule: rule21
}, {
    start: 11502,
    length: 1,
    convRule: rule22
}, {
    start: 11520,
    length: 38,
    convRule: rule160
}, {
    start: 42560,
    length: 1,
    convRule: rule21
}, {
    start: 42561,
    length: 1,
    convRule: rule22
}, {
    start: 42562,
    length: 1,
    convRule: rule21
}, {
    start: 42563,
    length: 1,
    convRule: rule22
}, {
    start: 42564,
    length: 1,
    convRule: rule21
}, {
    start: 42565,
    length: 1,
    convRule: rule22
}, {
    start: 42566,
    length: 1,
    convRule: rule21
}, {
    start: 42567,
    length: 1,
    convRule: rule22
}, {
    start: 42568,
    length: 1,
    convRule: rule21
}, {
    start: 42569,
    length: 1,
    convRule: rule22
}, {
    start: 42570,
    length: 1,
    convRule: rule21
}, {
    start: 42571,
    length: 1,
    convRule: rule22
}, {
    start: 42572,
    length: 1,
    convRule: rule21
}, {
    start: 42573,
    length: 1,
    convRule: rule22
}, {
    start: 42574,
    length: 1,
    convRule: rule21
}, {
    start: 42575,
    length: 1,
    convRule: rule22
}, {
    start: 42576,
    length: 1,
    convRule: rule21
}, {
    start: 42577,
    length: 1,
    convRule: rule22
}, {
    start: 42578,
    length: 1,
    convRule: rule21
}, {
    start: 42579,
    length: 1,
    convRule: rule22
}, {
    start: 42580,
    length: 1,
    convRule: rule21
}, {
    start: 42581,
    length: 1,
    convRule: rule22
}, {
    start: 42582,
    length: 1,
    convRule: rule21
}, {
    start: 42583,
    length: 1,
    convRule: rule22
}, {
    start: 42584,
    length: 1,
    convRule: rule21
}, {
    start: 42585,
    length: 1,
    convRule: rule22
}, {
    start: 42586,
    length: 1,
    convRule: rule21
}, {
    start: 42587,
    length: 1,
    convRule: rule22
}, {
    start: 42588,
    length: 1,
    convRule: rule21
}, {
    start: 42589,
    length: 1,
    convRule: rule22
}, {
    start: 42590,
    length: 1,
    convRule: rule21
}, {
    start: 42591,
    length: 1,
    convRule: rule22
}, {
    start: 42592,
    length: 1,
    convRule: rule21
}, {
    start: 42593,
    length: 1,
    convRule: rule22
}, {
    start: 42594,
    length: 1,
    convRule: rule21
}, {
    start: 42595,
    length: 1,
    convRule: rule22
}, {
    start: 42596,
    length: 1,
    convRule: rule21
}, {
    start: 42597,
    length: 1,
    convRule: rule22
}, {
    start: 42598,
    length: 1,
    convRule: rule21
}, {
    start: 42599,
    length: 1,
    convRule: rule22
}, {
    start: 42600,
    length: 1,
    convRule: rule21
}, {
    start: 42601,
    length: 1,
    convRule: rule22
}, {
    start: 42602,
    length: 1,
    convRule: rule21
}, {
    start: 42603,
    length: 1,
    convRule: rule22
}, {
    start: 42604,
    length: 1,
    convRule: rule21
}, {
    start: 42605,
    length: 1,
    convRule: rule22
}, {
    start: 42624,
    length: 1,
    convRule: rule21
}, {
    start: 42625,
    length: 1,
    convRule: rule22
}, {
    start: 42626,
    length: 1,
    convRule: rule21
}, {
    start: 42627,
    length: 1,
    convRule: rule22
}, {
    start: 42628,
    length: 1,
    convRule: rule21
}, {
    start: 42629,
    length: 1,
    convRule: rule22
}, {
    start: 42630,
    length: 1,
    convRule: rule21
}, {
    start: 42631,
    length: 1,
    convRule: rule22
}, {
    start: 42632,
    length: 1,
    convRule: rule21
}, {
    start: 42633,
    length: 1,
    convRule: rule22
}, {
    start: 42634,
    length: 1,
    convRule: rule21
}, {
    start: 42635,
    length: 1,
    convRule: rule22
}, {
    start: 42636,
    length: 1,
    convRule: rule21
}, {
    start: 42637,
    length: 1,
    convRule: rule22
}, {
    start: 42638,
    length: 1,
    convRule: rule21
}, {
    start: 42639,
    length: 1,
    convRule: rule22
}, {
    start: 42640,
    length: 1,
    convRule: rule21
}, {
    start: 42641,
    length: 1,
    convRule: rule22
}, {
    start: 42642,
    length: 1,
    convRule: rule21
}, {
    start: 42643,
    length: 1,
    convRule: rule22
}, {
    start: 42644,
    length: 1,
    convRule: rule21
}, {
    start: 42645,
    length: 1,
    convRule: rule22
}, {
    start: 42646,
    length: 1,
    convRule: rule21
}, {
    start: 42647,
    length: 1,
    convRule: rule22
}, {
    start: 42786,
    length: 1,
    convRule: rule21
}, {
    start: 42787,
    length: 1,
    convRule: rule22
}, {
    start: 42788,
    length: 1,
    convRule: rule21
}, {
    start: 42789,
    length: 1,
    convRule: rule22
}, {
    start: 42790,
    length: 1,
    convRule: rule21
}, {
    start: 42791,
    length: 1,
    convRule: rule22
}, {
    start: 42792,
    length: 1,
    convRule: rule21
}, {
    start: 42793,
    length: 1,
    convRule: rule22
}, {
    start: 42794,
    length: 1,
    convRule: rule21
}, {
    start: 42795,
    length: 1,
    convRule: rule22
}, {
    start: 42796,
    length: 1,
    convRule: rule21
}, {
    start: 42797,
    length: 1,
    convRule: rule22
}, {
    start: 42798,
    length: 1,
    convRule: rule21
}, {
    start: 42799,
    length: 1,
    convRule: rule22
}, {
    start: 42802,
    length: 1,
    convRule: rule21
}, {
    start: 42803,
    length: 1,
    convRule: rule22
}, {
    start: 42804,
    length: 1,
    convRule: rule21
}, {
    start: 42805,
    length: 1,
    convRule: rule22
}, {
    start: 42806,
    length: 1,
    convRule: rule21
}, {
    start: 42807,
    length: 1,
    convRule: rule22
}, {
    start: 42808,
    length: 1,
    convRule: rule21
}, {
    start: 42809,
    length: 1,
    convRule: rule22
}, {
    start: 42810,
    length: 1,
    convRule: rule21
}, {
    start: 42811,
    length: 1,
    convRule: rule22
}, {
    start: 42812,
    length: 1,
    convRule: rule21
}, {
    start: 42813,
    length: 1,
    convRule: rule22
}, {
    start: 42814,
    length: 1,
    convRule: rule21
}, {
    start: 42815,
    length: 1,
    convRule: rule22
}, {
    start: 42816,
    length: 1,
    convRule: rule21
}, {
    start: 42817,
    length: 1,
    convRule: rule22
}, {
    start: 42818,
    length: 1,
    convRule: rule21
}, {
    start: 42819,
    length: 1,
    convRule: rule22
}, {
    start: 42820,
    length: 1,
    convRule: rule21
}, {
    start: 42821,
    length: 1,
    convRule: rule22
}, {
    start: 42822,
    length: 1,
    convRule: rule21
}, {
    start: 42823,
    length: 1,
    convRule: rule22
}, {
    start: 42824,
    length: 1,
    convRule: rule21
}, {
    start: 42825,
    length: 1,
    convRule: rule22
}, {
    start: 42826,
    length: 1,
    convRule: rule21
}, {
    start: 42827,
    length: 1,
    convRule: rule22
}, {
    start: 42828,
    length: 1,
    convRule: rule21
}, {
    start: 42829,
    length: 1,
    convRule: rule22
}, {
    start: 42830,
    length: 1,
    convRule: rule21
}, {
    start: 42831,
    length: 1,
    convRule: rule22
}, {
    start: 42832,
    length: 1,
    convRule: rule21
}, {
    start: 42833,
    length: 1,
    convRule: rule22
}, {
    start: 42834,
    length: 1,
    convRule: rule21
}, {
    start: 42835,
    length: 1,
    convRule: rule22
}, {
    start: 42836,
    length: 1,
    convRule: rule21
}, {
    start: 42837,
    length: 1,
    convRule: rule22
}, {
    start: 42838,
    length: 1,
    convRule: rule21
}, {
    start: 42839,
    length: 1,
    convRule: rule22
}, {
    start: 42840,
    length: 1,
    convRule: rule21
}, {
    start: 42841,
    length: 1,
    convRule: rule22
}, {
    start: 42842,
    length: 1,
    convRule: rule21
}, {
    start: 42843,
    length: 1,
    convRule: rule22
}, {
    start: 42844,
    length: 1,
    convRule: rule21
}, {
    start: 42845,
    length: 1,
    convRule: rule22
}, {
    start: 42846,
    length: 1,
    convRule: rule21
}, {
    start: 42847,
    length: 1,
    convRule: rule22
}, {
    start: 42848,
    length: 1,
    convRule: rule21
}, {
    start: 42849,
    length: 1,
    convRule: rule22
}, {
    start: 42850,
    length: 1,
    convRule: rule21
}, {
    start: 42851,
    length: 1,
    convRule: rule22
}, {
    start: 42852,
    length: 1,
    convRule: rule21
}, {
    start: 42853,
    length: 1,
    convRule: rule22
}, {
    start: 42854,
    length: 1,
    convRule: rule21
}, {
    start: 42855,
    length: 1,
    convRule: rule22
}, {
    start: 42856,
    length: 1,
    convRule: rule21
}, {
    start: 42857,
    length: 1,
    convRule: rule22
}, {
    start: 42858,
    length: 1,
    convRule: rule21
}, {
    start: 42859,
    length: 1,
    convRule: rule22
}, {
    start: 42860,
    length: 1,
    convRule: rule21
}, {
    start: 42861,
    length: 1,
    convRule: rule22
}, {
    start: 42862,
    length: 1,
    convRule: rule21
}, {
    start: 42863,
    length: 1,
    convRule: rule22
}, {
    start: 42873,
    length: 1,
    convRule: rule21
}, {
    start: 42874,
    length: 1,
    convRule: rule22
}, {
    start: 42875,
    length: 1,
    convRule: rule21
}, {
    start: 42876,
    length: 1,
    convRule: rule22
}, {
    start: 42877,
    length: 1,
    convRule: rule161
}, {
    start: 42878,
    length: 1,
    convRule: rule21
}, {
    start: 42879,
    length: 1,
    convRule: rule22
}, {
    start: 42880,
    length: 1,
    convRule: rule21
}, {
    start: 42881,
    length: 1,
    convRule: rule22
}, {
    start: 42882,
    length: 1,
    convRule: rule21
}, {
    start: 42883,
    length: 1,
    convRule: rule22
}, {
    start: 42884,
    length: 1,
    convRule: rule21
}, {
    start: 42885,
    length: 1,
    convRule: rule22
}, {
    start: 42886,
    length: 1,
    convRule: rule21
}, {
    start: 42887,
    length: 1,
    convRule: rule22
}, {
    start: 42891,
    length: 1,
    convRule: rule21
}, {
    start: 42892,
    length: 1,
    convRule: rule22
}, {
    start: 42893,
    length: 1,
    convRule: rule162
}, {
    start: 42896,
    length: 1,
    convRule: rule21
}, {
    start: 42897,
    length: 1,
    convRule: rule22
}, {
    start: 42912,
    length: 1,
    convRule: rule21
}, {
    start: 42913,
    length: 1,
    convRule: rule22
}, {
    start: 42914,
    length: 1,
    convRule: rule21
}, {
    start: 42915,
    length: 1,
    convRule: rule22
}, {
    start: 42916,
    length: 1,
    convRule: rule21
}, {
    start: 42917,
    length: 1,
    convRule: rule22
}, {
    start: 42918,
    length: 1,
    convRule: rule21
}, {
    start: 42919,
    length: 1,
    convRule: rule22
}, {
    start: 42920,
    length: 1,
    convRule: rule21
}, {
    start: 42921,
    length: 1,
    convRule: rule22
}, {
    start: 65313,
    length: 26,
    convRule: rule9
}, {
    start: 65345,
    length: 26,
    convRule: rule12
}, {
    start: 66560,
    length: 40,
    convRule: rule165
}, {
    start: 66600,
    length: 40,
    convRule: rule166
} ];
var bsearch = function (a) {
    return function (array) {
        return function (size) {
            return function (compare) {
                var go = function ($copy_i) {
                    return function ($copy_k) {
                        var $tco_var_i = $copy_i;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(i, k) {
                            if (i > k) {
                                $tco_done = true;
                                return Data_Maybe.Nothing.value;
                            };
                            if (Data_Boolean.otherwise) {
                                var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                var v = compare(a)(array[j]);
                                if (v instanceof Data_Ordering.EQ) {
                                    $tco_done = true;
                                    return new Data_Maybe.Just(array[j]);
                                };
                                if (v instanceof Data_Ordering.GT) {
                                    $tco_var_i = j + 1 | 0;
                                    $copy_k = k;
                                    return;
                                };
                                $tco_var_i = i;
                                $copy_k = j - 1 | 0;
                                return;
                            };
                            throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [ i.constructor.name, k.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_i, $copy_k);
                        };
                        return $tco_result;
                    };
                };
                return go(0)(size);
            };
        };
    };
};
var blkCmp = function (v) {
    return function (v1) {
        if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
            return Data_Ordering.EQ.value;
        };
        if (v.start > v1.start) {
            return Data_Ordering.GT.value;
        };
        if (Data_Boolean.otherwise) {
            return Data_Ordering.LT.value;
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var getRule = function (blocks) {
    return function (unichar) {
        return function (size) {
            var key = {
                start: unichar,
                length: 1,
                convRule: nullrule
            };
            var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
            if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Nothing.value;
            };
            if (maybeCharBlock instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
            };
            throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [ maybeCharBlock.constructor.name ]);
        };
    };
};
var caseConv = function (f) {
    return function ($$char) {
        var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
            return $$char;
        };
        if (maybeConversionRule instanceof Data_Maybe.Just) {
            return $$char + f(maybeConversionRule.value0) | 0;
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [ maybeConversionRule.constructor.name ]);
    };
};
var uTowlower = caseConv(function (v) {
    return v.lowdist;
});
var uTowtitle = caseConv(function (v) {
    return v.titledist;
});
var uTowupper = caseConv(function (v) {
    return v.updist;
});
var checkAttrS = function (categories) {
    return function ($$char) {
        var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
            return false;
        };
        if (maybeConversionRule instanceof Data_Maybe.Just) {
            return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4807, column 8 - line 4809, column 92): " + [ maybeConversionRule.constructor.name ]);
    };
};
var uIswspace = checkAttrS([ gencatZS ]);
var allchars = [ {
    start: 0,
    length: 32,
    convRule: rule0
}, {
    start: 32,
    length: 1,
    convRule: rule1
}, {
    start: 33,
    length: 3,
    convRule: rule2
}, {
    start: 36,
    length: 1,
    convRule: rule3
}, {
    start: 37,
    length: 3,
    convRule: rule2
}, {
    start: 40,
    length: 1,
    convRule: rule4
}, {
    start: 41,
    length: 1,
    convRule: rule5
}, {
    start: 42,
    length: 1,
    convRule: rule2
}, {
    start: 43,
    length: 1,
    convRule: rule6
}, {
    start: 44,
    length: 1,
    convRule: rule2
}, {
    start: 45,
    length: 1,
    convRule: rule7
}, {
    start: 46,
    length: 2,
    convRule: rule2
}, {
    start: 48,
    length: 10,
    convRule: rule8
}, {
    start: 58,
    length: 2,
    convRule: rule2
}, {
    start: 60,
    length: 3,
    convRule: rule6
}, {
    start: 63,
    length: 2,
    convRule: rule2
}, {
    start: 65,
    length: 26,
    convRule: rule9
}, {
    start: 91,
    length: 1,
    convRule: rule4
}, {
    start: 92,
    length: 1,
    convRule: rule2
}, {
    start: 93,
    length: 1,
    convRule: rule5
}, {
    start: 94,
    length: 1,
    convRule: rule10
}, {
    start: 95,
    length: 1,
    convRule: rule11
}, {
    start: 96,
    length: 1,
    convRule: rule10
}, {
    start: 97,
    length: 26,
    convRule: rule12
}, {
    start: 123,
    length: 1,
    convRule: rule4
}, {
    start: 124,
    length: 1,
    convRule: rule6
}, {
    start: 125,
    length: 1,
    convRule: rule5
}, {
    start: 126,
    length: 1,
    convRule: rule6
}, {
    start: 127,
    length: 33,
    convRule: rule0
}, {
    start: 160,
    length: 1,
    convRule: rule1
}, {
    start: 161,
    length: 1,
    convRule: rule2
}, {
    start: 162,
    length: 4,
    convRule: rule3
}, {
    start: 166,
    length: 2,
    convRule: rule13
}, {
    start: 168,
    length: 1,
    convRule: rule10
}, {
    start: 169,
    length: 1,
    convRule: rule13
}, {
    start: 170,
    length: 1,
    convRule: rule14
}, {
    start: 171,
    length: 1,
    convRule: rule15
}, {
    start: 172,
    length: 1,
    convRule: rule6
}, {
    start: 173,
    length: 1,
    convRule: rule16
}, {
    start: 174,
    length: 1,
    convRule: rule13
}, {
    start: 175,
    length: 1,
    convRule: rule10
}, {
    start: 176,
    length: 1,
    convRule: rule13
}, {
    start: 177,
    length: 1,
    convRule: rule6
}, {
    start: 178,
    length: 2,
    convRule: rule17
}, {
    start: 180,
    length: 1,
    convRule: rule10
}, {
    start: 181,
    length: 1,
    convRule: rule18
}, {
    start: 182,
    length: 1,
    convRule: rule13
}, {
    start: 183,
    length: 1,
    convRule: rule2
}, {
    start: 184,
    length: 1,
    convRule: rule10
}, {
    start: 185,
    length: 1,
    convRule: rule17
}, {
    start: 186,
    length: 1,
    convRule: rule14
}, {
    start: 187,
    length: 1,
    convRule: rule19
}, {
    start: 188,
    length: 3,
    convRule: rule17
}, {
    start: 191,
    length: 1,
    convRule: rule2
}, {
    start: 192,
    length: 23,
    convRule: rule9
}, {
    start: 215,
    length: 1,
    convRule: rule6
}, {
    start: 216,
    length: 7,
    convRule: rule9
}, {
    start: 223,
    length: 1,
    convRule: rule14
}, {
    start: 224,
    length: 23,
    convRule: rule12
}, {
    start: 247,
    length: 1,
    convRule: rule6
}, {
    start: 248,
    length: 7,
    convRule: rule12
}, {
    start: 255,
    length: 1,
    convRule: rule20
}, {
    start: 256,
    length: 1,
    convRule: rule21
}, {
    start: 257,
    length: 1,
    convRule: rule22
}, {
    start: 258,
    length: 1,
    convRule: rule21
}, {
    start: 259,
    length: 1,
    convRule: rule22
}, {
    start: 260,
    length: 1,
    convRule: rule21
}, {
    start: 261,
    length: 1,
    convRule: rule22
}, {
    start: 262,
    length: 1,
    convRule: rule21
}, {
    start: 263,
    length: 1,
    convRule: rule22
}, {
    start: 264,
    length: 1,
    convRule: rule21
}, {
    start: 265,
    length: 1,
    convRule: rule22
}, {
    start: 266,
    length: 1,
    convRule: rule21
}, {
    start: 267,
    length: 1,
    convRule: rule22
}, {
    start: 268,
    length: 1,
    convRule: rule21
}, {
    start: 269,
    length: 1,
    convRule: rule22
}, {
    start: 270,
    length: 1,
    convRule: rule21
}, {
    start: 271,
    length: 1,
    convRule: rule22
}, {
    start: 272,
    length: 1,
    convRule: rule21
}, {
    start: 273,
    length: 1,
    convRule: rule22
}, {
    start: 274,
    length: 1,
    convRule: rule21
}, {
    start: 275,
    length: 1,
    convRule: rule22
}, {
    start: 276,
    length: 1,
    convRule: rule21
}, {
    start: 277,
    length: 1,
    convRule: rule22
}, {
    start: 278,
    length: 1,
    convRule: rule21
}, {
    start: 279,
    length: 1,
    convRule: rule22
}, {
    start: 280,
    length: 1,
    convRule: rule21
}, {
    start: 281,
    length: 1,
    convRule: rule22
}, {
    start: 282,
    length: 1,
    convRule: rule21
}, {
    start: 283,
    length: 1,
    convRule: rule22
}, {
    start: 284,
    length: 1,
    convRule: rule21
}, {
    start: 285,
    length: 1,
    convRule: rule22
}, {
    start: 286,
    length: 1,
    convRule: rule21
}, {
    start: 287,
    length: 1,
    convRule: rule22
}, {
    start: 288,
    length: 1,
    convRule: rule21
}, {
    start: 289,
    length: 1,
    convRule: rule22
}, {
    start: 290,
    length: 1,
    convRule: rule21
}, {
    start: 291,
    length: 1,
    convRule: rule22
}, {
    start: 292,
    length: 1,
    convRule: rule21
}, {
    start: 293,
    length: 1,
    convRule: rule22
}, {
    start: 294,
    length: 1,
    convRule: rule21
}, {
    start: 295,
    length: 1,
    convRule: rule22
}, {
    start: 296,
    length: 1,
    convRule: rule21
}, {
    start: 297,
    length: 1,
    convRule: rule22
}, {
    start: 298,
    length: 1,
    convRule: rule21
}, {
    start: 299,
    length: 1,
    convRule: rule22
}, {
    start: 300,
    length: 1,
    convRule: rule21
}, {
    start: 301,
    length: 1,
    convRule: rule22
}, {
    start: 302,
    length: 1,
    convRule: rule21
}, {
    start: 303,
    length: 1,
    convRule: rule22
}, {
    start: 304,
    length: 1,
    convRule: rule23
}, {
    start: 305,
    length: 1,
    convRule: rule24
}, {
    start: 306,
    length: 1,
    convRule: rule21
}, {
    start: 307,
    length: 1,
    convRule: rule22
}, {
    start: 308,
    length: 1,
    convRule: rule21
}, {
    start: 309,
    length: 1,
    convRule: rule22
}, {
    start: 310,
    length: 1,
    convRule: rule21
}, {
    start: 311,
    length: 1,
    convRule: rule22
}, {
    start: 312,
    length: 1,
    convRule: rule14
}, {
    start: 313,
    length: 1,
    convRule: rule21
}, {
    start: 314,
    length: 1,
    convRule: rule22
}, {
    start: 315,
    length: 1,
    convRule: rule21
}, {
    start: 316,
    length: 1,
    convRule: rule22
}, {
    start: 317,
    length: 1,
    convRule: rule21
}, {
    start: 318,
    length: 1,
    convRule: rule22
}, {
    start: 319,
    length: 1,
    convRule: rule21
}, {
    start: 320,
    length: 1,
    convRule: rule22
}, {
    start: 321,
    length: 1,
    convRule: rule21
}, {
    start: 322,
    length: 1,
    convRule: rule22
}, {
    start: 323,
    length: 1,
    convRule: rule21
}, {
    start: 324,
    length: 1,
    convRule: rule22
}, {
    start: 325,
    length: 1,
    convRule: rule21
}, {
    start: 326,
    length: 1,
    convRule: rule22
}, {
    start: 327,
    length: 1,
    convRule: rule21
}, {
    start: 328,
    length: 1,
    convRule: rule22
}, {
    start: 329,
    length: 1,
    convRule: rule14
}, {
    start: 330,
    length: 1,
    convRule: rule21
}, {
    start: 331,
    length: 1,
    convRule: rule22
}, {
    start: 332,
    length: 1,
    convRule: rule21
}, {
    start: 333,
    length: 1,
    convRule: rule22
}, {
    start: 334,
    length: 1,
    convRule: rule21
}, {
    start: 335,
    length: 1,
    convRule: rule22
}, {
    start: 336,
    length: 1,
    convRule: rule21
}, {
    start: 337,
    length: 1,
    convRule: rule22
}, {
    start: 338,
    length: 1,
    convRule: rule21
}, {
    start: 339,
    length: 1,
    convRule: rule22
}, {
    start: 340,
    length: 1,
    convRule: rule21
}, {
    start: 341,
    length: 1,
    convRule: rule22
}, {
    start: 342,
    length: 1,
    convRule: rule21
}, {
    start: 343,
    length: 1,
    convRule: rule22
}, {
    start: 344,
    length: 1,
    convRule: rule21
}, {
    start: 345,
    length: 1,
    convRule: rule22
}, {
    start: 346,
    length: 1,
    convRule: rule21
}, {
    start: 347,
    length: 1,
    convRule: rule22
}, {
    start: 348,
    length: 1,
    convRule: rule21
}, {
    start: 349,
    length: 1,
    convRule: rule22
}, {
    start: 350,
    length: 1,
    convRule: rule21
}, {
    start: 351,
    length: 1,
    convRule: rule22
}, {
    start: 352,
    length: 1,
    convRule: rule21
}, {
    start: 353,
    length: 1,
    convRule: rule22
}, {
    start: 354,
    length: 1,
    convRule: rule21
}, {
    start: 355,
    length: 1,
    convRule: rule22
}, {
    start: 356,
    length: 1,
    convRule: rule21
}, {
    start: 357,
    length: 1,
    convRule: rule22
}, {
    start: 358,
    length: 1,
    convRule: rule21
}, {
    start: 359,
    length: 1,
    convRule: rule22
}, {
    start: 360,
    length: 1,
    convRule: rule21
}, {
    start: 361,
    length: 1,
    convRule: rule22
}, {
    start: 362,
    length: 1,
    convRule: rule21
}, {
    start: 363,
    length: 1,
    convRule: rule22
}, {
    start: 364,
    length: 1,
    convRule: rule21
}, {
    start: 365,
    length: 1,
    convRule: rule22
}, {
    start: 366,
    length: 1,
    convRule: rule21
}, {
    start: 367,
    length: 1,
    convRule: rule22
}, {
    start: 368,
    length: 1,
    convRule: rule21
}, {
    start: 369,
    length: 1,
    convRule: rule22
}, {
    start: 370,
    length: 1,
    convRule: rule21
}, {
    start: 371,
    length: 1,
    convRule: rule22
}, {
    start: 372,
    length: 1,
    convRule: rule21
}, {
    start: 373,
    length: 1,
    convRule: rule22
}, {
    start: 374,
    length: 1,
    convRule: rule21
}, {
    start: 375,
    length: 1,
    convRule: rule22
}, {
    start: 376,
    length: 1,
    convRule: rule25
}, {
    start: 377,
    length: 1,
    convRule: rule21
}, {
    start: 378,
    length: 1,
    convRule: rule22
}, {
    start: 379,
    length: 1,
    convRule: rule21
}, {
    start: 380,
    length: 1,
    convRule: rule22
}, {
    start: 381,
    length: 1,
    convRule: rule21
}, {
    start: 382,
    length: 1,
    convRule: rule22
}, {
    start: 383,
    length: 1,
    convRule: rule26
}, {
    start: 384,
    length: 1,
    convRule: rule27
}, {
    start: 385,
    length: 1,
    convRule: rule28
}, {
    start: 386,
    length: 1,
    convRule: rule21
}, {
    start: 387,
    length: 1,
    convRule: rule22
}, {
    start: 388,
    length: 1,
    convRule: rule21
}, {
    start: 389,
    length: 1,
    convRule: rule22
}, {
    start: 390,
    length: 1,
    convRule: rule29
}, {
    start: 391,
    length: 1,
    convRule: rule21
}, {
    start: 392,
    length: 1,
    convRule: rule22
}, {
    start: 393,
    length: 2,
    convRule: rule30
}, {
    start: 395,
    length: 1,
    convRule: rule21
}, {
    start: 396,
    length: 1,
    convRule: rule22
}, {
    start: 397,
    length: 1,
    convRule: rule14
}, {
    start: 398,
    length: 1,
    convRule: rule31
}, {
    start: 399,
    length: 1,
    convRule: rule32
}, {
    start: 400,
    length: 1,
    convRule: rule33
}, {
    start: 401,
    length: 1,
    convRule: rule21
}, {
    start: 402,
    length: 1,
    convRule: rule22
}, {
    start: 403,
    length: 1,
    convRule: rule30
}, {
    start: 404,
    length: 1,
    convRule: rule34
}, {
    start: 405,
    length: 1,
    convRule: rule35
}, {
    start: 406,
    length: 1,
    convRule: rule36
}, {
    start: 407,
    length: 1,
    convRule: rule37
}, {
    start: 408,
    length: 1,
    convRule: rule21
}, {
    start: 409,
    length: 1,
    convRule: rule22
}, {
    start: 410,
    length: 1,
    convRule: rule38
}, {
    start: 411,
    length: 1,
    convRule: rule14
}, {
    start: 412,
    length: 1,
    convRule: rule36
}, {
    start: 413,
    length: 1,
    convRule: rule39
}, {
    start: 414,
    length: 1,
    convRule: rule40
}, {
    start: 415,
    length: 1,
    convRule: rule41
}, {
    start: 416,
    length: 1,
    convRule: rule21
}, {
    start: 417,
    length: 1,
    convRule: rule22
}, {
    start: 418,
    length: 1,
    convRule: rule21
}, {
    start: 419,
    length: 1,
    convRule: rule22
}, {
    start: 420,
    length: 1,
    convRule: rule21
}, {
    start: 421,
    length: 1,
    convRule: rule22
}, {
    start: 422,
    length: 1,
    convRule: rule42
}, {
    start: 423,
    length: 1,
    convRule: rule21
}, {
    start: 424,
    length: 1,
    convRule: rule22
}, {
    start: 425,
    length: 1,
    convRule: rule42
}, {
    start: 426,
    length: 2,
    convRule: rule14
}, {
    start: 428,
    length: 1,
    convRule: rule21
}, {
    start: 429,
    length: 1,
    convRule: rule22
}, {
    start: 430,
    length: 1,
    convRule: rule42
}, {
    start: 431,
    length: 1,
    convRule: rule21
}, {
    start: 432,
    length: 1,
    convRule: rule22
}, {
    start: 433,
    length: 2,
    convRule: rule43
}, {
    start: 435,
    length: 1,
    convRule: rule21
}, {
    start: 436,
    length: 1,
    convRule: rule22
}, {
    start: 437,
    length: 1,
    convRule: rule21
}, {
    start: 438,
    length: 1,
    convRule: rule22
}, {
    start: 439,
    length: 1,
    convRule: rule44
}, {
    start: 440,
    length: 1,
    convRule: rule21
}, {
    start: 441,
    length: 1,
    convRule: rule22
}, {
    start: 442,
    length: 1,
    convRule: rule14
}, {
    start: 443,
    length: 1,
    convRule: rule45
}, {
    start: 444,
    length: 1,
    convRule: rule21
}, {
    start: 445,
    length: 1,
    convRule: rule22
}, {
    start: 446,
    length: 1,
    convRule: rule14
}, {
    start: 447,
    length: 1,
    convRule: rule46
}, {
    start: 448,
    length: 4,
    convRule: rule45
}, {
    start: 452,
    length: 1,
    convRule: rule47
}, {
    start: 453,
    length: 1,
    convRule: rule48
}, {
    start: 454,
    length: 1,
    convRule: rule49
}, {
    start: 455,
    length: 1,
    convRule: rule47
}, {
    start: 456,
    length: 1,
    convRule: rule48
}, {
    start: 457,
    length: 1,
    convRule: rule49
}, {
    start: 458,
    length: 1,
    convRule: rule47
}, {
    start: 459,
    length: 1,
    convRule: rule48
}, {
    start: 460,
    length: 1,
    convRule: rule49
}, {
    start: 461,
    length: 1,
    convRule: rule21
}, {
    start: 462,
    length: 1,
    convRule: rule22
}, {
    start: 463,
    length: 1,
    convRule: rule21
}, {
    start: 464,
    length: 1,
    convRule: rule22
}, {
    start: 465,
    length: 1,
    convRule: rule21
}, {
    start: 466,
    length: 1,
    convRule: rule22
}, {
    start: 467,
    length: 1,
    convRule: rule21
}, {
    start: 468,
    length: 1,
    convRule: rule22
}, {
    start: 469,
    length: 1,
    convRule: rule21
}, {
    start: 470,
    length: 1,
    convRule: rule22
}, {
    start: 471,
    length: 1,
    convRule: rule21
}, {
    start: 472,
    length: 1,
    convRule: rule22
}, {
    start: 473,
    length: 1,
    convRule: rule21
}, {
    start: 474,
    length: 1,
    convRule: rule22
}, {
    start: 475,
    length: 1,
    convRule: rule21
}, {
    start: 476,
    length: 1,
    convRule: rule22
}, {
    start: 477,
    length: 1,
    convRule: rule50
}, {
    start: 478,
    length: 1,
    convRule: rule21
}, {
    start: 479,
    length: 1,
    convRule: rule22
}, {
    start: 480,
    length: 1,
    convRule: rule21
}, {
    start: 481,
    length: 1,
    convRule: rule22
}, {
    start: 482,
    length: 1,
    convRule: rule21
}, {
    start: 483,
    length: 1,
    convRule: rule22
}, {
    start: 484,
    length: 1,
    convRule: rule21
}, {
    start: 485,
    length: 1,
    convRule: rule22
}, {
    start: 486,
    length: 1,
    convRule: rule21
}, {
    start: 487,
    length: 1,
    convRule: rule22
}, {
    start: 488,
    length: 1,
    convRule: rule21
}, {
    start: 489,
    length: 1,
    convRule: rule22
}, {
    start: 490,
    length: 1,
    convRule: rule21
}, {
    start: 491,
    length: 1,
    convRule: rule22
}, {
    start: 492,
    length: 1,
    convRule: rule21
}, {
    start: 493,
    length: 1,
    convRule: rule22
}, {
    start: 494,
    length: 1,
    convRule: rule21
}, {
    start: 495,
    length: 1,
    convRule: rule22
}, {
    start: 496,
    length: 1,
    convRule: rule14
}, {
    start: 497,
    length: 1,
    convRule: rule47
}, {
    start: 498,
    length: 1,
    convRule: rule48
}, {
    start: 499,
    length: 1,
    convRule: rule49
}, {
    start: 500,
    length: 1,
    convRule: rule21
}, {
    start: 501,
    length: 1,
    convRule: rule22
}, {
    start: 502,
    length: 1,
    convRule: rule51
}, {
    start: 503,
    length: 1,
    convRule: rule52
}, {
    start: 504,
    length: 1,
    convRule: rule21
}, {
    start: 505,
    length: 1,
    convRule: rule22
}, {
    start: 506,
    length: 1,
    convRule: rule21
}, {
    start: 507,
    length: 1,
    convRule: rule22
}, {
    start: 508,
    length: 1,
    convRule: rule21
}, {
    start: 509,
    length: 1,
    convRule: rule22
}, {
    start: 510,
    length: 1,
    convRule: rule21
}, {
    start: 511,
    length: 1,
    convRule: rule22
}, {
    start: 512,
    length: 1,
    convRule: rule21
}, {
    start: 513,
    length: 1,
    convRule: rule22
}, {
    start: 514,
    length: 1,
    convRule: rule21
}, {
    start: 515,
    length: 1,
    convRule: rule22
}, {
    start: 516,
    length: 1,
    convRule: rule21
}, {
    start: 517,
    length: 1,
    convRule: rule22
}, {
    start: 518,
    length: 1,
    convRule: rule21
}, {
    start: 519,
    length: 1,
    convRule: rule22
}, {
    start: 520,
    length: 1,
    convRule: rule21
}, {
    start: 521,
    length: 1,
    convRule: rule22
}, {
    start: 522,
    length: 1,
    convRule: rule21
}, {
    start: 523,
    length: 1,
    convRule: rule22
}, {
    start: 524,
    length: 1,
    convRule: rule21
}, {
    start: 525,
    length: 1,
    convRule: rule22
}, {
    start: 526,
    length: 1,
    convRule: rule21
}, {
    start: 527,
    length: 1,
    convRule: rule22
}, {
    start: 528,
    length: 1,
    convRule: rule21
}, {
    start: 529,
    length: 1,
    convRule: rule22
}, {
    start: 530,
    length: 1,
    convRule: rule21
}, {
    start: 531,
    length: 1,
    convRule: rule22
}, {
    start: 532,
    length: 1,
    convRule: rule21
}, {
    start: 533,
    length: 1,
    convRule: rule22
}, {
    start: 534,
    length: 1,
    convRule: rule21
}, {
    start: 535,
    length: 1,
    convRule: rule22
}, {
    start: 536,
    length: 1,
    convRule: rule21
}, {
    start: 537,
    length: 1,
    convRule: rule22
}, {
    start: 538,
    length: 1,
    convRule: rule21
}, {
    start: 539,
    length: 1,
    convRule: rule22
}, {
    start: 540,
    length: 1,
    convRule: rule21
}, {
    start: 541,
    length: 1,
    convRule: rule22
}, {
    start: 542,
    length: 1,
    convRule: rule21
}, {
    start: 543,
    length: 1,
    convRule: rule22
}, {
    start: 544,
    length: 1,
    convRule: rule53
}, {
    start: 545,
    length: 1,
    convRule: rule14
}, {
    start: 546,
    length: 1,
    convRule: rule21
}, {
    start: 547,
    length: 1,
    convRule: rule22
}, {
    start: 548,
    length: 1,
    convRule: rule21
}, {
    start: 549,
    length: 1,
    convRule: rule22
}, {
    start: 550,
    length: 1,
    convRule: rule21
}, {
    start: 551,
    length: 1,
    convRule: rule22
}, {
    start: 552,
    length: 1,
    convRule: rule21
}, {
    start: 553,
    length: 1,
    convRule: rule22
}, {
    start: 554,
    length: 1,
    convRule: rule21
}, {
    start: 555,
    length: 1,
    convRule: rule22
}, {
    start: 556,
    length: 1,
    convRule: rule21
}, {
    start: 557,
    length: 1,
    convRule: rule22
}, {
    start: 558,
    length: 1,
    convRule: rule21
}, {
    start: 559,
    length: 1,
    convRule: rule22
}, {
    start: 560,
    length: 1,
    convRule: rule21
}, {
    start: 561,
    length: 1,
    convRule: rule22
}, {
    start: 562,
    length: 1,
    convRule: rule21
}, {
    start: 563,
    length: 1,
    convRule: rule22
}, {
    start: 564,
    length: 6,
    convRule: rule14
}, {
    start: 570,
    length: 1,
    convRule: rule54
}, {
    start: 571,
    length: 1,
    convRule: rule21
}, {
    start: 572,
    length: 1,
    convRule: rule22
}, {
    start: 573,
    length: 1,
    convRule: rule55
}, {
    start: 574,
    length: 1,
    convRule: rule56
}, {
    start: 575,
    length: 2,
    convRule: rule57
}, {
    start: 577,
    length: 1,
    convRule: rule21
}, {
    start: 578,
    length: 1,
    convRule: rule22
}, {
    start: 579,
    length: 1,
    convRule: rule58
}, {
    start: 580,
    length: 1,
    convRule: rule59
}, {
    start: 581,
    length: 1,
    convRule: rule60
}, {
    start: 582,
    length: 1,
    convRule: rule21
}, {
    start: 583,
    length: 1,
    convRule: rule22
}, {
    start: 584,
    length: 1,
    convRule: rule21
}, {
    start: 585,
    length: 1,
    convRule: rule22
}, {
    start: 586,
    length: 1,
    convRule: rule21
}, {
    start: 587,
    length: 1,
    convRule: rule22
}, {
    start: 588,
    length: 1,
    convRule: rule21
}, {
    start: 589,
    length: 1,
    convRule: rule22
}, {
    start: 590,
    length: 1,
    convRule: rule21
}, {
    start: 591,
    length: 1,
    convRule: rule22
}, {
    start: 592,
    length: 1,
    convRule: rule61
}, {
    start: 593,
    length: 1,
    convRule: rule62
}, {
    start: 594,
    length: 1,
    convRule: rule63
}, {
    start: 595,
    length: 1,
    convRule: rule64
}, {
    start: 596,
    length: 1,
    convRule: rule65
}, {
    start: 597,
    length: 1,
    convRule: rule14
}, {
    start: 598,
    length: 2,
    convRule: rule66
}, {
    start: 600,
    length: 1,
    convRule: rule14
}, {
    start: 601,
    length: 1,
    convRule: rule67
}, {
    start: 602,
    length: 1,
    convRule: rule14
}, {
    start: 603,
    length: 1,
    convRule: rule68
}, {
    start: 604,
    length: 4,
    convRule: rule14
}, {
    start: 608,
    length: 1,
    convRule: rule66
}, {
    start: 609,
    length: 2,
    convRule: rule14
}, {
    start: 611,
    length: 1,
    convRule: rule69
}, {
    start: 612,
    length: 1,
    convRule: rule14
}, {
    start: 613,
    length: 1,
    convRule: rule70
}, {
    start: 614,
    length: 2,
    convRule: rule14
}, {
    start: 616,
    length: 1,
    convRule: rule71
}, {
    start: 617,
    length: 1,
    convRule: rule72
}, {
    start: 618,
    length: 1,
    convRule: rule14
}, {
    start: 619,
    length: 1,
    convRule: rule73
}, {
    start: 620,
    length: 3,
    convRule: rule14
}, {
    start: 623,
    length: 1,
    convRule: rule72
}, {
    start: 624,
    length: 1,
    convRule: rule14
}, {
    start: 625,
    length: 1,
    convRule: rule74
}, {
    start: 626,
    length: 1,
    convRule: rule75
}, {
    start: 627,
    length: 2,
    convRule: rule14
}, {
    start: 629,
    length: 1,
    convRule: rule76
}, {
    start: 630,
    length: 7,
    convRule: rule14
}, {
    start: 637,
    length: 1,
    convRule: rule77
}, {
    start: 638,
    length: 2,
    convRule: rule14
}, {
    start: 640,
    length: 1,
    convRule: rule78
}, {
    start: 641,
    length: 2,
    convRule: rule14
}, {
    start: 643,
    length: 1,
    convRule: rule78
}, {
    start: 644,
    length: 4,
    convRule: rule14
}, {
    start: 648,
    length: 1,
    convRule: rule78
}, {
    start: 649,
    length: 1,
    convRule: rule79
}, {
    start: 650,
    length: 2,
    convRule: rule80
}, {
    start: 652,
    length: 1,
    convRule: rule81
}, {
    start: 653,
    length: 5,
    convRule: rule14
}, {
    start: 658,
    length: 1,
    convRule: rule82
}, {
    start: 659,
    length: 1,
    convRule: rule14
}, {
    start: 660,
    length: 1,
    convRule: rule45
}, {
    start: 661,
    length: 27,
    convRule: rule14
}, {
    start: 688,
    length: 18,
    convRule: rule83
}, {
    start: 706,
    length: 4,
    convRule: rule10
}, {
    start: 710,
    length: 12,
    convRule: rule83
}, {
    start: 722,
    length: 14,
    convRule: rule10
}, {
    start: 736,
    length: 5,
    convRule: rule83
}, {
    start: 741,
    length: 7,
    convRule: rule10
}, {
    start: 748,
    length: 1,
    convRule: rule83
}, {
    start: 749,
    length: 1,
    convRule: rule10
}, {
    start: 750,
    length: 1,
    convRule: rule83
}, {
    start: 751,
    length: 17,
    convRule: rule10
}, {
    start: 768,
    length: 69,
    convRule: rule84
}, {
    start: 837,
    length: 1,
    convRule: rule85
}, {
    start: 838,
    length: 42,
    convRule: rule84
}, {
    start: 880,
    length: 1,
    convRule: rule21
}, {
    start: 881,
    length: 1,
    convRule: rule22
}, {
    start: 882,
    length: 1,
    convRule: rule21
}, {
    start: 883,
    length: 1,
    convRule: rule22
}, {
    start: 884,
    length: 1,
    convRule: rule83
}, {
    start: 885,
    length: 1,
    convRule: rule10
}, {
    start: 886,
    length: 1,
    convRule: rule21
}, {
    start: 887,
    length: 1,
    convRule: rule22
}, {
    start: 890,
    length: 1,
    convRule: rule83
}, {
    start: 891,
    length: 3,
    convRule: rule40
}, {
    start: 894,
    length: 1,
    convRule: rule2
}, {
    start: 900,
    length: 2,
    convRule: rule10
}, {
    start: 902,
    length: 1,
    convRule: rule86
}, {
    start: 903,
    length: 1,
    convRule: rule2
}, {
    start: 904,
    length: 3,
    convRule: rule87
}, {
    start: 908,
    length: 1,
    convRule: rule88
}, {
    start: 910,
    length: 2,
    convRule: rule89
}, {
    start: 912,
    length: 1,
    convRule: rule14
}, {
    start: 913,
    length: 17,
    convRule: rule9
}, {
    start: 931,
    length: 9,
    convRule: rule9
}, {
    start: 940,
    length: 1,
    convRule: rule90
}, {
    start: 941,
    length: 3,
    convRule: rule91
}, {
    start: 944,
    length: 1,
    convRule: rule14
}, {
    start: 945,
    length: 17,
    convRule: rule12
}, {
    start: 962,
    length: 1,
    convRule: rule92
}, {
    start: 963,
    length: 9,
    convRule: rule12
}, {
    start: 972,
    length: 1,
    convRule: rule93
}, {
    start: 973,
    length: 2,
    convRule: rule94
}, {
    start: 975,
    length: 1,
    convRule: rule95
}, {
    start: 976,
    length: 1,
    convRule: rule96
}, {
    start: 977,
    length: 1,
    convRule: rule97
}, {
    start: 978,
    length: 3,
    convRule: rule98
}, {
    start: 981,
    length: 1,
    convRule: rule99
}, {
    start: 982,
    length: 1,
    convRule: rule100
}, {
    start: 983,
    length: 1,
    convRule: rule101
}, {
    start: 984,
    length: 1,
    convRule: rule21
}, {
    start: 985,
    length: 1,
    convRule: rule22
}, {
    start: 986,
    length: 1,
    convRule: rule21
}, {
    start: 987,
    length: 1,
    convRule: rule22
}, {
    start: 988,
    length: 1,
    convRule: rule21
}, {
    start: 989,
    length: 1,
    convRule: rule22
}, {
    start: 990,
    length: 1,
    convRule: rule21
}, {
    start: 991,
    length: 1,
    convRule: rule22
}, {
    start: 992,
    length: 1,
    convRule: rule21
}, {
    start: 993,
    length: 1,
    convRule: rule22
}, {
    start: 994,
    length: 1,
    convRule: rule21
}, {
    start: 995,
    length: 1,
    convRule: rule22
}, {
    start: 996,
    length: 1,
    convRule: rule21
}, {
    start: 997,
    length: 1,
    convRule: rule22
}, {
    start: 998,
    length: 1,
    convRule: rule21
}, {
    start: 999,
    length: 1,
    convRule: rule22
}, {
    start: 1000,
    length: 1,
    convRule: rule21
}, {
    start: 1001,
    length: 1,
    convRule: rule22
}, {
    start: 1002,
    length: 1,
    convRule: rule21
}, {
    start: 1003,
    length: 1,
    convRule: rule22
}, {
    start: 1004,
    length: 1,
    convRule: rule21
}, {
    start: 1005,
    length: 1,
    convRule: rule22
}, {
    start: 1006,
    length: 1,
    convRule: rule21
}, {
    start: 1007,
    length: 1,
    convRule: rule22
}, {
    start: 1008,
    length: 1,
    convRule: rule102
}, {
    start: 1009,
    length: 1,
    convRule: rule103
}, {
    start: 1010,
    length: 1,
    convRule: rule104
}, {
    start: 1011,
    length: 1,
    convRule: rule14
}, {
    start: 1012,
    length: 1,
    convRule: rule105
}, {
    start: 1013,
    length: 1,
    convRule: rule106
}, {
    start: 1014,
    length: 1,
    convRule: rule6
}, {
    start: 1015,
    length: 1,
    convRule: rule21
}, {
    start: 1016,
    length: 1,
    convRule: rule22
}, {
    start: 1017,
    length: 1,
    convRule: rule107
}, {
    start: 1018,
    length: 1,
    convRule: rule21
}, {
    start: 1019,
    length: 1,
    convRule: rule22
}, {
    start: 1020,
    length: 1,
    convRule: rule14
}, {
    start: 1021,
    length: 3,
    convRule: rule53
}, {
    start: 1024,
    length: 16,
    convRule: rule108
}, {
    start: 1040,
    length: 32,
    convRule: rule9
}, {
    start: 1072,
    length: 32,
    convRule: rule12
}, {
    start: 1104,
    length: 16,
    convRule: rule103
}, {
    start: 1120,
    length: 1,
    convRule: rule21
}, {
    start: 1121,
    length: 1,
    convRule: rule22
}, {
    start: 1122,
    length: 1,
    convRule: rule21
}, {
    start: 1123,
    length: 1,
    convRule: rule22
}, {
    start: 1124,
    length: 1,
    convRule: rule21
}, {
    start: 1125,
    length: 1,
    convRule: rule22
}, {
    start: 1126,
    length: 1,
    convRule: rule21
}, {
    start: 1127,
    length: 1,
    convRule: rule22
}, {
    start: 1128,
    length: 1,
    convRule: rule21
}, {
    start: 1129,
    length: 1,
    convRule: rule22
}, {
    start: 1130,
    length: 1,
    convRule: rule21
}, {
    start: 1131,
    length: 1,
    convRule: rule22
}, {
    start: 1132,
    length: 1,
    convRule: rule21
}, {
    start: 1133,
    length: 1,
    convRule: rule22
}, {
    start: 1134,
    length: 1,
    convRule: rule21
}, {
    start: 1135,
    length: 1,
    convRule: rule22
}, {
    start: 1136,
    length: 1,
    convRule: rule21
}, {
    start: 1137,
    length: 1,
    convRule: rule22
}, {
    start: 1138,
    length: 1,
    convRule: rule21
}, {
    start: 1139,
    length: 1,
    convRule: rule22
}, {
    start: 1140,
    length: 1,
    convRule: rule21
}, {
    start: 1141,
    length: 1,
    convRule: rule22
}, {
    start: 1142,
    length: 1,
    convRule: rule21
}, {
    start: 1143,
    length: 1,
    convRule: rule22
}, {
    start: 1144,
    length: 1,
    convRule: rule21
}, {
    start: 1145,
    length: 1,
    convRule: rule22
}, {
    start: 1146,
    length: 1,
    convRule: rule21
}, {
    start: 1147,
    length: 1,
    convRule: rule22
}, {
    start: 1148,
    length: 1,
    convRule: rule21
}, {
    start: 1149,
    length: 1,
    convRule: rule22
}, {
    start: 1150,
    length: 1,
    convRule: rule21
}, {
    start: 1151,
    length: 1,
    convRule: rule22
}, {
    start: 1152,
    length: 1,
    convRule: rule21
}, {
    start: 1153,
    length: 1,
    convRule: rule22
}, {
    start: 1154,
    length: 1,
    convRule: rule13
}, {
    start: 1155,
    length: 5,
    convRule: rule84
}, {
    start: 1160,
    length: 2,
    convRule: rule109
}, {
    start: 1162,
    length: 1,
    convRule: rule21
}, {
    start: 1163,
    length: 1,
    convRule: rule22
}, {
    start: 1164,
    length: 1,
    convRule: rule21
}, {
    start: 1165,
    length: 1,
    convRule: rule22
}, {
    start: 1166,
    length: 1,
    convRule: rule21
}, {
    start: 1167,
    length: 1,
    convRule: rule22
}, {
    start: 1168,
    length: 1,
    convRule: rule21
}, {
    start: 1169,
    length: 1,
    convRule: rule22
}, {
    start: 1170,
    length: 1,
    convRule: rule21
}, {
    start: 1171,
    length: 1,
    convRule: rule22
}, {
    start: 1172,
    length: 1,
    convRule: rule21
}, {
    start: 1173,
    length: 1,
    convRule: rule22
}, {
    start: 1174,
    length: 1,
    convRule: rule21
}, {
    start: 1175,
    length: 1,
    convRule: rule22
}, {
    start: 1176,
    length: 1,
    convRule: rule21
}, {
    start: 1177,
    length: 1,
    convRule: rule22
}, {
    start: 1178,
    length: 1,
    convRule: rule21
}, {
    start: 1179,
    length: 1,
    convRule: rule22
}, {
    start: 1180,
    length: 1,
    convRule: rule21
}, {
    start: 1181,
    length: 1,
    convRule: rule22
}, {
    start: 1182,
    length: 1,
    convRule: rule21
}, {
    start: 1183,
    length: 1,
    convRule: rule22
}, {
    start: 1184,
    length: 1,
    convRule: rule21
}, {
    start: 1185,
    length: 1,
    convRule: rule22
}, {
    start: 1186,
    length: 1,
    convRule: rule21
}, {
    start: 1187,
    length: 1,
    convRule: rule22
}, {
    start: 1188,
    length: 1,
    convRule: rule21
}, {
    start: 1189,
    length: 1,
    convRule: rule22
}, {
    start: 1190,
    length: 1,
    convRule: rule21
}, {
    start: 1191,
    length: 1,
    convRule: rule22
}, {
    start: 1192,
    length: 1,
    convRule: rule21
}, {
    start: 1193,
    length: 1,
    convRule: rule22
}, {
    start: 1194,
    length: 1,
    convRule: rule21
}, {
    start: 1195,
    length: 1,
    convRule: rule22
}, {
    start: 1196,
    length: 1,
    convRule: rule21
}, {
    start: 1197,
    length: 1,
    convRule: rule22
}, {
    start: 1198,
    length: 1,
    convRule: rule21
}, {
    start: 1199,
    length: 1,
    convRule: rule22
}, {
    start: 1200,
    length: 1,
    convRule: rule21
}, {
    start: 1201,
    length: 1,
    convRule: rule22
}, {
    start: 1202,
    length: 1,
    convRule: rule21
}, {
    start: 1203,
    length: 1,
    convRule: rule22
}, {
    start: 1204,
    length: 1,
    convRule: rule21
}, {
    start: 1205,
    length: 1,
    convRule: rule22
}, {
    start: 1206,
    length: 1,
    convRule: rule21
}, {
    start: 1207,
    length: 1,
    convRule: rule22
}, {
    start: 1208,
    length: 1,
    convRule: rule21
}, {
    start: 1209,
    length: 1,
    convRule: rule22
}, {
    start: 1210,
    length: 1,
    convRule: rule21
}, {
    start: 1211,
    length: 1,
    convRule: rule22
}, {
    start: 1212,
    length: 1,
    convRule: rule21
}, {
    start: 1213,
    length: 1,
    convRule: rule22
}, {
    start: 1214,
    length: 1,
    convRule: rule21
}, {
    start: 1215,
    length: 1,
    convRule: rule22
}, {
    start: 1216,
    length: 1,
    convRule: rule110
}, {
    start: 1217,
    length: 1,
    convRule: rule21
}, {
    start: 1218,
    length: 1,
    convRule: rule22
}, {
    start: 1219,
    length: 1,
    convRule: rule21
}, {
    start: 1220,
    length: 1,
    convRule: rule22
}, {
    start: 1221,
    length: 1,
    convRule: rule21
}, {
    start: 1222,
    length: 1,
    convRule: rule22
}, {
    start: 1223,
    length: 1,
    convRule: rule21
}, {
    start: 1224,
    length: 1,
    convRule: rule22
}, {
    start: 1225,
    length: 1,
    convRule: rule21
}, {
    start: 1226,
    length: 1,
    convRule: rule22
}, {
    start: 1227,
    length: 1,
    convRule: rule21
}, {
    start: 1228,
    length: 1,
    convRule: rule22
}, {
    start: 1229,
    length: 1,
    convRule: rule21
}, {
    start: 1230,
    length: 1,
    convRule: rule22
}, {
    start: 1231,
    length: 1,
    convRule: rule111
}, {
    start: 1232,
    length: 1,
    convRule: rule21
}, {
    start: 1233,
    length: 1,
    convRule: rule22
}, {
    start: 1234,
    length: 1,
    convRule: rule21
}, {
    start: 1235,
    length: 1,
    convRule: rule22
}, {
    start: 1236,
    length: 1,
    convRule: rule21
}, {
    start: 1237,
    length: 1,
    convRule: rule22
}, {
    start: 1238,
    length: 1,
    convRule: rule21
}, {
    start: 1239,
    length: 1,
    convRule: rule22
}, {
    start: 1240,
    length: 1,
    convRule: rule21
}, {
    start: 1241,
    length: 1,
    convRule: rule22
}, {
    start: 1242,
    length: 1,
    convRule: rule21
}, {
    start: 1243,
    length: 1,
    convRule: rule22
}, {
    start: 1244,
    length: 1,
    convRule: rule21
}, {
    start: 1245,
    length: 1,
    convRule: rule22
}, {
    start: 1246,
    length: 1,
    convRule: rule21
}, {
    start: 1247,
    length: 1,
    convRule: rule22
}, {
    start: 1248,
    length: 1,
    convRule: rule21
}, {
    start: 1249,
    length: 1,
    convRule: rule22
}, {
    start: 1250,
    length: 1,
    convRule: rule21
}, {
    start: 1251,
    length: 1,
    convRule: rule22
}, {
    start: 1252,
    length: 1,
    convRule: rule21
}, {
    start: 1253,
    length: 1,
    convRule: rule22
}, {
    start: 1254,
    length: 1,
    convRule: rule21
}, {
    start: 1255,
    length: 1,
    convRule: rule22
}, {
    start: 1256,
    length: 1,
    convRule: rule21
}, {
    start: 1257,
    length: 1,
    convRule: rule22
}, {
    start: 1258,
    length: 1,
    convRule: rule21
}, {
    start: 1259,
    length: 1,
    convRule: rule22
}, {
    start: 1260,
    length: 1,
    convRule: rule21
}, {
    start: 1261,
    length: 1,
    convRule: rule22
}, {
    start: 1262,
    length: 1,
    convRule: rule21
}, {
    start: 1263,
    length: 1,
    convRule: rule22
}, {
    start: 1264,
    length: 1,
    convRule: rule21
}, {
    start: 1265,
    length: 1,
    convRule: rule22
}, {
    start: 1266,
    length: 1,
    convRule: rule21
}, {
    start: 1267,
    length: 1,
    convRule: rule22
}, {
    start: 1268,
    length: 1,
    convRule: rule21
}, {
    start: 1269,
    length: 1,
    convRule: rule22
}, {
    start: 1270,
    length: 1,
    convRule: rule21
}, {
    start: 1271,
    length: 1,
    convRule: rule22
}, {
    start: 1272,
    length: 1,
    convRule: rule21
}, {
    start: 1273,
    length: 1,
    convRule: rule22
}, {
    start: 1274,
    length: 1,
    convRule: rule21
}, {
    start: 1275,
    length: 1,
    convRule: rule22
}, {
    start: 1276,
    length: 1,
    convRule: rule21
}, {
    start: 1277,
    length: 1,
    convRule: rule22
}, {
    start: 1278,
    length: 1,
    convRule: rule21
}, {
    start: 1279,
    length: 1,
    convRule: rule22
}, {
    start: 1280,
    length: 1,
    convRule: rule21
}, {
    start: 1281,
    length: 1,
    convRule: rule22
}, {
    start: 1282,
    length: 1,
    convRule: rule21
}, {
    start: 1283,
    length: 1,
    convRule: rule22
}, {
    start: 1284,
    length: 1,
    convRule: rule21
}, {
    start: 1285,
    length: 1,
    convRule: rule22
}, {
    start: 1286,
    length: 1,
    convRule: rule21
}, {
    start: 1287,
    length: 1,
    convRule: rule22
}, {
    start: 1288,
    length: 1,
    convRule: rule21
}, {
    start: 1289,
    length: 1,
    convRule: rule22
}, {
    start: 1290,
    length: 1,
    convRule: rule21
}, {
    start: 1291,
    length: 1,
    convRule: rule22
}, {
    start: 1292,
    length: 1,
    convRule: rule21
}, {
    start: 1293,
    length: 1,
    convRule: rule22
}, {
    start: 1294,
    length: 1,
    convRule: rule21
}, {
    start: 1295,
    length: 1,
    convRule: rule22
}, {
    start: 1296,
    length: 1,
    convRule: rule21
}, {
    start: 1297,
    length: 1,
    convRule: rule22
}, {
    start: 1298,
    length: 1,
    convRule: rule21
}, {
    start: 1299,
    length: 1,
    convRule: rule22
}, {
    start: 1300,
    length: 1,
    convRule: rule21
}, {
    start: 1301,
    length: 1,
    convRule: rule22
}, {
    start: 1302,
    length: 1,
    convRule: rule21
}, {
    start: 1303,
    length: 1,
    convRule: rule22
}, {
    start: 1304,
    length: 1,
    convRule: rule21
}, {
    start: 1305,
    length: 1,
    convRule: rule22
}, {
    start: 1306,
    length: 1,
    convRule: rule21
}, {
    start: 1307,
    length: 1,
    convRule: rule22
}, {
    start: 1308,
    length: 1,
    convRule: rule21
}, {
    start: 1309,
    length: 1,
    convRule: rule22
}, {
    start: 1310,
    length: 1,
    convRule: rule21
}, {
    start: 1311,
    length: 1,
    convRule: rule22
}, {
    start: 1312,
    length: 1,
    convRule: rule21
}, {
    start: 1313,
    length: 1,
    convRule: rule22
}, {
    start: 1314,
    length: 1,
    convRule: rule21
}, {
    start: 1315,
    length: 1,
    convRule: rule22
}, {
    start: 1316,
    length: 1,
    convRule: rule21
}, {
    start: 1317,
    length: 1,
    convRule: rule22
}, {
    start: 1318,
    length: 1,
    convRule: rule21
}, {
    start: 1319,
    length: 1,
    convRule: rule22
}, {
    start: 1329,
    length: 38,
    convRule: rule112
}, {
    start: 1369,
    length: 1,
    convRule: rule83
}, {
    start: 1370,
    length: 6,
    convRule: rule2
}, {
    start: 1377,
    length: 38,
    convRule: rule113
}, {
    start: 1415,
    length: 1,
    convRule: rule14
}, {
    start: 1417,
    length: 1,
    convRule: rule2
}, {
    start: 1418,
    length: 1,
    convRule: rule7
}, {
    start: 1425,
    length: 45,
    convRule: rule84
}, {
    start: 1470,
    length: 1,
    convRule: rule7
}, {
    start: 1471,
    length: 1,
    convRule: rule84
}, {
    start: 1472,
    length: 1,
    convRule: rule2
}, {
    start: 1473,
    length: 2,
    convRule: rule84
}, {
    start: 1475,
    length: 1,
    convRule: rule2
}, {
    start: 1476,
    length: 2,
    convRule: rule84
}, {
    start: 1478,
    length: 1,
    convRule: rule2
}, {
    start: 1479,
    length: 1,
    convRule: rule84
}, {
    start: 1488,
    length: 27,
    convRule: rule45
}, {
    start: 1520,
    length: 3,
    convRule: rule45
}, {
    start: 1523,
    length: 2,
    convRule: rule2
}, {
    start: 1536,
    length: 4,
    convRule: rule16
}, {
    start: 1542,
    length: 3,
    convRule: rule6
}, {
    start: 1545,
    length: 2,
    convRule: rule2
}, {
    start: 1547,
    length: 1,
    convRule: rule3
}, {
    start: 1548,
    length: 2,
    convRule: rule2
}, {
    start: 1550,
    length: 2,
    convRule: rule13
}, {
    start: 1552,
    length: 11,
    convRule: rule84
}, {
    start: 1563,
    length: 1,
    convRule: rule2
}, {
    start: 1566,
    length: 2,
    convRule: rule2
}, {
    start: 1568,
    length: 32,
    convRule: rule45
}, {
    start: 1600,
    length: 1,
    convRule: rule83
}, {
    start: 1601,
    length: 10,
    convRule: rule45
}, {
    start: 1611,
    length: 21,
    convRule: rule84
}, {
    start: 1632,
    length: 10,
    convRule: rule8
}, {
    start: 1642,
    length: 4,
    convRule: rule2
}, {
    start: 1646,
    length: 2,
    convRule: rule45
}, {
    start: 1648,
    length: 1,
    convRule: rule84
}, {
    start: 1649,
    length: 99,
    convRule: rule45
}, {
    start: 1748,
    length: 1,
    convRule: rule2
}, {
    start: 1749,
    length: 1,
    convRule: rule45
}, {
    start: 1750,
    length: 7,
    convRule: rule84
}, {
    start: 1757,
    length: 1,
    convRule: rule16
}, {
    start: 1758,
    length: 1,
    convRule: rule13
}, {
    start: 1759,
    length: 6,
    convRule: rule84
}, {
    start: 1765,
    length: 2,
    convRule: rule83
}, {
    start: 1767,
    length: 2,
    convRule: rule84
}, {
    start: 1769,
    length: 1,
    convRule: rule13
}, {
    start: 1770,
    length: 4,
    convRule: rule84
}, {
    start: 1774,
    length: 2,
    convRule: rule45
}, {
    start: 1776,
    length: 10,
    convRule: rule8
}, {
    start: 1786,
    length: 3,
    convRule: rule45
}, {
    start: 1789,
    length: 2,
    convRule: rule13
}, {
    start: 1791,
    length: 1,
    convRule: rule45
}, {
    start: 1792,
    length: 14,
    convRule: rule2
}, {
    start: 1807,
    length: 1,
    convRule: rule16
}, {
    start: 1808,
    length: 1,
    convRule: rule45
}, {
    start: 1809,
    length: 1,
    convRule: rule84
}, {
    start: 1810,
    length: 30,
    convRule: rule45
}, {
    start: 1840,
    length: 27,
    convRule: rule84
}, {
    start: 1869,
    length: 89,
    convRule: rule45
}, {
    start: 1958,
    length: 11,
    convRule: rule84
}, {
    start: 1969,
    length: 1,
    convRule: rule45
}, {
    start: 1984,
    length: 10,
    convRule: rule8
}, {
    start: 1994,
    length: 33,
    convRule: rule45
}, {
    start: 2027,
    length: 9,
    convRule: rule84
}, {
    start: 2036,
    length: 2,
    convRule: rule83
}, {
    start: 2038,
    length: 1,
    convRule: rule13
}, {
    start: 2039,
    length: 3,
    convRule: rule2
}, {
    start: 2042,
    length: 1,
    convRule: rule83
}, {
    start: 2048,
    length: 22,
    convRule: rule45
}, {
    start: 2070,
    length: 4,
    convRule: rule84
}, {
    start: 2074,
    length: 1,
    convRule: rule83
}, {
    start: 2075,
    length: 9,
    convRule: rule84
}, {
    start: 2084,
    length: 1,
    convRule: rule83
}, {
    start: 2085,
    length: 3,
    convRule: rule84
}, {
    start: 2088,
    length: 1,
    convRule: rule83
}, {
    start: 2089,
    length: 5,
    convRule: rule84
}, {
    start: 2096,
    length: 15,
    convRule: rule2
}, {
    start: 2112,
    length: 25,
    convRule: rule45
}, {
    start: 2137,
    length: 3,
    convRule: rule84
}, {
    start: 2142,
    length: 1,
    convRule: rule2
}, {
    start: 2304,
    length: 3,
    convRule: rule84
}, {
    start: 2307,
    length: 1,
    convRule: rule114
}, {
    start: 2308,
    length: 54,
    convRule: rule45
}, {
    start: 2362,
    length: 1,
    convRule: rule84
}, {
    start: 2363,
    length: 1,
    convRule: rule114
}, {
    start: 2364,
    length: 1,
    convRule: rule84
}, {
    start: 2365,
    length: 1,
    convRule: rule45
}, {
    start: 2366,
    length: 3,
    convRule: rule114
}, {
    start: 2369,
    length: 8,
    convRule: rule84
}, {
    start: 2377,
    length: 4,
    convRule: rule114
}, {
    start: 2381,
    length: 1,
    convRule: rule84
}, {
    start: 2382,
    length: 2,
    convRule: rule114
}, {
    start: 2384,
    length: 1,
    convRule: rule45
}, {
    start: 2385,
    length: 7,
    convRule: rule84
}, {
    start: 2392,
    length: 10,
    convRule: rule45
}, {
    start: 2402,
    length: 2,
    convRule: rule84
}, {
    start: 2404,
    length: 2,
    convRule: rule2
}, {
    start: 2406,
    length: 10,
    convRule: rule8
}, {
    start: 2416,
    length: 1,
    convRule: rule2
}, {
    start: 2417,
    length: 1,
    convRule: rule83
}, {
    start: 2418,
    length: 6,
    convRule: rule45
}, {
    start: 2425,
    length: 7,
    convRule: rule45
}, {
    start: 2433,
    length: 1,
    convRule: rule84
}, {
    start: 2434,
    length: 2,
    convRule: rule114
}, {
    start: 2437,
    length: 8,
    convRule: rule45
}, {
    start: 2447,
    length: 2,
    convRule: rule45
}, {
    start: 2451,
    length: 22,
    convRule: rule45
}, {
    start: 2474,
    length: 7,
    convRule: rule45
}, {
    start: 2482,
    length: 1,
    convRule: rule45
}, {
    start: 2486,
    length: 4,
    convRule: rule45
}, {
    start: 2492,
    length: 1,
    convRule: rule84
}, {
    start: 2493,
    length: 1,
    convRule: rule45
}, {
    start: 2494,
    length: 3,
    convRule: rule114
}, {
    start: 2497,
    length: 4,
    convRule: rule84
}, {
    start: 2503,
    length: 2,
    convRule: rule114
}, {
    start: 2507,
    length: 2,
    convRule: rule114
}, {
    start: 2509,
    length: 1,
    convRule: rule84
}, {
    start: 2510,
    length: 1,
    convRule: rule45
}, {
    start: 2519,
    length: 1,
    convRule: rule114
}, {
    start: 2524,
    length: 2,
    convRule: rule45
}, {
    start: 2527,
    length: 3,
    convRule: rule45
}, {
    start: 2530,
    length: 2,
    convRule: rule84
}, {
    start: 2534,
    length: 10,
    convRule: rule8
}, {
    start: 2544,
    length: 2,
    convRule: rule45
}, {
    start: 2546,
    length: 2,
    convRule: rule3
}, {
    start: 2548,
    length: 6,
    convRule: rule17
}, {
    start: 2554,
    length: 1,
    convRule: rule13
}, {
    start: 2555,
    length: 1,
    convRule: rule3
}, {
    start: 2561,
    length: 2,
    convRule: rule84
}, {
    start: 2563,
    length: 1,
    convRule: rule114
}, {
    start: 2565,
    length: 6,
    convRule: rule45
}, {
    start: 2575,
    length: 2,
    convRule: rule45
}, {
    start: 2579,
    length: 22,
    convRule: rule45
}, {
    start: 2602,
    length: 7,
    convRule: rule45
}, {
    start: 2610,
    length: 2,
    convRule: rule45
}, {
    start: 2613,
    length: 2,
    convRule: rule45
}, {
    start: 2616,
    length: 2,
    convRule: rule45
}, {
    start: 2620,
    length: 1,
    convRule: rule84
}, {
    start: 2622,
    length: 3,
    convRule: rule114
}, {
    start: 2625,
    length: 2,
    convRule: rule84
}, {
    start: 2631,
    length: 2,
    convRule: rule84
}, {
    start: 2635,
    length: 3,
    convRule: rule84
}, {
    start: 2641,
    length: 1,
    convRule: rule84
}, {
    start: 2649,
    length: 4,
    convRule: rule45
}, {
    start: 2654,
    length: 1,
    convRule: rule45
}, {
    start: 2662,
    length: 10,
    convRule: rule8
}, {
    start: 2672,
    length: 2,
    convRule: rule84
}, {
    start: 2674,
    length: 3,
    convRule: rule45
}, {
    start: 2677,
    length: 1,
    convRule: rule84
}, {
    start: 2689,
    length: 2,
    convRule: rule84
}, {
    start: 2691,
    length: 1,
    convRule: rule114
}, {
    start: 2693,
    length: 9,
    convRule: rule45
}, {
    start: 2703,
    length: 3,
    convRule: rule45
}, {
    start: 2707,
    length: 22,
    convRule: rule45
}, {
    start: 2730,
    length: 7,
    convRule: rule45
}, {
    start: 2738,
    length: 2,
    convRule: rule45
}, {
    start: 2741,
    length: 5,
    convRule: rule45
}, {
    start: 2748,
    length: 1,
    convRule: rule84
}, {
    start: 2749,
    length: 1,
    convRule: rule45
}, {
    start: 2750,
    length: 3,
    convRule: rule114
}, {
    start: 2753,
    length: 5,
    convRule: rule84
}, {
    start: 2759,
    length: 2,
    convRule: rule84
}, {
    start: 2761,
    length: 1,
    convRule: rule114
}, {
    start: 2763,
    length: 2,
    convRule: rule114
}, {
    start: 2765,
    length: 1,
    convRule: rule84
}, {
    start: 2768,
    length: 1,
    convRule: rule45
}, {
    start: 2784,
    length: 2,
    convRule: rule45
}, {
    start: 2786,
    length: 2,
    convRule: rule84
}, {
    start: 2790,
    length: 10,
    convRule: rule8
}, {
    start: 2801,
    length: 1,
    convRule: rule3
}, {
    start: 2817,
    length: 1,
    convRule: rule84
}, {
    start: 2818,
    length: 2,
    convRule: rule114
}, {
    start: 2821,
    length: 8,
    convRule: rule45
}, {
    start: 2831,
    length: 2,
    convRule: rule45
}, {
    start: 2835,
    length: 22,
    convRule: rule45
}, {
    start: 2858,
    length: 7,
    convRule: rule45
}, {
    start: 2866,
    length: 2,
    convRule: rule45
}, {
    start: 2869,
    length: 5,
    convRule: rule45
}, {
    start: 2876,
    length: 1,
    convRule: rule84
}, {
    start: 2877,
    length: 1,
    convRule: rule45
}, {
    start: 2878,
    length: 1,
    convRule: rule114
}, {
    start: 2879,
    length: 1,
    convRule: rule84
}, {
    start: 2880,
    length: 1,
    convRule: rule114
}, {
    start: 2881,
    length: 4,
    convRule: rule84
}, {
    start: 2887,
    length: 2,
    convRule: rule114
}, {
    start: 2891,
    length: 2,
    convRule: rule114
}, {
    start: 2893,
    length: 1,
    convRule: rule84
}, {
    start: 2902,
    length: 1,
    convRule: rule84
}, {
    start: 2903,
    length: 1,
    convRule: rule114
}, {
    start: 2908,
    length: 2,
    convRule: rule45
}, {
    start: 2911,
    length: 3,
    convRule: rule45
}, {
    start: 2914,
    length: 2,
    convRule: rule84
}, {
    start: 2918,
    length: 10,
    convRule: rule8
}, {
    start: 2928,
    length: 1,
    convRule: rule13
}, {
    start: 2929,
    length: 1,
    convRule: rule45
}, {
    start: 2930,
    length: 6,
    convRule: rule17
}, {
    start: 2946,
    length: 1,
    convRule: rule84
}, {
    start: 2947,
    length: 1,
    convRule: rule45
}, {
    start: 2949,
    length: 6,
    convRule: rule45
}, {
    start: 2958,
    length: 3,
    convRule: rule45
}, {
    start: 2962,
    length: 4,
    convRule: rule45
}, {
    start: 2969,
    length: 2,
    convRule: rule45
}, {
    start: 2972,
    length: 1,
    convRule: rule45
}, {
    start: 2974,
    length: 2,
    convRule: rule45
}, {
    start: 2979,
    length: 2,
    convRule: rule45
}, {
    start: 2984,
    length: 3,
    convRule: rule45
}, {
    start: 2990,
    length: 12,
    convRule: rule45
}, {
    start: 3006,
    length: 2,
    convRule: rule114
}, {
    start: 3008,
    length: 1,
    convRule: rule84
}, {
    start: 3009,
    length: 2,
    convRule: rule114
}, {
    start: 3014,
    length: 3,
    convRule: rule114
}, {
    start: 3018,
    length: 3,
    convRule: rule114
}, {
    start: 3021,
    length: 1,
    convRule: rule84
}, {
    start: 3024,
    length: 1,
    convRule: rule45
}, {
    start: 3031,
    length: 1,
    convRule: rule114
}, {
    start: 3046,
    length: 10,
    convRule: rule8
}, {
    start: 3056,
    length: 3,
    convRule: rule17
}, {
    start: 3059,
    length: 6,
    convRule: rule13
}, {
    start: 3065,
    length: 1,
    convRule: rule3
}, {
    start: 3066,
    length: 1,
    convRule: rule13
}, {
    start: 3073,
    length: 3,
    convRule: rule114
}, {
    start: 3077,
    length: 8,
    convRule: rule45
}, {
    start: 3086,
    length: 3,
    convRule: rule45
}, {
    start: 3090,
    length: 23,
    convRule: rule45
}, {
    start: 3114,
    length: 10,
    convRule: rule45
}, {
    start: 3125,
    length: 5,
    convRule: rule45
}, {
    start: 3133,
    length: 1,
    convRule: rule45
}, {
    start: 3134,
    length: 3,
    convRule: rule84
}, {
    start: 3137,
    length: 4,
    convRule: rule114
}, {
    start: 3142,
    length: 3,
    convRule: rule84
}, {
    start: 3146,
    length: 4,
    convRule: rule84
}, {
    start: 3157,
    length: 2,
    convRule: rule84
}, {
    start: 3160,
    length: 2,
    convRule: rule45
}, {
    start: 3168,
    length: 2,
    convRule: rule45
}, {
    start: 3170,
    length: 2,
    convRule: rule84
}, {
    start: 3174,
    length: 10,
    convRule: rule8
}, {
    start: 3192,
    length: 7,
    convRule: rule17
}, {
    start: 3199,
    length: 1,
    convRule: rule13
}, {
    start: 3202,
    length: 2,
    convRule: rule114
}, {
    start: 3205,
    length: 8,
    convRule: rule45
}, {
    start: 3214,
    length: 3,
    convRule: rule45
}, {
    start: 3218,
    length: 23,
    convRule: rule45
}, {
    start: 3242,
    length: 10,
    convRule: rule45
}, {
    start: 3253,
    length: 5,
    convRule: rule45
}, {
    start: 3260,
    length: 1,
    convRule: rule84
}, {
    start: 3261,
    length: 1,
    convRule: rule45
}, {
    start: 3262,
    length: 1,
    convRule: rule114
}, {
    start: 3263,
    length: 1,
    convRule: rule84
}, {
    start: 3264,
    length: 5,
    convRule: rule114
}, {
    start: 3270,
    length: 1,
    convRule: rule84
}, {
    start: 3271,
    length: 2,
    convRule: rule114
}, {
    start: 3274,
    length: 2,
    convRule: rule114
}, {
    start: 3276,
    length: 2,
    convRule: rule84
}, {
    start: 3285,
    length: 2,
    convRule: rule114
}, {
    start: 3294,
    length: 1,
    convRule: rule45
}, {
    start: 3296,
    length: 2,
    convRule: rule45
}, {
    start: 3298,
    length: 2,
    convRule: rule84
}, {
    start: 3302,
    length: 10,
    convRule: rule8
}, {
    start: 3313,
    length: 2,
    convRule: rule45
}, {
    start: 3330,
    length: 2,
    convRule: rule114
}, {
    start: 3333,
    length: 8,
    convRule: rule45
}, {
    start: 3342,
    length: 3,
    convRule: rule45
}, {
    start: 3346,
    length: 41,
    convRule: rule45
}, {
    start: 3389,
    length: 1,
    convRule: rule45
}, {
    start: 3390,
    length: 3,
    convRule: rule114
}, {
    start: 3393,
    length: 4,
    convRule: rule84
}, {
    start: 3398,
    length: 3,
    convRule: rule114
}, {
    start: 3402,
    length: 3,
    convRule: rule114
}, {
    start: 3405,
    length: 1,
    convRule: rule84
}, {
    start: 3406,
    length: 1,
    convRule: rule45
}, {
    start: 3415,
    length: 1,
    convRule: rule114
}, {
    start: 3424,
    length: 2,
    convRule: rule45
}, {
    start: 3426,
    length: 2,
    convRule: rule84
}, {
    start: 3430,
    length: 10,
    convRule: rule8
}, {
    start: 3440,
    length: 6,
    convRule: rule17
}, {
    start: 3449,
    length: 1,
    convRule: rule13
}, {
    start: 3450,
    length: 6,
    convRule: rule45
}, {
    start: 3458,
    length: 2,
    convRule: rule114
}, {
    start: 3461,
    length: 18,
    convRule: rule45
}, {
    start: 3482,
    length: 24,
    convRule: rule45
}, {
    start: 3507,
    length: 9,
    convRule: rule45
}, {
    start: 3517,
    length: 1,
    convRule: rule45
}, {
    start: 3520,
    length: 7,
    convRule: rule45
}, {
    start: 3530,
    length: 1,
    convRule: rule84
}, {
    start: 3535,
    length: 3,
    convRule: rule114
}, {
    start: 3538,
    length: 3,
    convRule: rule84
}, {
    start: 3542,
    length: 1,
    convRule: rule84
}, {
    start: 3544,
    length: 8,
    convRule: rule114
}, {
    start: 3570,
    length: 2,
    convRule: rule114
}, {
    start: 3572,
    length: 1,
    convRule: rule2
}, {
    start: 3585,
    length: 48,
    convRule: rule45
}, {
    start: 3633,
    length: 1,
    convRule: rule84
}, {
    start: 3634,
    length: 2,
    convRule: rule45
}, {
    start: 3636,
    length: 7,
    convRule: rule84
}, {
    start: 3647,
    length: 1,
    convRule: rule3
}, {
    start: 3648,
    length: 6,
    convRule: rule45
}, {
    start: 3654,
    length: 1,
    convRule: rule83
}, {
    start: 3655,
    length: 8,
    convRule: rule84
}, {
    start: 3663,
    length: 1,
    convRule: rule2
}, {
    start: 3664,
    length: 10,
    convRule: rule8
}, {
    start: 3674,
    length: 2,
    convRule: rule2
}, {
    start: 3713,
    length: 2,
    convRule: rule45
}, {
    start: 3716,
    length: 1,
    convRule: rule45
}, {
    start: 3719,
    length: 2,
    convRule: rule45
}, {
    start: 3722,
    length: 1,
    convRule: rule45
}, {
    start: 3725,
    length: 1,
    convRule: rule45
}, {
    start: 3732,
    length: 4,
    convRule: rule45
}, {
    start: 3737,
    length: 7,
    convRule: rule45
}, {
    start: 3745,
    length: 3,
    convRule: rule45
}, {
    start: 3749,
    length: 1,
    convRule: rule45
}, {
    start: 3751,
    length: 1,
    convRule: rule45
}, {
    start: 3754,
    length: 2,
    convRule: rule45
}, {
    start: 3757,
    length: 4,
    convRule: rule45
}, {
    start: 3761,
    length: 1,
    convRule: rule84
}, {
    start: 3762,
    length: 2,
    convRule: rule45
}, {
    start: 3764,
    length: 6,
    convRule: rule84
}, {
    start: 3771,
    length: 2,
    convRule: rule84
}, {
    start: 3773,
    length: 1,
    convRule: rule45
}, {
    start: 3776,
    length: 5,
    convRule: rule45
}, {
    start: 3782,
    length: 1,
    convRule: rule83
}, {
    start: 3784,
    length: 6,
    convRule: rule84
}, {
    start: 3792,
    length: 10,
    convRule: rule8
}, {
    start: 3804,
    length: 2,
    convRule: rule45
}, {
    start: 3840,
    length: 1,
    convRule: rule45
}, {
    start: 3841,
    length: 3,
    convRule: rule13
}, {
    start: 3844,
    length: 15,
    convRule: rule2
}, {
    start: 3859,
    length: 5,
    convRule: rule13
}, {
    start: 3864,
    length: 2,
    convRule: rule84
}, {
    start: 3866,
    length: 6,
    convRule: rule13
}, {
    start: 3872,
    length: 10,
    convRule: rule8
}, {
    start: 3882,
    length: 10,
    convRule: rule17
}, {
    start: 3892,
    length: 1,
    convRule: rule13
}, {
    start: 3893,
    length: 1,
    convRule: rule84
}, {
    start: 3894,
    length: 1,
    convRule: rule13
}, {
    start: 3895,
    length: 1,
    convRule: rule84
}, {
    start: 3896,
    length: 1,
    convRule: rule13
}, {
    start: 3897,
    length: 1,
    convRule: rule84
}, {
    start: 3898,
    length: 1,
    convRule: rule4
}, {
    start: 3899,
    length: 1,
    convRule: rule5
}, {
    start: 3900,
    length: 1,
    convRule: rule4
}, {
    start: 3901,
    length: 1,
    convRule: rule5
}, {
    start: 3902,
    length: 2,
    convRule: rule114
}, {
    start: 3904,
    length: 8,
    convRule: rule45
}, {
    start: 3913,
    length: 36,
    convRule: rule45
}, {
    start: 3953,
    length: 14,
    convRule: rule84
}, {
    start: 3967,
    length: 1,
    convRule: rule114
}, {
    start: 3968,
    length: 5,
    convRule: rule84
}, {
    start: 3973,
    length: 1,
    convRule: rule2
}, {
    start: 3974,
    length: 2,
    convRule: rule84
}, {
    start: 3976,
    length: 5,
    convRule: rule45
}, {
    start: 3981,
    length: 11,
    convRule: rule84
}, {
    start: 3993,
    length: 36,
    convRule: rule84
}, {
    start: 4030,
    length: 8,
    convRule: rule13
}, {
    start: 4038,
    length: 1,
    convRule: rule84
}, {
    start: 4039,
    length: 6,
    convRule: rule13
}, {
    start: 4046,
    length: 2,
    convRule: rule13
}, {
    start: 4048,
    length: 5,
    convRule: rule2
}, {
    start: 4053,
    length: 4,
    convRule: rule13
}, {
    start: 4057,
    length: 2,
    convRule: rule2
}, {
    start: 4096,
    length: 43,
    convRule: rule45
}, {
    start: 4139,
    length: 2,
    convRule: rule114
}, {
    start: 4141,
    length: 4,
    convRule: rule84
}, {
    start: 4145,
    length: 1,
    convRule: rule114
}, {
    start: 4146,
    length: 6,
    convRule: rule84
}, {
    start: 4152,
    length: 1,
    convRule: rule114
}, {
    start: 4153,
    length: 2,
    convRule: rule84
}, {
    start: 4155,
    length: 2,
    convRule: rule114
}, {
    start: 4157,
    length: 2,
    convRule: rule84
}, {
    start: 4159,
    length: 1,
    convRule: rule45
}, {
    start: 4160,
    length: 10,
    convRule: rule8
}, {
    start: 4170,
    length: 6,
    convRule: rule2
}, {
    start: 4176,
    length: 6,
    convRule: rule45
}, {
    start: 4182,
    length: 2,
    convRule: rule114
}, {
    start: 4184,
    length: 2,
    convRule: rule84
}, {
    start: 4186,
    length: 4,
    convRule: rule45
}, {
    start: 4190,
    length: 3,
    convRule: rule84
}, {
    start: 4193,
    length: 1,
    convRule: rule45
}, {
    start: 4194,
    length: 3,
    convRule: rule114
}, {
    start: 4197,
    length: 2,
    convRule: rule45
}, {
    start: 4199,
    length: 7,
    convRule: rule114
}, {
    start: 4206,
    length: 3,
    convRule: rule45
}, {
    start: 4209,
    length: 4,
    convRule: rule84
}, {
    start: 4213,
    length: 13,
    convRule: rule45
}, {
    start: 4226,
    length: 1,
    convRule: rule84
}, {
    start: 4227,
    length: 2,
    convRule: rule114
}, {
    start: 4229,
    length: 2,
    convRule: rule84
}, {
    start: 4231,
    length: 6,
    convRule: rule114
}, {
    start: 4237,
    length: 1,
    convRule: rule84
}, {
    start: 4238,
    length: 1,
    convRule: rule45
}, {
    start: 4239,
    length: 1,
    convRule: rule114
}, {
    start: 4240,
    length: 10,
    convRule: rule8
}, {
    start: 4250,
    length: 3,
    convRule: rule114
}, {
    start: 4253,
    length: 1,
    convRule: rule84
}, {
    start: 4254,
    length: 2,
    convRule: rule13
}, {
    start: 4256,
    length: 38,
    convRule: rule115
}, {
    start: 4304,
    length: 43,
    convRule: rule45
}, {
    start: 4347,
    length: 1,
    convRule: rule2
}, {
    start: 4348,
    length: 1,
    convRule: rule83
}, {
    start: 4352,
    length: 329,
    convRule: rule45
}, {
    start: 4682,
    length: 4,
    convRule: rule45
}, {
    start: 4688,
    length: 7,
    convRule: rule45
}, {
    start: 4696,
    length: 1,
    convRule: rule45
}, {
    start: 4698,
    length: 4,
    convRule: rule45
}, {
    start: 4704,
    length: 41,
    convRule: rule45
}, {
    start: 4746,
    length: 4,
    convRule: rule45
}, {
    start: 4752,
    length: 33,
    convRule: rule45
}, {
    start: 4786,
    length: 4,
    convRule: rule45
}, {
    start: 4792,
    length: 7,
    convRule: rule45
}, {
    start: 4800,
    length: 1,
    convRule: rule45
}, {
    start: 4802,
    length: 4,
    convRule: rule45
}, {
    start: 4808,
    length: 15,
    convRule: rule45
}, {
    start: 4824,
    length: 57,
    convRule: rule45
}, {
    start: 4882,
    length: 4,
    convRule: rule45
}, {
    start: 4888,
    length: 67,
    convRule: rule45
}, {
    start: 4957,
    length: 3,
    convRule: rule84
}, {
    start: 4960,
    length: 1,
    convRule: rule13
}, {
    start: 4961,
    length: 8,
    convRule: rule2
}, {
    start: 4969,
    length: 20,
    convRule: rule17
}, {
    start: 4992,
    length: 16,
    convRule: rule45
}, {
    start: 5008,
    length: 10,
    convRule: rule13
}, {
    start: 5024,
    length: 85,
    convRule: rule45
}, {
    start: 5120,
    length: 1,
    convRule: rule7
}, {
    start: 5121,
    length: 620,
    convRule: rule45
}, {
    start: 5741,
    length: 2,
    convRule: rule2
}, {
    start: 5743,
    length: 17,
    convRule: rule45
}, {
    start: 5760,
    length: 1,
    convRule: rule1
}, {
    start: 5761,
    length: 26,
    convRule: rule45
}, {
    start: 5787,
    length: 1,
    convRule: rule4
}, {
    start: 5788,
    length: 1,
    convRule: rule5
}, {
    start: 5792,
    length: 75,
    convRule: rule45
}, {
    start: 5867,
    length: 3,
    convRule: rule2
}, {
    start: 5870,
    length: 3,
    convRule: rule116
}, {
    start: 5888,
    length: 13,
    convRule: rule45
}, {
    start: 5902,
    length: 4,
    convRule: rule45
}, {
    start: 5906,
    length: 3,
    convRule: rule84
}, {
    start: 5920,
    length: 18,
    convRule: rule45
}, {
    start: 5938,
    length: 3,
    convRule: rule84
}, {
    start: 5941,
    length: 2,
    convRule: rule2
}, {
    start: 5952,
    length: 18,
    convRule: rule45
}, {
    start: 5970,
    length: 2,
    convRule: rule84
}, {
    start: 5984,
    length: 13,
    convRule: rule45
}, {
    start: 5998,
    length: 3,
    convRule: rule45
}, {
    start: 6002,
    length: 2,
    convRule: rule84
}, {
    start: 6016,
    length: 52,
    convRule: rule45
}, {
    start: 6068,
    length: 2,
    convRule: rule16
}, {
    start: 6070,
    length: 1,
    convRule: rule114
}, {
    start: 6071,
    length: 7,
    convRule: rule84
}, {
    start: 6078,
    length: 8,
    convRule: rule114
}, {
    start: 6086,
    length: 1,
    convRule: rule84
}, {
    start: 6087,
    length: 2,
    convRule: rule114
}, {
    start: 6089,
    length: 11,
    convRule: rule84
}, {
    start: 6100,
    length: 3,
    convRule: rule2
}, {
    start: 6103,
    length: 1,
    convRule: rule83
}, {
    start: 6104,
    length: 3,
    convRule: rule2
}, {
    start: 6107,
    length: 1,
    convRule: rule3
}, {
    start: 6108,
    length: 1,
    convRule: rule45
}, {
    start: 6109,
    length: 1,
    convRule: rule84
}, {
    start: 6112,
    length: 10,
    convRule: rule8
}, {
    start: 6128,
    length: 10,
    convRule: rule17
}, {
    start: 6144,
    length: 6,
    convRule: rule2
}, {
    start: 6150,
    length: 1,
    convRule: rule7
}, {
    start: 6151,
    length: 4,
    convRule: rule2
}, {
    start: 6155,
    length: 3,
    convRule: rule84
}, {
    start: 6158,
    length: 1,
    convRule: rule1
}, {
    start: 6160,
    length: 10,
    convRule: rule8
}, {
    start: 6176,
    length: 35,
    convRule: rule45
}, {
    start: 6211,
    length: 1,
    convRule: rule83
}, {
    start: 6212,
    length: 52,
    convRule: rule45
}, {
    start: 6272,
    length: 41,
    convRule: rule45
}, {
    start: 6313,
    length: 1,
    convRule: rule84
}, {
    start: 6314,
    length: 1,
    convRule: rule45
}, {
    start: 6320,
    length: 70,
    convRule: rule45
}, {
    start: 6400,
    length: 29,
    convRule: rule45
}, {
    start: 6432,
    length: 3,
    convRule: rule84
}, {
    start: 6435,
    length: 4,
    convRule: rule114
}, {
    start: 6439,
    length: 2,
    convRule: rule84
}, {
    start: 6441,
    length: 3,
    convRule: rule114
}, {
    start: 6448,
    length: 2,
    convRule: rule114
}, {
    start: 6450,
    length: 1,
    convRule: rule84
}, {
    start: 6451,
    length: 6,
    convRule: rule114
}, {
    start: 6457,
    length: 3,
    convRule: rule84
}, {
    start: 6464,
    length: 1,
    convRule: rule13
}, {
    start: 6468,
    length: 2,
    convRule: rule2
}, {
    start: 6470,
    length: 10,
    convRule: rule8
}, {
    start: 6480,
    length: 30,
    convRule: rule45
}, {
    start: 6512,
    length: 5,
    convRule: rule45
}, {
    start: 6528,
    length: 44,
    convRule: rule45
}, {
    start: 6576,
    length: 17,
    convRule: rule114
}, {
    start: 6593,
    length: 7,
    convRule: rule45
}, {
    start: 6600,
    length: 2,
    convRule: rule114
}, {
    start: 6608,
    length: 10,
    convRule: rule8
}, {
    start: 6618,
    length: 1,
    convRule: rule17
}, {
    start: 6622,
    length: 34,
    convRule: rule13
}, {
    start: 6656,
    length: 23,
    convRule: rule45
}, {
    start: 6679,
    length: 2,
    convRule: rule84
}, {
    start: 6681,
    length: 3,
    convRule: rule114
}, {
    start: 6686,
    length: 2,
    convRule: rule2
}, {
    start: 6688,
    length: 53,
    convRule: rule45
}, {
    start: 6741,
    length: 1,
    convRule: rule114
}, {
    start: 6742,
    length: 1,
    convRule: rule84
}, {
    start: 6743,
    length: 1,
    convRule: rule114
}, {
    start: 6744,
    length: 7,
    convRule: rule84
}, {
    start: 6752,
    length: 1,
    convRule: rule84
}, {
    start: 6753,
    length: 1,
    convRule: rule114
}, {
    start: 6754,
    length: 1,
    convRule: rule84
}, {
    start: 6755,
    length: 2,
    convRule: rule114
}, {
    start: 6757,
    length: 8,
    convRule: rule84
}, {
    start: 6765,
    length: 6,
    convRule: rule114
}, {
    start: 6771,
    length: 10,
    convRule: rule84
}, {
    start: 6783,
    length: 1,
    convRule: rule84
}, {
    start: 6784,
    length: 10,
    convRule: rule8
}, {
    start: 6800,
    length: 10,
    convRule: rule8
}, {
    start: 6816,
    length: 7,
    convRule: rule2
}, {
    start: 6823,
    length: 1,
    convRule: rule83
}, {
    start: 6824,
    length: 6,
    convRule: rule2
}, {
    start: 6912,
    length: 4,
    convRule: rule84
}, {
    start: 6916,
    length: 1,
    convRule: rule114
}, {
    start: 6917,
    length: 47,
    convRule: rule45
}, {
    start: 6964,
    length: 1,
    convRule: rule84
}, {
    start: 6965,
    length: 1,
    convRule: rule114
}, {
    start: 6966,
    length: 5,
    convRule: rule84
}, {
    start: 6971,
    length: 1,
    convRule: rule114
}, {
    start: 6972,
    length: 1,
    convRule: rule84
}, {
    start: 6973,
    length: 5,
    convRule: rule114
}, {
    start: 6978,
    length: 1,
    convRule: rule84
}, {
    start: 6979,
    length: 2,
    convRule: rule114
}, {
    start: 6981,
    length: 7,
    convRule: rule45
}, {
    start: 6992,
    length: 10,
    convRule: rule8
}, {
    start: 7002,
    length: 7,
    convRule: rule2
}, {
    start: 7009,
    length: 10,
    convRule: rule13
}, {
    start: 7019,
    length: 9,
    convRule: rule84
}, {
    start: 7028,
    length: 9,
    convRule: rule13
}, {
    start: 7040,
    length: 2,
    convRule: rule84
}, {
    start: 7042,
    length: 1,
    convRule: rule114
}, {
    start: 7043,
    length: 30,
    convRule: rule45
}, {
    start: 7073,
    length: 1,
    convRule: rule114
}, {
    start: 7074,
    length: 4,
    convRule: rule84
}, {
    start: 7078,
    length: 2,
    convRule: rule114
}, {
    start: 7080,
    length: 2,
    convRule: rule84
}, {
    start: 7082,
    length: 1,
    convRule: rule114
}, {
    start: 7086,
    length: 2,
    convRule: rule45
}, {
    start: 7088,
    length: 10,
    convRule: rule8
}, {
    start: 7104,
    length: 38,
    convRule: rule45
}, {
    start: 7142,
    length: 1,
    convRule: rule84
}, {
    start: 7143,
    length: 1,
    convRule: rule114
}, {
    start: 7144,
    length: 2,
    convRule: rule84
}, {
    start: 7146,
    length: 3,
    convRule: rule114
}, {
    start: 7149,
    length: 1,
    convRule: rule84
}, {
    start: 7150,
    length: 1,
    convRule: rule114
}, {
    start: 7151,
    length: 3,
    convRule: rule84
}, {
    start: 7154,
    length: 2,
    convRule: rule114
}, {
    start: 7164,
    length: 4,
    convRule: rule2
}, {
    start: 7168,
    length: 36,
    convRule: rule45
}, {
    start: 7204,
    length: 8,
    convRule: rule114
}, {
    start: 7212,
    length: 8,
    convRule: rule84
}, {
    start: 7220,
    length: 2,
    convRule: rule114
}, {
    start: 7222,
    length: 2,
    convRule: rule84
}, {
    start: 7227,
    length: 5,
    convRule: rule2
}, {
    start: 7232,
    length: 10,
    convRule: rule8
}, {
    start: 7245,
    length: 3,
    convRule: rule45
}, {
    start: 7248,
    length: 10,
    convRule: rule8
}, {
    start: 7258,
    length: 30,
    convRule: rule45
}, {
    start: 7288,
    length: 6,
    convRule: rule83
}, {
    start: 7294,
    length: 2,
    convRule: rule2
}, {
    start: 7376,
    length: 3,
    convRule: rule84
}, {
    start: 7379,
    length: 1,
    convRule: rule2
}, {
    start: 7380,
    length: 13,
    convRule: rule84
}, {
    start: 7393,
    length: 1,
    convRule: rule114
}, {
    start: 7394,
    length: 7,
    convRule: rule84
}, {
    start: 7401,
    length: 4,
    convRule: rule45
}, {
    start: 7405,
    length: 1,
    convRule: rule84
}, {
    start: 7406,
    length: 4,
    convRule: rule45
}, {
    start: 7410,
    length: 1,
    convRule: rule114
}, {
    start: 7424,
    length: 44,
    convRule: rule14
}, {
    start: 7468,
    length: 54,
    convRule: rule83
}, {
    start: 7522,
    length: 22,
    convRule: rule14
}, {
    start: 7544,
    length: 1,
    convRule: rule83
}, {
    start: 7545,
    length: 1,
    convRule: rule117
}, {
    start: 7546,
    length: 3,
    convRule: rule14
}, {
    start: 7549,
    length: 1,
    convRule: rule118
}, {
    start: 7550,
    length: 29,
    convRule: rule14
}, {
    start: 7579,
    length: 37,
    convRule: rule83
}, {
    start: 7616,
    length: 39,
    convRule: rule84
}, {
    start: 7676,
    length: 4,
    convRule: rule84
}, {
    start: 7680,
    length: 1,
    convRule: rule21
}, {
    start: 7681,
    length: 1,
    convRule: rule22
}, {
    start: 7682,
    length: 1,
    convRule: rule21
}, {
    start: 7683,
    length: 1,
    convRule: rule22
}, {
    start: 7684,
    length: 1,
    convRule: rule21
}, {
    start: 7685,
    length: 1,
    convRule: rule22
}, {
    start: 7686,
    length: 1,
    convRule: rule21
}, {
    start: 7687,
    length: 1,
    convRule: rule22
}, {
    start: 7688,
    length: 1,
    convRule: rule21
}, {
    start: 7689,
    length: 1,
    convRule: rule22
}, {
    start: 7690,
    length: 1,
    convRule: rule21
}, {
    start: 7691,
    length: 1,
    convRule: rule22
}, {
    start: 7692,
    length: 1,
    convRule: rule21
}, {
    start: 7693,
    length: 1,
    convRule: rule22
}, {
    start: 7694,
    length: 1,
    convRule: rule21
}, {
    start: 7695,
    length: 1,
    convRule: rule22
}, {
    start: 7696,
    length: 1,
    convRule: rule21
}, {
    start: 7697,
    length: 1,
    convRule: rule22
}, {
    start: 7698,
    length: 1,
    convRule: rule21
}, {
    start: 7699,
    length: 1,
    convRule: rule22
}, {
    start: 7700,
    length: 1,
    convRule: rule21
}, {
    start: 7701,
    length: 1,
    convRule: rule22
}, {
    start: 7702,
    length: 1,
    convRule: rule21
}, {
    start: 7703,
    length: 1,
    convRule: rule22
}, {
    start: 7704,
    length: 1,
    convRule: rule21
}, {
    start: 7705,
    length: 1,
    convRule: rule22
}, {
    start: 7706,
    length: 1,
    convRule: rule21
}, {
    start: 7707,
    length: 1,
    convRule: rule22
}, {
    start: 7708,
    length: 1,
    convRule: rule21
}, {
    start: 7709,
    length: 1,
    convRule: rule22
}, {
    start: 7710,
    length: 1,
    convRule: rule21
}, {
    start: 7711,
    length: 1,
    convRule: rule22
}, {
    start: 7712,
    length: 1,
    convRule: rule21
}, {
    start: 7713,
    length: 1,
    convRule: rule22
}, {
    start: 7714,
    length: 1,
    convRule: rule21
}, {
    start: 7715,
    length: 1,
    convRule: rule22
}, {
    start: 7716,
    length: 1,
    convRule: rule21
}, {
    start: 7717,
    length: 1,
    convRule: rule22
}, {
    start: 7718,
    length: 1,
    convRule: rule21
}, {
    start: 7719,
    length: 1,
    convRule: rule22
}, {
    start: 7720,
    length: 1,
    convRule: rule21
}, {
    start: 7721,
    length: 1,
    convRule: rule22
}, {
    start: 7722,
    length: 1,
    convRule: rule21
}, {
    start: 7723,
    length: 1,
    convRule: rule22
}, {
    start: 7724,
    length: 1,
    convRule: rule21
}, {
    start: 7725,
    length: 1,
    convRule: rule22
}, {
    start: 7726,
    length: 1,
    convRule: rule21
}, {
    start: 7727,
    length: 1,
    convRule: rule22
}, {
    start: 7728,
    length: 1,
    convRule: rule21
}, {
    start: 7729,
    length: 1,
    convRule: rule22
}, {
    start: 7730,
    length: 1,
    convRule: rule21
}, {
    start: 7731,
    length: 1,
    convRule: rule22
}, {
    start: 7732,
    length: 1,
    convRule: rule21
}, {
    start: 7733,
    length: 1,
    convRule: rule22
}, {
    start: 7734,
    length: 1,
    convRule: rule21
}, {
    start: 7735,
    length: 1,
    convRule: rule22
}, {
    start: 7736,
    length: 1,
    convRule: rule21
}, {
    start: 7737,
    length: 1,
    convRule: rule22
}, {
    start: 7738,
    length: 1,
    convRule: rule21
}, {
    start: 7739,
    length: 1,
    convRule: rule22
}, {
    start: 7740,
    length: 1,
    convRule: rule21
}, {
    start: 7741,
    length: 1,
    convRule: rule22
}, {
    start: 7742,
    length: 1,
    convRule: rule21
}, {
    start: 7743,
    length: 1,
    convRule: rule22
}, {
    start: 7744,
    length: 1,
    convRule: rule21
}, {
    start: 7745,
    length: 1,
    convRule: rule22
}, {
    start: 7746,
    length: 1,
    convRule: rule21
}, {
    start: 7747,
    length: 1,
    convRule: rule22
}, {
    start: 7748,
    length: 1,
    convRule: rule21
}, {
    start: 7749,
    length: 1,
    convRule: rule22
}, {
    start: 7750,
    length: 1,
    convRule: rule21
}, {
    start: 7751,
    length: 1,
    convRule: rule22
}, {
    start: 7752,
    length: 1,
    convRule: rule21
}, {
    start: 7753,
    length: 1,
    convRule: rule22
}, {
    start: 7754,
    length: 1,
    convRule: rule21
}, {
    start: 7755,
    length: 1,
    convRule: rule22
}, {
    start: 7756,
    length: 1,
    convRule: rule21
}, {
    start: 7757,
    length: 1,
    convRule: rule22
}, {
    start: 7758,
    length: 1,
    convRule: rule21
}, {
    start: 7759,
    length: 1,
    convRule: rule22
}, {
    start: 7760,
    length: 1,
    convRule: rule21
}, {
    start: 7761,
    length: 1,
    convRule: rule22
}, {
    start: 7762,
    length: 1,
    convRule: rule21
}, {
    start: 7763,
    length: 1,
    convRule: rule22
}, {
    start: 7764,
    length: 1,
    convRule: rule21
}, {
    start: 7765,
    length: 1,
    convRule: rule22
}, {
    start: 7766,
    length: 1,
    convRule: rule21
}, {
    start: 7767,
    length: 1,
    convRule: rule22
}, {
    start: 7768,
    length: 1,
    convRule: rule21
}, {
    start: 7769,
    length: 1,
    convRule: rule22
}, {
    start: 7770,
    length: 1,
    convRule: rule21
}, {
    start: 7771,
    length: 1,
    convRule: rule22
}, {
    start: 7772,
    length: 1,
    convRule: rule21
}, {
    start: 7773,
    length: 1,
    convRule: rule22
}, {
    start: 7774,
    length: 1,
    convRule: rule21
}, {
    start: 7775,
    length: 1,
    convRule: rule22
}, {
    start: 7776,
    length: 1,
    convRule: rule21
}, {
    start: 7777,
    length: 1,
    convRule: rule22
}, {
    start: 7778,
    length: 1,
    convRule: rule21
}, {
    start: 7779,
    length: 1,
    convRule: rule22
}, {
    start: 7780,
    length: 1,
    convRule: rule21
}, {
    start: 7781,
    length: 1,
    convRule: rule22
}, {
    start: 7782,
    length: 1,
    convRule: rule21
}, {
    start: 7783,
    length: 1,
    convRule: rule22
}, {
    start: 7784,
    length: 1,
    convRule: rule21
}, {
    start: 7785,
    length: 1,
    convRule: rule22
}, {
    start: 7786,
    length: 1,
    convRule: rule21
}, {
    start: 7787,
    length: 1,
    convRule: rule22
}, {
    start: 7788,
    length: 1,
    convRule: rule21
}, {
    start: 7789,
    length: 1,
    convRule: rule22
}, {
    start: 7790,
    length: 1,
    convRule: rule21
}, {
    start: 7791,
    length: 1,
    convRule: rule22
}, {
    start: 7792,
    length: 1,
    convRule: rule21
}, {
    start: 7793,
    length: 1,
    convRule: rule22
}, {
    start: 7794,
    length: 1,
    convRule: rule21
}, {
    start: 7795,
    length: 1,
    convRule: rule22
}, {
    start: 7796,
    length: 1,
    convRule: rule21
}, {
    start: 7797,
    length: 1,
    convRule: rule22
}, {
    start: 7798,
    length: 1,
    convRule: rule21
}, {
    start: 7799,
    length: 1,
    convRule: rule22
}, {
    start: 7800,
    length: 1,
    convRule: rule21
}, {
    start: 7801,
    length: 1,
    convRule: rule22
}, {
    start: 7802,
    length: 1,
    convRule: rule21
}, {
    start: 7803,
    length: 1,
    convRule: rule22
}, {
    start: 7804,
    length: 1,
    convRule: rule21
}, {
    start: 7805,
    length: 1,
    convRule: rule22
}, {
    start: 7806,
    length: 1,
    convRule: rule21
}, {
    start: 7807,
    length: 1,
    convRule: rule22
}, {
    start: 7808,
    length: 1,
    convRule: rule21
}, {
    start: 7809,
    length: 1,
    convRule: rule22
}, {
    start: 7810,
    length: 1,
    convRule: rule21
}, {
    start: 7811,
    length: 1,
    convRule: rule22
}, {
    start: 7812,
    length: 1,
    convRule: rule21
}, {
    start: 7813,
    length: 1,
    convRule: rule22
}, {
    start: 7814,
    length: 1,
    convRule: rule21
}, {
    start: 7815,
    length: 1,
    convRule: rule22
}, {
    start: 7816,
    length: 1,
    convRule: rule21
}, {
    start: 7817,
    length: 1,
    convRule: rule22
}, {
    start: 7818,
    length: 1,
    convRule: rule21
}, {
    start: 7819,
    length: 1,
    convRule: rule22
}, {
    start: 7820,
    length: 1,
    convRule: rule21
}, {
    start: 7821,
    length: 1,
    convRule: rule22
}, {
    start: 7822,
    length: 1,
    convRule: rule21
}, {
    start: 7823,
    length: 1,
    convRule: rule22
}, {
    start: 7824,
    length: 1,
    convRule: rule21
}, {
    start: 7825,
    length: 1,
    convRule: rule22
}, {
    start: 7826,
    length: 1,
    convRule: rule21
}, {
    start: 7827,
    length: 1,
    convRule: rule22
}, {
    start: 7828,
    length: 1,
    convRule: rule21
}, {
    start: 7829,
    length: 1,
    convRule: rule22
}, {
    start: 7830,
    length: 5,
    convRule: rule14
}, {
    start: 7835,
    length: 1,
    convRule: rule119
}, {
    start: 7836,
    length: 2,
    convRule: rule14
}, {
    start: 7838,
    length: 1,
    convRule: rule120
}, {
    start: 7839,
    length: 1,
    convRule: rule14
}, {
    start: 7840,
    length: 1,
    convRule: rule21
}, {
    start: 7841,
    length: 1,
    convRule: rule22
}, {
    start: 7842,
    length: 1,
    convRule: rule21
}, {
    start: 7843,
    length: 1,
    convRule: rule22
}, {
    start: 7844,
    length: 1,
    convRule: rule21
}, {
    start: 7845,
    length: 1,
    convRule: rule22
}, {
    start: 7846,
    length: 1,
    convRule: rule21
}, {
    start: 7847,
    length: 1,
    convRule: rule22
}, {
    start: 7848,
    length: 1,
    convRule: rule21
}, {
    start: 7849,
    length: 1,
    convRule: rule22
}, {
    start: 7850,
    length: 1,
    convRule: rule21
}, {
    start: 7851,
    length: 1,
    convRule: rule22
}, {
    start: 7852,
    length: 1,
    convRule: rule21
}, {
    start: 7853,
    length: 1,
    convRule: rule22
}, {
    start: 7854,
    length: 1,
    convRule: rule21
}, {
    start: 7855,
    length: 1,
    convRule: rule22
}, {
    start: 7856,
    length: 1,
    convRule: rule21
}, {
    start: 7857,
    length: 1,
    convRule: rule22
}, {
    start: 7858,
    length: 1,
    convRule: rule21
}, {
    start: 7859,
    length: 1,
    convRule: rule22
}, {
    start: 7860,
    length: 1,
    convRule: rule21
}, {
    start: 7861,
    length: 1,
    convRule: rule22
}, {
    start: 7862,
    length: 1,
    convRule: rule21
}, {
    start: 7863,
    length: 1,
    convRule: rule22
}, {
    start: 7864,
    length: 1,
    convRule: rule21
}, {
    start: 7865,
    length: 1,
    convRule: rule22
}, {
    start: 7866,
    length: 1,
    convRule: rule21
}, {
    start: 7867,
    length: 1,
    convRule: rule22
}, {
    start: 7868,
    length: 1,
    convRule: rule21
}, {
    start: 7869,
    length: 1,
    convRule: rule22
}, {
    start: 7870,
    length: 1,
    convRule: rule21
}, {
    start: 7871,
    length: 1,
    convRule: rule22
}, {
    start: 7872,
    length: 1,
    convRule: rule21
}, {
    start: 7873,
    length: 1,
    convRule: rule22
}, {
    start: 7874,
    length: 1,
    convRule: rule21
}, {
    start: 7875,
    length: 1,
    convRule: rule22
}, {
    start: 7876,
    length: 1,
    convRule: rule21
}, {
    start: 7877,
    length: 1,
    convRule: rule22
}, {
    start: 7878,
    length: 1,
    convRule: rule21
}, {
    start: 7879,
    length: 1,
    convRule: rule22
}, {
    start: 7880,
    length: 1,
    convRule: rule21
}, {
    start: 7881,
    length: 1,
    convRule: rule22
}, {
    start: 7882,
    length: 1,
    convRule: rule21
}, {
    start: 7883,
    length: 1,
    convRule: rule22
}, {
    start: 7884,
    length: 1,
    convRule: rule21
}, {
    start: 7885,
    length: 1,
    convRule: rule22
}, {
    start: 7886,
    length: 1,
    convRule: rule21
}, {
    start: 7887,
    length: 1,
    convRule: rule22
}, {
    start: 7888,
    length: 1,
    convRule: rule21
}, {
    start: 7889,
    length: 1,
    convRule: rule22
}, {
    start: 7890,
    length: 1,
    convRule: rule21
}, {
    start: 7891,
    length: 1,
    convRule: rule22
}, {
    start: 7892,
    length: 1,
    convRule: rule21
}, {
    start: 7893,
    length: 1,
    convRule: rule22
}, {
    start: 7894,
    length: 1,
    convRule: rule21
}, {
    start: 7895,
    length: 1,
    convRule: rule22
}, {
    start: 7896,
    length: 1,
    convRule: rule21
}, {
    start: 7897,
    length: 1,
    convRule: rule22
}, {
    start: 7898,
    length: 1,
    convRule: rule21
}, {
    start: 7899,
    length: 1,
    convRule: rule22
}, {
    start: 7900,
    length: 1,
    convRule: rule21
}, {
    start: 7901,
    length: 1,
    convRule: rule22
}, {
    start: 7902,
    length: 1,
    convRule: rule21
}, {
    start: 7903,
    length: 1,
    convRule: rule22
}, {
    start: 7904,
    length: 1,
    convRule: rule21
}, {
    start: 7905,
    length: 1,
    convRule: rule22
}, {
    start: 7906,
    length: 1,
    convRule: rule21
}, {
    start: 7907,
    length: 1,
    convRule: rule22
}, {
    start: 7908,
    length: 1,
    convRule: rule21
}, {
    start: 7909,
    length: 1,
    convRule: rule22
}, {
    start: 7910,
    length: 1,
    convRule: rule21
}, {
    start: 7911,
    length: 1,
    convRule: rule22
}, {
    start: 7912,
    length: 1,
    convRule: rule21
}, {
    start: 7913,
    length: 1,
    convRule: rule22
}, {
    start: 7914,
    length: 1,
    convRule: rule21
}, {
    start: 7915,
    length: 1,
    convRule: rule22
}, {
    start: 7916,
    length: 1,
    convRule: rule21
}, {
    start: 7917,
    length: 1,
    convRule: rule22
}, {
    start: 7918,
    length: 1,
    convRule: rule21
}, {
    start: 7919,
    length: 1,
    convRule: rule22
}, {
    start: 7920,
    length: 1,
    convRule: rule21
}, {
    start: 7921,
    length: 1,
    convRule: rule22
}, {
    start: 7922,
    length: 1,
    convRule: rule21
}, {
    start: 7923,
    length: 1,
    convRule: rule22
}, {
    start: 7924,
    length: 1,
    convRule: rule21
}, {
    start: 7925,
    length: 1,
    convRule: rule22
}, {
    start: 7926,
    length: 1,
    convRule: rule21
}, {
    start: 7927,
    length: 1,
    convRule: rule22
}, {
    start: 7928,
    length: 1,
    convRule: rule21
}, {
    start: 7929,
    length: 1,
    convRule: rule22
}, {
    start: 7930,
    length: 1,
    convRule: rule21
}, {
    start: 7931,
    length: 1,
    convRule: rule22
}, {
    start: 7932,
    length: 1,
    convRule: rule21
}, {
    start: 7933,
    length: 1,
    convRule: rule22
}, {
    start: 7934,
    length: 1,
    convRule: rule21
}, {
    start: 7935,
    length: 1,
    convRule: rule22
}, {
    start: 7936,
    length: 8,
    convRule: rule121
}, {
    start: 7944,
    length: 8,
    convRule: rule122
}, {
    start: 7952,
    length: 6,
    convRule: rule121
}, {
    start: 7960,
    length: 6,
    convRule: rule122
}, {
    start: 7968,
    length: 8,
    convRule: rule121
}, {
    start: 7976,
    length: 8,
    convRule: rule122
}, {
    start: 7984,
    length: 8,
    convRule: rule121
}, {
    start: 7992,
    length: 8,
    convRule: rule122
}, {
    start: 8000,
    length: 6,
    convRule: rule121
}, {
    start: 8008,
    length: 6,
    convRule: rule122
}, {
    start: 8016,
    length: 1,
    convRule: rule14
}, {
    start: 8017,
    length: 1,
    convRule: rule121
}, {
    start: 8018,
    length: 1,
    convRule: rule14
}, {
    start: 8019,
    length: 1,
    convRule: rule121
}, {
    start: 8020,
    length: 1,
    convRule: rule14
}, {
    start: 8021,
    length: 1,
    convRule: rule121
}, {
    start: 8022,
    length: 1,
    convRule: rule14
}, {
    start: 8023,
    length: 1,
    convRule: rule121
}, {
    start: 8025,
    length: 1,
    convRule: rule122
}, {
    start: 8027,
    length: 1,
    convRule: rule122
}, {
    start: 8029,
    length: 1,
    convRule: rule122
}, {
    start: 8031,
    length: 1,
    convRule: rule122
}, {
    start: 8032,
    length: 8,
    convRule: rule121
}, {
    start: 8040,
    length: 8,
    convRule: rule122
}, {
    start: 8048,
    length: 2,
    convRule: rule123
}, {
    start: 8050,
    length: 4,
    convRule: rule124
}, {
    start: 8054,
    length: 2,
    convRule: rule125
}, {
    start: 8056,
    length: 2,
    convRule: rule126
}, {
    start: 8058,
    length: 2,
    convRule: rule127
}, {
    start: 8060,
    length: 2,
    convRule: rule128
}, {
    start: 8064,
    length: 8,
    convRule: rule121
}, {
    start: 8072,
    length: 8,
    convRule: rule129
}, {
    start: 8080,
    length: 8,
    convRule: rule121
}, {
    start: 8088,
    length: 8,
    convRule: rule129
}, {
    start: 8096,
    length: 8,
    convRule: rule121
}, {
    start: 8104,
    length: 8,
    convRule: rule129
}, {
    start: 8112,
    length: 2,
    convRule: rule121
}, {
    start: 8114,
    length: 1,
    convRule: rule14
}, {
    start: 8115,
    length: 1,
    convRule: rule130
}, {
    start: 8116,
    length: 1,
    convRule: rule14
}, {
    start: 8118,
    length: 2,
    convRule: rule14
}, {
    start: 8120,
    length: 2,
    convRule: rule122
}, {
    start: 8122,
    length: 2,
    convRule: rule131
}, {
    start: 8124,
    length: 1,
    convRule: rule132
}, {
    start: 8125,
    length: 1,
    convRule: rule10
}, {
    start: 8126,
    length: 1,
    convRule: rule133
}, {
    start: 8127,
    length: 3,
    convRule: rule10
}, {
    start: 8130,
    length: 1,
    convRule: rule14
}, {
    start: 8131,
    length: 1,
    convRule: rule130
}, {
    start: 8132,
    length: 1,
    convRule: rule14
}, {
    start: 8134,
    length: 2,
    convRule: rule14
}, {
    start: 8136,
    length: 4,
    convRule: rule134
}, {
    start: 8140,
    length: 1,
    convRule: rule132
}, {
    start: 8141,
    length: 3,
    convRule: rule10
}, {
    start: 8144,
    length: 2,
    convRule: rule121
}, {
    start: 8146,
    length: 2,
    convRule: rule14
}, {
    start: 8150,
    length: 2,
    convRule: rule14
}, {
    start: 8152,
    length: 2,
    convRule: rule122
}, {
    start: 8154,
    length: 2,
    convRule: rule135
}, {
    start: 8157,
    length: 3,
    convRule: rule10
}, {
    start: 8160,
    length: 2,
    convRule: rule121
}, {
    start: 8162,
    length: 3,
    convRule: rule14
}, {
    start: 8165,
    length: 1,
    convRule: rule104
}, {
    start: 8166,
    length: 2,
    convRule: rule14
}, {
    start: 8168,
    length: 2,
    convRule: rule122
}, {
    start: 8170,
    length: 2,
    convRule: rule136
}, {
    start: 8172,
    length: 1,
    convRule: rule107
}, {
    start: 8173,
    length: 3,
    convRule: rule10
}, {
    start: 8178,
    length: 1,
    convRule: rule14
}, {
    start: 8179,
    length: 1,
    convRule: rule130
}, {
    start: 8180,
    length: 1,
    convRule: rule14
}, {
    start: 8182,
    length: 2,
    convRule: rule14
}, {
    start: 8184,
    length: 2,
    convRule: rule137
}, {
    start: 8186,
    length: 2,
    convRule: rule138
}, {
    start: 8188,
    length: 1,
    convRule: rule132
}, {
    start: 8189,
    length: 2,
    convRule: rule10
}, {
    start: 8192,
    length: 11,
    convRule: rule1
}, {
    start: 8203,
    length: 5,
    convRule: rule16
}, {
    start: 8208,
    length: 6,
    convRule: rule7
}, {
    start: 8214,
    length: 2,
    convRule: rule2
}, {
    start: 8216,
    length: 1,
    convRule: rule15
}, {
    start: 8217,
    length: 1,
    convRule: rule19
}, {
    start: 8218,
    length: 1,
    convRule: rule4
}, {
    start: 8219,
    length: 2,
    convRule: rule15
}, {
    start: 8221,
    length: 1,
    convRule: rule19
}, {
    start: 8222,
    length: 1,
    convRule: rule4
}, {
    start: 8223,
    length: 1,
    convRule: rule15
}, {
    start: 8224,
    length: 8,
    convRule: rule2
}, {
    start: 8232,
    length: 1,
    convRule: rule139
}, {
    start: 8233,
    length: 1,
    convRule: rule140
}, {
    start: 8234,
    length: 5,
    convRule: rule16
}, {
    start: 8239,
    length: 1,
    convRule: rule1
}, {
    start: 8240,
    length: 9,
    convRule: rule2
}, {
    start: 8249,
    length: 1,
    convRule: rule15
}, {
    start: 8250,
    length: 1,
    convRule: rule19
}, {
    start: 8251,
    length: 4,
    convRule: rule2
}, {
    start: 8255,
    length: 2,
    convRule: rule11
}, {
    start: 8257,
    length: 3,
    convRule: rule2
}, {
    start: 8260,
    length: 1,
    convRule: rule6
}, {
    start: 8261,
    length: 1,
    convRule: rule4
}, {
    start: 8262,
    length: 1,
    convRule: rule5
}, {
    start: 8263,
    length: 11,
    convRule: rule2
}, {
    start: 8274,
    length: 1,
    convRule: rule6
}, {
    start: 8275,
    length: 1,
    convRule: rule2
}, {
    start: 8276,
    length: 1,
    convRule: rule11
}, {
    start: 8277,
    length: 10,
    convRule: rule2
}, {
    start: 8287,
    length: 1,
    convRule: rule1
}, {
    start: 8288,
    length: 5,
    convRule: rule16
}, {
    start: 8298,
    length: 6,
    convRule: rule16
}, {
    start: 8304,
    length: 1,
    convRule: rule17
}, {
    start: 8305,
    length: 1,
    convRule: rule83
}, {
    start: 8308,
    length: 6,
    convRule: rule17
}, {
    start: 8314,
    length: 3,
    convRule: rule6
}, {
    start: 8317,
    length: 1,
    convRule: rule4
}, {
    start: 8318,
    length: 1,
    convRule: rule5
}, {
    start: 8319,
    length: 1,
    convRule: rule83
}, {
    start: 8320,
    length: 10,
    convRule: rule17
}, {
    start: 8330,
    length: 3,
    convRule: rule6
}, {
    start: 8333,
    length: 1,
    convRule: rule4
}, {
    start: 8334,
    length: 1,
    convRule: rule5
}, {
    start: 8336,
    length: 13,
    convRule: rule83
}, {
    start: 8352,
    length: 26,
    convRule: rule3
}, {
    start: 8400,
    length: 13,
    convRule: rule84
}, {
    start: 8413,
    length: 4,
    convRule: rule109
}, {
    start: 8417,
    length: 1,
    convRule: rule84
}, {
    start: 8418,
    length: 3,
    convRule: rule109
}, {
    start: 8421,
    length: 12,
    convRule: rule84
}, {
    start: 8448,
    length: 2,
    convRule: rule13
}, {
    start: 8450,
    length: 1,
    convRule: rule98
}, {
    start: 8451,
    length: 4,
    convRule: rule13
}, {
    start: 8455,
    length: 1,
    convRule: rule98
}, {
    start: 8456,
    length: 2,
    convRule: rule13
}, {
    start: 8458,
    length: 1,
    convRule: rule14
}, {
    start: 8459,
    length: 3,
    convRule: rule98
}, {
    start: 8462,
    length: 2,
    convRule: rule14
}, {
    start: 8464,
    length: 3,
    convRule: rule98
}, {
    start: 8467,
    length: 1,
    convRule: rule14
}, {
    start: 8468,
    length: 1,
    convRule: rule13
}, {
    start: 8469,
    length: 1,
    convRule: rule98
}, {
    start: 8470,
    length: 2,
    convRule: rule13
}, {
    start: 8472,
    length: 1,
    convRule: rule6
}, {
    start: 8473,
    length: 5,
    convRule: rule98
}, {
    start: 8478,
    length: 6,
    convRule: rule13
}, {
    start: 8484,
    length: 1,
    convRule: rule98
}, {
    start: 8485,
    length: 1,
    convRule: rule13
}, {
    start: 8486,
    length: 1,
    convRule: rule141
}, {
    start: 8487,
    length: 1,
    convRule: rule13
}, {
    start: 8488,
    length: 1,
    convRule: rule98
}, {
    start: 8489,
    length: 1,
    convRule: rule13
}, {
    start: 8490,
    length: 1,
    convRule: rule142
}, {
    start: 8491,
    length: 1,
    convRule: rule143
}, {
    start: 8492,
    length: 2,
    convRule: rule98
}, {
    start: 8494,
    length: 1,
    convRule: rule13
}, {
    start: 8495,
    length: 1,
    convRule: rule14
}, {
    start: 8496,
    length: 2,
    convRule: rule98
}, {
    start: 8498,
    length: 1,
    convRule: rule144
}, {
    start: 8499,
    length: 1,
    convRule: rule98
}, {
    start: 8500,
    length: 1,
    convRule: rule14
}, {
    start: 8501,
    length: 4,
    convRule: rule45
}, {
    start: 8505,
    length: 1,
    convRule: rule14
}, {
    start: 8506,
    length: 2,
    convRule: rule13
}, {
    start: 8508,
    length: 2,
    convRule: rule14
}, {
    start: 8510,
    length: 2,
    convRule: rule98
}, {
    start: 8512,
    length: 5,
    convRule: rule6
}, {
    start: 8517,
    length: 1,
    convRule: rule98
}, {
    start: 8518,
    length: 4,
    convRule: rule14
}, {
    start: 8522,
    length: 1,
    convRule: rule13
}, {
    start: 8523,
    length: 1,
    convRule: rule6
}, {
    start: 8524,
    length: 2,
    convRule: rule13
}, {
    start: 8526,
    length: 1,
    convRule: rule145
}, {
    start: 8527,
    length: 1,
    convRule: rule13
}, {
    start: 8528,
    length: 16,
    convRule: rule17
}, {
    start: 8544,
    length: 16,
    convRule: rule146
}, {
    start: 8560,
    length: 16,
    convRule: rule147
}, {
    start: 8576,
    length: 3,
    convRule: rule116
}, {
    start: 8579,
    length: 1,
    convRule: rule21
}, {
    start: 8580,
    length: 1,
    convRule: rule22
}, {
    start: 8581,
    length: 4,
    convRule: rule116
}, {
    start: 8585,
    length: 1,
    convRule: rule17
}, {
    start: 8592,
    length: 5,
    convRule: rule6
}, {
    start: 8597,
    length: 5,
    convRule: rule13
}, {
    start: 8602,
    length: 2,
    convRule: rule6
}, {
    start: 8604,
    length: 4,
    convRule: rule13
}, {
    start: 8608,
    length: 1,
    convRule: rule6
}, {
    start: 8609,
    length: 2,
    convRule: rule13
}, {
    start: 8611,
    length: 1,
    convRule: rule6
}, {
    start: 8612,
    length: 2,
    convRule: rule13
}, {
    start: 8614,
    length: 1,
    convRule: rule6
}, {
    start: 8615,
    length: 7,
    convRule: rule13
}, {
    start: 8622,
    length: 1,
    convRule: rule6
}, {
    start: 8623,
    length: 31,
    convRule: rule13
}, {
    start: 8654,
    length: 2,
    convRule: rule6
}, {
    start: 8656,
    length: 2,
    convRule: rule13
}, {
    start: 8658,
    length: 1,
    convRule: rule6
}, {
    start: 8659,
    length: 1,
    convRule: rule13
}, {
    start: 8660,
    length: 1,
    convRule: rule6
}, {
    start: 8661,
    length: 31,
    convRule: rule13
}, {
    start: 8692,
    length: 268,
    convRule: rule6
}, {
    start: 8960,
    length: 8,
    convRule: rule13
}, {
    start: 8968,
    length: 4,
    convRule: rule6
}, {
    start: 8972,
    length: 20,
    convRule: rule13
}, {
    start: 8992,
    length: 2,
    convRule: rule6
}, {
    start: 8994,
    length: 7,
    convRule: rule13
}, {
    start: 9001,
    length: 1,
    convRule: rule4
}, {
    start: 9002,
    length: 1,
    convRule: rule5
}, {
    start: 9003,
    length: 81,
    convRule: rule13
}, {
    start: 9084,
    length: 1,
    convRule: rule6
}, {
    start: 9085,
    length: 30,
    convRule: rule13
}, {
    start: 9115,
    length: 25,
    convRule: rule6
}, {
    start: 9140,
    length: 40,
    convRule: rule13
}, {
    start: 9180,
    length: 6,
    convRule: rule6
}, {
    start: 9186,
    length: 18,
    convRule: rule13
}, {
    start: 9216,
    length: 39,
    convRule: rule13
}, {
    start: 9280,
    length: 11,
    convRule: rule13
}, {
    start: 9312,
    length: 60,
    convRule: rule17
}, {
    start: 9372,
    length: 26,
    convRule: rule13
}, {
    start: 9398,
    length: 26,
    convRule: rule148
}, {
    start: 9424,
    length: 26,
    convRule: rule149
}, {
    start: 9450,
    length: 22,
    convRule: rule17
}, {
    start: 9472,
    length: 183,
    convRule: rule13
}, {
    start: 9655,
    length: 1,
    convRule: rule6
}, {
    start: 9656,
    length: 9,
    convRule: rule13
}, {
    start: 9665,
    length: 1,
    convRule: rule6
}, {
    start: 9666,
    length: 54,
    convRule: rule13
}, {
    start: 9720,
    length: 8,
    convRule: rule6
}, {
    start: 9728,
    length: 111,
    convRule: rule13
}, {
    start: 9839,
    length: 1,
    convRule: rule6
}, {
    start: 9840,
    length: 144,
    convRule: rule13
}, {
    start: 9985,
    length: 103,
    convRule: rule13
}, {
    start: 10088,
    length: 1,
    convRule: rule4
}, {
    start: 10089,
    length: 1,
    convRule: rule5
}, {
    start: 10090,
    length: 1,
    convRule: rule4
}, {
    start: 10091,
    length: 1,
    convRule: rule5
}, {
    start: 10092,
    length: 1,
    convRule: rule4
}, {
    start: 10093,
    length: 1,
    convRule: rule5
}, {
    start: 10094,
    length: 1,
    convRule: rule4
}, {
    start: 10095,
    length: 1,
    convRule: rule5
}, {
    start: 10096,
    length: 1,
    convRule: rule4
}, {
    start: 10097,
    length: 1,
    convRule: rule5
}, {
    start: 10098,
    length: 1,
    convRule: rule4
}, {
    start: 10099,
    length: 1,
    convRule: rule5
}, {
    start: 10100,
    length: 1,
    convRule: rule4
}, {
    start: 10101,
    length: 1,
    convRule: rule5
}, {
    start: 10102,
    length: 30,
    convRule: rule17
}, {
    start: 10132,
    length: 44,
    convRule: rule13
}, {
    start: 10176,
    length: 5,
    convRule: rule6
}, {
    start: 10181,
    length: 1,
    convRule: rule4
}, {
    start: 10182,
    length: 1,
    convRule: rule5
}, {
    start: 10183,
    length: 4,
    convRule: rule6
}, {
    start: 10188,
    length: 1,
    convRule: rule6
}, {
    start: 10190,
    length: 24,
    convRule: rule6
}, {
    start: 10214,
    length: 1,
    convRule: rule4
}, {
    start: 10215,
    length: 1,
    convRule: rule5
}, {
    start: 10216,
    length: 1,
    convRule: rule4
}, {
    start: 10217,
    length: 1,
    convRule: rule5
}, {
    start: 10218,
    length: 1,
    convRule: rule4
}, {
    start: 10219,
    length: 1,
    convRule: rule5
}, {
    start: 10220,
    length: 1,
    convRule: rule4
}, {
    start: 10221,
    length: 1,
    convRule: rule5
}, {
    start: 10222,
    length: 1,
    convRule: rule4
}, {
    start: 10223,
    length: 1,
    convRule: rule5
}, {
    start: 10224,
    length: 16,
    convRule: rule6
}, {
    start: 10240,
    length: 256,
    convRule: rule13
}, {
    start: 10496,
    length: 131,
    convRule: rule6
}, {
    start: 10627,
    length: 1,
    convRule: rule4
}, {
    start: 10628,
    length: 1,
    convRule: rule5
}, {
    start: 10629,
    length: 1,
    convRule: rule4
}, {
    start: 10630,
    length: 1,
    convRule: rule5
}, {
    start: 10631,
    length: 1,
    convRule: rule4
}, {
    start: 10632,
    length: 1,
    convRule: rule5
}, {
    start: 10633,
    length: 1,
    convRule: rule4
}, {
    start: 10634,
    length: 1,
    convRule: rule5
}, {
    start: 10635,
    length: 1,
    convRule: rule4
}, {
    start: 10636,
    length: 1,
    convRule: rule5
}, {
    start: 10637,
    length: 1,
    convRule: rule4
}, {
    start: 10638,
    length: 1,
    convRule: rule5
}, {
    start: 10639,
    length: 1,
    convRule: rule4
}, {
    start: 10640,
    length: 1,
    convRule: rule5
}, {
    start: 10641,
    length: 1,
    convRule: rule4
}, {
    start: 10642,
    length: 1,
    convRule: rule5
}, {
    start: 10643,
    length: 1,
    convRule: rule4
}, {
    start: 10644,
    length: 1,
    convRule: rule5
}, {
    start: 10645,
    length: 1,
    convRule: rule4
}, {
    start: 10646,
    length: 1,
    convRule: rule5
}, {
    start: 10647,
    length: 1,
    convRule: rule4
}, {
    start: 10648,
    length: 1,
    convRule: rule5
}, {
    start: 10649,
    length: 63,
    convRule: rule6
}, {
    start: 10712,
    length: 1,
    convRule: rule4
}, {
    start: 10713,
    length: 1,
    convRule: rule5
}, {
    start: 10714,
    length: 1,
    convRule: rule4
}, {
    start: 10715,
    length: 1,
    convRule: rule5
}, {
    start: 10716,
    length: 32,
    convRule: rule6
}, {
    start: 10748,
    length: 1,
    convRule: rule4
}, {
    start: 10749,
    length: 1,
    convRule: rule5
}, {
    start: 10750,
    length: 258,
    convRule: rule6
}, {
    start: 11008,
    length: 48,
    convRule: rule13
}, {
    start: 11056,
    length: 21,
    convRule: rule6
}, {
    start: 11077,
    length: 2,
    convRule: rule13
}, {
    start: 11079,
    length: 6,
    convRule: rule6
}, {
    start: 11088,
    length: 10,
    convRule: rule13
}, {
    start: 11264,
    length: 47,
    convRule: rule112
}, {
    start: 11312,
    length: 47,
    convRule: rule113
}, {
    start: 11360,
    length: 1,
    convRule: rule21
}, {
    start: 11361,
    length: 1,
    convRule: rule22
}, {
    start: 11362,
    length: 1,
    convRule: rule150
}, {
    start: 11363,
    length: 1,
    convRule: rule151
}, {
    start: 11364,
    length: 1,
    convRule: rule152
}, {
    start: 11365,
    length: 1,
    convRule: rule153
}, {
    start: 11366,
    length: 1,
    convRule: rule154
}, {
    start: 11367,
    length: 1,
    convRule: rule21
}, {
    start: 11368,
    length: 1,
    convRule: rule22
}, {
    start: 11369,
    length: 1,
    convRule: rule21
}, {
    start: 11370,
    length: 1,
    convRule: rule22
}, {
    start: 11371,
    length: 1,
    convRule: rule21
}, {
    start: 11372,
    length: 1,
    convRule: rule22
}, {
    start: 11373,
    length: 1,
    convRule: rule155
}, {
    start: 11374,
    length: 1,
    convRule: rule156
}, {
    start: 11375,
    length: 1,
    convRule: rule157
}, {
    start: 11376,
    length: 1,
    convRule: rule158
}, {
    start: 11377,
    length: 1,
    convRule: rule14
}, {
    start: 11378,
    length: 1,
    convRule: rule21
}, {
    start: 11379,
    length: 1,
    convRule: rule22
}, {
    start: 11380,
    length: 1,
    convRule: rule14
}, {
    start: 11381,
    length: 1,
    convRule: rule21
}, {
    start: 11382,
    length: 1,
    convRule: rule22
}, {
    start: 11383,
    length: 6,
    convRule: rule14
}, {
    start: 11389,
    length: 1,
    convRule: rule83
}, {
    start: 11390,
    length: 2,
    convRule: rule159
}, {
    start: 11392,
    length: 1,
    convRule: rule21
}, {
    start: 11393,
    length: 1,
    convRule: rule22
}, {
    start: 11394,
    length: 1,
    convRule: rule21
}, {
    start: 11395,
    length: 1,
    convRule: rule22
}, {
    start: 11396,
    length: 1,
    convRule: rule21
}, {
    start: 11397,
    length: 1,
    convRule: rule22
}, {
    start: 11398,
    length: 1,
    convRule: rule21
}, {
    start: 11399,
    length: 1,
    convRule: rule22
}, {
    start: 11400,
    length: 1,
    convRule: rule21
}, {
    start: 11401,
    length: 1,
    convRule: rule22
}, {
    start: 11402,
    length: 1,
    convRule: rule21
}, {
    start: 11403,
    length: 1,
    convRule: rule22
}, {
    start: 11404,
    length: 1,
    convRule: rule21
}, {
    start: 11405,
    length: 1,
    convRule: rule22
}, {
    start: 11406,
    length: 1,
    convRule: rule21
}, {
    start: 11407,
    length: 1,
    convRule: rule22
}, {
    start: 11408,
    length: 1,
    convRule: rule21
}, {
    start: 11409,
    length: 1,
    convRule: rule22
}, {
    start: 11410,
    length: 1,
    convRule: rule21
}, {
    start: 11411,
    length: 1,
    convRule: rule22
}, {
    start: 11412,
    length: 1,
    convRule: rule21
}, {
    start: 11413,
    length: 1,
    convRule: rule22
}, {
    start: 11414,
    length: 1,
    convRule: rule21
}, {
    start: 11415,
    length: 1,
    convRule: rule22
}, {
    start: 11416,
    length: 1,
    convRule: rule21
}, {
    start: 11417,
    length: 1,
    convRule: rule22
}, {
    start: 11418,
    length: 1,
    convRule: rule21
}, {
    start: 11419,
    length: 1,
    convRule: rule22
}, {
    start: 11420,
    length: 1,
    convRule: rule21
}, {
    start: 11421,
    length: 1,
    convRule: rule22
}, {
    start: 11422,
    length: 1,
    convRule: rule21
}, {
    start: 11423,
    length: 1,
    convRule: rule22
}, {
    start: 11424,
    length: 1,
    convRule: rule21
}, {
    start: 11425,
    length: 1,
    convRule: rule22
}, {
    start: 11426,
    length: 1,
    convRule: rule21
}, {
    start: 11427,
    length: 1,
    convRule: rule22
}, {
    start: 11428,
    length: 1,
    convRule: rule21
}, {
    start: 11429,
    length: 1,
    convRule: rule22
}, {
    start: 11430,
    length: 1,
    convRule: rule21
}, {
    start: 11431,
    length: 1,
    convRule: rule22
}, {
    start: 11432,
    length: 1,
    convRule: rule21
}, {
    start: 11433,
    length: 1,
    convRule: rule22
}, {
    start: 11434,
    length: 1,
    convRule: rule21
}, {
    start: 11435,
    length: 1,
    convRule: rule22
}, {
    start: 11436,
    length: 1,
    convRule: rule21
}, {
    start: 11437,
    length: 1,
    convRule: rule22
}, {
    start: 11438,
    length: 1,
    convRule: rule21
}, {
    start: 11439,
    length: 1,
    convRule: rule22
}, {
    start: 11440,
    length: 1,
    convRule: rule21
}, {
    start: 11441,
    length: 1,
    convRule: rule22
}, {
    start: 11442,
    length: 1,
    convRule: rule21
}, {
    start: 11443,
    length: 1,
    convRule: rule22
}, {
    start: 11444,
    length: 1,
    convRule: rule21
}, {
    start: 11445,
    length: 1,
    convRule: rule22
}, {
    start: 11446,
    length: 1,
    convRule: rule21
}, {
    start: 11447,
    length: 1,
    convRule: rule22
}, {
    start: 11448,
    length: 1,
    convRule: rule21
}, {
    start: 11449,
    length: 1,
    convRule: rule22
}, {
    start: 11450,
    length: 1,
    convRule: rule21
}, {
    start: 11451,
    length: 1,
    convRule: rule22
}, {
    start: 11452,
    length: 1,
    convRule: rule21
}, {
    start: 11453,
    length: 1,
    convRule: rule22
}, {
    start: 11454,
    length: 1,
    convRule: rule21
}, {
    start: 11455,
    length: 1,
    convRule: rule22
}, {
    start: 11456,
    length: 1,
    convRule: rule21
}, {
    start: 11457,
    length: 1,
    convRule: rule22
}, {
    start: 11458,
    length: 1,
    convRule: rule21
}, {
    start: 11459,
    length: 1,
    convRule: rule22
}, {
    start: 11460,
    length: 1,
    convRule: rule21
}, {
    start: 11461,
    length: 1,
    convRule: rule22
}, {
    start: 11462,
    length: 1,
    convRule: rule21
}, {
    start: 11463,
    length: 1,
    convRule: rule22
}, {
    start: 11464,
    length: 1,
    convRule: rule21
}, {
    start: 11465,
    length: 1,
    convRule: rule22
}, {
    start: 11466,
    length: 1,
    convRule: rule21
}, {
    start: 11467,
    length: 1,
    convRule: rule22
}, {
    start: 11468,
    length: 1,
    convRule: rule21
}, {
    start: 11469,
    length: 1,
    convRule: rule22
}, {
    start: 11470,
    length: 1,
    convRule: rule21
}, {
    start: 11471,
    length: 1,
    convRule: rule22
}, {
    start: 11472,
    length: 1,
    convRule: rule21
}, {
    start: 11473,
    length: 1,
    convRule: rule22
}, {
    start: 11474,
    length: 1,
    convRule: rule21
}, {
    start: 11475,
    length: 1,
    convRule: rule22
}, {
    start: 11476,
    length: 1,
    convRule: rule21
}, {
    start: 11477,
    length: 1,
    convRule: rule22
}, {
    start: 11478,
    length: 1,
    convRule: rule21
}, {
    start: 11479,
    length: 1,
    convRule: rule22
}, {
    start: 11480,
    length: 1,
    convRule: rule21
}, {
    start: 11481,
    length: 1,
    convRule: rule22
}, {
    start: 11482,
    length: 1,
    convRule: rule21
}, {
    start: 11483,
    length: 1,
    convRule: rule22
}, {
    start: 11484,
    length: 1,
    convRule: rule21
}, {
    start: 11485,
    length: 1,
    convRule: rule22
}, {
    start: 11486,
    length: 1,
    convRule: rule21
}, {
    start: 11487,
    length: 1,
    convRule: rule22
}, {
    start: 11488,
    length: 1,
    convRule: rule21
}, {
    start: 11489,
    length: 1,
    convRule: rule22
}, {
    start: 11490,
    length: 1,
    convRule: rule21
}, {
    start: 11491,
    length: 1,
    convRule: rule22
}, {
    start: 11492,
    length: 1,
    convRule: rule14
}, {
    start: 11493,
    length: 6,
    convRule: rule13
}, {
    start: 11499,
    length: 1,
    convRule: rule21
}, {
    start: 11500,
    length: 1,
    convRule: rule22
}, {
    start: 11501,
    length: 1,
    convRule: rule21
}, {
    start: 11502,
    length: 1,
    convRule: rule22
}, {
    start: 11503,
    length: 3,
    convRule: rule84
}, {
    start: 11513,
    length: 4,
    convRule: rule2
}, {
    start: 11517,
    length: 1,
    convRule: rule17
}, {
    start: 11518,
    length: 2,
    convRule: rule2
}, {
    start: 11520,
    length: 38,
    convRule: rule160
}, {
    start: 11568,
    length: 54,
    convRule: rule45
}, {
    start: 11631,
    length: 1,
    convRule: rule83
}, {
    start: 11632,
    length: 1,
    convRule: rule2
}, {
    start: 11647,
    length: 1,
    convRule: rule84
}, {
    start: 11648,
    length: 23,
    convRule: rule45
}, {
    start: 11680,
    length: 7,
    convRule: rule45
}, {
    start: 11688,
    length: 7,
    convRule: rule45
}, {
    start: 11696,
    length: 7,
    convRule: rule45
}, {
    start: 11704,
    length: 7,
    convRule: rule45
}, {
    start: 11712,
    length: 7,
    convRule: rule45
}, {
    start: 11720,
    length: 7,
    convRule: rule45
}, {
    start: 11728,
    length: 7,
    convRule: rule45
}, {
    start: 11736,
    length: 7,
    convRule: rule45
}, {
    start: 11744,
    length: 32,
    convRule: rule84
}, {
    start: 11776,
    length: 2,
    convRule: rule2
}, {
    start: 11778,
    length: 1,
    convRule: rule15
}, {
    start: 11779,
    length: 1,
    convRule: rule19
}, {
    start: 11780,
    length: 1,
    convRule: rule15
}, {
    start: 11781,
    length: 1,
    convRule: rule19
}, {
    start: 11782,
    length: 3,
    convRule: rule2
}, {
    start: 11785,
    length: 1,
    convRule: rule15
}, {
    start: 11786,
    length: 1,
    convRule: rule19
}, {
    start: 11787,
    length: 1,
    convRule: rule2
}, {
    start: 11788,
    length: 1,
    convRule: rule15
}, {
    start: 11789,
    length: 1,
    convRule: rule19
}, {
    start: 11790,
    length: 9,
    convRule: rule2
}, {
    start: 11799,
    length: 1,
    convRule: rule7
}, {
    start: 11800,
    length: 2,
    convRule: rule2
}, {
    start: 11802,
    length: 1,
    convRule: rule7
}, {
    start: 11803,
    length: 1,
    convRule: rule2
}, {
    start: 11804,
    length: 1,
    convRule: rule15
}, {
    start: 11805,
    length: 1,
    convRule: rule19
}, {
    start: 11806,
    length: 2,
    convRule: rule2
}, {
    start: 11808,
    length: 1,
    convRule: rule15
}, {
    start: 11809,
    length: 1,
    convRule: rule19
}, {
    start: 11810,
    length: 1,
    convRule: rule4
}, {
    start: 11811,
    length: 1,
    convRule: rule5
}, {
    start: 11812,
    length: 1,
    convRule: rule4
}, {
    start: 11813,
    length: 1,
    convRule: rule5
}, {
    start: 11814,
    length: 1,
    convRule: rule4
}, {
    start: 11815,
    length: 1,
    convRule: rule5
}, {
    start: 11816,
    length: 1,
    convRule: rule4
}, {
    start: 11817,
    length: 1,
    convRule: rule5
}, {
    start: 11818,
    length: 5,
    convRule: rule2
}, {
    start: 11823,
    length: 1,
    convRule: rule83
}, {
    start: 11824,
    length: 2,
    convRule: rule2
}, {
    start: 11904,
    length: 26,
    convRule: rule13
}, {
    start: 11931,
    length: 89,
    convRule: rule13
}, {
    start: 12032,
    length: 214,
    convRule: rule13
}, {
    start: 12272,
    length: 12,
    convRule: rule13
}, {
    start: 12288,
    length: 1,
    convRule: rule1
}, {
    start: 12289,
    length: 3,
    convRule: rule2
}, {
    start: 12292,
    length: 1,
    convRule: rule13
}, {
    start: 12293,
    length: 1,
    convRule: rule83
}, {
    start: 12294,
    length: 1,
    convRule: rule45
}, {
    start: 12295,
    length: 1,
    convRule: rule116
}, {
    start: 12296,
    length: 1,
    convRule: rule4
}, {
    start: 12297,
    length: 1,
    convRule: rule5
}, {
    start: 12298,
    length: 1,
    convRule: rule4
}, {
    start: 12299,
    length: 1,
    convRule: rule5
}, {
    start: 12300,
    length: 1,
    convRule: rule4
}, {
    start: 12301,
    length: 1,
    convRule: rule5
}, {
    start: 12302,
    length: 1,
    convRule: rule4
}, {
    start: 12303,
    length: 1,
    convRule: rule5
}, {
    start: 12304,
    length: 1,
    convRule: rule4
}, {
    start: 12305,
    length: 1,
    convRule: rule5
}, {
    start: 12306,
    length: 2,
    convRule: rule13
}, {
    start: 12308,
    length: 1,
    convRule: rule4
}, {
    start: 12309,
    length: 1,
    convRule: rule5
}, {
    start: 12310,
    length: 1,
    convRule: rule4
}, {
    start: 12311,
    length: 1,
    convRule: rule5
}, {
    start: 12312,
    length: 1,
    convRule: rule4
}, {
    start: 12313,
    length: 1,
    convRule: rule5
}, {
    start: 12314,
    length: 1,
    convRule: rule4
}, {
    start: 12315,
    length: 1,
    convRule: rule5
}, {
    start: 12316,
    length: 1,
    convRule: rule7
}, {
    start: 12317,
    length: 1,
    convRule: rule4
}, {
    start: 12318,
    length: 2,
    convRule: rule5
}, {
    start: 12320,
    length: 1,
    convRule: rule13
}, {
    start: 12321,
    length: 9,
    convRule: rule116
}, {
    start: 12330,
    length: 6,
    convRule: rule84
}, {
    start: 12336,
    length: 1,
    convRule: rule7
}, {
    start: 12337,
    length: 5,
    convRule: rule83
}, {
    start: 12342,
    length: 2,
    convRule: rule13
}, {
    start: 12344,
    length: 3,
    convRule: rule116
}, {
    start: 12347,
    length: 1,
    convRule: rule83
}, {
    start: 12348,
    length: 1,
    convRule: rule45
}, {
    start: 12349,
    length: 1,
    convRule: rule2
}, {
    start: 12350,
    length: 2,
    convRule: rule13
}, {
    start: 12353,
    length: 86,
    convRule: rule45
}, {
    start: 12441,
    length: 2,
    convRule: rule84
}, {
    start: 12443,
    length: 2,
    convRule: rule10
}, {
    start: 12445,
    length: 2,
    convRule: rule83
}, {
    start: 12447,
    length: 1,
    convRule: rule45
}, {
    start: 12448,
    length: 1,
    convRule: rule7
}, {
    start: 12449,
    length: 90,
    convRule: rule45
}, {
    start: 12539,
    length: 1,
    convRule: rule2
}, {
    start: 12540,
    length: 3,
    convRule: rule83
}, {
    start: 12543,
    length: 1,
    convRule: rule45
}, {
    start: 12549,
    length: 41,
    convRule: rule45
}, {
    start: 12593,
    length: 94,
    convRule: rule45
}, {
    start: 12688,
    length: 2,
    convRule: rule13
}, {
    start: 12690,
    length: 4,
    convRule: rule17
}, {
    start: 12694,
    length: 10,
    convRule: rule13
}, {
    start: 12704,
    length: 27,
    convRule: rule45
}, {
    start: 12736,
    length: 36,
    convRule: rule13
}, {
    start: 12784,
    length: 16,
    convRule: rule45
}, {
    start: 12800,
    length: 31,
    convRule: rule13
}, {
    start: 12832,
    length: 10,
    convRule: rule17
}, {
    start: 12842,
    length: 39,
    convRule: rule13
}, {
    start: 12881,
    length: 15,
    convRule: rule17
}, {
    start: 12896,
    length: 32,
    convRule: rule13
}, {
    start: 12928,
    length: 10,
    convRule: rule17
}, {
    start: 12938,
    length: 39,
    convRule: rule13
}, {
    start: 12977,
    length: 15,
    convRule: rule17
}, {
    start: 12992,
    length: 63,
    convRule: rule13
}, {
    start: 13056,
    length: 256,
    convRule: rule13
}, {
    start: 13312,
    length: 6582,
    convRule: rule45
}, {
    start: 19904,
    length: 64,
    convRule: rule13
}, {
    start: 19968,
    length: 20940,
    convRule: rule45
}, {
    start: 40960,
    length: 21,
    convRule: rule45
}, {
    start: 40981,
    length: 1,
    convRule: rule83
}, {
    start: 40982,
    length: 1143,
    convRule: rule45
}, {
    start: 42128,
    length: 55,
    convRule: rule13
}, {
    start: 42192,
    length: 40,
    convRule: rule45
}, {
    start: 42232,
    length: 6,
    convRule: rule83
}, {
    start: 42238,
    length: 2,
    convRule: rule2
}, {
    start: 42240,
    length: 268,
    convRule: rule45
}, {
    start: 42508,
    length: 1,
    convRule: rule83
}, {
    start: 42509,
    length: 3,
    convRule: rule2
}, {
    start: 42512,
    length: 16,
    convRule: rule45
}, {
    start: 42528,
    length: 10,
    convRule: rule8
}, {
    start: 42538,
    length: 2,
    convRule: rule45
}, {
    start: 42560,
    length: 1,
    convRule: rule21
}, {
    start: 42561,
    length: 1,
    convRule: rule22
}, {
    start: 42562,
    length: 1,
    convRule: rule21
}, {
    start: 42563,
    length: 1,
    convRule: rule22
}, {
    start: 42564,
    length: 1,
    convRule: rule21
}, {
    start: 42565,
    length: 1,
    convRule: rule22
}, {
    start: 42566,
    length: 1,
    convRule: rule21
}, {
    start: 42567,
    length: 1,
    convRule: rule22
}, {
    start: 42568,
    length: 1,
    convRule: rule21
}, {
    start: 42569,
    length: 1,
    convRule: rule22
}, {
    start: 42570,
    length: 1,
    convRule: rule21
}, {
    start: 42571,
    length: 1,
    convRule: rule22
}, {
    start: 42572,
    length: 1,
    convRule: rule21
}, {
    start: 42573,
    length: 1,
    convRule: rule22
}, {
    start: 42574,
    length: 1,
    convRule: rule21
}, {
    start: 42575,
    length: 1,
    convRule: rule22
}, {
    start: 42576,
    length: 1,
    convRule: rule21
}, {
    start: 42577,
    length: 1,
    convRule: rule22
}, {
    start: 42578,
    length: 1,
    convRule: rule21
}, {
    start: 42579,
    length: 1,
    convRule: rule22
}, {
    start: 42580,
    length: 1,
    convRule: rule21
}, {
    start: 42581,
    length: 1,
    convRule: rule22
}, {
    start: 42582,
    length: 1,
    convRule: rule21
}, {
    start: 42583,
    length: 1,
    convRule: rule22
}, {
    start: 42584,
    length: 1,
    convRule: rule21
}, {
    start: 42585,
    length: 1,
    convRule: rule22
}, {
    start: 42586,
    length: 1,
    convRule: rule21
}, {
    start: 42587,
    length: 1,
    convRule: rule22
}, {
    start: 42588,
    length: 1,
    convRule: rule21
}, {
    start: 42589,
    length: 1,
    convRule: rule22
}, {
    start: 42590,
    length: 1,
    convRule: rule21
}, {
    start: 42591,
    length: 1,
    convRule: rule22
}, {
    start: 42592,
    length: 1,
    convRule: rule21
}, {
    start: 42593,
    length: 1,
    convRule: rule22
}, {
    start: 42594,
    length: 1,
    convRule: rule21
}, {
    start: 42595,
    length: 1,
    convRule: rule22
}, {
    start: 42596,
    length: 1,
    convRule: rule21
}, {
    start: 42597,
    length: 1,
    convRule: rule22
}, {
    start: 42598,
    length: 1,
    convRule: rule21
}, {
    start: 42599,
    length: 1,
    convRule: rule22
}, {
    start: 42600,
    length: 1,
    convRule: rule21
}, {
    start: 42601,
    length: 1,
    convRule: rule22
}, {
    start: 42602,
    length: 1,
    convRule: rule21
}, {
    start: 42603,
    length: 1,
    convRule: rule22
}, {
    start: 42604,
    length: 1,
    convRule: rule21
}, {
    start: 42605,
    length: 1,
    convRule: rule22
}, {
    start: 42606,
    length: 1,
    convRule: rule45
}, {
    start: 42607,
    length: 1,
    convRule: rule84
}, {
    start: 42608,
    length: 3,
    convRule: rule109
}, {
    start: 42611,
    length: 1,
    convRule: rule2
}, {
    start: 42620,
    length: 2,
    convRule: rule84
}, {
    start: 42622,
    length: 1,
    convRule: rule2
}, {
    start: 42623,
    length: 1,
    convRule: rule83
}, {
    start: 42624,
    length: 1,
    convRule: rule21
}, {
    start: 42625,
    length: 1,
    convRule: rule22
}, {
    start: 42626,
    length: 1,
    convRule: rule21
}, {
    start: 42627,
    length: 1,
    convRule: rule22
}, {
    start: 42628,
    length: 1,
    convRule: rule21
}, {
    start: 42629,
    length: 1,
    convRule: rule22
}, {
    start: 42630,
    length: 1,
    convRule: rule21
}, {
    start: 42631,
    length: 1,
    convRule: rule22
}, {
    start: 42632,
    length: 1,
    convRule: rule21
}, {
    start: 42633,
    length: 1,
    convRule: rule22
}, {
    start: 42634,
    length: 1,
    convRule: rule21
}, {
    start: 42635,
    length: 1,
    convRule: rule22
}, {
    start: 42636,
    length: 1,
    convRule: rule21
}, {
    start: 42637,
    length: 1,
    convRule: rule22
}, {
    start: 42638,
    length: 1,
    convRule: rule21
}, {
    start: 42639,
    length: 1,
    convRule: rule22
}, {
    start: 42640,
    length: 1,
    convRule: rule21
}, {
    start: 42641,
    length: 1,
    convRule: rule22
}, {
    start: 42642,
    length: 1,
    convRule: rule21
}, {
    start: 42643,
    length: 1,
    convRule: rule22
}, {
    start: 42644,
    length: 1,
    convRule: rule21
}, {
    start: 42645,
    length: 1,
    convRule: rule22
}, {
    start: 42646,
    length: 1,
    convRule: rule21
}, {
    start: 42647,
    length: 1,
    convRule: rule22
}, {
    start: 42656,
    length: 70,
    convRule: rule45
}, {
    start: 42726,
    length: 10,
    convRule: rule116
}, {
    start: 42736,
    length: 2,
    convRule: rule84
}, {
    start: 42738,
    length: 6,
    convRule: rule2
}, {
    start: 42752,
    length: 23,
    convRule: rule10
}, {
    start: 42775,
    length: 9,
    convRule: rule83
}, {
    start: 42784,
    length: 2,
    convRule: rule10
}, {
    start: 42786,
    length: 1,
    convRule: rule21
}, {
    start: 42787,
    length: 1,
    convRule: rule22
}, {
    start: 42788,
    length: 1,
    convRule: rule21
}, {
    start: 42789,
    length: 1,
    convRule: rule22
}, {
    start: 42790,
    length: 1,
    convRule: rule21
}, {
    start: 42791,
    length: 1,
    convRule: rule22
}, {
    start: 42792,
    length: 1,
    convRule: rule21
}, {
    start: 42793,
    length: 1,
    convRule: rule22
}, {
    start: 42794,
    length: 1,
    convRule: rule21
}, {
    start: 42795,
    length: 1,
    convRule: rule22
}, {
    start: 42796,
    length: 1,
    convRule: rule21
}, {
    start: 42797,
    length: 1,
    convRule: rule22
}, {
    start: 42798,
    length: 1,
    convRule: rule21
}, {
    start: 42799,
    length: 1,
    convRule: rule22
}, {
    start: 42800,
    length: 2,
    convRule: rule14
}, {
    start: 42802,
    length: 1,
    convRule: rule21
}, {
    start: 42803,
    length: 1,
    convRule: rule22
}, {
    start: 42804,
    length: 1,
    convRule: rule21
}, {
    start: 42805,
    length: 1,
    convRule: rule22
}, {
    start: 42806,
    length: 1,
    convRule: rule21
}, {
    start: 42807,
    length: 1,
    convRule: rule22
}, {
    start: 42808,
    length: 1,
    convRule: rule21
}, {
    start: 42809,
    length: 1,
    convRule: rule22
}, {
    start: 42810,
    length: 1,
    convRule: rule21
}, {
    start: 42811,
    length: 1,
    convRule: rule22
}, {
    start: 42812,
    length: 1,
    convRule: rule21
}, {
    start: 42813,
    length: 1,
    convRule: rule22
}, {
    start: 42814,
    length: 1,
    convRule: rule21
}, {
    start: 42815,
    length: 1,
    convRule: rule22
}, {
    start: 42816,
    length: 1,
    convRule: rule21
}, {
    start: 42817,
    length: 1,
    convRule: rule22
}, {
    start: 42818,
    length: 1,
    convRule: rule21
}, {
    start: 42819,
    length: 1,
    convRule: rule22
}, {
    start: 42820,
    length: 1,
    convRule: rule21
}, {
    start: 42821,
    length: 1,
    convRule: rule22
}, {
    start: 42822,
    length: 1,
    convRule: rule21
}, {
    start: 42823,
    length: 1,
    convRule: rule22
}, {
    start: 42824,
    length: 1,
    convRule: rule21
}, {
    start: 42825,
    length: 1,
    convRule: rule22
}, {
    start: 42826,
    length: 1,
    convRule: rule21
}, {
    start: 42827,
    length: 1,
    convRule: rule22
}, {
    start: 42828,
    length: 1,
    convRule: rule21
}, {
    start: 42829,
    length: 1,
    convRule: rule22
}, {
    start: 42830,
    length: 1,
    convRule: rule21
}, {
    start: 42831,
    length: 1,
    convRule: rule22
}, {
    start: 42832,
    length: 1,
    convRule: rule21
}, {
    start: 42833,
    length: 1,
    convRule: rule22
}, {
    start: 42834,
    length: 1,
    convRule: rule21
}, {
    start: 42835,
    length: 1,
    convRule: rule22
}, {
    start: 42836,
    length: 1,
    convRule: rule21
}, {
    start: 42837,
    length: 1,
    convRule: rule22
}, {
    start: 42838,
    length: 1,
    convRule: rule21
}, {
    start: 42839,
    length: 1,
    convRule: rule22
}, {
    start: 42840,
    length: 1,
    convRule: rule21
}, {
    start: 42841,
    length: 1,
    convRule: rule22
}, {
    start: 42842,
    length: 1,
    convRule: rule21
}, {
    start: 42843,
    length: 1,
    convRule: rule22
}, {
    start: 42844,
    length: 1,
    convRule: rule21
}, {
    start: 42845,
    length: 1,
    convRule: rule22
}, {
    start: 42846,
    length: 1,
    convRule: rule21
}, {
    start: 42847,
    length: 1,
    convRule: rule22
}, {
    start: 42848,
    length: 1,
    convRule: rule21
}, {
    start: 42849,
    length: 1,
    convRule: rule22
}, {
    start: 42850,
    length: 1,
    convRule: rule21
}, {
    start: 42851,
    length: 1,
    convRule: rule22
}, {
    start: 42852,
    length: 1,
    convRule: rule21
}, {
    start: 42853,
    length: 1,
    convRule: rule22
}, {
    start: 42854,
    length: 1,
    convRule: rule21
}, {
    start: 42855,
    length: 1,
    convRule: rule22
}, {
    start: 42856,
    length: 1,
    convRule: rule21
}, {
    start: 42857,
    length: 1,
    convRule: rule22
}, {
    start: 42858,
    length: 1,
    convRule: rule21
}, {
    start: 42859,
    length: 1,
    convRule: rule22
}, {
    start: 42860,
    length: 1,
    convRule: rule21
}, {
    start: 42861,
    length: 1,
    convRule: rule22
}, {
    start: 42862,
    length: 1,
    convRule: rule21
}, {
    start: 42863,
    length: 1,
    convRule: rule22
}, {
    start: 42864,
    length: 1,
    convRule: rule83
}, {
    start: 42865,
    length: 8,
    convRule: rule14
}, {
    start: 42873,
    length: 1,
    convRule: rule21
}, {
    start: 42874,
    length: 1,
    convRule: rule22
}, {
    start: 42875,
    length: 1,
    convRule: rule21
}, {
    start: 42876,
    length: 1,
    convRule: rule22
}, {
    start: 42877,
    length: 1,
    convRule: rule161
}, {
    start: 42878,
    length: 1,
    convRule: rule21
}, {
    start: 42879,
    length: 1,
    convRule: rule22
}, {
    start: 42880,
    length: 1,
    convRule: rule21
}, {
    start: 42881,
    length: 1,
    convRule: rule22
}, {
    start: 42882,
    length: 1,
    convRule: rule21
}, {
    start: 42883,
    length: 1,
    convRule: rule22
}, {
    start: 42884,
    length: 1,
    convRule: rule21
}, {
    start: 42885,
    length: 1,
    convRule: rule22
}, {
    start: 42886,
    length: 1,
    convRule: rule21
}, {
    start: 42887,
    length: 1,
    convRule: rule22
}, {
    start: 42888,
    length: 1,
    convRule: rule83
}, {
    start: 42889,
    length: 2,
    convRule: rule10
}, {
    start: 42891,
    length: 1,
    convRule: rule21
}, {
    start: 42892,
    length: 1,
    convRule: rule22
}, {
    start: 42893,
    length: 1,
    convRule: rule162
}, {
    start: 42894,
    length: 1,
    convRule: rule14
}, {
    start: 42896,
    length: 1,
    convRule: rule21
}, {
    start: 42897,
    length: 1,
    convRule: rule22
}, {
    start: 42912,
    length: 1,
    convRule: rule21
}, {
    start: 42913,
    length: 1,
    convRule: rule22
}, {
    start: 42914,
    length: 1,
    convRule: rule21
}, {
    start: 42915,
    length: 1,
    convRule: rule22
}, {
    start: 42916,
    length: 1,
    convRule: rule21
}, {
    start: 42917,
    length: 1,
    convRule: rule22
}, {
    start: 42918,
    length: 1,
    convRule: rule21
}, {
    start: 42919,
    length: 1,
    convRule: rule22
}, {
    start: 42920,
    length: 1,
    convRule: rule21
}, {
    start: 42921,
    length: 1,
    convRule: rule22
}, {
    start: 43002,
    length: 1,
    convRule: rule14
}, {
    start: 43003,
    length: 7,
    convRule: rule45
}, {
    start: 43010,
    length: 1,
    convRule: rule84
}, {
    start: 43011,
    length: 3,
    convRule: rule45
}, {
    start: 43014,
    length: 1,
    convRule: rule84
}, {
    start: 43015,
    length: 4,
    convRule: rule45
}, {
    start: 43019,
    length: 1,
    convRule: rule84
}, {
    start: 43020,
    length: 23,
    convRule: rule45
}, {
    start: 43043,
    length: 2,
    convRule: rule114
}, {
    start: 43045,
    length: 2,
    convRule: rule84
}, {
    start: 43047,
    length: 1,
    convRule: rule114
}, {
    start: 43048,
    length: 4,
    convRule: rule13
}, {
    start: 43056,
    length: 6,
    convRule: rule17
}, {
    start: 43062,
    length: 2,
    convRule: rule13
}, {
    start: 43064,
    length: 1,
    convRule: rule3
}, {
    start: 43065,
    length: 1,
    convRule: rule13
}, {
    start: 43072,
    length: 52,
    convRule: rule45
}, {
    start: 43124,
    length: 4,
    convRule: rule2
}, {
    start: 43136,
    length: 2,
    convRule: rule114
}, {
    start: 43138,
    length: 50,
    convRule: rule45
}, {
    start: 43188,
    length: 16,
    convRule: rule114
}, {
    start: 43204,
    length: 1,
    convRule: rule84
}, {
    start: 43214,
    length: 2,
    convRule: rule2
}, {
    start: 43216,
    length: 10,
    convRule: rule8
}, {
    start: 43232,
    length: 18,
    convRule: rule84
}, {
    start: 43250,
    length: 6,
    convRule: rule45
}, {
    start: 43256,
    length: 3,
    convRule: rule2
}, {
    start: 43259,
    length: 1,
    convRule: rule45
}, {
    start: 43264,
    length: 10,
    convRule: rule8
}, {
    start: 43274,
    length: 28,
    convRule: rule45
}, {
    start: 43302,
    length: 8,
    convRule: rule84
}, {
    start: 43310,
    length: 2,
    convRule: rule2
}, {
    start: 43312,
    length: 23,
    convRule: rule45
}, {
    start: 43335,
    length: 11,
    convRule: rule84
}, {
    start: 43346,
    length: 2,
    convRule: rule114
}, {
    start: 43359,
    length: 1,
    convRule: rule2
}, {
    start: 43360,
    length: 29,
    convRule: rule45
}, {
    start: 43392,
    length: 3,
    convRule: rule84
}, {
    start: 43395,
    length: 1,
    convRule: rule114
}, {
    start: 43396,
    length: 47,
    convRule: rule45
}, {
    start: 43443,
    length: 1,
    convRule: rule84
}, {
    start: 43444,
    length: 2,
    convRule: rule114
}, {
    start: 43446,
    length: 4,
    convRule: rule84
}, {
    start: 43450,
    length: 2,
    convRule: rule114
}, {
    start: 43452,
    length: 1,
    convRule: rule84
}, {
    start: 43453,
    length: 4,
    convRule: rule114
}, {
    start: 43457,
    length: 13,
    convRule: rule2
}, {
    start: 43471,
    length: 1,
    convRule: rule83
}, {
    start: 43472,
    length: 10,
    convRule: rule8
}, {
    start: 43486,
    length: 2,
    convRule: rule2
}, {
    start: 43520,
    length: 41,
    convRule: rule45
}, {
    start: 43561,
    length: 6,
    convRule: rule84
}, {
    start: 43567,
    length: 2,
    convRule: rule114
}, {
    start: 43569,
    length: 2,
    convRule: rule84
}, {
    start: 43571,
    length: 2,
    convRule: rule114
}, {
    start: 43573,
    length: 2,
    convRule: rule84
}, {
    start: 43584,
    length: 3,
    convRule: rule45
}, {
    start: 43587,
    length: 1,
    convRule: rule84
}, {
    start: 43588,
    length: 8,
    convRule: rule45
}, {
    start: 43596,
    length: 1,
    convRule: rule84
}, {
    start: 43597,
    length: 1,
    convRule: rule114
}, {
    start: 43600,
    length: 10,
    convRule: rule8
}, {
    start: 43612,
    length: 4,
    convRule: rule2
}, {
    start: 43616,
    length: 16,
    convRule: rule45
}, {
    start: 43632,
    length: 1,
    convRule: rule83
}, {
    start: 43633,
    length: 6,
    convRule: rule45
}, {
    start: 43639,
    length: 3,
    convRule: rule13
}, {
    start: 43642,
    length: 1,
    convRule: rule45
}, {
    start: 43643,
    length: 1,
    convRule: rule114
}, {
    start: 43648,
    length: 48,
    convRule: rule45
}, {
    start: 43696,
    length: 1,
    convRule: rule84
}, {
    start: 43697,
    length: 1,
    convRule: rule45
}, {
    start: 43698,
    length: 3,
    convRule: rule84
}, {
    start: 43701,
    length: 2,
    convRule: rule45
}, {
    start: 43703,
    length: 2,
    convRule: rule84
}, {
    start: 43705,
    length: 5,
    convRule: rule45
}, {
    start: 43710,
    length: 2,
    convRule: rule84
}, {
    start: 43712,
    length: 1,
    convRule: rule45
}, {
    start: 43713,
    length: 1,
    convRule: rule84
}, {
    start: 43714,
    length: 1,
    convRule: rule45
}, {
    start: 43739,
    length: 2,
    convRule: rule45
}, {
    start: 43741,
    length: 1,
    convRule: rule83
}, {
    start: 43742,
    length: 2,
    convRule: rule2
}, {
    start: 43777,
    length: 6,
    convRule: rule45
}, {
    start: 43785,
    length: 6,
    convRule: rule45
}, {
    start: 43793,
    length: 6,
    convRule: rule45
}, {
    start: 43808,
    length: 7,
    convRule: rule45
}, {
    start: 43816,
    length: 7,
    convRule: rule45
}, {
    start: 43968,
    length: 35,
    convRule: rule45
}, {
    start: 44003,
    length: 2,
    convRule: rule114
}, {
    start: 44005,
    length: 1,
    convRule: rule84
}, {
    start: 44006,
    length: 2,
    convRule: rule114
}, {
    start: 44008,
    length: 1,
    convRule: rule84
}, {
    start: 44009,
    length: 2,
    convRule: rule114
}, {
    start: 44011,
    length: 1,
    convRule: rule2
}, {
    start: 44012,
    length: 1,
    convRule: rule114
}, {
    start: 44013,
    length: 1,
    convRule: rule84
}, {
    start: 44016,
    length: 10,
    convRule: rule8
}, {
    start: 44032,
    length: 11172,
    convRule: rule45
}, {
    start: 55216,
    length: 23,
    convRule: rule45
}, {
    start: 55243,
    length: 49,
    convRule: rule45
}, {
    start: 55296,
    length: 896,
    convRule: rule163
}, {
    start: 56192,
    length: 128,
    convRule: rule163
}, {
    start: 56320,
    length: 1024,
    convRule: rule163
}, {
    start: 57344,
    length: 6400,
    convRule: rule164
}, {
    start: 63744,
    length: 302,
    convRule: rule45
}, {
    start: 64048,
    length: 62,
    convRule: rule45
}, {
    start: 64112,
    length: 106,
    convRule: rule45
}, {
    start: 64256,
    length: 7,
    convRule: rule14
}, {
    start: 64275,
    length: 5,
    convRule: rule14
}, {
    start: 64285,
    length: 1,
    convRule: rule45
}, {
    start: 64286,
    length: 1,
    convRule: rule84
}, {
    start: 64287,
    length: 10,
    convRule: rule45
}, {
    start: 64297,
    length: 1,
    convRule: rule6
}, {
    start: 64298,
    length: 13,
    convRule: rule45
}, {
    start: 64312,
    length: 5,
    convRule: rule45
}, {
    start: 64318,
    length: 1,
    convRule: rule45
}, {
    start: 64320,
    length: 2,
    convRule: rule45
}, {
    start: 64323,
    length: 2,
    convRule: rule45
}, {
    start: 64326,
    length: 108,
    convRule: rule45
}, {
    start: 64434,
    length: 16,
    convRule: rule10
}, {
    start: 64467,
    length: 363,
    convRule: rule45
}, {
    start: 64830,
    length: 1,
    convRule: rule4
}, {
    start: 64831,
    length: 1,
    convRule: rule5
}, {
    start: 64848,
    length: 64,
    convRule: rule45
}, {
    start: 64914,
    length: 54,
    convRule: rule45
}, {
    start: 65008,
    length: 12,
    convRule: rule45
}, {
    start: 65020,
    length: 1,
    convRule: rule3
}, {
    start: 65021,
    length: 1,
    convRule: rule13
}, {
    start: 65024,
    length: 16,
    convRule: rule84
}, {
    start: 65040,
    length: 7,
    convRule: rule2
}, {
    start: 65047,
    length: 1,
    convRule: rule4
}, {
    start: 65048,
    length: 1,
    convRule: rule5
}, {
    start: 65049,
    length: 1,
    convRule: rule2
}, {
    start: 65056,
    length: 7,
    convRule: rule84
}, {
    start: 65072,
    length: 1,
    convRule: rule2
}, {
    start: 65073,
    length: 2,
    convRule: rule7
}, {
    start: 65075,
    length: 2,
    convRule: rule11
}, {
    start: 65077,
    length: 1,
    convRule: rule4
}, {
    start: 65078,
    length: 1,
    convRule: rule5
}, {
    start: 65079,
    length: 1,
    convRule: rule4
}, {
    start: 65080,
    length: 1,
    convRule: rule5
}, {
    start: 65081,
    length: 1,
    convRule: rule4
}, {
    start: 65082,
    length: 1,
    convRule: rule5
}, {
    start: 65083,
    length: 1,
    convRule: rule4
}, {
    start: 65084,
    length: 1,
    convRule: rule5
}, {
    start: 65085,
    length: 1,
    convRule: rule4
}, {
    start: 65086,
    length: 1,
    convRule: rule5
}, {
    start: 65087,
    length: 1,
    convRule: rule4
}, {
    start: 65088,
    length: 1,
    convRule: rule5
}, {
    start: 65089,
    length: 1,
    convRule: rule4
}, {
    start: 65090,
    length: 1,
    convRule: rule5
}, {
    start: 65091,
    length: 1,
    convRule: rule4
}, {
    start: 65092,
    length: 1,
    convRule: rule5
}, {
    start: 65093,
    length: 2,
    convRule: rule2
}, {
    start: 65095,
    length: 1,
    convRule: rule4
}, {
    start: 65096,
    length: 1,
    convRule: rule5
}, {
    start: 65097,
    length: 4,
    convRule: rule2
}, {
    start: 65101,
    length: 3,
    convRule: rule11
}, {
    start: 65104,
    length: 3,
    convRule: rule2
}, {
    start: 65108,
    length: 4,
    convRule: rule2
}, {
    start: 65112,
    length: 1,
    convRule: rule7
}, {
    start: 65113,
    length: 1,
    convRule: rule4
}, {
    start: 65114,
    length: 1,
    convRule: rule5
}, {
    start: 65115,
    length: 1,
    convRule: rule4
}, {
    start: 65116,
    length: 1,
    convRule: rule5
}, {
    start: 65117,
    length: 1,
    convRule: rule4
}, {
    start: 65118,
    length: 1,
    convRule: rule5
}, {
    start: 65119,
    length: 3,
    convRule: rule2
}, {
    start: 65122,
    length: 1,
    convRule: rule6
}, {
    start: 65123,
    length: 1,
    convRule: rule7
}, {
    start: 65124,
    length: 3,
    convRule: rule6
}, {
    start: 65128,
    length: 1,
    convRule: rule2
}, {
    start: 65129,
    length: 1,
    convRule: rule3
}, {
    start: 65130,
    length: 2,
    convRule: rule2
}, {
    start: 65136,
    length: 5,
    convRule: rule45
}, {
    start: 65142,
    length: 135,
    convRule: rule45
}, {
    start: 65279,
    length: 1,
    convRule: rule16
}, {
    start: 65281,
    length: 3,
    convRule: rule2
}, {
    start: 65284,
    length: 1,
    convRule: rule3
}, {
    start: 65285,
    length: 3,
    convRule: rule2
}, {
    start: 65288,
    length: 1,
    convRule: rule4
}, {
    start: 65289,
    length: 1,
    convRule: rule5
}, {
    start: 65290,
    length: 1,
    convRule: rule2
}, {
    start: 65291,
    length: 1,
    convRule: rule6
}, {
    start: 65292,
    length: 1,
    convRule: rule2
}, {
    start: 65293,
    length: 1,
    convRule: rule7
}, {
    start: 65294,
    length: 2,
    convRule: rule2
}, {
    start: 65296,
    length: 10,
    convRule: rule8
}, {
    start: 65306,
    length: 2,
    convRule: rule2
}, {
    start: 65308,
    length: 3,
    convRule: rule6
}, {
    start: 65311,
    length: 2,
    convRule: rule2
}, {
    start: 65313,
    length: 26,
    convRule: rule9
}, {
    start: 65339,
    length: 1,
    convRule: rule4
}, {
    start: 65340,
    length: 1,
    convRule: rule2
}, {
    start: 65341,
    length: 1,
    convRule: rule5
}, {
    start: 65342,
    length: 1,
    convRule: rule10
}, {
    start: 65343,
    length: 1,
    convRule: rule11
}, {
    start: 65344,
    length: 1,
    convRule: rule10
}, {
    start: 65345,
    length: 26,
    convRule: rule12
}, {
    start: 65371,
    length: 1,
    convRule: rule4
}, {
    start: 65372,
    length: 1,
    convRule: rule6
}, {
    start: 65373,
    length: 1,
    convRule: rule5
}, {
    start: 65374,
    length: 1,
    convRule: rule6
}, {
    start: 65375,
    length: 1,
    convRule: rule4
}, {
    start: 65376,
    length: 1,
    convRule: rule5
}, {
    start: 65377,
    length: 1,
    convRule: rule2
}, {
    start: 65378,
    length: 1,
    convRule: rule4
}, {
    start: 65379,
    length: 1,
    convRule: rule5
}, {
    start: 65380,
    length: 2,
    convRule: rule2
}, {
    start: 65382,
    length: 10,
    convRule: rule45
}, {
    start: 65392,
    length: 1,
    convRule: rule83
}, {
    start: 65393,
    length: 45,
    convRule: rule45
}, {
    start: 65438,
    length: 2,
    convRule: rule83
}, {
    start: 65440,
    length: 31,
    convRule: rule45
}, {
    start: 65474,
    length: 6,
    convRule: rule45
}, {
    start: 65482,
    length: 6,
    convRule: rule45
}, {
    start: 65490,
    length: 6,
    convRule: rule45
}, {
    start: 65498,
    length: 3,
    convRule: rule45
}, {
    start: 65504,
    length: 2,
    convRule: rule3
}, {
    start: 65506,
    length: 1,
    convRule: rule6
}, {
    start: 65507,
    length: 1,
    convRule: rule10
}, {
    start: 65508,
    length: 1,
    convRule: rule13
}, {
    start: 65509,
    length: 2,
    convRule: rule3
}, {
    start: 65512,
    length: 1,
    convRule: rule13
}, {
    start: 65513,
    length: 4,
    convRule: rule6
}, {
    start: 65517,
    length: 2,
    convRule: rule13
}, {
    start: 65529,
    length: 3,
    convRule: rule16
}, {
    start: 65532,
    length: 2,
    convRule: rule13
}, {
    start: 65536,
    length: 12,
    convRule: rule45
}, {
    start: 65549,
    length: 26,
    convRule: rule45
}, {
    start: 65576,
    length: 19,
    convRule: rule45
}, {
    start: 65596,
    length: 2,
    convRule: rule45
}, {
    start: 65599,
    length: 15,
    convRule: rule45
}, {
    start: 65616,
    length: 14,
    convRule: rule45
}, {
    start: 65664,
    length: 123,
    convRule: rule45
}, {
    start: 65792,
    length: 2,
    convRule: rule2
}, {
    start: 65794,
    length: 1,
    convRule: rule13
}, {
    start: 65799,
    length: 45,
    convRule: rule17
}, {
    start: 65847,
    length: 9,
    convRule: rule13
}, {
    start: 65856,
    length: 53,
    convRule: rule116
}, {
    start: 65909,
    length: 4,
    convRule: rule17
}, {
    start: 65913,
    length: 17,
    convRule: rule13
}, {
    start: 65930,
    length: 1,
    convRule: rule17
}, {
    start: 65936,
    length: 12,
    convRule: rule13
}, {
    start: 66000,
    length: 45,
    convRule: rule13
}, {
    start: 66045,
    length: 1,
    convRule: rule84
}, {
    start: 66176,
    length: 29,
    convRule: rule45
}, {
    start: 66208,
    length: 49,
    convRule: rule45
}, {
    start: 66304,
    length: 31,
    convRule: rule45
}, {
    start: 66336,
    length: 4,
    convRule: rule17
}, {
    start: 66352,
    length: 17,
    convRule: rule45
}, {
    start: 66369,
    length: 1,
    convRule: rule116
}, {
    start: 66370,
    length: 8,
    convRule: rule45
}, {
    start: 66378,
    length: 1,
    convRule: rule116
}, {
    start: 66432,
    length: 30,
    convRule: rule45
}, {
    start: 66463,
    length: 1,
    convRule: rule2
}, {
    start: 66464,
    length: 36,
    convRule: rule45
}, {
    start: 66504,
    length: 8,
    convRule: rule45
}, {
    start: 66512,
    length: 1,
    convRule: rule2
}, {
    start: 66513,
    length: 5,
    convRule: rule116
}, {
    start: 66560,
    length: 40,
    convRule: rule165
}, {
    start: 66600,
    length: 40,
    convRule: rule166
}, {
    start: 66640,
    length: 78,
    convRule: rule45
}, {
    start: 66720,
    length: 10,
    convRule: rule8
}, {
    start: 67584,
    length: 6,
    convRule: rule45
}, {
    start: 67592,
    length: 1,
    convRule: rule45
}, {
    start: 67594,
    length: 44,
    convRule: rule45
}, {
    start: 67639,
    length: 2,
    convRule: rule45
}, {
    start: 67644,
    length: 1,
    convRule: rule45
}, {
    start: 67647,
    length: 23,
    convRule: rule45
}, {
    start: 67671,
    length: 1,
    convRule: rule2
}, {
    start: 67672,
    length: 8,
    convRule: rule17
}, {
    start: 67840,
    length: 22,
    convRule: rule45
}, {
    start: 67862,
    length: 6,
    convRule: rule17
}, {
    start: 67871,
    length: 1,
    convRule: rule2
}, {
    start: 67872,
    length: 26,
    convRule: rule45
}, {
    start: 67903,
    length: 1,
    convRule: rule2
}, {
    start: 68096,
    length: 1,
    convRule: rule45
}, {
    start: 68097,
    length: 3,
    convRule: rule84
}, {
    start: 68101,
    length: 2,
    convRule: rule84
}, {
    start: 68108,
    length: 4,
    convRule: rule84
}, {
    start: 68112,
    length: 4,
    convRule: rule45
}, {
    start: 68117,
    length: 3,
    convRule: rule45
}, {
    start: 68121,
    length: 27,
    convRule: rule45
}, {
    start: 68152,
    length: 3,
    convRule: rule84
}, {
    start: 68159,
    length: 1,
    convRule: rule84
}, {
    start: 68160,
    length: 8,
    convRule: rule17
}, {
    start: 68176,
    length: 9,
    convRule: rule2
}, {
    start: 68192,
    length: 29,
    convRule: rule45
}, {
    start: 68221,
    length: 2,
    convRule: rule17
}, {
    start: 68223,
    length: 1,
    convRule: rule2
}, {
    start: 68352,
    length: 54,
    convRule: rule45
}, {
    start: 68409,
    length: 7,
    convRule: rule2
}, {
    start: 68416,
    length: 22,
    convRule: rule45
}, {
    start: 68440,
    length: 8,
    convRule: rule17
}, {
    start: 68448,
    length: 19,
    convRule: rule45
}, {
    start: 68472,
    length: 8,
    convRule: rule17
}, {
    start: 68608,
    length: 73,
    convRule: rule45
}, {
    start: 69216,
    length: 31,
    convRule: rule17
}, {
    start: 69632,
    length: 1,
    convRule: rule114
}, {
    start: 69633,
    length: 1,
    convRule: rule84
}, {
    start: 69634,
    length: 1,
    convRule: rule114
}, {
    start: 69635,
    length: 53,
    convRule: rule45
}, {
    start: 69688,
    length: 15,
    convRule: rule84
}, {
    start: 69703,
    length: 7,
    convRule: rule2
}, {
    start: 69714,
    length: 20,
    convRule: rule17
}, {
    start: 69734,
    length: 10,
    convRule: rule8
}, {
    start: 69760,
    length: 2,
    convRule: rule84
}, {
    start: 69762,
    length: 1,
    convRule: rule114
}, {
    start: 69763,
    length: 45,
    convRule: rule45
}, {
    start: 69808,
    length: 3,
    convRule: rule114
}, {
    start: 69811,
    length: 4,
    convRule: rule84
}, {
    start: 69815,
    length: 2,
    convRule: rule114
}, {
    start: 69817,
    length: 2,
    convRule: rule84
}, {
    start: 69819,
    length: 2,
    convRule: rule2
}, {
    start: 69821,
    length: 1,
    convRule: rule16
}, {
    start: 69822,
    length: 4,
    convRule: rule2
}, {
    start: 73728,
    length: 879,
    convRule: rule45
}, {
    start: 74752,
    length: 99,
    convRule: rule116
}, {
    start: 74864,
    length: 4,
    convRule: rule2
}, {
    start: 77824,
    length: 1071,
    convRule: rule45
}, {
    start: 92160,
    length: 569,
    convRule: rule45
}, {
    start: 110592,
    length: 2,
    convRule: rule45
}, {
    start: 118784,
    length: 246,
    convRule: rule13
}, {
    start: 119040,
    length: 39,
    convRule: rule13
}, {
    start: 119081,
    length: 60,
    convRule: rule13
}, {
    start: 119141,
    length: 2,
    convRule: rule114
}, {
    start: 119143,
    length: 3,
    convRule: rule84
}, {
    start: 119146,
    length: 3,
    convRule: rule13
}, {
    start: 119149,
    length: 6,
    convRule: rule114
}, {
    start: 119155,
    length: 8,
    convRule: rule16
}, {
    start: 119163,
    length: 8,
    convRule: rule84
}, {
    start: 119171,
    length: 2,
    convRule: rule13
}, {
    start: 119173,
    length: 7,
    convRule: rule84
}, {
    start: 119180,
    length: 30,
    convRule: rule13
}, {
    start: 119210,
    length: 4,
    convRule: rule84
}, {
    start: 119214,
    length: 48,
    convRule: rule13
}, {
    start: 119296,
    length: 66,
    convRule: rule13
}, {
    start: 119362,
    length: 3,
    convRule: rule84
}, {
    start: 119365,
    length: 1,
    convRule: rule13
}, {
    start: 119552,
    length: 87,
    convRule: rule13
}, {
    start: 119648,
    length: 18,
    convRule: rule17
}, {
    start: 119808,
    length: 26,
    convRule: rule98
}, {
    start: 119834,
    length: 26,
    convRule: rule14
}, {
    start: 119860,
    length: 26,
    convRule: rule98
}, {
    start: 119886,
    length: 7,
    convRule: rule14
}, {
    start: 119894,
    length: 18,
    convRule: rule14
}, {
    start: 119912,
    length: 26,
    convRule: rule98
}, {
    start: 119938,
    length: 26,
    convRule: rule14
}, {
    start: 119964,
    length: 1,
    convRule: rule98
}, {
    start: 119966,
    length: 2,
    convRule: rule98
}, {
    start: 119970,
    length: 1,
    convRule: rule98
}, {
    start: 119973,
    length: 2,
    convRule: rule98
}, {
    start: 119977,
    length: 4,
    convRule: rule98
}, {
    start: 119982,
    length: 8,
    convRule: rule98
}, {
    start: 119990,
    length: 4,
    convRule: rule14
}, {
    start: 119995,
    length: 1,
    convRule: rule14
}, {
    start: 119997,
    length: 7,
    convRule: rule14
}, {
    start: 120005,
    length: 11,
    convRule: rule14
}, {
    start: 120016,
    length: 26,
    convRule: rule98
}, {
    start: 120042,
    length: 26,
    convRule: rule14
}, {
    start: 120068,
    length: 2,
    convRule: rule98
}, {
    start: 120071,
    length: 4,
    convRule: rule98
}, {
    start: 120077,
    length: 8,
    convRule: rule98
}, {
    start: 120086,
    length: 7,
    convRule: rule98
}, {
    start: 120094,
    length: 26,
    convRule: rule14
}, {
    start: 120120,
    length: 2,
    convRule: rule98
}, {
    start: 120123,
    length: 4,
    convRule: rule98
}, {
    start: 120128,
    length: 5,
    convRule: rule98
}, {
    start: 120134,
    length: 1,
    convRule: rule98
}, {
    start: 120138,
    length: 7,
    convRule: rule98
}, {
    start: 120146,
    length: 26,
    convRule: rule14
}, {
    start: 120172,
    length: 26,
    convRule: rule98
}, {
    start: 120198,
    length: 26,
    convRule: rule14
}, {
    start: 120224,
    length: 26,
    convRule: rule98
}, {
    start: 120250,
    length: 26,
    convRule: rule14
}, {
    start: 120276,
    length: 26,
    convRule: rule98
}, {
    start: 120302,
    length: 26,
    convRule: rule14
}, {
    start: 120328,
    length: 26,
    convRule: rule98
}, {
    start: 120354,
    length: 26,
    convRule: rule14
}, {
    start: 120380,
    length: 26,
    convRule: rule98
}, {
    start: 120406,
    length: 26,
    convRule: rule14
}, {
    start: 120432,
    length: 26,
    convRule: rule98
}, {
    start: 120458,
    length: 28,
    convRule: rule14
}, {
    start: 120488,
    length: 25,
    convRule: rule98
}, {
    start: 120513,
    length: 1,
    convRule: rule6
}, {
    start: 120514,
    length: 25,
    convRule: rule14
}, {
    start: 120539,
    length: 1,
    convRule: rule6
}, {
    start: 120540,
    length: 6,
    convRule: rule14
}, {
    start: 120546,
    length: 25,
    convRule: rule98
}, {
    start: 120571,
    length: 1,
    convRule: rule6
}, {
    start: 120572,
    length: 25,
    convRule: rule14
}, {
    start: 120597,
    length: 1,
    convRule: rule6
}, {
    start: 120598,
    length: 6,
    convRule: rule14
}, {
    start: 120604,
    length: 25,
    convRule: rule98
}, {
    start: 120629,
    length: 1,
    convRule: rule6
}, {
    start: 120630,
    length: 25,
    convRule: rule14
}, {
    start: 120655,
    length: 1,
    convRule: rule6
}, {
    start: 120656,
    length: 6,
    convRule: rule14
}, {
    start: 120662,
    length: 25,
    convRule: rule98
}, {
    start: 120687,
    length: 1,
    convRule: rule6
}, {
    start: 120688,
    length: 25,
    convRule: rule14
}, {
    start: 120713,
    length: 1,
    convRule: rule6
}, {
    start: 120714,
    length: 6,
    convRule: rule14
}, {
    start: 120720,
    length: 25,
    convRule: rule98
}, {
    start: 120745,
    length: 1,
    convRule: rule6
}, {
    start: 120746,
    length: 25,
    convRule: rule14
}, {
    start: 120771,
    length: 1,
    convRule: rule6
}, {
    start: 120772,
    length: 6,
    convRule: rule14
}, {
    start: 120778,
    length: 1,
    convRule: rule98
}, {
    start: 120779,
    length: 1,
    convRule: rule14
}, {
    start: 120782,
    length: 50,
    convRule: rule8
}, {
    start: 126976,
    length: 44,
    convRule: rule13
}, {
    start: 127024,
    length: 100,
    convRule: rule13
}, {
    start: 127136,
    length: 15,
    convRule: rule13
}, {
    start: 127153,
    length: 14,
    convRule: rule13
}, {
    start: 127169,
    length: 15,
    convRule: rule13
}, {
    start: 127185,
    length: 15,
    convRule: rule13
}, {
    start: 127232,
    length: 11,
    convRule: rule17
}, {
    start: 127248,
    length: 31,
    convRule: rule13
}, {
    start: 127280,
    length: 58,
    convRule: rule13
}, {
    start: 127344,
    length: 43,
    convRule: rule13
}, {
    start: 127462,
    length: 29,
    convRule: rule13
}, {
    start: 127504,
    length: 43,
    convRule: rule13
}, {
    start: 127552,
    length: 9,
    convRule: rule13
}, {
    start: 127568,
    length: 2,
    convRule: rule13
}, {
    start: 127744,
    length: 33,
    convRule: rule13
}, {
    start: 127792,
    length: 6,
    convRule: rule13
}, {
    start: 127799,
    length: 70,
    convRule: rule13
}, {
    start: 127872,
    length: 20,
    convRule: rule13
}, {
    start: 127904,
    length: 37,
    convRule: rule13
}, {
    start: 127942,
    length: 5,
    convRule: rule13
}, {
    start: 127968,
    length: 17,
    convRule: rule13
}, {
    start: 128000,
    length: 63,
    convRule: rule13
}, {
    start: 128064,
    length: 1,
    convRule: rule13
}, {
    start: 128066,
    length: 182,
    convRule: rule13
}, {
    start: 128249,
    length: 4,
    convRule: rule13
}, {
    start: 128256,
    length: 62,
    convRule: rule13
}, {
    start: 128336,
    length: 24,
    convRule: rule13
}, {
    start: 128507,
    length: 5,
    convRule: rule13
}, {
    start: 128513,
    length: 16,
    convRule: rule13
}, {
    start: 128530,
    length: 3,
    convRule: rule13
}, {
    start: 128534,
    length: 1,
    convRule: rule13
}, {
    start: 128536,
    length: 1,
    convRule: rule13
}, {
    start: 128538,
    length: 1,
    convRule: rule13
}, {
    start: 128540,
    length: 3,
    convRule: rule13
}, {
    start: 128544,
    length: 6,
    convRule: rule13
}, {
    start: 128552,
    length: 4,
    convRule: rule13
}, {
    start: 128557,
    length: 1,
    convRule: rule13
}, {
    start: 128560,
    length: 4,
    convRule: rule13
}, {
    start: 128565,
    length: 12,
    convRule: rule13
}, {
    start: 128581,
    length: 11,
    convRule: rule13
}, {
    start: 128640,
    length: 70,
    convRule: rule13
}, {
    start: 128768,
    length: 116,
    convRule: rule13
}, {
    start: 131072,
    length: 42711,
    convRule: rule45
}, {
    start: 173824,
    length: 4149,
    convRule: rule45
}, {
    start: 177984,
    length: 222,
    convRule: rule45
}, {
    start: 194560,
    length: 542,
    convRule: rule45
}, {
    start: 917505,
    length: 1,
    convRule: rule16
}, {
    start: 917536,
    length: 96,
    convRule: rule16
}, {
    start: 917760,
    length: 240,
    convRule: rule84
}, {
    start: 983040,
    length: 65534,
    convRule: rule164
}, {
    start: 1048576,
    length: 65534,
    convRule: rule164
} ];
var checkAttr = function (categories) {
    return function ($$char) {
        var numOfBlocks = (function () {
            var $28 = $$char < 256;
            if ($28) {
                return numLat1Blocks;
            };
            return numBlocks;
        })();
        var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
            return false;
        };
        if (maybeConversionRule instanceof Data_Maybe.Just) {
            return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4800, column 8 - line 4802, column 92): " + [ maybeConversionRule.constructor.name ]);
    };
};
var uIswalnum = checkAttr([ gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL ]);
var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);
var uIswcntrl = checkAttr([ gencatCC ]);
var uIswdigit = checkAttr([ gencatND ]);
var uIswlower = checkAttr([ gencatLL ]);
var uIswprint = checkAttr([ gencatMC, gencatNO, gencatSK, gencatME, gencatND, gencatPO, gencatLT, gencatPC, gencatSM, gencatZS, gencatLU, gencatPD, gencatSO, gencatPE, gencatPF, gencatPS, gencatSC, gencatLL, gencatLM, gencatPI, gencatNL, gencatMN, gencatLO ]);
var uIswupper = checkAttr([ gencatLU, gencatLT ]);
var uGencat = function ($$char) {
    var conversionRule = getRule(allchars)($$char)(numBlocks);
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.unicodeCat;
    })(conversionRule);
};
module.exports = {
    NUMCAT_LU: NUMCAT_LU,
    NUMCAT_LL: NUMCAT_LL,
    NUMCAT_LT: NUMCAT_LT,
    NUMCAT_LM: NUMCAT_LM,
    NUMCAT_LO: NUMCAT_LO,
    NUMCAT_MN: NUMCAT_MN,
    NUMCAT_MC: NUMCAT_MC,
    NUMCAT_ME: NUMCAT_ME,
    NUMCAT_ND: NUMCAT_ND,
    NUMCAT_NL: NUMCAT_NL,
    NUMCAT_NO: NUMCAT_NO,
    NUMCAT_PC: NUMCAT_PC,
    NUMCAT_PD: NUMCAT_PD,
    NUMCAT_PS: NUMCAT_PS,
    NUMCAT_PE: NUMCAT_PE,
    NUMCAT_PI: NUMCAT_PI,
    NUMCAT_PF: NUMCAT_PF,
    NUMCAT_PO: NUMCAT_PO,
    NUMCAT_SM: NUMCAT_SM,
    NUMCAT_SC: NUMCAT_SC,
    NUMCAT_SK: NUMCAT_SK,
    NUMCAT_SO: NUMCAT_SO,
    NUMCAT_ZS: NUMCAT_ZS,
    NUMCAT_ZL: NUMCAT_ZL,
    NUMCAT_ZP: NUMCAT_ZP,
    NUMCAT_CC: NUMCAT_CC,
    NUMCAT_CF: NUMCAT_CF,
    NUMCAT_CS: NUMCAT_CS,
    NUMCAT_CO: NUMCAT_CO,
    NUMCAT_CN: NUMCAT_CN,
    ConversionRule: ConversionRule,
    CharBlock: CharBlock,
    gencatPF: gencatPF,
    gencatSM: gencatSM,
    gencatSO: gencatSO,
    gencatPI: gencatPI,
    gencatMC: gencatMC,
    gencatCO: gencatCO,
    gencatME: gencatME,
    gencatPO: gencatPO,
    gencatCS: gencatCS,
    gencatPS: gencatPS,
    gencatMN: gencatMN,
    gencatZL: gencatZL,
    gencatZP: gencatZP,
    gencatZS: gencatZS,
    gencatLL: gencatLL,
    gencatLM: gencatLM,
    gencatLO: gencatLO,
    gencatND: gencatND,
    gencatLT: gencatLT,
    gencatSC: gencatSC,
    gencatLU: gencatLU,
    gencatNL: gencatNL,
    gencatCC: gencatCC,
    gencatNO: gencatNO,
    gencatCF: gencatCF,
    gencatPC: gencatPC,
    gencatSK: gencatSK,
    gencatPD: gencatPD,
    gencatPE: gencatPE,
    maxUniChar: maxUniChar,
    numBlocks: numBlocks,
    numConvBlocks: numConvBlocks,
    numSpaceBlocks: numSpaceBlocks,
    numLat1Blocks: numLat1Blocks,
    numRules: numRules,
    rule165: rule165,
    rule63: rule63,
    rule126: rule126,
    rule162: rule162,
    rule71: rule71,
    rule21: rule21,
    rule128: rule128,
    rule44: rule44,
    rule161: rule161,
    rule105: rule105,
    rule101: rule101,
    rule43: rule43,
    rule77: rule77,
    rule143: rule143,
    rule39: rule39,
    rule41: rule41,
    rule72: rule72,
    rule28: rule28,
    rule31: rule31,
    rule36: rule36,
    rule102: rule102,
    rule80: rule80,
    rule5: rule5,
    rule113: rule113,
    rule142: rule142,
    rule145: rule145,
    rule104: rule104,
    rule61: rule61,
    rule93: rule93,
    rule62: rule62,
    rule103: rule103,
    rule60: rule60,
    rule96: rule96,
    rule51: rule51,
    rule87: rule87,
    rule86: rule86,
    rule123: rule123,
    rule164: rule164,
    rule166: rule166,
    rule27: rule27,
    rule158: rule158,
    rule157: rule157,
    rule9: rule9,
    rule159: rule159,
    rule138: rule138,
    rule4: rule4,
    rule133: rule133,
    rule155: rule155,
    rule132: rule132,
    rule153: rule153,
    rule24: rule24,
    rule26: rule26,
    rule16: rule16,
    rule74: rule74,
    rule122: rule122,
    rule25: rule25,
    rule127: rule127,
    rule40: rule40,
    rule30: rule30,
    rule29: rule29,
    rule69: rule69,
    rule3: rule3,
    rule135: rule135,
    rule23: rule23,
    rule32: rule32,
    rule33: rule33,
    rule50: rule50,
    rule154: rule154,
    rule58: rule58,
    rule67: rule67,
    rule76: rule76,
    rule119: rule119,
    rule57: rule57,
    rule97: rule97,
    rule108: rule108,
    rule100: rule100,
    rule70: rule70,
    rule141: rule141,
    rule139: rule139,
    rule45: rule45,
    rule91: rule91,
    rule121: rule121,
    rule117: rule117,
    rule12: rule12,
    rule85: rule85,
    rule163: rule163,
    rule17: rule17,
    rule134: rule134,
    rule147: rule147,
    rule64: rule64,
    rule2: rule2,
    rule84: rule84,
    rule38: rule38,
    rule42: rule42,
    rule53: rule53,
    rule83: rule83,
    rule98: rule98,
    rule136: rule136,
    rule120: rule120,
    rule20: rule20,
    rule115: rule115,
    rule109: rule109,
    rule13: rule13,
    rule19: rule19,
    rule125: rule125,
    rule49: rule49,
    rule79: rule79,
    rule14: rule14,
    rule148: rule148,
    rule66: rule66,
    rule99: rule99,
    rule140: rule140,
    rule116: rule116,
    rule8: rule8,
    rule94: rule94,
    rule114: rule114,
    rule6: rule6,
    rule7: rule7,
    rule55: rule55,
    rule54: rule54,
    rule124: rule124,
    rule65: rule65,
    rule78: rule78,
    rule56: rule56,
    rule137: rule137,
    rule131: rule131,
    rule130: rule130,
    rule110: rule110,
    rule48: rule48,
    rule52: rule52,
    rule156: rule156,
    rule75: rule75,
    rule11: rule11,
    rule129: rule129,
    rule37: rule37,
    rule18: rule18,
    rule152: rule152,
    rule35: rule35,
    rule46: rule46,
    rule82: rule82,
    rule10: rule10,
    rule34: rule34,
    rule150: rule150,
    rule107: rule107,
    rule47: rule47,
    rule160: rule160,
    rule73: rule73,
    rule59: rule59,
    rule106: rule106,
    rule151: rule151,
    rule15: rule15,
    rule112: rule112,
    rule90: rule90,
    rule146: rule146,
    rule89: rule89,
    rule81: rule81,
    rule88: rule88,
    rule149: rule149,
    rule111: rule111,
    rule144: rule144,
    rule92: rule92,
    rule118: rule118,
    rule22: rule22,
    rule68: rule68,
    rule95: rule95,
    rule0: rule0,
    rule1: rule1,
    allchars: allchars,
    convchars: convchars,
    spacechars: spacechars,
    nullrule: nullrule,
    blkCmp: blkCmp,
    getRule: getRule,
    bsearch: bsearch,
    checkAttr: checkAttr,
    checkAttrS: checkAttrS,
    uIswcntrl: uIswcntrl,
    uIswprint: uIswprint,
    uIswupper: uIswupper,
    uIswlower: uIswlower,
    uIswalpha: uIswalpha,
    uIswdigit: uIswdigit,
    uIswalnum: uIswalnum,
    uIswspace: uIswspace,
    caseConv: caseConv,
    uTowupper: uTowupper,
    uTowlower: uTowlower,
    uTowtitle: uTowtitle,
    uGencat: uGencat,
    showUnicodeCategory: showUnicodeCategory,
    showConversionRule: showConversionRule,
    showCharBlock: showCharBlock
};

},{"../Data.Array/index.js":"6mZxP","../Data.Boolean/index.js":"4zMHm","../Data.Eq/index.js":"2htS8","../Data.Functor/index.js":"5ZkNG","../Data.Int/index.js":"3HdcH","../Data.Maybe/index.js":"1Cwwt","../Data.Ordering/index.js":"5YcVa","../Data.Show/index.js":"6nX0c"}],"6rrmJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var NotAuthenticated = (function () {
    function NotAuthenticated() {

    };
    NotAuthenticated.value = new NotAuthenticated();
    return NotAuthenticated;
})();
var QueryError = (function () {
    function QueryError(value0) {
        this.value0 = value0;
    };
    QueryError.create = function (value0) {
        return new QueryError(value0);
    };
    return QueryError;
})();
var DecodeError = (function () {
    function DecodeError(value0) {
        this.value0 = value0;
    };
    DecodeError.create = function (value0) {
        return new DecodeError(value0);
    };
    return DecodeError;
})();
var ResourceNotFound = (function () {
    function ResourceNotFound() {

    };
    ResourceNotFound.value = new ResourceNotFound();
    return ResourceNotFound;
})();
var genericGqlFailure = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof NotAuthenticated) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof QueryError) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof DecodeError) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof ResourceNotFound) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
    };
    throw new Error("Failed pattern match at Halogen.GraphQL.Error (line 17, column 1 - line 17, column 58): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return NotAuthenticated.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new QueryError(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new DecodeError(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return ResourceNotFound.value;
    };
    throw new Error("Failed pattern match at Halogen.GraphQL.Error (line 17, column 1 - line 17, column 58): " + [ x.constructor.name ]);
});
var showGqlFailure = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericGqlFailure)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "NotAuthenticated";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Effect_Exception.showError))(new Data_Symbol.IsSymbol(function () {
    return "QueryError";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Argonaut_Decode_Error.showJsonDecodeError))(new Data_Symbol.IsSymbol(function () {
    return "DecodeError";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "ResourceNotFound";
})))))));
var eqGqlFailure = new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showGqlFailure)));
module.exports = {
    NotAuthenticated: NotAuthenticated,
    QueryError: QueryError,
    DecodeError: DecodeError,
    ResourceNotFound: ResourceNotFound,
    genericGqlFailure: genericGqlFailure,
    showGqlFailure: showGqlFailure,
    eqGqlFailure: eqGqlFailure
};

},{"../Data.Argonaut.Decode.Error/index.js":"1Njs1","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.Generic.Rep/index.js":"3mknB","../Data.Generic.Rep.Show/index.js":"3NVx9","../Data.Show/index.js":"6nX0c","../Data.Symbol/index.js":"3AbLb","../Effect.Exception/index.js":"neabt"}],"3NVx9":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var GenericShowArgs = function (genericShowArgs) {
    this.genericShowArgs = genericShowArgs;
};
var GenericShow = function (genericShow$prime) {
    this["genericShow'"] = genericShow$prime;
};
var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
    return [  ];
});
var genericShowArgsArgument = function (dictShow) {
    return new GenericShowArgs(function (v) {
        return [ Data_Show.show(dictShow)(v) ];
    });
};
var genericShowArgs = function (dict) {
    return dict.genericShowArgs;
};
var genericShowArgsProduct = function (dictGenericShowArgs) {
    return function (dictGenericShowArgs1) {
        return new GenericShowArgs(function (v) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
        });
    };
};
var genericShowConstructor = function (dictGenericShowArgs) {
    return function (dictIsSymbol) {
        return new GenericShow(function (v) {
            var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var v1 = genericShowArgs(dictGenericShowArgs)(v);
            if (v1.length === 0) {
                return ctor;
            };
            return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
        });
    };
};
var genericShow$prime = function (dict) {
    return dict["genericShow'"];
};
var genericShowNoConstructors = new GenericShow(function (a) {
    return genericShow$prime(genericShowNoConstructors)(a);
});
var genericShowSum = function (dictGenericShow) {
    return function (dictGenericShow1) {
        return new GenericShow(function (v) {
            if (v instanceof Data_Generic_Rep.Inl) {
                return genericShow$prime(dictGenericShow)(v.value0);
            };
            if (v instanceof Data_Generic_Rep.Inr) {
                return genericShow$prime(dictGenericShow1)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
        });
    };
};
var genericShow = function (dictGeneric) {
    return function (dictGenericShow) {
        return function (x) {
            return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
        };
    };
};
module.exports = {
    GenericShow: GenericShow,
    "genericShow'": genericShow$prime,
    genericShow: genericShow,
    GenericShowArgs: GenericShowArgs,
    genericShowArgs: genericShowArgs,
    genericShowNoConstructors: genericShowNoConstructors,
    genericShowArgsNoArguments: genericShowArgsNoArguments,
    genericShowSum: genericShowSum,
    genericShowArgsProduct: genericShowArgsProduct,
    genericShowConstructor: genericShowConstructor,
    genericShowArgsArgument: genericShowArgsArgument
};

},{"../Data.Foldable/index.js":"6ATDN","../Data.Generic.Rep/index.js":"3mknB","../Data.Monoid/index.js":"2Wlmd","../Data.Semigroup/index.js":"3qtmP","../Data.Show/index.js":"6nX0c","../Data.Symbol/index.js":"3AbLb"}],"7lUu2":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var slot = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (component) {
                        return function (input) {
                            return function (outputQuery) {
                                return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot()(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(outputQuery)));
                            };
                        };
                    };
                };
            };
        };
    };
};
var memoized = function (eqFn) {
    return function (f) {
        return function (a) {
            return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunked(eqFn)(f)(a)));
        };
    };
};
var lazy3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk3(f, a, b, c)));
            };
        };
    };
};
var lazy2 = function (f) {
    return function (a) {
        return function (b) {
            return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk2(f, a, b)));
        };
    };
};
var lazy = function (f) {
    return function (a) {
        return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk1(f, a)));
    };
};
var fromPlainHTML = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    fromPlainHTML: fromPlainHTML,
    slot: slot,
    memoized: memoized,
    lazy: lazy,
    lazy2: lazy2,
    lazy3: lazy3
};

},{"../Halogen.Component/index.js":"5H60K","../Halogen.HTML.Core/index.js":"0RFMZ","../Halogen.VDom.Thunk/index.js":"57lBX","../Unsafe.Coerce/index.js":"3fQke"}],"6FIOI":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Market = require("../Data.Lens.Internal.Market/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var NotAsked = (function () {
    function NotAsked() {

    };
    NotAsked.value = new NotAsked();
    return NotAsked;
})();
var Loading = (function () {
    function Loading() {

    };
    Loading.value = new Loading();
    return Loading;
})();
var Failure = (function () {
    function Failure(value0) {
        this.value0 = value0;
    };
    Failure.create = function (value0) {
        return new Failure(value0);
    };
    return Failure;
})();
var Success = (function () {
    function Success(value0) {
        this.value0 = value0;
    };
    Success.create = function (value0) {
        return new Success(value0);
    };
    return Success;
})();
var toMaybe = function (v) {
    if (v instanceof Success) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var showRemoteData = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof NotAsked) {
                return "RemoteData.NotAsked";
            };
            if (v instanceof Loading) {
                return "RemoteData.Loading";
            };
            if (v instanceof Failure) {
                return "RemoteData.Failure " + Data_Show.show(dictShow)(v.value0);
            };
            if (v instanceof Success) {
                return "RemoteData.Success " + Data_Show.show(dictShow1)(v.value0);
            };
            throw new Error("Failed pattern match at Network.RemoteData (line 47, column 1 - line 51, column 61): " + [ v.constructor.name ]);
        });
    };
};
var maybe = function (default$prime) {
    return function (f) {
        return function (v) {
            if (v instanceof Success) {
                return f(v.value0);
            };
            return default$prime;
        };
    };
};
var withDefault = function (default$prime) {
    return maybe(default$prime)(Control_Category.identity(Control_Category.categoryFn));
};
var genericRemoteData = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof NotAsked) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Loading) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof Failure) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof Success) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at Network.RemoteData (line 41, column 1 - line 41, column 64): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return NotAsked.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return Loading.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Failure(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new Success(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at Network.RemoteData (line 41, column 1 - line 41, column 64): " + [ x.constructor.name ]);
});
var functorRemoteData = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof NotAsked) {
            return NotAsked.value;
        };
        if (m instanceof Loading) {
            return Loading.value;
        };
        if (m instanceof Failure) {
            return new Failure(m.value0);
        };
        if (m instanceof Success) {
            return new Success(f(m.value0));
        };
        throw new Error("Failed pattern match at Network.RemoteData (line 45, column 1 - line 45, column 60): " + [ m.constructor.name ]);
    };
});
var fromMaybe = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return NotAsked.value;
    };
    if (v instanceof Data_Maybe.Just) {
        return new Success(v.value0);
    };
    throw new Error("Failed pattern match at Network.RemoteData (line 129, column 1 - line 129, column 51): " + [ v.constructor.name ]);
};
var fromEither = function (v) {
    if (v instanceof Data_Either.Left) {
        return new Failure(v.value0);
    };
    if (v instanceof Data_Either.Right) {
        return new Success(v.value0);
    };
    throw new Error("Failed pattern match at Network.RemoteData (line 134, column 1 - line 134, column 55): " + [ v.constructor.name ]);
};
var foldableRemoteData = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Success) {
                return v(v1.value0);
            };
            if (v1 instanceof Failure) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v1 instanceof NotAsked) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v1 instanceof Loading) {
                return Data_Monoid.mempty(dictMonoid);
            };
            throw new Error("Failed pattern match at Network.RemoteData (line 91, column 1 - line 97, column 27): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
}, function (f) {
    return Data_Foldable.foldlDefault(foldableRemoteData)(f);
}, function (f) {
    return Data_Foldable.foldrDefault(foldableRemoteData)(f);
});
var traversableRemoteData = new Data_Traversable.Traversable(function () {
    return foldableRemoteData;
}, function () {
    return functorRemoteData;
}, function (dictApplicative) {
    return Data_Traversable.sequenceDefault(traversableRemoteData)(dictApplicative);
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Success) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Success.create)(v(v1.value0));
            };
            if (v1 instanceof Failure) {
                return Control_Applicative.pure(dictApplicative)(new Failure(v1.value0));
            };
            if (v1 instanceof NotAsked) {
                return Control_Applicative.pure(dictApplicative)(NotAsked.value);
            };
            if (v1 instanceof Loading) {
                return Control_Applicative.pure(dictApplicative)(Loading.value);
            };
            throw new Error("Failed pattern match at Network.RemoteData (line 99, column 1 - line 104, column 29): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var eqRemoteData = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof NotAsked && y instanceof NotAsked) {
                    return true;
                };
                if (x instanceof Loading && y instanceof Loading) {
                    return true;
                };
                if (x instanceof Failure && y instanceof Failure) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof Success && y instanceof Success) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var bifunctorRemoteData = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof NotAsked) {
                return NotAsked.value;
            };
            if (v2 instanceof Loading) {
                return Loading.value;
            };
            if (v2 instanceof Failure) {
                return new Failure(v(v2.value0));
            };
            if (v2 instanceof Success) {
                return new Success(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Network.RemoteData (line 54, column 1 - line 58, column 48): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableRemoteData = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Success) {
                    return v1(v2.value0);
                };
                if (v2 instanceof Failure) {
                    return v(v2.value0);
                };
                if (v2 instanceof Loading) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v2 instanceof NotAsked) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                throw new Error("Failed pattern match at Network.RemoteData (line 106, column 1 - line 112, column 31): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (f) {
    return Data_Bifoldable.bifoldlDefault(bifoldableRemoteData)(f);
}, function (f) {
    return Data_Bifoldable.bifoldrDefault(bifoldableRemoteData)(f);
});
var bitraversableRemoteData = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableRemoteData;
}, function () {
    return bifunctorRemoteData;
}, function (dictApplicative) {
    return Data_Bitraversable.bisequenceDefault(bitraversableRemoteData)(dictApplicative);
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Success) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Success.create)(v1(v2.value0));
                };
                if (v2 instanceof Failure) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Failure.create)(v(v2.value0));
                };
                if (v2 instanceof NotAsked) {
                    return Control_Applicative.pure(dictApplicative)(NotAsked.value);
                };
                if (v2 instanceof Loading) {
                    return Control_Applicative.pure(dictApplicative)(Loading.value);
                };
                throw new Error("Failed pattern match at Network.RemoteData (line 114, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyRemoteData = new Control_Apply.Apply(function () {
    return functorRemoteData;
}, function (v) {
    return function (v1) {
        if (v instanceof Success && v1 instanceof Success) {
            return new Success(v.value0(v1.value0));
        };
        if (v instanceof Failure) {
            return new Failure(v.value0);
        };
        if (v1 instanceof Failure) {
            return new Failure(v1.value0);
        };
        if (v instanceof NotAsked) {
            return NotAsked.value;
        };
        if (v1 instanceof NotAsked) {
            return NotAsked.value;
        };
        if (v instanceof Loading) {
            return Loading.value;
        };
        if (v1 instanceof Loading) {
            return Loading.value;
        };
        throw new Error("Failed pattern match at Network.RemoteData (line 62, column 1 - line 69, column 28): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindRemoteData = new Control_Bind.Bind(function () {
    return applyRemoteData;
}, function (v) {
    return function (v1) {
        if (v instanceof NotAsked) {
            return NotAsked.value;
        };
        if (v instanceof Loading) {
            return Loading.value;
        };
        if (v instanceof Failure) {
            return new Failure(v.value0);
        };
        if (v instanceof Success) {
            return v1(v.value0);
        };
        throw new Error("Failed pattern match at Network.RemoteData (line 71, column 1 - line 75, column 35): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeRemoteData = new Control_Applicative.Applicative(function () {
    return applyRemoteData;
}, function (value) {
    return new Success(value);
});
var monadRemoteData = new Control_Monad.Monad(function () {
    return applicativeRemoteData;
}, function () {
    return bindRemoteData;
});
var monadThrowRemoteData = new Control_Monad_Error_Class.MonadThrow(function () {
    return monadRemoteData;
}, Failure.create);
var monadErrorRemoteData = new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowRemoteData;
}, function (v) {
    return function (v1) {
        if (v instanceof Failure) {
            return v1(v.value0);
        };
        if (v instanceof Success) {
            return new Success(v.value0);
        };
        if (v instanceof NotAsked) {
            return NotAsked.value;
        };
        if (v instanceof Loading) {
            return Loading.value;
        };
        throw new Error("Failed pattern match at Network.RemoteData (line 85, column 1 - line 89, column 33): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var _Success = function (dictChoice) {
    var unwrap = function (v) {
        if (v instanceof Success) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    };
    return Data_Lens_Prism.prism(Success.create)(unwrap)(dictChoice);
};
var isSuccess = Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)(_Success(Data_Lens_Internal_Market.choiceMarket));
var _NotAsked = function (dictChoice) {
    var unwrap = function (v) {
        if (v instanceof NotAsked) {
            return new Data_Either.Right(Data_Unit.unit);
        };
        return new Data_Either.Left(v);
    };
    return Data_Lens_Prism.prism(Data_Function["const"](NotAsked.value))(unwrap)(dictChoice);
};
var isNotAsked = Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)(_NotAsked(Data_Lens_Internal_Market.choiceMarket));
var _Loading = function (dictChoice) {
    var unwrap = function (v) {
        if (v instanceof Loading) {
            return new Data_Either.Right(Data_Unit.unit);
        };
        return new Data_Either.Left(v);
    };
    return Data_Lens_Prism.prism(Data_Function["const"](Loading.value))(unwrap)(dictChoice);
};
var isLoading = Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)(_Loading(Data_Lens_Internal_Market.choiceMarket));
var _Failure = function (dictChoice) {
    var unwrap = function (v) {
        if (v instanceof Failure) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    };
    return Data_Lens_Prism.prism(Failure.create)(unwrap)(dictChoice);
};
var isFailure = Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)(_Failure(Data_Lens_Internal_Market.choiceMarket));
module.exports = {
    NotAsked: NotAsked,
    Loading: Loading,
    Failure: Failure,
    Success: Success,
    toMaybe: toMaybe,
    fromMaybe: fromMaybe,
    fromEither: fromEither,
    maybe: maybe,
    withDefault: withDefault,
    "_NotAsked": _NotAsked,
    "_Loading": _Loading,
    "_Failure": _Failure,
    "_Success": _Success,
    isNotAsked: isNotAsked,
    isLoading: isLoading,
    isFailure: isFailure,
    isSuccess: isSuccess,
    genericRemoteData: genericRemoteData,
    eqRemoteData: eqRemoteData,
    functorRemoteData: functorRemoteData,
    showRemoteData: showRemoteData,
    bifunctorRemoteData: bifunctorRemoteData,
    applyRemoteData: applyRemoteData,
    bindRemoteData: bindRemoteData,
    applicativeRemoteData: applicativeRemoteData,
    monadRemoteData: monadRemoteData,
    monadThrowRemoteData: monadThrowRemoteData,
    monadErrorRemoteData: monadErrorRemoteData,
    foldableRemoteData: foldableRemoteData,
    traversableRemoteData: traversableRemoteData,
    bifoldableRemoteData: bifoldableRemoteData,
    bitraversableRemoteData: bitraversableRemoteData
};

},{"../Control.Applicative/index.js":"1ufUD","../Control.Apply/index.js":"TgfZ1","../Control.Bind/index.js":"1hm9k","../Control.Category/index.js":"6QTyW","../Control.Monad/index.js":"4SDam","../Control.Monad.Error.Class/index.js":"6mmaT","../Data.Bifoldable/index.js":"4OFNy","../Data.Bifunctor/index.js":"4Uonh","../Data.Bitraversable/index.js":"5R51a","../Data.Either/index.js":"5Va79","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Generic.Rep/index.js":"3mknB","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Lens.Internal.Market/index.js":"4ZF9C","../Data.Lens.Prism/index.js":"61Idc","../Data.Maybe/index.js":"1Cwwt","../Data.Monoid/index.js":"2Wlmd","../Data.Show/index.js":"6nX0c","../Data.Traversable/index.js":"2NLLF","../Data.Unit/index.js":"64zbv"}],"4ZF9C":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Market = (function () {
    function Market(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Market.create = function (value0) {
        return function (value1) {
            return new Market(value0, value1);
        };
    };
    return Market;
})();
var profunctorMarket = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Market(function ($19) {
                return g(v.value0($19));
            }, (function () {
                var $20 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(g);
                return function ($21) {
                    return $20(v.value1(f($21)));
                };
            })());
        };
    };
});
var functorMarket = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Market(function ($22) {
            return f(v.value0($22));
        }, (function () {
            var $23 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(f);
            return function ($24) {
                return $23(v.value1($24));
            };
        })());
    };
});
var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
    return profunctorMarket;
}, function (v) {
    return new Market(function ($25) {
        return Data_Either.Left.create(v.value0($25));
    }, Data_Either.either((function () {
        var $26 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Left.create);
        return function ($27) {
            return $26(v.value1($27));
        };
    })())(function ($28) {
        return Data_Either.Left.create(Data_Either.Right.create($28));
    }));
}, function (v) {
    return new Market(function ($29) {
        return Data_Either.Right.create(v.value0($29));
    }, Data_Either.either(function ($30) {
        return Data_Either.Left.create(Data_Either.Left.create($30));
    })((function () {
        var $31 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Right.create);
        return function ($32) {
            return $31(v.value1($32));
        };
    })()));
});
module.exports = {
    Market: Market,
    functorMarket: functorMarket,
    profunctorMarket: profunctorMarket,
    choiceMarket: choiceMarket
};

},{"../Data.Bifunctor/index.js":"4Uonh","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Profunctor/index.js":"3X7aj","../Data.Profunctor.Choice/index.js":"7cDLN"}],"7cDLN":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Choice = function (Profunctor0, left, right) {
    this.Profunctor0 = Profunctor0;
    this.left = left;
    this.right = right;
};
var right = function (dict) {
    return dict.right;
};
var left = function (dict) {
    return dict.left;
};
var splitChoice = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(left(dictChoice)(l))(right(dictChoice)(r));
            };
        };
    };
};
var fanin = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                var join = Data_Profunctor.dimap(dictChoice.Profunctor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(dictCategory));
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
            };
        };
    };
};
var choiceFn = new Choice(function () {
    return Data_Profunctor.profunctorFn;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return Data_Either.Left.create(v(v1.value0));
        };
        if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right(v1.value0);
        };
        throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
    };
}, Data_Functor.map(Data_Either.functorEither));
module.exports = {
    left: left,
    right: right,
    Choice: Choice,
    splitChoice: splitChoice,
    fanin: fanin,
    choiceFn: choiceFn
};

},{"../Control.Category/index.js":"6QTyW","../Control.Semigroupoid/index.js":"5fTaI","../Data.Either/index.js":"5Va79","../Data.Functor/index.js":"5ZkNG","../Data.Profunctor/index.js":"3X7aj"}],"61Idc":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Market = require("../Data.Lens.Internal.Market/index.js");
var Data_Lens_Internal_Tagged = require("../Data.Lens.Internal.Tagged/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var withPrism = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Market.Market(Control_Category.identity(Control_Category.categoryFn), Data_Either.Right.create));
        return f(v.value0)(v.value1);
    };
};
var review = Data_Newtype.under(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.Tagged);
var prism = function (to) {
    return function (fro) {
        return function (dictChoice) {
            return function (pab) {
                return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
            };
        };
    };
};
var prism$prime = function (to) {
    return function (fro) {
        return function (dictChoice) {
            return prism(to)(function (s) {
                return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
            })(dictChoice);
        };
    };
};
var nearly = function (x) {
    return function (f) {
        return function (dictChoice) {
            return prism$prime(Data_Function["const"](x))((function () {
                var $14 = Control_MonadZero.guard(Data_Maybe.monadZeroMaybe);
                return function ($15) {
                    return $14(f($15));
                };
            })())(dictChoice);
        };
    };
};
var only = function (dictEq) {
    return function (x) {
        return function (dictChoice) {
            return nearly(x)(function (v) {
                return Data_Eq.eq(dictEq)(v)(x);
            })(dictChoice);
        };
    };
};
var matching = function (l) {
    return withPrism(l)(function (v) {
        return function (f) {
            return f;
        };
    });
};
var is = function (dictHeytingAlgebra) {
    return function (l) {
        var $16 = Data_Either.either(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)))(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)));
        var $17 = matching(l);
        return function ($18) {
            return $16($17($18));
        };
    };
};
var isn$primet = function (dictHeytingAlgebra) {
    return function (l) {
        var $19 = Data_HeytingAlgebra.not(dictHeytingAlgebra);
        var $20 = is(dictHeytingAlgebra)(l);
        return function ($21) {
            return $19($20($21));
        };
    };
};
var clonePrism = function (l) {
    return function (dictChoice) {
        return withPrism(l)(function (x) {
            return function (y) {
                return function (p) {
                    return prism(x)(y)(dictChoice)(p);
                };
            };
        });
    };
};
module.exports = {
    "prism'": prism$prime,
    prism: prism,
    only: only,
    nearly: nearly,
    review: review,
    is: is,
    "isn't": isn$primet,
    matching: matching,
    clonePrism: clonePrism,
    withPrism: withPrism
};

},{"../Control.Category/index.js":"6QTyW","../Control.MonadZero/index.js":"5ZMCc","../Data.Either/index.js":"5Va79","../Data.Eq/index.js":"2htS8","../Data.Function/index.js":"tHEWI","../Data.HeytingAlgebra/index.js":"3tNLi","../Data.Lens.Internal.Market/index.js":"4ZF9C","../Data.Lens.Internal.Tagged/index.js":"30Dsq","../Data.Maybe/index.js":"1Cwwt","../Data.Newtype/index.js":"2rjOq","../Data.Profunctor/index.js":"3X7aj","../Data.Profunctor.Choice/index.js":"7cDLN"}],"30Dsq":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Closed = require("../Data.Profunctor.Closed/index.js");
var Data_Profunctor_Costrong = require("../Data.Profunctor.Costrong/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Tagged = function (x) {
    return x;
};
var taggedProfunctor = new Data_Profunctor.Profunctor(function (v) {
    return function (g) {
        return function (v1) {
            return g(v1);
        };
    };
});
var taggedCostrong = new Data_Profunctor_Costrong.Costrong(function () {
    return taggedProfunctor;
}, function (v) {
    return v.value0;
}, function (v) {
    return v.value1;
});
var taggedClosed = new Data_Profunctor_Closed.Closed(function () {
    return taggedProfunctor;
}, function (v) {
    return Data_Function["const"](v);
});
var taggedChoice = new Data_Profunctor_Choice.Choice(function () {
    return taggedProfunctor;
}, function (v) {
    return new Data_Either.Left(v);
}, function (v) {
    return new Data_Either.Right(v);
});
var newtypeTagged = new Data_Newtype.Newtype(function (n) {
    return n;
}, Tagged);
var functorTagged = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var foldableTagged = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(b)(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v)(b);
        };
    };
});
var traversableTagged = new Data_Traversable.Traversable(function () {
    return foldableTagged;
}, function () {
    return functorTagged;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(f(v));
        };
    };
});
var eqTagged = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)(x)(y);
        };
    });
};
var ordTagged = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTagged(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(dictOrd)(x)(y);
        };
    });
};
var eq1Tagged = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTagged(dictEq));
});
var ord1Tagged = new Data_Ord.Ord1(function () {
    return eq1Tagged;
}, function (dictOrd) {
    return Data_Ord.compare(ordTagged(dictOrd));
});
module.exports = {
    Tagged: Tagged,
    newtypeTagged: newtypeTagged,
    eqTagged: eqTagged,
    eq1Tagged: eq1Tagged,
    ordTagged: ordTagged,
    ord1Tagged: ord1Tagged,
    functorTagged: functorTagged,
    taggedProfunctor: taggedProfunctor,
    taggedChoice: taggedChoice,
    taggedCostrong: taggedCostrong,
    taggedClosed: taggedClosed,
    foldableTagged: foldableTagged,
    traversableTagged: traversableTagged
};

},{"../Data.Either/index.js":"5Va79","../Data.Eq/index.js":"2htS8","../Data.Foldable/index.js":"6ATDN","../Data.Function/index.js":"tHEWI","../Data.Functor/index.js":"5ZkNG","../Data.Newtype/index.js":"2rjOq","../Data.Ord/index.js":"4OchK","../Data.Profunctor/index.js":"3X7aj","../Data.Profunctor.Choice/index.js":"7cDLN","../Data.Profunctor.Closed/index.js":"1ZCWJ","../Data.Profunctor.Costrong/index.js":"IJqJn","../Data.Traversable/index.js":"2NLLF"}],"1ZCWJ":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Closed = function (Profunctor0, closed) {
    this.Profunctor0 = Profunctor0;
    this.closed = closed;
};
var closedFunction = new Closed(function () {
    return Data_Profunctor.profunctorFn;
}, Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var closed = function (dict) {
    return dict.closed;
};
module.exports = {
    closed: closed,
    Closed: Closed,
    closedFunction: closedFunction
};

},{"../Control.Semigroupoid/index.js":"5fTaI","../Data.Profunctor/index.js":"3X7aj"}],"IJqJn":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";
var Costrong = function (Profunctor0, unfirst, unsecond) {
    this.Profunctor0 = Profunctor0;
    this.unfirst = unfirst;
    this.unsecond = unsecond;
};
var unsecond = function (dict) {
    return dict.unsecond;
};
var unfirst = function (dict) {
    return dict.unfirst;
};
module.exports = {
    unfirst: unfirst,
    unsecond: unsecond,
    Costrong: Costrong
};

},{}]},["1ArEm","5RfbR"], "5RfbR", "parcelRequire52d2")

//# sourceMappingURL=index.f0bcd1cf.js.map
